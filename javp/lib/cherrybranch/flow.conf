#
# This Broker configuration file is for the Generic Data Stream.
# 
# The Broker is designed to connect to a TCP host/port and will read data as specified.
#


#
# Data structure will become a hash map of the given names and data types
# as shown below.  Types come from the simple java types of string, int, or double.
# Data columns are separated by whitespace or a comma.
#
#column_names    col_1, col_2, col_3
#column_types    string, int, double
#column_units    meters, meters, meters

column_names    flowrate, totalflow
column_types    double, double
column_units    liters per minute, liters

#
# The best way to check if the socket to the data is still connected is to attempt
# to write to it, and receive an error if unable to.  If ok_to_write is set to true,
# the socket will have a CR written to it on a regular basis.  Otherwise, socket
# disconnects will take longer to notice if at all.  If data is not received in socket_timeout
# minutes the socket should be re-connected.  This doesn't always work.
#
ok_to_write true
socket_timeout  1

#
# Internal mean and std can be taken on the numeric variables.  These variables will
# be get-able, subscribe-able, and/or logged to the database using their names with 
# _mean<num_obs> or _std<num_obs> appended.  Specify the name of the variable, 
# the number of observations over which to take the mean/std, and number of standard
# deviations to use for outlier removal (0=no outlier removal)  Outlier removal is only
# used in calculating the mean and std values.
#
# mean_vars   theanswer, pi, pi
# num_obs     30, 30, 100
# outlier_std 3, 3, 3

mean_vars   flowrate, flowrate
num_obs     3, 30
outlier_std 3, 3

#
# The following database section applies if the database is enabled for this broker.
# Although this key comes from db.conf, the value here overrides the value there and 
# can be used to selectively turn off or on database logging.
#
db_enabled false

#
# Specify the database table, data to log, and database column names into which 
# the data should be inserted.  The full name of the table into which data should
# be inserted will be constructed as db_table_prefix + "_" + db_table_postfix. 
# The prefix comes from db.conf.  The database table must exist and include the
# columns loc_code and sample_time as primary key.
#

#db_table_postfix    generic_data
#
#db_data_to_insert   col_1, col_2, col_3
#db_table_columns    col_1, col_2, col_3

db_table_postfix    generic_data

db_data_to_insert   greeting, theanswer, pi, pi_mean30, pi_mean100
db_table_columns    greeting, theanswer, pi, pi_mean30, pi_mean100

#
# database write interval in seconds, 0 means each observation
#
db_write_interval   10

#
# Log level 
#
log_level DEBUG

#
# suspended
# Broker can be started in suspended state, which means it will not attempt to
# connect to instrument.
#
suspended false

#
# Log file.  If you prefer to log to a file, uncomment this line.  Otherwise,
# logging messages go to stderr.
#
#log_file generic_data_stream_log

#
# Hostname for the instrument
#
#GenericDataStreamAdapter_host    localhost
GenericDataStreamAdapter_host    192.168.1.130

#
# Port number for the instrument
#
#GenericDataStreamAdapter_port    55239
GenericDataStreamAdapter_port    4002

#
# Broker control port.  A single controller may connect and issue control
# commands to the broker.
#
GenericDataStreamAdapter_ctrl_port 8889

#
# Aio information to access power, if relevant
# If no power control, leave AioAdapter_host commented out
#
#AioAdapter_host         localhost
#AioAdapter_ctrl_port    8880
#Aio_power_port          a
#Aio_power_pin           5

#
# Specify the adapter class and the instrument class
#
adapter_class   edu.unc.ims.avp.adapters.GenericDataStreamAdapter
instrument_class	edu.unc.ims.instruments.generic.GenericDataStream
