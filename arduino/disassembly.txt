
C:\Users\Whipple\AppData\Local\Temp\build2179649071929727312.tmp\winch.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
       0:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__ctors_end>
       4:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
       8:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
       c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      10:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      14:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      18:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      1c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      20:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      24:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      28:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      2c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      30:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_12>
      34:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      38:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      3c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      40:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      44:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      48:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      4c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      50:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      54:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      58:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      5c:	0c 94 d1 49 	jmp	0x93a2	; 0x93a2 <__vector_23>
      60:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      64:	0c 94 2b 4d 	jmp	0x9a56	; 0x9a56 <__vector_25>
      68:	0c 94 61 4d 	jmp	0x9ac2	; 0x9ac2 <__vector_26>
      6c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      70:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      74:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      78:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      7c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      80:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      84:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      88:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      8c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      90:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      94:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      98:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      9c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      a0:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      a4:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      a8:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      ac:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      b0:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      b4:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      b8:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      bc:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      c0:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      c4:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      c8:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      cc:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      d0:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      d4:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      d8:	0c 94 d6 4d 	jmp	0x9bac	; 0x9bac <__vector_54>
      dc:	0c 94 0c 4e 	jmp	0x9c18	; 0x9c18 <__vector_55>
      e0:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__bad_interrupt>
      e4:	ea 4a       	sbci	r30, 0xAA	; 170
      e6:	ed 4a       	sbci	r30, 0xAD	; 173
      e8:	dc 4a       	sbci	r29, 0xAC	; 172
      ea:	e0 4a       	sbci	r30, 0xA0	; 160
      ec:	e6 4a       	sbci	r30, 0xA6	; 166
      ee:	24 4b       	sbci	r18, 0xB4	; 180
      f0:	f1 4a       	sbci	r31, 0xA1	; 161
      f2:	f5 4a       	sbci	r31, 0xA5	; 165
      f4:	fb 4a       	sbci	r31, 0xAB	; 171
      f6:	ff 4a       	sbci	r31, 0xAF	; 175
      f8:	03 4b       	sbci	r16, 0xB3	; 179
      fa:	09 4b       	sbci	r16, 0xB9	; 185
      fc:	0d 4b       	sbci	r16, 0xBD	; 189
      fe:	11 4b       	sbci	r17, 0xB1	; 177
     100:	24 4b       	sbci	r18, 0xB4	; 180
     102:	17 4b       	sbci	r17, 0xB7	; 183
     104:	1b 4b       	sbci	r17, 0xBB	; 187
     106:	1f 4b       	sbci	r17, 0xBF	; 191

00000108 <__trampolines_end>:
     108:	2c 20       	and	r2, r12
     10a:	64 61       	ori	r22, 0x14	; 20
     10c:	74 61       	ori	r23, 0x14	; 20
     10e:	3d 30       	cpi	r19, 0x0D	; 13
     110:	78 00       	.word	0x0078	; ????

00000112 <_ZZNK19CApplicationMonitor4DumpER5PrintbE3__c_4>:
     112:	3a 20 62 79 74 65 2d 61 64 64 72 65 73 73 3d 30     : byte-address=0
     122:	78 00                                               x.

00000124 <_ZZNK19CApplicationMonitor4DumpER5PrintbE3__c_3>:
     124:	3a 20 77 6f 72 64 2d 61 64 64 72 65 73 73 3d 30     : word-address=0
     134:	78 00                                               x.

00000136 <_ZZNK19CApplicationMonitor4DumpER5PrintbE3__c_2>:
     136:	4e 65 78 74 20 72 65 70 6f 72 74 3a 20 00           Next report: .

00000144 <_ZZNK19CApplicationMonitor4DumpER5PrintbE3__c_1>:
     144:	53 61 76 65 64 20 72 65 70 6f 72 74 73 3a 20 00     Saved reports: .

00000154 <_ZZNK19CApplicationMonitor4DumpER5PrintbE3__c_0>:
     154:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     164:	2d 2d 2d 00                                         ---.

00000168 <_ZZNK19CApplicationMonitor4DumpER5PrintbE3__c>:
     168:	41 70 70 6c 69 63 61 74 69 6f 6e 20 4d 6f 6e 69     Application Moni
     178:	74 6f 72 00                                         tor.

0000017c <_ZZN17cmdProcessorClass11readCommandEvE3__c_145>:
     17c:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

0000018a <_ZZN17cmdProcessorClass11readCommandEvE3__c_144>:
	...

0000018b <_ZZN17cmdProcessorClass11readCommandEvE3__c_143>:
     18b:	20 20 20 20 75 70 74 69 6d 65 00                        uptime.

00000196 <_ZZN17cmdProcessorClass11readCommandEvE3__c_142>:
     196:	20 20 20 20 76 65 72 00                                 ver.

0000019e <_ZZN17cmdProcessorClass11readCommandEvE3__c_141>:
     19e:	20 20 20 20 63 6c 65 61 72 72 65 70 6f 72 74 73         clearreports
	...

000001af <_ZZN17cmdProcessorClass11readCommandEvE3__c_140>:
     1af:	20 20 20 20 72 65 73 65 74 5f 6d 6f 74 6f 72 5f         reset_motor_
     1bf:	74 69 6d 65 00                                      time.

000001c4 <_ZZN17cmdProcessorClass11readCommandEvE3__c_139>:
     1c4:	20 20 20 20 6d 6f 74 6f 72 5f 74 69 6d 65 00            motor_time.

000001d3 <_ZZN17cmdProcessorClass11readCommandEvE3__c_138>:
     1d3:	20 20 20 20 72 65 62 6f 6f 74 00                        reboot.

000001de <_ZZN17cmdProcessorClass11readCommandEvE3__c_137>:
     1de:	20 20 20 20 73 61 76 65 5f 73 74 61 74 65 00            save_state.

000001ed <_ZZN17cmdProcessorClass11readCommandEvE3__c_136>:
     1ed:	20 20 20 20 66 62 5f 70 65 72 69 6f 64 00               fb_period.

000001fb <_ZZN17cmdProcessorClass11readCommandEvE3__c_135>:
     1fb:	0a 20 20 53 79 73 74 65 6d 20 43 6f 6d 6d 61 6e     .  System Comman
     20b:	64 73 3a 00                                         ds:.

0000020f <_ZZN17cmdProcessorClass11readCommandEvE3__c_134>:
     20f:	20 20 20 20 73 74 6f 72 65 5f 74 75 6e 69 6e 67         store_tuning
	...

00000220 <_ZZN17cmdProcessorClass11readCommandEvE3__c_133>:
     220:	20 20 20 20 76 66 66 20 78 00                           vff x.

0000022a <_ZZN17cmdProcessorClass11readCommandEvE3__c_132>:
     22a:	20 20 20 20 70 69 64 73 63 61 6c 61 72 20 78 00         pidscalar x.

0000023a <_ZZN17cmdProcessorClass11readCommandEvE3__c_131>:
     23a:	20 20 20 20 64 74 65 72 6d 20 78 00                     dterm x.

00000246 <_ZZN17cmdProcessorClass11readCommandEvE3__c_130>:
     246:	20 20 20 20 69 74 65 72 6d 20 78 00                     iterm x.

00000252 <_ZZN17cmdProcessorClass11readCommandEvE3__c_129>:
     252:	20 20 20 20 70 74 65 72 6d 20 78 00                     pterm x.

0000025e <_ZZN17cmdProcessorClass11readCommandEvE3__c_128>:
     25e:	0a 20 20 50 49 44 20 54 75 6e 69 6e 67 20 43 6f     .  PID Tuning Co
     26e:	6d 6d 61 6e 64 73 3a 00                             mmands:.

00000276 <_ZZN17cmdProcessorClass11readCommandEvE3__c_127>:
     276:	20 20 20 20 6d 61 78 5f 72 65 76 6f 6c 75 74 69         max_revoluti
     286:	6f 6e 73 20 78 00                                   ons x.

0000028c <_ZZN17cmdProcessorClass11readCommandEvE3__c_126>:
     28c:	20 20 20 20 6d 6f 74 6f 72 5f 72 70 6d 20 78 00         motor_rpm x.

0000029c <_ZZN17cmdProcessorClass11readCommandEvE3__c_125>:
     29c:	20 20 20 20 6d 6f 74 6f 72 5f 63 70 72 20 78 00         motor_cpr x.

000002ac <_ZZN17cmdProcessorClass11readCommandEvE3__c_124>:
     2ac:	20 20 20 20 61 6d 70 73 5f 6c 69 6d 69 74 20 78         amps_limit x
	...

000002bd <_ZZN17cmdProcessorClass11readCommandEvE3__c_123>:
     2bd:	20 20 20 20 73 65 74 5f 7a 65 72 6f 00                  set_zero.

000002ca <_ZZN17cmdProcessorClass11readCommandEvE3__c_122>:
     2ca:	20 20 20 20 6d 6f 76 65 5f 74 6f 5f 70 6f 73 69         move_to_posi
     2da:	74 69 6f 6e 20 78 20 61 74 20 78 00                 tion x at x.

000002e6 <_ZZN17cmdProcessorClass11readCommandEvE3__c_121>:
     2e6:	20 20 20 20 6d 6f 76 65 5f 74 6f 5f 72 65 76 6f         move_to_revo
     2f6:	6c 75 74 69 6f 6e 20 78 20 61 74 20 78 00           lution x at x.

00000304 <_ZZN17cmdProcessorClass11readCommandEvE3__c_120>:
     304:	20 20 20 20 64 6f 77 6e 5f 64 69 73 74 61 6e 63         down_distanc
     314:	65 20 78 20 61 74 20 78 00                          e x at x.

0000031d <_ZZN17cmdProcessorClass11readCommandEvE3__c_119>:
     31d:	20 20 20 20 75 70 5f 64 69 73 74 61 6e 63 65 20         up_distance 
     32d:	78 20 61 74 20 78 00                                x at x.

00000334 <_ZZN17cmdProcessorClass11readCommandEvE3__c_118>:
     334:	20 20 20 20 64 6f 77 6e 5f 72 65 76 6f 6c 75 74         down_revolut
     344:	69 6f 6e 73 20 78 20 61 74 20 78 00                 ions x at x.

00000350 <_ZZN17cmdProcessorClass11readCommandEvE3__c_117>:
     350:	20 20 20 20 75 70 5f 72 65 76 6f 6c 75 74 69 6f         up_revolutio
     360:	6e 73 20 78 20 61 74 20 78 00                       ns x at x.

0000036a <_ZZN17cmdProcessorClass11readCommandEvE3__c_116>:
     36a:	20 20 20 20 73 74 6f 70 00                              stop.

00000373 <_ZZN17cmdProcessorClass11readCommandEvE3__c_115>:
     373:	0a 20 20 4d 6f 74 6f 72 20 43 6f 6d 6d 61 6e 64     .  Motor Command
     383:	73 3a 00                                            s:.

00000386 <_ZZN17cmdProcessorClass11readCommandEvE3__c_114>:
     386:	20 20 20 20 70 6f 72 74 5f 62 61 73 65 20 78 00         port_base x.

00000396 <_ZZN17cmdProcessorClass11readCommandEvE3__c_113>:
     396:	20 20 20 20 73 75 62 6e 65 74 20 78 78 78 2c 78         subnet xxx,x
     3a6:	78 78 2c 78 78 78 2c 78 78 78 00                    xx,xxx,xxx.

000003b1 <_ZZN17cmdProcessorClass11readCommandEvE3__c_112>:
     3b1:	20 20 20 20 67 61 74 65 77 61 79 20 78 78 78 2c         gateway xxx,
     3c1:	78 78 78 2c 78 78 78 2c 78 78 78 00                 xxx,xxx,xxx.

000003cd <_ZZN17cmdProcessorClass11readCommandEvE3__c_111>:
     3cd:	20 20 20 20 64 6e 73 20 78 78 78 2c 78 78 78 2c         dns xxx,xxx,
     3dd:	78 78 78 2c 78 78 78 00                             xxx,xxx.

000003e5 <_ZZN17cmdProcessorClass11readCommandEvE3__c_110>:
     3e5:	20 20 20 20 69 70 5f 61 64 64 72 65 73 73 20 78         ip_address x
     3f5:	78 78 2c 78 78 78 2c 78 78 78 2c 78 78 78 00        xx,xxx,xxx,xxx.

00000404 <_ZZN17cmdProcessorClass11readCommandEvE3__c_109>:
     404:	0a 20 20 4e 65 74 77 6f 72 6b 20 43 6f 6d 6d 61     .  Network Comma
     414:	6e 64 73 3a 00                                      nds:.

00000419 <_ZZN17cmdProcessorClass11readCommandEvE3__c_108>:
     419:	0a 43 6f 6d 6d 61 6e 64 73 20 41 76 61 69 6c 61     .Commands Availa
     429:	62 6c 65 3a 0a 00                                   ble:..

0000042f <_ZZN17cmdProcessorClass11readCommandEvE3__c_107>:
     42f:	20 70 65 72 63 65 6e 74 20 66 6f 72 20 66 65 65      percent for fee
     43f:	64 62 61 63 6b 20 62 61 73 65 64 20 6d 6f 76 65     dback based move
     44f:	73 2e 00                                            s..

00000452 <_ZZN17cmdProcessorClass11readCommandEvE3__c_106>:
     452:	4d 61 78 20 53 70 65 65 64 20 73 65 74 20 74 6f     Max Speed set to
     462:	20 00                                                .

00000464 <_ZZN17cmdProcessorClass11readCommandEvE3__c_105>:
     464:	20 73 65 63 6f 6e 64 73 2e 00                        seconds..

0000046e <_ZZN17cmdProcessorClass11readCommandEvE3__c_104>:
     46e:	46 65 65 64 62 61 63 6b 20 70 65 72 69 6f 64 20     Feedback period 
     47e:	73 65 74 20 74 6f 20 00                             set to .

00000486 <_ZZN17cmdProcessorClass11readCommandEvE3__c_103>:
     486:	20 20 4d 75 73 74 20 62 65 20 61 20 6e 75 6d 62       Must be a numb
     496:	65 72 20 67 72 65 61 74 65 72 20 74 68 61 6e 20     er greater than 
     4a6:	7a 65 72 6f 2e 00                                   zero..

000004ac <_ZZN17cmdProcessorClass11readCommandEvE3__c_102>:
     4ac:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

000004ba <_ZZN17cmdProcessorClass11readCommandEvE3__c_101>:
     4ba:	4d 6f 74 6f 72 20 52 50 4d 20 73 65 74 20 74 6f     Motor RPM set to
     4ca:	20 00                                                .

000004cc <_ZZN17cmdProcessorClass11readCommandEvE3__c_100>:
     4cc:	20 20 4d 75 73 74 20 62 65 20 61 20 6e 75 6d 62       Must be a numb
     4dc:	65 72 20 67 72 65 61 74 65 72 20 74 68 61 6e 20     er greater than 
     4ec:	7a 65 72 6f 2e 00                                   zero..

000004f2 <_ZZN17cmdProcessorClass11readCommandEvE3__c_99>:
     4f2:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000500 <_ZZN17cmdProcessorClass11readCommandEvE3__c_98>:
     500:	4d 6f 74 6f 72 20 63 6f 75 6e 74 73 20 70 65 72     Motor counts per
     510:	20 72 65 76 6f 6c 75 74 69 6f 6e 20 73 65 74 20      revolution set 
     520:	74 6f 3a 20 00                                      to: .

00000525 <_ZZN17cmdProcessorClass11readCommandEvE3__c_97>:
     525:	20 20 4d 75 73 74 20 62 65 20 61 20 70 6f 73 69       Must be a posi
     535:	74 69 76 65 20 69 6e 74 65 67 65 72 2e 00           tive integer..

00000543 <_ZZN17cmdProcessorClass11readCommandEvE3__c_96>:
     543:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000551 <_ZZN17cmdProcessorClass11readCommandEvE3__c_95>:
     551:	41 70 70 6c 69 63 61 74 69 6f 6e 20 4d 6f 6e 69     Application Moni
     561:	74 6f 72 20 52 65 70 6f 72 74 73 20 43 6c 65 61     tor Reports Clea
     571:	72 65 64 2e 00                                      red..

00000576 <_ZZN17cmdProcessorClass11readCommandEvE3__c_94>:
     576:	52 65 73 65 74 74 69 6e 67 20 74 6f 74 61 6c 20     Resetting total 
     586:	61 63 63 75 6d 75 6c 61 74 65 64 20 6d 6f 74 6f     accumulated moto
     596:	72 20 72 75 6e 20 74 69 6d 65 20 74 6f 20 7a 65     r run time to ze
     5a6:	72 6f 2e 00                                         ro..

000005aa <_ZZN17cmdProcessorClass11readCommandEvE3__c_93>:
     5aa:	4d 6f 74 6f 72 20 74 69 6d 65 20 73 65 74 20 74     Motor time set t
     5ba:	6f 3a 20 00                                         o: .

000005be <_ZZN17cmdProcessorClass11readCommandEvE3__c_92>:
     5be:	20 20 4d 75 73 74 20 62 65 20 61 20 70 6f 73 69       Must be a posi
     5ce:	74 69 76 65 20 6e 75 6d 62 65 72 2e 00              tive number..

000005db <_ZZN17cmdProcessorClass11readCommandEvE3__c_91>:
     5db:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

000005e9 <_ZZN17cmdProcessorClass11readCommandEvE3__c_90>:
     5e9:	20 44 61 79 73 00                                    Days.

000005ef <_ZZN17cmdProcessorClass11readCommandEvE3__c_89>:
     5ef:	53 79 73 74 65 6d 20 72 65 73 74 61 72 74 69 6e     System restartin
     5ff:	67 2e 00                                            g..

00000602 <_ZZN17cmdProcessorClass11readCommandEvE3__c_88>:
     602:	53 61 76 69 6e 67 20 73 79 73 74 65 6d 20 73 74     Saving system st
     612:	61 74 65 2e 00                                      ate..

00000617 <_ZZN17cmdProcessorClass11readCommandEvE3__c_87>:
     617:	2e 20 20 52 65 71 75 69 72 65 73 20 72 65 73 74     .  Requires rest
     627:	61 72 74 20 74 6f 20 74 61 6b 65 20 65 66 66 65     art to take effe
     637:	63 74 2e 00                                         ct..

0000063b <_ZZN17cmdProcessorClass11readCommandEvE3__c_86>:
     63b:	50 6f 72 74 20 62 61 73 65 20 73 65 74 20 74 6f     Port base set to
     64b:	3a 20 00                                            : .

0000064e <_ZZN17cmdProcessorClass11readCommandEvE3__c_85>:
     64e:	20 20 4d 75 73 74 20 62 65 20 61 6e 20 69 6e 74       Must be an int
     65e:	65 67 65 72 20 66 72 6f 6d 20 30 20 74 68 72 6f     eger from 0 thro
     66e:	75 67 68 20 36 35 35 33 33 2e 00                    ugh 65533..

00000679 <_ZZN17cmdProcessorClass11readCommandEvE3__c_84>:
     679:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000687 <_ZZN17cmdProcessorClass11readCommandEvE3__c_83>:
     687:	50 49 44 20 74 75 6e 69 6e 67 20 70 61 72 61 6d     PID tuning param
     697:	65 74 65 72 73 20 73 74 6f 72 65 64 20 74 6f 20     eters stored to 
     6a7:	45 45 50 52 4f 4d 2e 00                             EEPROM..

000006af <_ZZN17cmdProcessorClass11readCommandEvE3__c_82>:
     6af:	56 65 6c 6f 63 69 74 79 20 66 65 65 64 20 66 6f     Velocity feed fo
     6bf:	72 77 61 72 64 20 73 65 74 20 74 6f 3a 20 00        rward set to: .

000006ce <_ZZN17cmdProcessorClass11readCommandEvE3__c_81>:
     6ce:	20 20 4d 75 73 74 20 62 65 20 61 6e 20 69 6e 74       Must be an int
     6de:	65 67 65 72 20 66 72 6f 6d 20 30 20 74 68 72 6f     eger from 0 thro
     6ee:	75 67 68 20 32 35 35 2e 00                          ugh 255..

000006f7 <_ZZN17cmdProcessorClass11readCommandEvE3__c_80>:
     6f7:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000705 <_ZZN17cmdProcessorClass11readCommandEvE3__c_79>:
     705:	50 49 44 53 43 41 4c 41 52 20 73 65 74 20 74 6f     PIDSCALAR set to
     715:	3a 20 00                                            : .

00000718 <_ZZN17cmdProcessorClass11readCommandEvE3__c_78>:
     718:	20 20 4d 75 73 74 20 62 65 20 61 6e 20 69 6e 74       Must be an int
     728:	65 67 65 72 20 66 72 6f 6d 20 30 20 74 68 72 6f     eger from 0 thro
     738:	75 67 68 20 33 32 2e 00                             ugh 32..

00000740 <_ZZN17cmdProcessorClass11readCommandEvE3__c_77>:
     740:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

0000074e <_ZZN17cmdProcessorClass11readCommandEvE3__c_76>:
     74e:	44 20 74 65 72 6d 20 73 65 74 20 74 6f 3a 20 00     D term set to: .

0000075e <_ZZN17cmdProcessorClass11readCommandEvE3__c_75>:
     75e:	20 20 4d 75 73 74 20 62 65 20 61 6e 20 69 6e 74       Must be an int
     76e:	65 67 65 72 20 66 72 6f 6d 20 30 20 74 68 72 6f     eger from 0 thro
     77e:	75 67 68 20 36 35 35 33 35 2e 00                    ugh 65535..

00000789 <_ZZN17cmdProcessorClass11readCommandEvE3__c_74>:
     789:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000797 <_ZZN17cmdProcessorClass11readCommandEvE3__c_73>:
     797:	49 20 74 65 72 6d 20 73 65 74 20 74 6f 3a 20 00     I term set to: .

000007a7 <_ZZN17cmdProcessorClass11readCommandEvE3__c_72>:
     7a7:	20 20 4d 75 73 74 20 62 65 20 61 6e 20 69 6e 74       Must be an int
     7b7:	65 67 65 72 20 66 72 6f 6d 20 30 20 74 68 72 6f     eger from 0 thro
     7c7:	75 67 68 20 36 35 35 33 35 2e 00                    ugh 65535..

000007d2 <_ZZN17cmdProcessorClass11readCommandEvE3__c_71>:
     7d2:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

000007e0 <_ZZN17cmdProcessorClass11readCommandEvE3__c_70>:
     7e0:	50 20 74 65 72 6d 20 73 65 74 20 74 6f 3a 20 00     P term set to: .

000007f0 <_ZZN17cmdProcessorClass11readCommandEvE3__c_69>:
     7f0:	20 20 4d 75 73 74 20 62 65 20 61 6e 20 69 6e 74       Must be an int
     800:	65 67 65 72 20 66 72 6f 6d 20 30 20 74 68 72 6f     eger from 0 thro
     810:	75 67 68 20 36 35 35 33 35 2e 00                    ugh 65535..

0000081b <_ZZN17cmdProcessorClass11readCommandEvE3__c_68>:
     81b:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000829 <_ZZN17cmdProcessorClass11readCommandEvE3__c_67>:
     829:	20 72 65 76 6f 6c 75 74 69 6f 6e 73 2e 00            revolutions..

00000837 <_ZZN17cmdProcessorClass11readCommandEvE3__c_66>:
     837:	4d 61 78 20 72 65 76 6f 6c 75 74 69 6f 6e 73 20     Max revolutions 
     847:	73 65 74 20 74 6f 20 00                             set to .

0000084f <_ZZN17cmdProcessorClass11readCommandEvE3__c_65>:
     84f:	20 20 4d 75 73 74 20 62 65 20 61 20 6e 75 6d 62       Must be a numb
     85f:	65 72 20 67 72 65 61 74 65 72 20 74 68 61 6e 20     er greater than 
     86f:	7a 65 72 6f 2e 00                                   zero..

00000875 <_ZZN17cmdProcessorClass11readCommandEvE3__c_64>:
     875:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000883 <_ZZN17cmdProcessorClass11readCommandEvE3__c_63>:
     883:	20 61 6d 70 73 2e 00                                 amps..

0000088a <_ZZN17cmdProcessorClass11readCommandEvE3__c_62>:
     88a:	4d 6f 74 6f 72 20 63 75 72 72 65 6e 74 20 6c 69     Motor current li
     89a:	6d 69 74 20 73 65 74 20 74 6f 20 00                 mit set to .

000008a6 <_ZZN17cmdProcessorClass11readCommandEvE3__c_61>:
     8a6:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

000008b4 <_ZZN17cmdProcessorClass11readCommandEvE3__c_60>:
     8b4:	43 75 72 72 65 6e 74 20 70 6f 73 69 74 6f 6e 20     Current positon 
     8c4:	73 65 74 20 74 6f 20 7a 65 72 6f 2e 00              set to zero..

000008d1 <_ZZN17cmdProcessorClass11readCommandEvE3__c_59>:
     8d1:	20 4e 6f 20 72 65 63 65 6e 74 20 70 6f 73 69 74      No recent posit
     8e1:	69 6f 6e 20 66 65 65 64 62 61 63 6b 2e 00           ion feedback..

000008ef <_ZZN17cmdProcessorClass11readCommandEvE3__c_58>:
     8ef:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

000008fd <_ZZN17cmdProcessorClass11readCommandEvE3__c_57>:
     8fd:	20 70 65 72 63 65 6e 74 20 6f 66 20 66 75 6c 6c      percent of full
     90d:	20 73 70 65 65 64 2e 00                              speed..

00000915 <_ZZN17cmdProcessorClass11readCommandEvE3__c_56>:
     915:	20 62 61 73 65 64 20 6f 6e 20 70 6f 73 69 74 69      based on positi
     925:	6f 6e 20 66 65 65 64 62 61 63 6b 20 61 74 20 00     on feedback at .

00000935 <_ZZN17cmdProcessorClass11readCommandEvE3__c_55>:
     935:	4d 6f 76 69 6e 67 20 74 6f 20 00                    Moving to .

00000940 <_ZZN17cmdProcessorClass11readCommandEvE3__c_54>:
     940:	43 61 6e 6e 6f 74 20 72 61 69 73 65 20 64 75 65     Cannot raise due
     950:	20 74 6f 20 4e 4f 5f 52 41 49 53 45 20 6f 72 20      to NO_RAISE or 
     960:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

0000096e <_ZZN17cmdProcessorClass11readCommandEvE3__c_53>:
     96e:	43 61 6e 6e 6f 74 20 6c 6f 77 65 72 20 64 75 65     Cannot lower due
     97e:	20 74 6f 20 4e 4f 5f 4c 4f 57 45 52 20 6f 72 20      to NO_LOWER or 
     98e:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

0000099c <_ZZN17cmdProcessorClass11readCommandEvE3__c_52>:
     99c:	20 70 65 72 63 65 6e 74 2e 00                        percent..

000009a6 <_ZZN17cmdProcessorClass11readCommandEvE3__c_51>:
     9a6:	20 20 53 70 65 65 64 20 6d 75 73 74 20 62 65 20       Speed must be 
     9b6:	66 72 6f 6d 20 32 20 74 68 72 6f 75 67 68 20 00     from 2 through .

000009c6 <_ZZN17cmdProcessorClass11readCommandEvE3__c_50>:
     9c6:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

000009d4 <_ZZN17cmdProcessorClass11readCommandEvE3__c_49>:
     9d4:	20 70 65 72 63 65 6e 74 20 6f 66 20 66 75 6c 6c      percent of full
     9e4:	20 73 70 65 65 64 2e 00                              speed..

000009ec <_ZZN17cmdProcessorClass11readCommandEvE3__c_48>:
     9ec:	20 72 65 76 6f 6c 75 74 69 6f 6e 73 20 61 74 20      revolutions at 
	...

000009fd <_ZZN17cmdProcessorClass11readCommandEvE3__c_47>:
     9fd:	4d 6f 76 69 6e 67 20 74 6f 20 00                    Moving to .

00000a08 <_ZZN17cmdProcessorClass11readCommandEvE3__c_46>:
     a08:	43 61 6e 6e 6f 74 20 72 61 69 73 65 20 64 75 65     Cannot raise due
     a18:	20 74 6f 20 4e 4f 5f 52 41 49 53 45 20 6f 72 20      to NO_RAISE or 
     a28:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

00000a36 <_ZZN17cmdProcessorClass11readCommandEvE3__c_45>:
     a36:	43 61 6e 6e 6f 74 20 6c 6f 77 65 72 20 64 75 65     Cannot lower due
     a46:	20 74 6f 20 4e 4f 5f 4c 4f 57 45 52 20 6f 72 20      to NO_LOWER or 
     a56:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

00000a64 <_ZZN17cmdProcessorClass11readCommandEvE3__c_44>:
     a64:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000a72 <_ZZN17cmdProcessorClass11readCommandEvE3__c_43>:
     a72:	20 4e 6f 20 72 65 63 65 6e 74 20 70 6f 73 69 74      No recent posit
     a82:	69 6f 6e 20 66 65 65 64 62 61 63 6b 2e 00           ion feedback..

00000a90 <_ZZN17cmdProcessorClass11readCommandEvE3__c_42>:
     a90:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000a9e <_ZZN17cmdProcessorClass11readCommandEvE3__c_41>:
     a9e:	20 70 65 72 63 65 6e 74 20 6f 66 20 66 75 6c 6c      percent of full
     aae:	20 73 70 65 65 64 2e 00                              speed..

00000ab6 <_ZZN17cmdProcessorClass11readCommandEvE3__c_40>:
     ab6:	20 62 61 73 65 64 20 6f 6e 20 70 6f 73 69 74 69      based on positi
     ac6:	6f 6e 20 66 65 65 64 62 61 63 6b 20 61 74 20 00     on feedback at .

00000ad6 <_ZZN17cmdProcessorClass11readCommandEvE3__c_39>:
     ad6:	4d 6f 76 69 6e 67 20 64 6f 77 6e 20 00              Moving down .

00000ae3 <_ZZN17cmdProcessorClass11readCommandEvE3__c_38>:
     ae3:	43 61 6e 6e 6f 74 20 6c 6f 77 65 72 20 64 75 65     Cannot lower due
     af3:	20 74 6f 20 4e 4f 5f 4c 4f 57 45 52 20 6f 72 20      to NO_LOWER or 
     b03:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

00000b11 <_ZZN17cmdProcessorClass11readCommandEvE3__c_37>:
     b11:	20 70 65 72 63 65 6e 74 2e 00                        percent..

00000b1b <_ZZN17cmdProcessorClass11readCommandEvE3__c_36>:
     b1b:	20 20 44 69 73 74 61 6e 63 65 20 6d 75 73 74 20       Distance must 
     b2b:	62 65 20 70 6f 73 69 74 69 76 65 20 61 6e 64 20     be positive and 
     b3b:	73 70 65 65 64 20 6d 75 73 74 20 62 65 20 66 72     speed must be fr
     b4b:	6f 6d 20 32 20 74 68 72 6f 75 67 68 20 00           om 2 through .

00000b59 <_ZZN17cmdProcessorClass11readCommandEvE3__c_35>:
     b59:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000b67 <_ZZN17cmdProcessorClass11readCommandEvE3__c_34>:
     b67:	20 4e 6f 20 72 65 63 65 6e 74 20 70 6f 73 69 74      No recent posit
     b77:	69 6f 6e 20 66 65 65 64 62 61 63 6b 2e 00           ion feedback..

00000b85 <_ZZN17cmdProcessorClass11readCommandEvE3__c_33>:
     b85:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000b93 <_ZZN17cmdProcessorClass11readCommandEvE3__c_32>:
     b93:	20 70 65 72 63 65 6e 74 20 6f 66 20 66 75 6c 6c      percent of full
     ba3:	20 73 70 65 65 64 2e 00                              speed..

00000bab <_ZZN17cmdProcessorClass11readCommandEvE3__c_31>:
     bab:	20 62 61 73 65 64 20 6f 6e 20 70 6f 73 69 74 69      based on positi
     bbb:	6f 6e 20 66 65 65 64 62 61 63 6b 20 61 74 20 00     on feedback at .

00000bcb <_ZZN17cmdProcessorClass11readCommandEvE3__c_30>:
     bcb:	4d 6f 76 69 6e 67 20 75 70 20 00                    Moving up .

00000bd6 <_ZZN17cmdProcessorClass11readCommandEvE3__c_29>:
     bd6:	43 61 6e 6e 6f 74 20 72 61 69 73 65 20 64 75 65     Cannot raise due
     be6:	20 74 6f 20 4e 4f 5f 52 41 49 53 45 20 6f 72 20      to NO_RAISE or 
     bf6:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

00000c04 <_ZZN17cmdProcessorClass11readCommandEvE3__c_28>:
     c04:	20 70 65 72 63 65 6e 74 2e 00                        percent..

00000c0e <_ZZN17cmdProcessorClass11readCommandEvE3__c_27>:
     c0e:	20 20 44 69 73 74 61 6e 63 65 20 6d 75 73 74 20       Distance must 
     c1e:	62 65 20 70 6f 73 69 74 69 76 65 20 61 6e 64 20     be positive and 
     c2e:	73 70 65 65 64 20 6d 75 73 74 20 62 65 20 66 72     speed must be fr
     c3e:	6f 6d 20 32 20 74 68 72 6f 75 67 68 20 00           om 2 through .

00000c4c <_ZZN17cmdProcessorClass11readCommandEvE3__c_26>:
     c4c:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000c5a <_ZZN17cmdProcessorClass11readCommandEvE3__c_25>:
     c5a:	20 70 65 72 63 65 6e 74 20 6f 66 20 66 75 6c 6c      percent of full
     c6a:	20 73 70 65 65 64 2e 00                              speed..

00000c72 <_ZZN17cmdProcessorClass11readCommandEvE3__c_24>:
     c72:	20 72 65 76 6f 6c 75 74 69 6f 6e 73 20 61 74 20      revolutions at 
	...

00000c83 <_ZZN17cmdProcessorClass11readCommandEvE3__c_23>:
     c83:	4d 6f 76 69 6e 67 20 64 6f 77 6e 20 00              Moving down .

00000c90 <_ZZN17cmdProcessorClass11readCommandEvE3__c_22>:
     c90:	43 61 6e 6e 6f 74 20 6c 6f 77 65 72 20 64 75 65     Cannot lower due
     ca0:	20 74 6f 20 4e 4f 5f 4c 4f 57 45 52 20 6f 72 20      to NO_LOWER or 
     cb0:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

00000cbe <_ZZN17cmdProcessorClass11readCommandEvE3__c_21>:
     cbe:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000ccc <_ZZN17cmdProcessorClass11readCommandEvE3__c_20>:
     ccc:	20 70 65 72 63 65 6e 74 20 6f 66 20 66 75 6c 6c      percent of full
     cdc:	20 73 70 65 65 64 2e 00                              speed..

00000ce4 <_ZZN17cmdProcessorClass11readCommandEvE3__c_19>:
     ce4:	20 72 65 76 6f 6c 75 74 69 6f 6e 73 20 61 74 20      revolutions at 
	...

00000cf5 <_ZZN17cmdProcessorClass11readCommandEvE3__c_18>:
     cf5:	4d 6f 76 69 6e 67 20 75 70 20 00                    Moving up .

00000d00 <_ZZN17cmdProcessorClass11readCommandEvE3__c_17>:
     d00:	43 61 6e 6e 6f 74 20 72 61 69 73 65 20 64 75 65     Cannot raise due
     d10:	20 74 6f 20 4e 4f 5f 52 41 49 53 45 20 6f 72 20      to NO_RAISE or 
     d20:	45 5f 53 54 4f 50 20 69 6e 70 75 74 2e 00           E_STOP input..

00000d2e <_ZZN17cmdProcessorClass11readCommandEvE3__c_16>:
     d2e:	42 61 64 20 63 6f 6d 6d 61 6e 64 3a 20 00           Bad command: .

00000d3c <_ZZN17cmdProcessorClass11readCommandEvE3__c_15>:
     d3c:	53 74 6f 70 70 65 64 2e 00                          Stopped..

00000d45 <_ZZN17cmdProcessorClass11readCommandEvE3__c_14>:
     d45:	53 75 62 6e 65 74 20 6d 61 73 6b 20 73 65 74 20     Subnet mask set 
     d55:	74 6f 20 00                                         to .

00000d59 <_ZZN17cmdProcessorClass11readCommandEvE3__c_13>:
     d59:	20 64 6f 65 73 20 6e 6f 74 20 70 61 72 73 65 20      does not parse 
     d69:	74 6f 20 61 6e 20 49 50 20 61 64 64 72 65 73 73     to an IP address
     d79:	2e 00                                               ..

00000d7b <_ZZN17cmdProcessorClass11readCommandEvE3__c_12>:
     d7b:	45 52 52 4f 52 3a 20 00                             ERROR: .

00000d83 <_ZZN17cmdProcessorClass11readCommandEvE3__c_11>:
     d83:	30 2e 30 2e 30 2e 30 00                             0.0.0.0.

00000d8b <_ZZN17cmdProcessorClass11readCommandEvE3__c_10>:
     d8b:	47 61 74 65 77 61 79 20 61 64 64 72 65 73 73 20     Gateway address 
     d9b:	73 65 74 20 74 6f 20 00                             set to .

00000da3 <_ZZN17cmdProcessorClass11readCommandEvE3__c_9>:
     da3:	20 64 6f 65 73 20 6e 6f 74 20 70 61 72 73 65 20      does not parse 
     db3:	74 6f 20 61 6e 20 49 50 20 61 64 64 72 65 73 73     to an IP address
     dc3:	2e 00                                               ..

00000dc5 <_ZZN17cmdProcessorClass11readCommandEvE3__c_8>:
     dc5:	45 52 52 4f 52 3a 20 00                             ERROR: .

00000dcd <_ZZN17cmdProcessorClass11readCommandEvE3__c_7>:
     dcd:	30 2e 30 2e 30 2e 30 00                             0.0.0.0.

00000dd5 <_ZZN17cmdProcessorClass11readCommandEvE3__c_6>:
     dd5:	44 4e 53 20 61 64 64 72 65 73 73 20 73 65 74 20     DNS address set 
     de5:	74 6f 20 00                                         to .

00000de9 <_ZZN17cmdProcessorClass11readCommandEvE3__c_5>:
     de9:	20 64 6f 65 73 20 6e 6f 74 20 70 61 72 73 65 20      does not parse 
     df9:	74 6f 20 61 6e 20 49 50 20 61 64 64 72 65 73 73     to an IP address
     e09:	2e 00                                               ..

00000e0b <_ZZN17cmdProcessorClass11readCommandEvE3__c_4>:
     e0b:	45 52 52 4f 52 3a 20 00                             ERROR: .

00000e13 <_ZZN17cmdProcessorClass11readCommandEvE3__c_3>:
     e13:	30 2e 30 2e 30 2e 30 00                             0.0.0.0.

00000e1b <_ZZN17cmdProcessorClass11readCommandEvE3__c_2>:
     e1b:	49 50 20 61 64 64 72 65 73 73 20 73 65 74 20 74     IP address set t
     e2b:	6f 20 00                                            o .

00000e2e <_ZZN17cmdProcessorClass11readCommandEvE3__c_1>:
     e2e:	20 64 6f 65 73 20 6e 6f 74 20 70 61 72 73 65 20      does not parse 
     e3e:	74 6f 20 61 6e 20 49 50 20 61 64 64 72 65 73 73     to an IP address
     e4e:	2e 00                                               ..

00000e50 <_ZZN17cmdProcessorClass11readCommandEvE3__c_0>:
     e50:	45 52 52 4f 52 3a 20 00                             ERROR: .

00000e58 <_ZZN17cmdProcessorClass11readCommandEvE3__c>:
     e58:	48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21 00           Hello, world!.

00000e66 <_ZZN17EepromAccessClass15writeEEPromLongEilE3__c>:
     e66:	57 72 69 74 69 6e 67 20 74 68 65 20 66 6f 6c 6c     Writing the foll
     e76:	6f 77 69 6e 67 20 76 61 6c 75 65 73 20 74 6f 20     owing values to 
     e86:	45 45 50 52 4f 4d 3a 20 00                          EEPROM: .

00000e8f <_ZZN17EepromAccessClass14writeEEPromIntEiiE3__c>:
     e8f:	57 72 69 74 69 6e 67 20 74 68 65 20 66 6f 6c 6c     Writing the foll
     e9f:	6f 77 69 6e 67 20 76 61 6c 75 65 73 20 74 6f 20     owing values to 
     eaf:	45 45 50 52 4f 4d 3a 20 00                          EEPROM: .

00000eb8 <_ZZN15EthernetSupport15resetIPDefaultsEvE3__c_2>:
     eb8:	32 35 35 2e 32 35 35 2e 32 35 35 2e 30 00           255.255.255.0.

00000ec6 <_ZZN15EthernetSupport15resetIPDefaultsEvE3__c_1>:
     ec6:	31 39 32 2e 31 36 38 2e 30 2e 31 00                 192.168.0.1.

00000ed2 <_ZZN15EthernetSupport15resetIPDefaultsEvE3__c_0>:
     ed2:	31 39 32 2e 31 36 38 2e 30 2e 31 00                 192.168.0.1.

00000ede <_ZZN15EthernetSupport15resetIPDefaultsEvE3__c>:
     ede:	31 39 32 2e 31 36 38 2e 30 2e 31 35 30 00           192.168.0.150.

00000eec <_ZZN8MM3Class4initEvE3__c_7>:
     eec:	57 30 31 20 33 30 20 30 00                          W01 30 0.

00000ef5 <_ZZN8MM3Class4initEvE3__c_6>:
     ef5:	57 30 31 20 32 36 20 35 30 00                       W01 26 50.

00000eff <_ZZN8MM3Class4initEvE3__c_5>:
     eff:	57 30 31 20 32 35 20 30 00                          W01 25 0.

00000f08 <_ZZN8MM3Class4initEvE3__c_4>:
     f08:	57 30 31 20 31 32 20 31 35 00                       W01 12 15.

00000f12 <_ZZN8MM3Class4initEvE3__c_3>:
     f12:	57 30 31 20 31 31 20 35 37 36 00                    W01 11 576.

00000f1d <_ZZN8MM3Class4initEvE3__c_2>:
     f1d:	57 30 31 20 31 30 20 31 31 35 32 00                 W01 10 1152.

00000f29 <_ZZN8MM3Class4initEvE3__c_1>:
     f29:	57 30 31 20 30 39 20 31 30 00                       W01 09 10.

00000f33 <_ZZN8MM3Class4initEvE3__c_0>:
     f33:	57 30 31 20 30 37 20 31 00                          W01 07 1.

00000f3c <_ZZN8MM3Class4initEvE3__c>:
     f3c:	57 30 31 20 30 31 20 31 30 32 33 00                 W01 01 1023.

00000f48 <_ZZN21PositionFeedbackClass7readPosEvE3__c_1>:
     f48:	4c 61 74 65 73 74 20 70 6f 73 69 74 69 6f 6e 3a     Latest position:
     f58:	20 00                                                .

00000f5a <_ZZN21PositionFeedbackClass7readPosEvE3__c_0>:
     f5a:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 70     Stopped due to p
     f6a:	6f 73 69 74 69 6f 6e 20 66 65 65 64 62 61 63 6b     osition feedback
     f7a:	20 76 61 6c 75 65 20 6e 6f 74 20 69 6e 63 72 65      value not incre
     f8a:	61 73 69 6e 67 20 64 75 72 69 6e 67 20 64 6f 77     asing during dow
     f9a:	6e 20 6d 6f 76 65 2e 00                             n move..

00000fa2 <_ZZN21PositionFeedbackClass7readPosEvE3__c>:
     fa2:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 70     Stopped due to p
     fb2:	6f 73 69 74 69 6f 6e 20 66 65 65 64 62 61 63 6b     osition feedback
     fc2:	20 76 61 6c 75 65 20 6e 6f 74 20 64 65 63 72 65      value not decre
     fd2:	61 73 69 6e 67 20 64 75 72 69 6e 67 20 75 70 20     asing during up 
     fe2:	6d 6f 76 65 2e 00                                   move..

00000fe8 <_ZZ13checkIfMovingvE3__c>:
     fe8:	45 52 52 4f 52 3a 20 53 70 65 65 64 20 6e 6f 74     ERROR: Speed not
     ff8:	20 69 6e 63 72 65 61 73 69 6e 67 2e 20 50 6f 73      increasing. Pos
    1008:	73 69 62 6c 79 20 6c 6f 73 74 20 70 6f 73 69 74     sibly lost posit
    1018:	69 6f 6e 20 65 6e 63 6f 64 65 72 20 64 61 74 61     ion encoder data
    1028:	20 6f 72 20 64 72 75 6d 20 6e 6f 74 20 74 75 72      or drum not tur
    1038:	6e 69 6e 67 2e 00                                   ning..

0000103e <_ZZ4loopE3__c_16>:
    103e:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 72     Stopped due to r
    104e:	65 61 63 68 69 6e 67 20 6d 61 78 69 6d 75 6d 20     eaching maximum 
    105e:	72 65 76 6f 6c 75 74 69 6f 6e 20 6c 69 6d 69 74     revolution limit
    106e:	2e 00                                               ..

00001070 <_ZZ4loopE3__c_15>:
    1070:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 6f     Stopped due to o
    1080:	76 65 72 20 74 65 6d 70 65 72 61 74 75 72 65 2e     ver temperature.
	...

00001091 <_ZZ4loopE3__c_14>:
    1091:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 65     Stopped due to e
    10a1:	78 63 65 65 64 69 6e 67 20 6d 6f 74 6f 72 20 63     xceeding motor c
    10b1:	75 72 72 65 6e 74 20 6c 69 6d 69 74 2e 00           urrent limit..

000010bf <_ZZ4loopE3__c_13>:
    10bf:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 45     Stopped due to E
    10cf:	2d 53 54 4f 50 20 28 42 52 41 4b 45 29 20 69 6e     -STOP (BRAKE) in
    10df:	70 75 74 2e 00                                      put..

000010e4 <_ZZ4loopE3__c_12>:
    10e4:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 4e     Stopped due to N
    10f4:	4f 5f 4c 4f 57 45 52 20 69 6e 70 75 74 2e 00        O_LOWER input..

00001103 <_ZZ4loopE3__c_11>:
    1103:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 4e     Stopped due to N
    1113:	4f 5f 52 41 49 53 45 20 69 6e 70 75 74 2e 00        O_RAISE input..

00001122 <_ZZ4loopE3__c_10>:
    1122:	44 6f 77 6e 20 62 75 74 74 6f 6e 20 72 65 6c 65     Down button rele
    1132:	61 73 65 64 2e 00                                   ased..

00001138 <_ZZ4loopE3__c_9>:
    1138:	44 6f 77 6e 20 62 75 74 74 6f 6e 20 70 72 65 73     Down button pres
    1148:	73 65 64 2e 00                                      sed..

0000114d <_ZZ4loopE3__c_8>:
    114d:	55 70 20 62 75 74 74 6f 6e 20 72 65 6c 65 61 73     Up button releas
    115d:	65 64 2e 00                                         ed..

00001161 <_ZZ4loopE3__c_7>:
    1161:	55 70 20 62 75 74 74 6f 6e 20 70 72 65 73 73 65     Up button presse
    1171:	64 2e 00                                            d..

00001174 <_ZZ4loopE3__c_6>:
    1174:	53 74 6f 70 70 65 64 20 64 75 65 20 74 6f 20 6e     Stopped due to n
    1184:	6f 20 72 65 63 65 6e 74 20 70 6f 73 69 74 69 6f     o recent positio
    1194:	6e 20 66 65 65 64 62 61 63 6b 2e 00                 n feedback..

000011a0 <_ZZ4loopE3__c_5>:
    11a0:	50 6f 73 69 74 69 6f 6e 20 63 6c 69 65 6e 74 20     Position client 
    11b0:	64 69 73 63 6f 6e 6e 65 63 74 65 64 2e 00           disconnected..

000011be <_ZZ4loopE3__c_4>:
    11be:	50 6f 73 69 74 69 6f 6e 20 63 6c 69 65 6e 74 20     Position client 
    11ce:	63 6f 6e 6e 65 63 74 65 64 00                       connected.

000011d8 <_ZZ4loopE3__c_3>:
    11d8:	4f 75 74 70 75 74 20 63 6c 69 65 6e 74 20 64 69     Output client di
    11e8:	73 63 6f 6e 6e 65 63 74 65 64 2e 00                 sconnected..

000011f4 <_ZZ4loopE3__c_2>:
    11f4:	4f 75 74 70 75 74 20 63 6c 69 65 6e 74 20 63 6f     Output client co
    1204:	6e 6e 65 63 74 65 64 00                             nnected.

0000120c <_ZZ4loopE3__c_1>:
    120c:	43 6f 6d 6d 61 6e 64 20 63 6c 69 65 6e 74 20 64     Command client d
    121c:	69 73 63 6f 6e 6e 65 63 74 65 64 2e 00              isconnected..

00001229 <_ZZ4loopE3__c_0>:
    1229:	57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 65 20 69     Welcome to the i
    1239:	6e 74 65 6c 6c 69 67 65 6e 74 20 77 69 6e 63 68     ntelligent winch
    1249:	20 63 6f 6d 6d 61 6e 64 20 73 65 72 76 65 72 2e      command server.
	...

0000125a <_ZZ4loopE3__c>:
    125a:	43 6f 6d 6d 61 6e 64 20 63 6c 69 65 6e 74 20 63     Command client c
    126a:	6f 6e 6e 65 63 74 65 64 00                          onnected.

00001273 <_ZZ5setupE3__c_14>:
    1273:	20 70 65 72 63 65 6e 74 20 66 6f 72 20 66 65 65      percent for fee
    1283:	64 62 61 63 6b 20 62 61 73 65 64 20 6d 6f 76 65     dback based move
    1293:	73 2e 00                                            s..

00001296 <_ZZ5setupE3__c_13>:
    1296:	4d 61 78 20 53 70 65 65 64 20 73 65 74 20 74 6f     Max Speed set to
    12a6:	20 00                                                .

000012a8 <_ZZ5setupE3__c_12>:
    12a8:	50 49 44 20 74 75 6e 69 6e 67 20 70 61 72 61 6d     PID tuning param
    12b8:	65 74 65 72 73 20 72 65 61 64 20 66 72 6f 6d 20     eters read from 
    12c8:	45 45 50 52 4f 4d 20 61 73 3a 00                    EEPROM as:.

000012d3 <_ZZ5setupE3__c_11>:
    12d3:	54 6f 74 61 6c 20 6d 6f 74 6f 72 20 72 75 6e 20     Total motor run 
    12e3:	74 69 6d 65 20 72 65 61 64 20 66 72 6f 6d 20 45     time read from E
    12f3:	45 50 72 6f 6d 20 61 73 20 00                       EProm as .

000012fd <_ZZ5setupE3__c_10>:
    12fd:	4d 61 78 20 72 65 76 6f 6c 75 74 69 6f 6e 73 20     Max revolutions 
    130d:	72 65 61 64 20 66 72 6f 6d 20 45 45 50 72 6f 6d     read from EEProm
    131d:	20 61 73 20 00                                       as .

00001322 <_ZZ5setupE3__c_9>:
    1322:	4d 6f 74 6f 72 20 52 50 4d 20 72 65 61 64 20 66     Motor RPM read f
    1332:	72 6f 6d 20 45 45 50 72 6f 6d 20 61 73 20 00        rom EEProm as .

00001341 <_ZZ5setupE3__c_8>:
    1341:	43 6f 75 6e 74 73 20 70 65 72 20 72 65 76 6f 6c     Counts per revol
    1351:	75 74 69 6f 6e 73 20 72 65 61 64 20 66 72 6f 6d     utions read from
    1361:	20 45 45 50 72 6f 6d 20 61 73 20 00                  EEProm as .

0000136d <_ZZ5setupE3__c_7>:
    136d:	50 6f 73 69 74 69 6f 6e 20 66 65 65 64 62 61 63     Position feedbac
    137d:	6b 20 70 6f 72 74 3a 20 00                          k port: .

00001386 <_ZZ5setupE3__c_6>:
    1386:	43 6f 6d 6d 61 6e 64 20 70 6f 72 74 3a 20 00        Command port: .

00001395 <_ZZ5setupE3__c_5>:
    1395:	4f 75 74 70 75 74 20 70 6f 72 74 3a 20 00           Output port: .

000013a3 <_ZZ5setupE3__c_4>:
    13a3:	45 74 68 65 72 6e 65 74 20 69 6e 69 74 69 61 6c     Ethernet initial
    13b3:	69 7a 65 64 20 6f 6e 3a 20 00                       ized on: .

000013bd <_ZZ5setupE3__c_3>:
    13bd:	45 52 52 4f 52 20 46 61 69 6c 65 64 20 74 6f 20     ERROR Failed to 
    13cd:	63 6f 6e 66 69 67 75 72 65 20 45 74 68 65 72 6e     configure Ethern
    13dd:	65 74 20 75 73 69 6e 67 20 44 48 43 50 00           et using DHCP.

000013eb <_ZZ5setupE3__c_2>:
    13eb:	45 52 52 4f 52 20 46 61 69 6c 65 64 20 74 6f 20     ERROR Failed to 
    13fb:	63 6f 6e 66 69 67 75 72 65 20 45 74 68 65 72 6e     configure Ethern
    140b:	65 74 20 75 73 69 6e 67 20 44 48 43 50 00           et using DHCP.

00001419 <_ZZ5setupE3__c_1>:
    1419:	45 52 52 4f 52 20 46 61 69 6c 65 64 20 74 6f 20     ERROR Failed to 
    1429:	63 6f 6e 66 69 67 75 72 65 20 45 74 68 65 72 6e     configure Ethern
    1439:	65 74 20 75 73 69 6e 67 20 44 48 43 50 00           et using DHCP.

00001447 <_ZZ5setupE3__c_0>:
    1447:	52 65 73 65 74 74 69 6e 67 20 49 50 20 63 6f 6e     Resetting IP con
    1457:	66 69 67 75 72 61 74 69 6f 6e 20 74 6f 20 64 65     figuration to de
    1467:	66 61 75 6c 74 73 2e 00                             faults..

0000146f <_ZZ5setupE3__c>:
    146f:	49 6e 74 65 6c 6c 69 67 65 6e 74 20 77 69 6e 63     Intelligent winc
    147f:	68 20 70 72 6f 63 65 73 73 6f 72 20 73 74 61 72     h processor star
    148f:	74 75 70 2e 00                                      tup..

00001494 <digital_pin_to_timer_PGM>:
    1494:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
    14c0:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000014da <digital_pin_to_bit_mask_PGM>:
    14da:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    14ea:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    14fa:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    150a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    151a:	04 08 10 20 40 80                                   ... @.

00001520 <digital_pin_to_port_PGM>:
    1520:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    1530:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1540:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1550:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1560:	0b 0b 0b 0b 0b 0b                                   ......

00001566 <port_to_input_PGM>:
    1566:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    1576:	00 01 00 00 03 01 06 01 09 01                       ..........

00001580 <port_to_output_PGM>:
    1580:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    1590:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000159a <port_to_mode_PGM>:
    159a:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    15aa:	01 01 00 00 04 01 07 01 0a 01                       ..........

000015b4 <pstr_nan>:
    15b4:	4e 41 4e                                            NAN

000015b7 <pstr_inity>:
    15b7:	49 4e 49 54 59                                      INITY

000015bc <pstr_inf>:
    15bc:	49 4e 46                                            INF

000015bf <pwr_m10>:
    15bf:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    15cf:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000015d7 <pwr_p10>:
    15d7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    15e7:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000015f0 <__ctors_start>:
    15f0:	65 1a       	sub	r6, r21
    15f2:	f2 1c       	adc	r15, r2
    15f4:	92 28       	or	r9, r2
    15f6:	22 2c       	mov	r2, r2
    15f8:	0e 35       	cpi	r16, 0x5E	; 94
    15fa:	79 35       	cpi	r23, 0x59	; 89
    15fc:	7c 3a       	cpi	r23, 0xAC	; 172
    15fe:	35 3e       	cpi	r19, 0xE5	; 229
    1600:	1a 40       	sbci	r17, 0x0A	; 10
    1602:	a1 41       	sbci	r26, 0x11	; 17
    1604:	69 43       	sbci	r22, 0x39	; 57
    1606:	93 4d       	sbci	r25, 0xD3	; 211
    1608:	3e 4e       	sbci	r19, 0xEE	; 238
    160a:	e9 4e       	sbci	r30, 0xE9	; 233

0000160c <__ctors_end>:
    160c:	11 24       	eor	r1, r1
    160e:	1f be       	out	0x3f, r1	; 63
    1610:	cf ef       	ldi	r28, 0xFF	; 255
    1612:	d1 e2       	ldi	r29, 0x21	; 33
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	00 e0       	ldi	r16, 0x00	; 0
    161a:	0c bf       	out	0x3c, r16	; 60

0000161c <__do_copy_data>:
    161c:	16 e0       	ldi	r17, 0x06	; 6
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b2 e0       	ldi	r27, 0x02	; 2
    1622:	ec e8       	ldi	r30, 0x8C	; 140
    1624:	ff eb       	ldi	r31, 0xBF	; 191
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	0b bf       	out	0x3b, r16	; 59
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <__do_copy_data+0x14>
    162c:	07 90       	elpm	r0, Z+
    162e:	0d 92       	st	X+, r0
    1630:	a6 38       	cpi	r26, 0x86	; 134
    1632:	b1 07       	cpc	r27, r17
    1634:	d9 f7       	brne	.-10     	; 0x162c <__do_copy_data+0x10>

00001636 <__do_clear_bss>:
    1636:	2a e0       	ldi	r18, 0x0A	; 10
    1638:	a6 e8       	ldi	r26, 0x86	; 134
    163a:	b6 e0       	ldi	r27, 0x06	; 6
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <.do_clear_bss_start>

0000163e <.do_clear_bss_loop>:
    163e:	1d 92       	st	X+, r1

00001640 <.do_clear_bss_start>:
    1640:	ac 30       	cpi	r26, 0x0C	; 12
    1642:	b2 07       	cpc	r27, r18
    1644:	e1 f7       	brne	.-8      	; 0x163e <.do_clear_bss_loop>

00001646 <__do_global_ctors>:
    1646:	15 e1       	ldi	r17, 0x15	; 21
    1648:	cc e0       	ldi	r28, 0x0C	; 12
    164a:	d6 e1       	ldi	r29, 0x16	; 22
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	06 c0       	rjmp	.+12     	; 0x165c <__do_global_ctors+0x16>
    1650:	22 97       	sbiw	r28, 0x02	; 2
    1652:	01 09       	sbc	r16, r1
    1654:	fe 01       	movw	r30, r28
    1656:	0b bf       	out	0x3b, r16	; 59
    1658:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <__tablejump_elpm__>
    165c:	c0 3f       	cpi	r28, 0xF0	; 240
    165e:	d1 07       	cpc	r29, r17
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	08 07       	cpc	r16, r24
    1664:	a9 f7       	brne	.-22     	; 0x1650 <__do_global_ctors+0xa>
    1666:	0e 94 f9 4e 	call	0x9df2	; 0x9df2 <main>
    166a:	0c 94 c4 5f 	jmp	0xbf88	; 0xbf88 <_exit>

0000166e <__bad_interrupt>:
    166e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001672 <_ZN19CApplicationMonitorC1Eii>:
nBaseAddress: The address in the eeprom where crash data should be stored. 
nMaxEntries: The maximum number of crash entries that should be stored in the
eeprom. Storage of eeprom data will take up sizeof(CApplicationMonitorHeader) +
nMaxEntries * sizeof(CCrashReport) bytes in the eeprom. 
*/
CApplicationMonitor::CApplicationMonitor(int nBaseAddress, int nMaxEntries)
    1672:	fc 01       	movw	r30, r24
  : c_nBaseAddress(nBaseAddress), c_nMaxEntries(nMaxEntries)
    1674:	71 83       	std	Z+1, r23	; 0x01
    1676:	60 83       	st	Z, r22
    1678:	53 83       	std	Z+3, r21	; 0x03
    167a:	42 83       	std	Z+2, r20	; 0x02
{
  m_CrashReport.m_uData = 0;
    167c:	17 82       	std	Z+7, r1	; 0x07
    167e:	10 86       	std	Z+8, r1	; 0x08
    1680:	11 86       	std	Z+9, r1	; 0x09
    1682:	12 86       	std	Z+10, r1	; 0x0a
    1684:	08 95       	ret

00001686 <_ZN19CApplicationMonitor14EnableWatchdogENS_8ETimeoutE>:
resetting the micro. When the interrupt fires, we save the program counter
to the eeprom. 
*/
void CApplicationMonitor::EnableWatchdog(CApplicationMonitor::ETimeout Timeout)
{
  wdt_enable(Timeout); 
    1686:	63 ff       	sbrs	r22, 3
    1688:	02 c0       	rjmp	.+4      	; 0x168e <_ZN19CApplicationMonitor14EnableWatchdogENS_8ETimeoutE+0x8>
    168a:	88 e2       	ldi	r24, 0x28	; 40
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <_ZN19CApplicationMonitor14EnableWatchdogENS_8ETimeoutE+0xa>
    168e:	88 e0       	ldi	r24, 0x08	; 8
    1690:	67 70       	andi	r22, 0x07	; 7
    1692:	68 2b       	or	r22, r24
    1694:	88 e1       	ldi	r24, 0x18	; 24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	a8 95       	wdr
    169e:	80 93 60 00 	sts	0x0060, r24
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	60 93 60 00 	sts	0x0060, r22
  WDTCSR |= _BV(WDIE);
    16a8:	80 91 60 00 	lds	r24, 0x0060
    16ac:	80 64       	ori	r24, 0x40	; 64
    16ae:	80 93 60 00 	sts	0x0060, r24
    16b2:	08 95       	ret

000016b4 <_ZN19CApplicationMonitor15DisableWatchdogEv>:
}

void CApplicationMonitor::DisableWatchdog()
{
  wdt_disable();
    16b4:	88 e1       	ldi	r24, 0x18	; 24
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	80 93 60 00 	sts	0x0060, r24
    16be:	10 92 60 00 	sts	0x0060, r1
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	08 95       	ret

000016c6 <_ZNK19CApplicationMonitor8IAmAliveEv>:
Lets the watchdog timer know the program is still alive. Call this before
the watchdog timeout ellapses to prevent program being aborted. 
*/
void CApplicationMonitor::IAmAlive() const
{
  wdt_reset();
    16c6:	a8 95       	wdr
    16c8:	08 95       	ret

000016ca <_ZNK19CApplicationMonitor10PrintValueER5PrintPK19__FlashStringHelpermhb>:
  }
}

void CApplicationMonitor::PrintValue(Print &rDestination, const __FlashStringHelper *pLabel, 
                                     uint32_t uValue, uint8_t uRadix, bool bNewLine) const
{
    16ca:	8f 92       	push	r8
    16cc:	9f 92       	push	r9
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	ef 92       	push	r14
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	eb 01       	movw	r28, r22
    16e0:	48 01       	movw	r8, r16
    16e2:	59 01       	movw	r10, r18
  rDestination.print(pLabel);
    16e4:	ba 01       	movw	r22, r20
    16e6:	ce 01       	movw	r24, r28
    16e8:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
  rDestination.print(uValue, uRadix);
    16ec:	2e 2d       	mov	r18, r14
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	b5 01       	movw	r22, r10
    16f2:	a4 01       	movw	r20, r8
    16f4:	ce 01       	movw	r24, r28
    16f6:	0e 94 a5 50 	call	0xa14a	; 0xa14a <_ZN5Print5printEmi>
  if (bNewLine)
    16fa:	cc 20       	and	r12, r12
    16fc:	69 f0       	breq	.+26     	; 0x1718 <_ZNK19CApplicationMonitor10PrintValueER5PrintPK19__FlashStringHelpermhb+0x4e>
    rDestination.println();
    16fe:	ce 01       	movw	r24, r28
}
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ef 90       	pop	r14
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	9f 90       	pop	r9
    1712:	8f 90       	pop	r8
                                     uint32_t uValue, uint8_t uRadix, bool bNewLine) const
{
  rDestination.print(pLabel);
  rDestination.print(uValue, uRadix);
  if (bNewLine)
    rDestination.println();
    1714:	0c 94 88 4f 	jmp	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ef 90       	pop	r14
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	08 95       	ret

0000172e <_ZNK19CApplicationMonitor19GetAddressForReportEi>:

int CApplicationMonitor::GetAddressForReport(int nReport) const
{
  int nAddress;

  nAddress = c_nBaseAddress + sizeof(CApplicationMonitorHeader);
    172e:	fc 01       	movw	r30, r24
    1730:	20 81       	ld	r18, Z
    1732:	31 81       	ldd	r19, Z+1	; 0x01
    1734:	2e 5f       	subi	r18, 0xFE	; 254
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
  if (nReport < c_nMaxEntries)
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	68 17       	cp	r22, r24
    173e:	79 07       	cpc	r23, r25
    1740:	14 f0       	brlt	.+4      	; 0x1746 <_ZNK19CApplicationMonitor19GetAddressForReportEi+0x18>

int CApplicationMonitor::GetAddressForReport(int nReport) const
{
  int nAddress;

  nAddress = c_nBaseAddress + sizeof(CApplicationMonitorHeader);
    1742:	c9 01       	movw	r24, r18
    1744:	08 95       	ret
  if (nReport < c_nMaxEntries)
    nAddress += nReport * sizeof(m_CrashReport);
    1746:	47 e0       	ldi	r20, 0x07	; 7
    1748:	46 9f       	mul	r20, r22
    174a:	c0 01       	movw	r24, r0
    174c:	47 9f       	mul	r20, r23
    174e:	90 0d       	add	r25, r0
    1750:	11 24       	eor	r1, r1
    1752:	82 0f       	add	r24, r18
    1754:	93 1f       	adc	r25, r19
  return nAddress;
}
    1756:	08 95       	ret

00001758 <_ZNK19CApplicationMonitor9ReadBlockEiPvh>:

void CApplicationMonitor::ReadBlock(int nBaseAddress, void *pData, uint8_t uSize) const
{
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	1f 92       	push	r1
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	8b 01       	movw	r16, r22
  uint8_t *puData = (uint8_t *)pData;
  while (uSize --)
    176c:	7a 01       	movw	r14, r20
    176e:	04 1b       	sub	r16, r20
    1770:	15 0b       	sbc	r17, r21
    1772:	21 50       	subi	r18, 0x01	; 1
    1774:	58 f0       	brcs	.+22     	; 0x178c <_ZNK19CApplicationMonitor9ReadBlockEiPvh+0x34>
    *puData++ = eeprom_read_byte((const uint8_t *)nBaseAddress++);
    1776:	c8 01       	movw	r24, r16
    1778:	8e 0d       	add	r24, r14
    177a:	9f 1d       	adc	r25, r15
    177c:	29 83       	std	Y+1, r18	; 0x01
    177e:	0e 94 ed 5e 	call	0xbdda	; 0xbdda <__eerd_byte_m2560>
    1782:	f7 01       	movw	r30, r14
    1784:	81 93       	st	Z+, r24
    1786:	7f 01       	movw	r14, r30
    1788:	29 81       	ldd	r18, Y+1	; 0x01
    178a:	f3 cf       	rjmp	.-26     	; 0x1772 <_ZNK19CApplicationMonitor9ReadBlockEiPvh+0x1a>
}
    178c:	0f 90       	pop	r0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	08 95       	ret

0000179c <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader>:
  while (true)
    ;
}

void CApplicationMonitor::LoadHeader(CApplicationMonitorHeader &rReportHeader) const
{
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	8c 01       	movw	r16, r24
    17a6:	eb 01       	movw	r28, r22
  ReadBlock(c_nBaseAddress, &rReportHeader, sizeof(rReportHeader));
    17a8:	fc 01       	movw	r30, r24
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	22 e0       	ldi	r18, 0x02	; 2
    17b0:	ae 01       	movw	r20, r28
    17b2:	d2 df       	rcall	.-92     	; 0x1758 <_ZNK19CApplicationMonitor9ReadBlockEiPvh>
    17b4:	28 81       	ld	r18, Y

  // Ensure the report structure is valid. 
  if (rReportHeader.m_uSavedReports == 0xff) // eeprom is 0xff when uninitialized
    17b6:	2f 3f       	cpi	r18, 0xFF	; 255
    17b8:	11 f4       	brne	.+4      	; 0x17be <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader+0x22>
    17ba:	18 82       	st	Y, r1
    rReportHeader.m_uSavedReports = 0;
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader+0x32>
    17be:	f8 01       	movw	r30, r16
  else if (rReportHeader.m_uSavedReports > c_nMaxEntries)
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	82 17       	cp	r24, r18
    17c8:	93 07       	cpc	r25, r19
    17ca:	0c f4       	brge	.+2      	; 0x17ce <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader+0x32>
    17cc:	88 83       	st	Y, r24
    rReportHeader.m_uSavedReports = c_nMaxEntries;
    17ce:	29 81       	ldd	r18, Y+1	; 0x01

  if (rReportHeader.m_uNextReport >= c_nMaxEntries)
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	f8 01       	movw	r30, r16
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	28 17       	cp	r18, r24
    17da:	39 07       	cpc	r19, r25
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader+0x44>
    17de:	19 82       	std	Y+1, r1	; 0x01
    rReportHeader.m_uNextReport = 0;
    17e0:	df 91       	pop	r29
}
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	08 95       	ret

000017ea <_ZNK19CApplicationMonitor10LoadReportEiR12CCrashReport>:
    17ea:	0f 93       	push	r16
{
  WriteBlock(GetAddressForReport(nReportSlot), &m_CrashReport, sizeof(m_CrashReport));
}

void CApplicationMonitor::LoadReport(int nReport, CCrashReport &rState) const
{
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	8c 01       	movw	r16, r24
    17f4:	ea 01       	movw	r28, r20
  ReadBlock(GetAddressForReport(nReport), &rState, sizeof(rState));
    17f6:	9b df       	rcall	.-202    	; 0x172e <_ZNK19CApplicationMonitor19GetAddressForReportEi>
    17f8:	27 e0       	ldi	r18, 0x07	; 7
    17fa:	ae 01       	movw	r20, r28
    17fc:	bc 01       	movw	r22, r24
    17fe:	c8 01       	movw	r24, r16
    1800:	ab df       	rcall	.-170    	; 0x1758 <_ZNK19CApplicationMonitor9ReadBlockEiPvh>
    1802:	88 81       	ld	r24, Y
    1804:	9a 81       	ldd	r25, Y+2	; 0x02

  // The return address is reversed when we read it off the stack. Correct that. 
  // by reversing the byte order. Assuming PROGRAM_COUNTER_SIZE is 2 or 3. 
  uint8_t uTemp;
  uTemp = rState.m_auAddress[0];
    1806:	98 83       	st	Y, r25
  rState.m_auAddress[0] = rState.m_auAddress[PROGRAM_COUNTER_SIZE - 1];
    1808:	8a 83       	std	Y+2, r24	; 0x02
    180a:	df 91       	pop	r29
  rState.m_auAddress[PROGRAM_COUNTER_SIZE - 1] = uTemp;
    180c:	cf 91       	pop	r28
}
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	08 95       	ret

00001814 <_ZNK19CApplicationMonitor4DumpER5Printb>:
    1814:	7f 92       	push	r7
    1816:	8f 92       	push	r8
{
  wdt_reset();
}

void CApplicationMonitor::Dump(Print &rDestination, bool bOnlyIfPresent) const
{
    1818:	9f 92       	push	r9
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	2e 97       	sbiw	r28, 0x0e	; 14
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	4c 01       	movw	r8, r24
    1840:	5b 01       	movw	r10, r22
  CApplicationMonitorHeader Header;
  CCrashReport Report;
  uint8_t uReport;
  uint32_t uAddress;

  LoadHeader(Header);
    1842:	be 01       	movw	r22, r28
    1844:	64 5f       	subi	r22, 0xF4	; 244
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	4e 87       	std	Y+14, r20	; 0x0e
    184a:	a8 df       	rcall	.-176    	; 0x179c <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader>
    184c:	4e 85       	ldd	r20, Y+14	; 0x0e
  if (!bOnlyIfPresent || Header.m_uSavedReports != 0)
    184e:	44 23       	and	r20, r20
    1850:	21 f0       	breq	.+8      	; 0x185a <_ZNK19CApplicationMonitor4DumpER5Printb+0x46>
    1852:	8c 85       	ldd	r24, Y+12	; 0x0c
    1854:	88 23       	and	r24, r24
    1856:	09 f4       	brne	.+2      	; 0x185a <_ZNK19CApplicationMonitor4DumpER5Printb+0x46>
    1858:	6b c0       	rjmp	.+214    	; 0x1930 <_ZNK19CApplicationMonitor4DumpER5Printb+0x11c>
    185a:	68 e6       	ldi	r22, 0x68	; 104
  {
    rDestination.println(F("Application Monitor"));
    185c:	71 e0       	ldi	r23, 0x01	; 1
    185e:	c5 01       	movw	r24, r10
    1860:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1864:	64 e5       	ldi	r22, 0x54	; 84
    rDestination.println(F("-------------------"));
    1866:	71 e0       	ldi	r23, 0x01	; 1
    1868:	c5 01       	movw	r24, r10
    186a:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    186e:	0c 85       	ldd	r16, Y+12	; 0x0c
    PrintValue(rDestination, F("Saved reports: "), Header.m_uSavedReports, DEC, true);
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	cc 24       	eor	r12, r12
    1878:	c3 94       	inc	r12
    187a:	4a e0       	ldi	r20, 0x0A	; 10
    187c:	e4 2e       	mov	r14, r20
    187e:	44 e4       	ldi	r20, 0x44	; 68
    1880:	51 e0       	ldi	r21, 0x01	; 1
    1882:	b5 01       	movw	r22, r10
    1884:	c4 01       	movw	r24, r8
    1886:	21 df       	rcall	.-446    	; 0x16ca <_ZNK19CApplicationMonitor10PrintValueER5PrintPK19__FlashStringHelpermhb>
    1888:	0d 85       	ldd	r16, Y+13	; 0x0d
    188a:	10 e0       	ldi	r17, 0x00	; 0
    PrintValue(rDestination, F("Next report: "), Header.m_uNextReport, DEC, true);
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	46 e3       	ldi	r20, 0x36	; 54
    1892:	51 e0       	ldi	r21, 0x01	; 1
    1894:	b5 01       	movw	r22, r10
    1896:	c4 01       	movw	r24, r8
    1898:	18 df       	rcall	.-464    	; 0x16ca <_ZNK19CApplicationMonitor10PrintValueER5PrintPK19__FlashStringHelpermhb>
    189a:	71 2c       	mov	r7, r1
    189c:	8c 85       	ldd	r24, Y+12	; 0x0c
    189e:	78 16       	cp	r7, r24

    for (uReport = 0; uReport < Header.m_uSavedReports; ++uReport)
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <_ZNK19CApplicationMonitor4DumpER5Printb+0x90>
    18a2:	46 c0       	rjmp	.+140    	; 0x1930 <_ZNK19CApplicationMonitor4DumpER5Printb+0x11c>
    18a4:	67 2d       	mov	r22, r7
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	ae 01       	movw	r20, r28
    {
      LoadReport(uReport, Report);
    18aa:	4f 5f       	subi	r20, 0xFF	; 255
    18ac:	5f 4f       	sbci	r21, 0xFF	; 255
    18ae:	c4 01       	movw	r24, r8
    18b0:	9c df       	rcall	.-200    	; 0x17ea <_ZNK19CApplicationMonitor10LoadReportEiR12CCrashReport>
    18b2:	4a e0       	ldi	r20, 0x0A	; 10
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	67 2d       	mov	r22, r7
    18b8:	c5 01       	movw	r24, r10

      rDestination.print(uReport);
    18ba:	0e 94 b1 50 	call	0xa162	; 0xa162 <_ZN5Print5printEhi>
    18be:	18 86       	std	Y+8, r1	; 0x08
    18c0:	19 86       	std	Y+9, r1	; 0x09
    18c2:	1a 86       	std	Y+10, r1	; 0x0a
    18c4:	1b 86       	std	Y+11, r1	; 0x0b
      uAddress = 0;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	ab 81       	ldd	r26, Y+3	; 0x03
    18cc:	88 87       	std	Y+8, r24	; 0x08
      memcpy(&uAddress, Report.m_auAddress, PROGRAM_COUNTER_SIZE);
    18ce:	99 87       	std	Y+9, r25	; 0x09
    18d0:	aa 87       	std	Y+10, r26	; 0x0a
    18d2:	c8 84       	ldd	r12, Y+8	; 0x08
    18d4:	d9 84       	ldd	r13, Y+9	; 0x09
    18d6:	ea 84       	ldd	r14, Y+10	; 0x0a
    18d8:	fb 84       	ldd	r15, Y+11	; 0x0b
      PrintValue(rDestination, F(": word-address=0x"), uAddress, HEX, false);
    18da:	64 e2       	ldi	r22, 0x24	; 36
    18dc:	71 e0       	ldi	r23, 0x01	; 1
    18de:	c5 01       	movw	r24, r10
    18e0:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
}

void CApplicationMonitor::PrintValue(Print &rDestination, const __FlashStringHelper *pLabel, 
                                     uint32_t uValue, uint8_t uRadix, bool bNewLine) const
{
  rDestination.print(pLabel);
    18e4:	20 e1       	ldi	r18, 0x10	; 16
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	b7 01       	movw	r22, r14
    18ea:	a6 01       	movw	r20, r12
  rDestination.print(uValue, uRadix);
    18ec:	c5 01       	movw	r24, r10
    18ee:	0e 94 a5 50 	call	0xa14a	; 0xa14a <_ZN5Print5printEmi>
    18f2:	62 e1       	ldi	r22, 0x12	; 18
    18f4:	71 e0       	ldi	r23, 0x01	; 1
    18f6:	c5 01       	movw	r24, r10
    18f8:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
}

void CApplicationMonitor::PrintValue(Print &rDestination, const __FlashStringHelper *pLabel, 
                                     uint32_t uValue, uint8_t uRadix, bool bNewLine) const
{
  rDestination.print(pLabel);
    18fc:	b7 01       	movw	r22, r14
    18fe:	a6 01       	movw	r20, r12
    1900:	44 0f       	add	r20, r20
    1902:	55 1f       	adc	r21, r21

      rDestination.print(uReport);
      uAddress = 0;
      memcpy(&uAddress, Report.m_auAddress, PROGRAM_COUNTER_SIZE);
      PrintValue(rDestination, F(": word-address=0x"), uAddress, HEX, false);
      PrintValue(rDestination, F(": byte-address=0x"), uAddress * 2, HEX, false);
    1904:	66 1f       	adc	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	20 e1       	ldi	r18, 0x10	; 16
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	c5 01       	movw	r24, r10
    190e:	0e 94 a5 50 	call	0xa14a	; 0xa14a <_ZN5Print5printEmi>

void CApplicationMonitor::PrintValue(Print &rDestination, const __FlashStringHelper *pLabel, 
                                     uint32_t uValue, uint8_t uRadix, bool bNewLine) const
{
  rDestination.print(pLabel);
  rDestination.print(uValue, uRadix);
    1912:	0c 81       	ldd	r16, Y+4	; 0x04
    1914:	1d 81       	ldd	r17, Y+5	; 0x05
    1916:	2e 81       	ldd	r18, Y+6	; 0x06
    1918:	3f 81       	ldd	r19, Y+7	; 0x07
      rDestination.print(uReport);
      uAddress = 0;
      memcpy(&uAddress, Report.m_auAddress, PROGRAM_COUNTER_SIZE);
      PrintValue(rDestination, F(": word-address=0x"), uAddress, HEX, false);
      PrintValue(rDestination, F(": byte-address=0x"), uAddress * 2, HEX, false);
      PrintValue(rDestination, F(", data=0x"), Report.m_uData, HEX, true);
    191a:	cc 24       	eor	r12, r12
    191c:	c3 94       	inc	r12
    191e:	90 e1       	ldi	r25, 0x10	; 16
    1920:	e9 2e       	mov	r14, r25
    1922:	48 e0       	ldi	r20, 0x08	; 8
    1924:	51 e0       	ldi	r21, 0x01	; 1
    1926:	b5 01       	movw	r22, r10
    1928:	c4 01       	movw	r24, r8
    192a:	cf de       	rcall	.-610    	; 0x16ca <_ZNK19CApplicationMonitor10PrintValueER5PrintPK19__FlashStringHelpermhb>
    192c:	73 94       	inc	r7
    192e:	b6 cf       	rjmp	.-148    	; 0x189c <_ZNK19CApplicationMonitor4DumpER5Printb+0x88>
    1930:	2e 96       	adiw	r28, 0x0e	; 14
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    rDestination.println(F("Application Monitor"));
    rDestination.println(F("-------------------"));
    PrintValue(rDestination, F("Saved reports: "), Header.m_uSavedReports, DEC, true);
    PrintValue(rDestination, F("Next report: "), Header.m_uNextReport, DEC, true);

    for (uReport = 0; uReport < Header.m_uSavedReports; ++uReport)
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
      PrintValue(rDestination, F(": word-address=0x"), uAddress, HEX, false);
      PrintValue(rDestination, F(": byte-address=0x"), uAddress * 2, HEX, false);
      PrintValue(rDestination, F(", data=0x"), Report.m_uData, HEX, true);
    }
  }
}
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10
    1950:	9f 90       	pop	r9
    1952:	8f 90       	pop	r8
    1954:	7f 90       	pop	r7
    1956:	08 95       	ret

00001958 <_ZNK19CApplicationMonitor10WriteBlockEiPKvh>:
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
  while (uSize --)
    *puData++ = eeprom_read_byte((const uint8_t *)nBaseAddress++);
}

void CApplicationMonitor::WriteBlock(int nBaseAddress, const void *pData, uint8_t uSize) const
{
    1962:	df 93       	push	r29
    1964:	1f 92       	push	r1
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	7b 01       	movw	r14, r22
    196c:	8a 01       	movw	r16, r20
    196e:	26 0f       	add	r18, r22
  const uint8_t *puData = (const uint8_t *)pData;
  while (uSize --)
    1970:	2e 15       	cp	r18, r14
    1972:	61 f0       	breq	.+24     	; 0x198c <_ZNK19CApplicationMonitor10WriteBlockEiPKvh+0x34>
    eeprom_write_byte((uint8_t *)nBaseAddress++, *puData++);
    1974:	f8 01       	movw	r30, r16
    1976:	61 91       	ld	r22, Z+
    1978:	8f 01       	movw	r16, r30
    197a:	c7 01       	movw	r24, r14
    197c:	29 83       	std	Y+1, r18	; 0x01
    197e:	0e 94 f5 5e 	call	0xbdea	; 0xbdea <__eewr_byte_m2560>
    1982:	ff ef       	ldi	r31, 0xFF	; 255
    1984:	ef 1a       	sub	r14, r31
    1986:	ff 0a       	sbc	r15, r31
    1988:	29 81       	ldd	r18, Y+1	; 0x01
    198a:	f2 cf       	rjmp	.-28     	; 0x1970 <_ZNK19CApplicationMonitor10WriteBlockEiPKvh+0x18>
}
    198c:	0f 90       	pop	r0
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	08 95       	ret

0000199c <_ZNK19CApplicationMonitor10SaveHeaderERK25CApplicationMonitorHeader>:
  if (rReportHeader.m_uNextReport >= c_nMaxEntries)
    rReportHeader.m_uNextReport = 0;
}

void CApplicationMonitor::SaveHeader(const CApplicationMonitorHeader &rReportHeader) const
{
    199c:	ab 01       	movw	r20, r22
  WriteBlock(c_nBaseAddress, &rReportHeader, sizeof(rReportHeader));
    199e:	fc 01       	movw	r30, r24
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	22 e0       	ldi	r18, 0x02	; 2
    19a6:	d8 cf       	rjmp	.-80     	; 0x1958 <_ZNK19CApplicationMonitor10WriteBlockEiPKvh>

000019a8 <_ZNK19CApplicationMonitor17SaveCurrentReportEi>:
    19a8:	cf 93       	push	r28
}

void CApplicationMonitor::SaveCurrentReport(int nReportSlot) const
{
    19aa:	df 93       	push	r29
    19ac:	ec 01       	movw	r28, r24
  WriteBlock(GetAddressForReport(nReportSlot), &m_CrashReport, sizeof(m_CrashReport));
    19ae:	bf de       	rcall	.-642    	; 0x172e <_ZNK19CApplicationMonitor19GetAddressForReportEi>
    19b0:	ae 01       	movw	r20, r28
    19b2:	4c 5f       	subi	r20, 0xFC	; 252
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
    19b6:	27 e0       	ldi	r18, 0x07	; 7
    19b8:	bc 01       	movw	r22, r24
    19ba:	ce 01       	movw	r24, r28
    19bc:	df 91       	pop	r29
}
    19be:	cf 91       	pop	r28
    19c0:	cb cf       	rjmp	.-106    	; 0x1958 <_ZNK19CApplicationMonitor10WriteBlockEiPKvh>

000019c2 <_ZN19CApplicationMonitor24WatchdogInterruptHandlerEPh>:
  WriteBlock(c_nBaseAddress, &rReportHeader, sizeof(rReportHeader));
}

void CApplicationMonitor::SaveCurrentReport(int nReportSlot) const
{
  WriteBlock(GetAddressForReport(nReportSlot), &m_CrashReport, sizeof(m_CrashReport));
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
  if (bNewLine)
    rDestination.println();
}

void CApplicationMonitor::WatchdogInterruptHandler(uint8_t *puProgramAddress)
{
    19c6:	1f 92       	push	r1
    19c8:	1f 92       	push	r1
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	8c 01       	movw	r16, r24
    19d0:	7b 01       	movw	r14, r22
  CApplicationMonitorHeader Header;

  LoadHeader(Header);
    19d2:	be 01       	movw	r22, r28
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	e1 de       	rcall	.-574    	; 0x179c <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader>
    19da:	f7 01       	movw	r30, r14
  memcpy(m_CrashReport.m_auAddress, puProgramAddress, PROGRAM_COUNTER_SIZE);
    19dc:	20 81       	ld	r18, Z
    19de:	31 81       	ldd	r19, Z+1	; 0x01
    19e0:	42 81       	ldd	r20, Z+2	; 0x02
    19e2:	f8 01       	movw	r30, r16
    19e4:	24 83       	std	Z+4, r18	; 0x04
    19e6:	35 83       	std	Z+5, r19	; 0x05
    19e8:	46 83       	std	Z+6, r20	; 0x06
    19ea:	6a 81       	ldd	r22, Y+2	; 0x02
  SaveCurrentReport(Header.m_uNextReport);
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	c8 01       	movw	r24, r16
    19f0:	db df       	rcall	.-74     	; 0x19a8 <_ZNK19CApplicationMonitor17SaveCurrentReportEi>
    19f2:	2a 81       	ldd	r18, Y+2	; 0x02
    19f4:	2f 5f       	subi	r18, 0xFF	; 255

  // Update header for next time. 
  ++Header.m_uNextReport;
    19f6:	2a 83       	std	Y+2, r18	; 0x02
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
  ++Header.m_uSavedReports;
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	f8 01       	movw	r30, r16
  if (Header.m_uNextReport >= c_nMaxEntries)
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	28 17       	cp	r18, r24
    1a08:	39 07       	cpc	r19, r25
    1a0a:	0c f0       	brlt	.+2      	; 0x1a0e <_ZN19CApplicationMonitor24WatchdogInterruptHandlerEPh+0x4c>
    1a0c:	1a 82       	std	Y+2, r1	; 0x02
    1a0e:	be 01       	movw	r22, r28
    Header.m_uNextReport = 0;
    1a10:	6f 5f       	subi	r22, 0xFF	; 255
  SaveHeader(Header);
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	c8 01       	movw	r24, r16
    1a16:	c2 df       	rcall	.-124    	; 0x199c <_ZNK19CApplicationMonitor10SaveHeaderERK25CApplicationMonitorHeader>
    1a18:	0e 94 0a 30 	call	0x6014	; 0x6014 <_Z9saveStatev>
    1a1c:	2b e0       	ldi	r18, 0x0B	; 11

  // Attempt to save some of the data we have been keeping
  extern void saveState();
  saveState();
    1a1e:	88 e1       	ldi	r24, 0x18	; 24
    1a20:	90 e0       	ldi	r25, 0x00	; 0
  
  // Wait for next watchdog time out to reset system.
  // If the watch dog timeout is too short, it doesn't
  // give the program much time to reset it before the
  // next timeout. So we can be a bit generous here. 
  wdt_enable(WDTO_120MS);
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	a8 95       	wdr
    1a28:	80 93 60 00 	sts	0x0060, r24
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	20 93 60 00 	sts	0x0060, r18
    1a32:	ff cf       	rjmp	.-2      	; 0x1a32 <_ZN19CApplicationMonitor24WatchdogInterruptHandlerEPh+0x70>

00001a34 <__vector_12>:
    1a34:	6d b7       	in	r22, 0x3d	; 61
    1a36:	7e b7       	in	r23, 0x3e	; 62
    1a38:	6f 5f       	subi	r22, 0xFF	; 255
  
  // The stack pointer on the AVR micro points to the next available location
  // so we want to go back one location to get the first byte of the address 
  // pushed onto the stack when the interrupt was triggered. There will be 
  // PROGRAM_COUNTER_SIZE bytes there. 
  ++upStack;
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
  ApplicationMonitor.WatchdogInterruptHandler(upStack);
    1a3c:	88 ef       	ldi	r24, 0xF8	; 248
    1a3e:	97 e0       	ldi	r25, 0x07	; 7
    1a40:	c0 df       	rcall	.-128    	; 0x19c2 <_ZN19CApplicationMonitor24WatchdogInterruptHandlerEPh>

00001a42 <_ZN19CApplicationMonitor12ClearReportsEv>:
    1a42:	0f 93       	push	r16
  while (uSize --)
    eeprom_write_byte((uint8_t *)nBaseAddress++, *puData++);
}

void CApplicationMonitor::ClearReports()
{
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	1f 92       	push	r1
    1a4c:	1f 92       	push	r1
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	8c 01       	movw	r16, r24
  CApplicationMonitorHeader Header;

  LoadHeader(Header);
    1a54:	be 01       	movw	r22, r28
    1a56:	6f 5f       	subi	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	a0 de       	rcall	.-704    	; 0x179c <_ZNK19CApplicationMonitor10LoadHeaderER25CApplicationMonitorHeader>
    1a5c:	1a 82       	std	Y+2, r1	; 0x02
  Header.m_uNextReport = 0;
    1a5e:	19 82       	std	Y+1, r1	; 0x01
  Header.m_uSavedReports = 0;
    1a60:	be 01       	movw	r22, r28
  SaveHeader(Header);
    1a62:	6f 5f       	subi	r22, 0xFF	; 255
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	c8 01       	movw	r24, r16
    1a68:	99 df       	rcall	.-206    	; 0x199c <_ZNK19CApplicationMonitor10SaveHeaderERK25CApplicationMonitorHeader>
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <_ZN17cmdProcessorClassC1Ev>:

#include "cmdProcessorClass.h"
#include "winch.h"

cmdProcessorClass::cmdProcessorClass() {
  memset(cmdBuf, 0, CMD_BUF_LEN);
    1a78:	20 e8       	ldi	r18, 0x80	; 128
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	11 92       	st	Z+, r1
    1a7e:	2a 95       	dec	r18
    1a80:	e9 f7       	brne	.-6      	; 0x1a7c <_ZN17cmdProcessorClassC1Ev+0x4>
    1a82:	08 95       	ret

00001a84 <_ZN17cmdProcessorClass9parseMoveEv>:

// Parses the move command by setting moveTarget (global) and
// returns speed, which will be the fourth token in the command buffer
// the third token must be the word "at"
// a zero return is a failure
int cmdProcessorClass::parseMove() {
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <_ZN17cmdProcessorClass9parseMoveEv+0xc>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <_ZN17cmdProcessorClass9parseMoveEv+0xe>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
  char *pch;
  int retVal = 0;

  pch = strtok(NULL, " \r\n"); // get the first token
    1a96:	6c e0       	ldi	r22, 0x0C	; 12
    1a98:	72 e0       	ldi	r23, 0x02	; 2
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    1aa2:	8c 01       	movw	r16, r24
  if (isValidNumber(pch)) { 
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    1aae:	ce 01       	movw	r24, r28
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
    1ab6:	f8 2e       	mov	r15, r24
    1ab8:	ce 01       	movw	r24, r28
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    1ac0:	f1 10       	cpse	r15, r1
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <_ZN17cmdProcessorClass9parseMoveEv+0x46>
// returns speed, which will be the fourth token in the command buffer
// the third token must be the word "at"
// a zero return is a failure
int cmdProcessorClass::parseMove() {
  char *pch;
  int retVal = 0;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	21 c0       	rjmp	.+66     	; 0x1b0c <_ZN17cmdProcessorClass9parseMoveEv+0x88>

  pch = strtok(NULL, " \r\n"); // get the first token
  if (isValidNumber(pch)) { 
    moveTarget = strtod(pch, NULL);
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	c8 01       	movw	r24, r16
    1ad0:	0e 94 34 5a 	call	0xb468	; 0xb468 <strtod>
    1ad4:	60 93 a7 06 	sts	0x06A7, r22
    1ad8:	70 93 a8 06 	sts	0x06A8, r23
    1adc:	80 93 a9 06 	sts	0x06A9, r24
    1ae0:	90 93 aa 06 	sts	0x06AA, r25

    pch = strtok(NULL, " \r\n"); // get the next token
    1ae4:	6c e0       	ldi	r22, 0x0C	; 12
    1ae6:	72 e0       	ldi	r23, 0x02	; 2
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    if (strcmp(pch, "at") == 0) {
    1af0:	60 e1       	ldi	r22, 0x10	; 16
    1af2:	72 e0       	ldi	r23, 0x02	; 2
    1af4:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1af8:	89 2b       	or	r24, r25
    1afa:	21 f7       	brne	.-56     	; 0x1ac4 <_ZN17cmdProcessorClass9parseMoveEv+0x40>
      pch = strtok(NULL, " \r\n"); // get the next token
    1afc:	6c e0       	ldi	r22, 0x0C	; 12
    1afe:	72 e0       	ldi	r23, 0x02	; 2
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
      retVal = atoi(pch);
    1b08:	0e 94 9f 5b 	call	0xb73e	; 0xb73e <atoi>
    }
  }
  return retVal;
}
    1b0c:	26 96       	adiw	r28, 0x06	; 6
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	08 95       	ret

00001b24 <_ZN17cmdProcessorClass11readCommandEv>:

cmdProcessorClass::cmdProcessorClass() {
  memset(cmdBuf, 0, CMD_BUF_LEN);
}

void cmdProcessorClass::readCommand() {
    1b24:	4f 92       	push	r4
    1b26:	5f 92       	push	r5
    1b28:	6f 92       	push	r6
    1b2a:	7f 92       	push	r7
    1b2c:	8f 92       	push	r8
    1b2e:	9f 92       	push	r9
    1b30:	af 92       	push	r10
    1b32:	bf 92       	push	r11
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	c8 56       	subi	r28, 0x68	; 104
    1b4a:	d1 09       	sbc	r29, r1
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	8c 01       	movw	r16, r24

  // read available characters and put them in the command buffer
  char c = ' ';   // init to anything other than newline
  int i = 0;      // index into cmdBuf
    1b58:	e1 2c       	mov	r14, r1
    1b5a:	f1 2c       	mov	r15, r1
}

void cmdProcessorClass::readCommand() {

  // read available characters and put them in the command buffer
  char c = ' ';   // init to anything other than newline
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
  int i = 0;      // index into cmdBuf
  while (Ethernet1.getCmdClient().available()) {
    1b5e:	e0 91 da 07 	lds	r30, 0x07DA
    1b62:	f0 91 db 07 	lds	r31, 0x07DB
    1b66:	04 80       	ldd	r0, Z+4	; 0x04
    1b68:	f5 81       	ldd	r31, Z+5	; 0x05
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	8a ed       	ldi	r24, 0xDA	; 218
    1b6e:	97 e0       	ldi	r25, 0x07	; 7
    1b70:	a8 96       	adiw	r28, 0x28	; 40
    1b72:	4f af       	std	Y+63, r20	; 0x3f
    1b74:	a8 97       	sbiw	r28, 0x28	; 40
    1b76:	19 95       	eicall
    1b78:	a8 96       	adiw	r28, 0x28	; 40
    1b7a:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b7c:	a8 97       	sbiw	r28, 0x28	; 40
    1b7e:	89 2b       	or	r24, r25
    1b80:	b9 f1       	breq	.+110    	; 0x1bf0 <_ZN17cmdProcessorClass11readCommandEv+0xcc>
    c = Ethernet1.getCmdClient().read();
    1b82:	e0 91 da 07 	lds	r30, 0x07DA
    1b86:	f0 91 db 07 	lds	r31, 0x07DB
    1b8a:	06 80       	ldd	r0, Z+6	; 0x06
    1b8c:	f7 81       	ldd	r31, Z+7	; 0x07
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	8a ed       	ldi	r24, 0xDA	; 218
    1b92:	97 e0       	ldi	r25, 0x07	; 7
    1b94:	19 95       	eicall
    1b96:	48 2f       	mov	r20, r24
    1b98:	f8 01       	movw	r30, r16
    1b9a:	ee 0d       	add	r30, r14
    1b9c:	ff 1d       	adc	r31, r15
    if (c == 8) { // backspace
    1b9e:	88 30       	cpi	r24, 0x08	; 8
    1ba0:	29 f4       	brne	.+10     	; 0x1bac <_ZN17cmdProcessorClass11readCommandEv+0x88>
      cmdBuf[i--] = 0;  // set null, then decrement i
    1ba2:	10 82       	st	Z, r1
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	7c 01       	movw	r14, r24
    1baa:	d9 cf       	rjmp	.-78     	; 0x1b5e <_ZN17cmdProcessorClass11readCommandEv+0x3a>
    }
    else {
      cmdBuf[i++] = c;
    1bac:	97 01       	movw	r18, r14
    1bae:	2f 5f       	subi	r18, 0xFF	; 255
    1bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb2:	80 83       	st	Z, r24
      if (i >= CMD_BUF_LEN) { i--; } // don't let the index go past the end
    1bb4:	20 38       	cpi	r18, 0x80	; 128
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	0c f4       	brge	.+2      	; 0x1bbc <_ZN17cmdProcessorClass11readCommandEv+0x98>
    1bba:	79 01       	movw	r14, r18
      if (c == '\n') { break; }         // if there is a newline, process the line
    1bbc:	4a 30       	cpi	r20, 0x0A	; 10
    1bbe:	79 f6       	brne	.-98     	; 0x1b5e <_ZN17cmdProcessorClass11readCommandEv+0x3a>
    }
  }

  if (c == '\n') {  // process the line
    if (strlen(cmdBuf) > 2) {   // if there is more than just <cr><lf>
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	01 90       	ld	r0, Z+
    1bc4:	00 20       	and	r0, r0
    1bc6:	e9 f7       	brne	.-6      	; 0x1bc2 <_ZN17cmdProcessorClass11readCommandEv+0x9e>
    1bc8:	31 97       	sbiw	r30, 0x01	; 1
    1bca:	e0 1b       	sub	r30, r16
    1bcc:	f1 0b       	sbc	r31, r17
    1bce:	33 97       	sbiw	r30, 0x03	; 3
    1bd0:	10 f4       	brcc	.+4      	; 0x1bd6 <_ZN17cmdProcessorClass11readCommandEv+0xb2>
    1bd2:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__stack+0xd19>

      Serial.print("Processing command: "); Serial.print(cmdBuf);
    1bd6:	63 e1       	ldi	r22, 0x13	; 19
    1bd8:	72 e0       	ldi	r23, 0x02	; 2
    1bda:	86 ec       	ldi	r24, 0xC6	; 198
    1bdc:	98 e0       	ldi	r25, 0x08	; 8
    1bde:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    1be2:	b8 01       	movw	r22, r16
    1be4:	86 ec       	ldi	r24, 0xC6	; 198
    1be6:	98 e0       	ldi	r25, 0x08	; 8
    1be8:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>

      for (i = 0; i < (int)strlen(cmdBuf); i++) { cmdBuf[i] = tolower(cmdBuf[i]); }  // convert to lower case
    1bec:	78 01       	movw	r14, r16
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <_ZN17cmdProcessorClass11readCommandEv+0xd6>
      if (i >= CMD_BUF_LEN) { i--; } // don't let the index go past the end
      if (c == '\n') { break; }         // if there is a newline, process the line
    }
  }

  if (c == '\n') {  // process the line
    1bf0:	4a 30       	cpi	r20, 0x0A	; 10
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8 <_ZN17cmdProcessorClass11readCommandEv+0xd4>
    1bf4:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__stack+0x129b>
    1bf8:	e3 cf       	rjmp	.-58     	; 0x1bc0 <_ZN17cmdProcessorClass11readCommandEv+0x9c>
    if (strlen(cmdBuf) > 2) {   // if there is more than just <cr><lf>

      Serial.print("Processing command: "); Serial.print(cmdBuf);

      for (i = 0; i < (int)strlen(cmdBuf); i++) { cmdBuf[i] = tolower(cmdBuf[i]); }  // convert to lower case
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	01 90       	ld	r0, Z+
    1bfe:	00 20       	and	r0, r0
    1c00:	e9 f7       	brne	.-6      	; 0x1bfc <_ZN17cmdProcessorClass11readCommandEv+0xd8>
    1c02:	31 97       	sbiw	r30, 0x01	; 1
    1c04:	e0 1b       	sub	r30, r16
    1c06:	f1 0b       	sbc	r31, r17
    1c08:	c7 01       	movw	r24, r14
    1c0a:	80 1b       	sub	r24, r16
    1c0c:	91 0b       	sbc	r25, r17
    1c0e:	8e 17       	cp	r24, r30
    1c10:	9f 07       	cpc	r25, r31
    1c12:	5c f4       	brge	.+22     	; 0x1c2a <_ZN17cmdProcessorClass11readCommandEv+0x106>
    1c14:	f7 01       	movw	r30, r14
    1c16:	80 81       	ld	r24, Z
    1c18:	99 27       	eor	r25, r25
    1c1a:	87 fd       	sbrc	r24, 7
    1c1c:	90 95       	com	r25
    1c1e:	0e 94 ea 5b 	call	0xb7d4	; 0xb7d4 <tolower>
    1c22:	f7 01       	movw	r30, r14
    1c24:	81 93       	st	Z+, r24
    1c26:	7f 01       	movw	r14, r30
    1c28:	e8 cf       	rjmp	.-48     	; 0x1bfa <_ZN17cmdProcessorClass11readCommandEv+0xd6>
      char *pch;  //will point to command buf tokens as we go
      pch = strtok(cmdBuf, " \r\n");
    1c2a:	6c e0       	ldi	r22, 0x0C	; 12
    1c2c:	72 e0       	ldi	r23, 0x02	; 2
    1c2e:	c8 01       	movw	r24, r16
    1c30:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    1c34:	7c 01       	movw	r14, r24

      if ( strcmp(pch, "hiworld") == 0 ) {
    1c36:	68 e2       	ldi	r22, 0x28	; 40
    1c38:	72 e0       	ldi	r23, 0x02	; 2
    1c3a:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1c3e:	89 2b       	or	r24, r25
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <_ZN17cmdProcessorClass11readCommandEv+0x126>
        Ethernet1.getCmdClient().println(F("Hello, world!"));
    1c42:	68 e5       	ldi	r22, 0x58	; 88
    1c44:	7e e0       	ldi	r23, 0x0E	; 14
    1c46:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
      } else {

      if ( strcmp(pch, "ip_address") == 0 ) {
    1c4a:	60 e3       	ldi	r22, 0x30	; 48
    1c4c:	72 e0       	ldi	r23, 0x02	; 2
    1c4e:	c7 01       	movw	r24, r14
    1c50:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1c54:	89 2b       	or	r24, r25
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <_ZN17cmdProcessorClass11readCommandEv+0x136>
    1c58:	54 c0       	rjmp	.+168    	; 0x1d02 <_ZN17cmdProcessorClass11readCommandEv+0x1de>
        pch = strtok(NULL, " \r\n");  // get the next token
    1c5a:	6c e0       	ldi	r22, 0x0C	; 12
    1c5c:	72 e0       	ldi	r23, 0x02	; 2
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    1c66:	7c 01       	movw	r14, r24

        if (pch==0) {
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <_ZN17cmdProcessorClass11readCommandEv+0x14e>
          Ethernet1.getCmdClient().println( Ethernet1.longToIP( EepromAccess.readEEPromLong(EepromAccess.IP)));
    1c6c:	64 e6       	ldi	r22, 0x64	; 100
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	4f c1       	rjmp	.+670    	; 0x1f10 <_ZN17cmdProcessorClass11readCommandEv+0x3ec>
        } else {
          unsigned long addr = Ethernet1.IPtoLong(pch);
    1c72:	bc 01       	movw	r22, r24
    1c74:	ce 01       	movw	r24, r28
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    1c7c:	be 01       	movw	r22, r28
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8d e9       	ldi	r24, 0x9D	; 157
    1c84:	97 e0       	ldi	r25, 0x07	; 7
    1c86:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	ce 01       	movw	r24, r28
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	a9 96       	adiw	r28, 0x29	; 41
    1c94:	2f af       	std	Y+63, r18	; 0x3f
    1c96:	a9 97       	sbiw	r28, 0x29	; 41
    1c98:	a6 96       	adiw	r28, 0x26	; 38
    1c9a:	3f af       	std	Y+63, r19	; 0x3f
    1c9c:	a6 97       	sbiw	r28, 0x26	; 38
    1c9e:	a8 96       	adiw	r28, 0x28	; 40
    1ca0:	4f af       	std	Y+63, r20	; 0x3f
    1ca2:	a8 97       	sbiw	r28, 0x28	; 40
    1ca4:	a7 96       	adiw	r28, 0x27	; 39
    1ca6:	5f af       	std	Y+63, r21	; 0x3f
    1ca8:	a7 97       	sbiw	r28, 0x27	; 39
    1caa:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
          if ((long)addr == -1) {
    1cae:	a9 96       	adiw	r28, 0x29	; 41
    1cb0:	2f ad       	ldd	r18, Y+63	; 0x3f
    1cb2:	a9 97       	sbiw	r28, 0x29	; 41
    1cb4:	a6 96       	adiw	r28, 0x26	; 38
    1cb6:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cb8:	a6 97       	sbiw	r28, 0x26	; 38
    1cba:	a8 96       	adiw	r28, 0x28	; 40
    1cbc:	4f ad       	ldd	r20, Y+63	; 0x3f
    1cbe:	a8 97       	sbiw	r28, 0x28	; 40
    1cc0:	a7 96       	adiw	r28, 0x27	; 39
    1cc2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cc4:	a7 97       	sbiw	r28, 0x27	; 39
    1cc6:	2f 3f       	cpi	r18, 0xFF	; 255
    1cc8:	ff ef       	ldi	r31, 0xFF	; 255
    1cca:	3f 07       	cpc	r19, r31
    1ccc:	4f 07       	cpc	r20, r31
    1cce:	5f 07       	cpc	r21, r31
    1cd0:	79 f4       	brne	.+30     	; 0x1cf0 <_ZN17cmdProcessorClass11readCommandEv+0x1cc>
            Ethernet1.getCmdClient().print(F("ERROR: ")); Ethernet1.getCmdClient().println(pch);
    1cd2:	60 e5       	ldi	r22, 0x50	; 80
    1cd4:	7e e0       	ldi	r23, 0x0E	; 14
    1cd6:	8a ed       	ldi	r24, 0xDA	; 218
    1cd8:	97 e0       	ldi	r25, 0x07	; 7
    1cda:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    1cde:	b7 01       	movw	r22, r14
    1ce0:	8a ed       	ldi	r24, 0xDA	; 218
    1ce2:	97 e0       	ldi	r25, 0x07	; 7
    1ce4:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
            Ethernet1.getCmdClient().println(F(" does not parse to an IP address."));
    1ce8:	6e e2       	ldi	r22, 0x2E	; 46
    1cea:	7e e0       	ldi	r23, 0x0E	; 14
    1cec:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
          } else {
            EepromAccess.writeEEPromLong(EepromAccess.IP, addr);
    1cf0:	64 e6       	ldi	r22, 0x64	; 100
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	87 ef       	ldi	r24, 0xF7	; 247
    1cf6:	97 e0       	ldi	r25, 0x07	; 7
    1cf8:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
            Ethernet1.getCmdClient().print(F("IP address set to ")); Ethernet1.getCmdClient().println(pch);
    1cfc:	6b e1       	ldi	r22, 0x1B	; 27
    1cfe:	7e e0       	ldi	r23, 0x0E	; 14
    1d00:	62 c1       	rjmp	.+708    	; 0x1fc6 <_ZN17cmdProcessorClass11readCommandEv+0x4a2>
          }
        }
      } else {

      if ( strcmp(pch, "dns") == 0 ) {
    1d02:	6b e3       	ldi	r22, 0x3B	; 59
    1d04:	72 e0       	ldi	r23, 0x02	; 2
    1d06:	c7 01       	movw	r24, r14
    1d08:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1d0c:	89 2b       	or	r24, r25
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <_ZN17cmdProcessorClass11readCommandEv+0x1ee>
    1d10:	74 c0       	rjmp	.+232    	; 0x1dfa <_ZN17cmdProcessorClass11readCommandEv+0x2d6>
        pch = strtok(NULL, " \r\n");  // get the next token
    1d12:	6c e0       	ldi	r22, 0x0C	; 12
    1d14:	72 e0       	ldi	r23, 0x02	; 2
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    1d1e:	7c 01       	movw	r14, r24
        Serial.print("The second token is: |"); Serial.print(pch); Serial.println("|");
    1d20:	6f e3       	ldi	r22, 0x3F	; 63
    1d22:	72 e0       	ldi	r23, 0x02	; 2
    1d24:	86 ec       	ldi	r24, 0xC6	; 198
    1d26:	98 e0       	ldi	r25, 0x08	; 8
    1d28:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    1d2c:	b7 01       	movw	r22, r14
    1d2e:	86 ec       	ldi	r24, 0xC6	; 198
    1d30:	98 e0       	ldi	r25, 0x08	; 8
    1d32:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    1d36:	64 e5       	ldi	r22, 0x54	; 84
    1d38:	72 e0       	ldi	r23, 0x02	; 2
    1d3a:	86 ec       	ldi	r24, 0xC6	; 198
    1d3c:	98 e0       	ldi	r25, 0x08	; 8
    1d3e:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>

        if (pch == 0) {
    1d42:	e1 14       	cp	r14, r1
    1d44:	f1 04       	cpc	r15, r1
    1d46:	89 f4       	brne	.+34     	; 0x1d6a <_ZN17cmdProcessorClass11readCommandEv+0x246>
          if (EepromAccess.readEEPromLong(EepromAccess.IP)==0) {
    1d48:	64 e6       	ldi	r22, 0x64	; 100
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	87 ef       	ldi	r24, 0xF7	; 247
    1d4e:	97 e0       	ldi	r25, 0x07	; 7
    1d50:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    1d54:	67 2b       	or	r22, r23
    1d56:	68 2b       	or	r22, r24
    1d58:	69 2b       	or	r22, r25
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <_ZN17cmdProcessorClass11readCommandEv+0x240>
            Ethernet1.getCmdClient().println(F("0.0.0.0"));  // set through DHCP
    1d5c:	63 e1       	ldi	r22, 0x13	; 19
    1d5e:	7e e0       	ldi	r23, 0x0E	; 14
    1d60:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
          } else {
            Ethernet1.getCmdClient().println( Ethernet1.longToIP( EepromAccess.readEEPromLong(EepromAccess.DNS)));
    1d64:	68 e6       	ldi	r22, 0x68	; 104
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	d3 c0       	rjmp	.+422    	; 0x1f10 <_ZN17cmdProcessorClass11readCommandEv+0x3ec>
          }
        } else {
          unsigned long addr = Ethernet1.IPtoLong(pch);
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    1d74:	be 01       	movw	r22, r28
    1d76:	6f 5f       	subi	r22, 0xFF	; 255
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	8d e9       	ldi	r24, 0x9D	; 157
    1d7c:	97 e0       	ldi	r25, 0x07	; 7
    1d7e:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    1d82:	9b 01       	movw	r18, r22
    1d84:	ac 01       	movw	r20, r24
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	a9 96       	adiw	r28, 0x29	; 41
    1d8c:	2f af       	std	Y+63, r18	; 0x3f
    1d8e:	a9 97       	sbiw	r28, 0x29	; 41
    1d90:	a6 96       	adiw	r28, 0x26	; 38
    1d92:	3f af       	std	Y+63, r19	; 0x3f
    1d94:	a6 97       	sbiw	r28, 0x26	; 38
    1d96:	a8 96       	adiw	r28, 0x28	; 40
    1d98:	4f af       	std	Y+63, r20	; 0x3f
    1d9a:	a8 97       	sbiw	r28, 0x28	; 40
    1d9c:	a7 96       	adiw	r28, 0x27	; 39
    1d9e:	5f af       	std	Y+63, r21	; 0x3f
    1da0:	a7 97       	sbiw	r28, 0x27	; 39
    1da2:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
          if ((long)addr == -1) {
    1da6:	a9 96       	adiw	r28, 0x29	; 41
    1da8:	2f ad       	ldd	r18, Y+63	; 0x3f
    1daa:	a9 97       	sbiw	r28, 0x29	; 41
    1dac:	a6 96       	adiw	r28, 0x26	; 38
    1dae:	3f ad       	ldd	r19, Y+63	; 0x3f
    1db0:	a6 97       	sbiw	r28, 0x26	; 38
    1db2:	a8 96       	adiw	r28, 0x28	; 40
    1db4:	4f ad       	ldd	r20, Y+63	; 0x3f
    1db6:	a8 97       	sbiw	r28, 0x28	; 40
    1db8:	a7 96       	adiw	r28, 0x27	; 39
    1dba:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dbc:	a7 97       	sbiw	r28, 0x27	; 39
    1dbe:	2f 3f       	cpi	r18, 0xFF	; 255
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	38 07       	cpc	r19, r24
    1dc4:	48 07       	cpc	r20, r24
    1dc6:	58 07       	cpc	r21, r24
    1dc8:	79 f4       	brne	.+30     	; 0x1de8 <_ZN17cmdProcessorClass11readCommandEv+0x2c4>
            Ethernet1.getCmdClient().print(F("ERROR: ")); Ethernet1.getCmdClient().print(pch);
    1dca:	6b e0       	ldi	r22, 0x0B	; 11
    1dcc:	7e e0       	ldi	r23, 0x0E	; 14
    1dce:	8a ed       	ldi	r24, 0xDA	; 218
    1dd0:	97 e0       	ldi	r25, 0x07	; 7
    1dd2:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    1dd6:	b7 01       	movw	r22, r14
    1dd8:	8a ed       	ldi	r24, 0xDA	; 218
    1dda:	97 e0       	ldi	r25, 0x07	; 7
    1ddc:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
            Ethernet1.getCmdClient().println(F(" does not parse to an IP address."));
    1de0:	69 ee       	ldi	r22, 0xE9	; 233
    1de2:	7d e0       	ldi	r23, 0x0D	; 13
    1de4:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
          } else {
            EepromAccess.writeEEPromLong(EepromAccess.DNS, addr);
    1de8:	68 e6       	ldi	r22, 0x68	; 104
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	87 ef       	ldi	r24, 0xF7	; 247
    1dee:	97 e0       	ldi	r25, 0x07	; 7
    1df0:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
            Ethernet1.getCmdClient().print(F("DNS address set to ")); Ethernet1.getCmdClient().println(pch);
    1df4:	65 ed       	ldi	r22, 0xD5	; 213
    1df6:	7d e0       	ldi	r23, 0x0D	; 13
    1df8:	e6 c0       	rjmp	.+460    	; 0x1fc6 <_ZN17cmdProcessorClass11readCommandEv+0x4a2>
          }
        }
      } else {
        
      if ( strcmp(pch, "gateway") == 0) {
    1dfa:	66 e5       	ldi	r22, 0x56	; 86
    1dfc:	72 e0       	ldi	r23, 0x02	; 2
    1dfe:	c7 01       	movw	r24, r14
    1e00:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1e04:	89 2b       	or	r24, r25
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <_ZN17cmdProcessorClass11readCommandEv+0x2e6>
    1e08:	62 c0       	rjmp	.+196    	; 0x1ece <_ZN17cmdProcessorClass11readCommandEv+0x3aa>
        pch = strtok(NULL, " \r\n");  // get the next token
    1e0a:	6c e0       	ldi	r22, 0x0C	; 12
    1e0c:	72 e0       	ldi	r23, 0x02	; 2
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    1e16:	7c 01       	movw	r14, r24

        if (pch == 0) {
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	89 f4       	brne	.+34     	; 0x1e3e <_ZN17cmdProcessorClass11readCommandEv+0x31a>
          if (EepromAccess.readEEPromLong(EepromAccess.IP)==0) {
    1e1c:	64 e6       	ldi	r22, 0x64	; 100
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	87 ef       	ldi	r24, 0xF7	; 247
    1e22:	97 e0       	ldi	r25, 0x07	; 7
    1e24:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    1e28:	67 2b       	or	r22, r23
    1e2a:	68 2b       	or	r22, r24
    1e2c:	69 2b       	or	r22, r25
    1e2e:	21 f4       	brne	.+8      	; 0x1e38 <_ZN17cmdProcessorClass11readCommandEv+0x314>
            Ethernet1.getCmdClient().println(F("0.0.0.0"));  // set through DHCP
    1e30:	6d ec       	ldi	r22, 0xCD	; 205
    1e32:	7d e0       	ldi	r23, 0x0D	; 13
    1e34:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
          } else {
            Ethernet1.getCmdClient().println( Ethernet1.longToIP( EepromAccess.readEEPromLong(EepromAccess.GATE)));
    1e38:	6c e6       	ldi	r22, 0x6C	; 108
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	69 c0       	rjmp	.+210    	; 0x1f10 <_ZN17cmdProcessorClass11readCommandEv+0x3ec>
          }
        } else {
          unsigned long addr = Ethernet1.IPtoLong(pch);
    1e3e:	bc 01       	movw	r22, r24
    1e40:	ce 01       	movw	r24, r28
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    1e48:	be 01       	movw	r22, r28
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	8d e9       	ldi	r24, 0x9D	; 157
    1e50:	97 e0       	ldi	r25, 0x07	; 7
    1e52:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	a9 96       	adiw	r28, 0x29	; 41
    1e60:	2f af       	std	Y+63, r18	; 0x3f
    1e62:	a9 97       	sbiw	r28, 0x29	; 41
    1e64:	a6 96       	adiw	r28, 0x26	; 38
    1e66:	3f af       	std	Y+63, r19	; 0x3f
    1e68:	a6 97       	sbiw	r28, 0x26	; 38
    1e6a:	a8 96       	adiw	r28, 0x28	; 40
    1e6c:	4f af       	std	Y+63, r20	; 0x3f
    1e6e:	a8 97       	sbiw	r28, 0x28	; 40
    1e70:	a7 96       	adiw	r28, 0x27	; 39
    1e72:	5f af       	std	Y+63, r21	; 0x3f
    1e74:	a7 97       	sbiw	r28, 0x27	; 39
    1e76:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
          if ((long)addr == -1) {
    1e7a:	a9 96       	adiw	r28, 0x29	; 41
    1e7c:	2f ad       	ldd	r18, Y+63	; 0x3f
    1e7e:	a9 97       	sbiw	r28, 0x29	; 41
    1e80:	a6 96       	adiw	r28, 0x26	; 38
    1e82:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e84:	a6 97       	sbiw	r28, 0x26	; 38
    1e86:	a8 96       	adiw	r28, 0x28	; 40
    1e88:	4f ad       	ldd	r20, Y+63	; 0x3f
    1e8a:	a8 97       	sbiw	r28, 0x28	; 40
    1e8c:	a7 96       	adiw	r28, 0x27	; 39
    1e8e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e90:	a7 97       	sbiw	r28, 0x27	; 39
    1e92:	2f 3f       	cpi	r18, 0xFF	; 255
    1e94:	9f ef       	ldi	r25, 0xFF	; 255
    1e96:	39 07       	cpc	r19, r25
    1e98:	49 07       	cpc	r20, r25
    1e9a:	59 07       	cpc	r21, r25
    1e9c:	79 f4       	brne	.+30     	; 0x1ebc <_ZN17cmdProcessorClass11readCommandEv+0x398>
            Ethernet1.getCmdClient().print(F("ERROR: ")); Ethernet1.getCmdClient().print(pch);
    1e9e:	65 ec       	ldi	r22, 0xC5	; 197
    1ea0:	7d e0       	ldi	r23, 0x0D	; 13
    1ea2:	8a ed       	ldi	r24, 0xDA	; 218
    1ea4:	97 e0       	ldi	r25, 0x07	; 7
    1ea6:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    1eaa:	b7 01       	movw	r22, r14
    1eac:	8a ed       	ldi	r24, 0xDA	; 218
    1eae:	97 e0       	ldi	r25, 0x07	; 7
    1eb0:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
            Ethernet1.getCmdClient().println(F(" does not parse to an IP address."));
    1eb4:	63 ea       	ldi	r22, 0xA3	; 163
    1eb6:	7d e0       	ldi	r23, 0x0D	; 13
    1eb8:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
          } else {
            EepromAccess.writeEEPromLong(EepromAccess.GATE, addr);
    1ebc:	6c e6       	ldi	r22, 0x6C	; 108
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	87 ef       	ldi	r24, 0xF7	; 247
    1ec2:	97 e0       	ldi	r25, 0x07	; 7
    1ec4:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
            Ethernet1.getCmdClient().print(F("Gateway address set to ")); Ethernet1.getCmdClient().println(pch);
    1ec8:	6b e8       	ldi	r22, 0x8B	; 139
    1eca:	7d e0       	ldi	r23, 0x0D	; 13
    1ecc:	7c c0       	rjmp	.+248    	; 0x1fc6 <_ZN17cmdProcessorClass11readCommandEv+0x4a2>
          }
        }
      } else {
        
      if ( strcmp(pch, "subnet") == 0) {
    1ece:	6e e5       	ldi	r22, 0x5E	; 94
    1ed0:	72 e0       	ldi	r23, 0x02	; 2
    1ed2:	c7 01       	movw	r24, r14
    1ed4:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1ed8:	89 2b       	or	r24, r25
    1eda:	09 f0       	breq	.+2      	; 0x1ede <_ZN17cmdProcessorClass11readCommandEv+0x3ba>
    1edc:	7a c0       	rjmp	.+244    	; 0x1fd2 <_ZN17cmdProcessorClass11readCommandEv+0x4ae>
        pch = strtok(NULL, " \r\n");  // get the next token
    1ede:	6c e0       	ldi	r22, 0x0C	; 12
    1ee0:	72 e0       	ldi	r23, 0x02	; 2
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    1eea:	7c 01       	movw	r14, r24

        if (pch == 0) {
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	21 f5       	brne	.+72     	; 0x1f38 <_ZN17cmdProcessorClass11readCommandEv+0x414>
          if (EepromAccess.readEEPromLong(EepromAccess.IP)==0) {
    1ef0:	64 e6       	ldi	r22, 0x64	; 100
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	87 ef       	ldi	r24, 0xF7	; 247
    1ef6:	97 e0       	ldi	r25, 0x07	; 7
    1ef8:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    1efc:	67 2b       	or	r22, r23
    1efe:	68 2b       	or	r22, r24
    1f00:	69 2b       	or	r22, r25
    1f02:	21 f4       	brne	.+8      	; 0x1f0c <_ZN17cmdProcessorClass11readCommandEv+0x3e8>
            Ethernet1.getCmdClient().println(F("0.0.0.0"));  // set through DHCP
    1f04:	63 e8       	ldi	r22, 0x83	; 131
    1f06:	7d e0       	ldi	r23, 0x0D	; 13
    1f08:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
          } else {
            Ethernet1.getCmdClient().println( Ethernet1.longToIP( EepromAccess.readEEPromLong(EepromAccess.SUB)));
    1f0c:	60 e7       	ldi	r22, 0x70	; 112
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	87 ef       	ldi	r24, 0xF7	; 247
    1f12:	97 e0       	ldi	r25, 0x07	; 7
    1f14:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    1f18:	9b 01       	movw	r18, r22
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	6d e9       	ldi	r22, 0x9D	; 157
    1f1e:	77 e0       	ldi	r23, 0x07	; 7
    1f20:	ce 01       	movw	r24, r28
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN15EthernetSupport8longToIPEm>
    1f28:	be 01       	movw	r22, r28
    1f2a:	6f 5f       	subi	r22, 0xFF	; 255
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2e:	8a ed       	ldi	r24, 0xDA	; 218
    1f30:	97 e0       	ldi	r25, 0x07	; 7
    1f32:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <_ZN5Print7printlnERK9Printable>
    1f36:	f0 c7       	rjmp	.+4064   	; 0x2f18 <__stack+0xd19>
    1f38:	bc 01       	movw	r22, r24
          }
        } else {
          unsigned long addr = Ethernet1.IPtoLong(pch);
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    1f42:	be 01       	movw	r22, r28
    1f44:	6f 5f       	subi	r22, 0xFF	; 255
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	8d e9       	ldi	r24, 0x9D	; 157
    1f4a:	97 e0       	ldi	r25, 0x07	; 7
    1f4c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    1f50:	9b 01       	movw	r18, r22
    1f52:	ac 01       	movw	r20, r24
    1f54:	ce 01       	movw	r24, r28
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	a9 96       	adiw	r28, 0x29	; 41
    1f5a:	2f af       	std	Y+63, r18	; 0x3f
    1f5c:	a9 97       	sbiw	r28, 0x29	; 41
    1f5e:	a6 96       	adiw	r28, 0x26	; 38
    1f60:	3f af       	std	Y+63, r19	; 0x3f
    1f62:	a6 97       	sbiw	r28, 0x26	; 38
    1f64:	a8 96       	adiw	r28, 0x28	; 40
    1f66:	4f af       	std	Y+63, r20	; 0x3f
    1f68:	a8 97       	sbiw	r28, 0x28	; 40
    1f6a:	a7 96       	adiw	r28, 0x27	; 39
    1f6c:	5f af       	std	Y+63, r21	; 0x3f
    1f6e:	a7 97       	sbiw	r28, 0x27	; 39
    1f70:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    1f74:	a9 96       	adiw	r28, 0x29	; 41
          if ((long)addr == -1) {
    1f76:	2f ad       	ldd	r18, Y+63	; 0x3f
    1f78:	a9 97       	sbiw	r28, 0x29	; 41
    1f7a:	a6 96       	adiw	r28, 0x26	; 38
    1f7c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f7e:	a6 97       	sbiw	r28, 0x26	; 38
    1f80:	a8 96       	adiw	r28, 0x28	; 40
    1f82:	4f ad       	ldd	r20, Y+63	; 0x3f
    1f84:	a8 97       	sbiw	r28, 0x28	; 40
    1f86:	a7 96       	adiw	r28, 0x27	; 39
    1f88:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f8a:	a7 97       	sbiw	r28, 0x27	; 39
    1f8c:	2f 3f       	cpi	r18, 0xFF	; 255
    1f8e:	ef ef       	ldi	r30, 0xFF	; 255
    1f90:	3e 07       	cpc	r19, r30
    1f92:	4e 07       	cpc	r20, r30
    1f94:	5e 07       	cpc	r21, r30
    1f96:	79 f4       	brne	.+30     	; 0x1fb6 <_ZN17cmdProcessorClass11readCommandEv+0x492>
    1f98:	6b e7       	ldi	r22, 0x7B	; 123
            Ethernet1.getCmdClient().print(F("ERROR: ")); Ethernet1.getCmdClient().print(pch);
    1f9a:	7d e0       	ldi	r23, 0x0D	; 13
    1f9c:	8a ed       	ldi	r24, 0xDA	; 218
    1f9e:	97 e0       	ldi	r25, 0x07	; 7
    1fa0:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    1fa4:	b7 01       	movw	r22, r14
    1fa6:	8a ed       	ldi	r24, 0xDA	; 218
    1fa8:	97 e0       	ldi	r25, 0x07	; 7
    1faa:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    1fae:	69 e5       	ldi	r22, 0x59	; 89
            Ethernet1.getCmdClient().println(F(" does not parse to an IP address."));
    1fb0:	7d e0       	ldi	r23, 0x0D	; 13
    1fb2:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    1fb6:	60 e7       	ldi	r22, 0x70	; 112
          } else {
            EepromAccess.writeEEPromLong(EepromAccess.SUB, addr);
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	87 ef       	ldi	r24, 0xF7	; 247
    1fbc:	97 e0       	ldi	r25, 0x07	; 7
    1fbe:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
    1fc2:	65 e4       	ldi	r22, 0x45	; 69
            Ethernet1.getCmdClient().print(F("Subnet mask set to ")); Ethernet1.getCmdClient().println(pch);
    1fc4:	7d e0       	ldi	r23, 0x0D	; 13
    1fc6:	8a ed       	ldi	r24, 0xDA	; 218
    1fc8:	97 e0       	ldi	r25, 0x07	; 7
    1fca:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    1fce:	b7 01       	movw	r22, r14
    1fd0:	9f c7       	rjmp	.+3902   	; 0x2f10 <__stack+0xd11>
    1fd2:	65 e6       	ldi	r22, 0x65	; 101
          }
        }
      } else {
        
      if ( strcmp(pch, "stop") == 0) {
    1fd4:	72 e0       	ldi	r23, 0x02	; 2
    1fd6:	c7 01       	movw	r24, r14
    1fd8:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1fdc:	89 2b       	or	r24, r25
    1fde:	41 f4       	brne	.+16     	; 0x1ff0 <_ZN17cmdProcessorClass11readCommandEv+0x4cc>
    1fe0:	8e e6       	ldi	r24, 0x6E	; 110
        MCtrl.stopMoving();
    1fe2:	97 e0       	ldi	r25, 0x07	; 7
    1fe4:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    1fe8:	6c e3       	ldi	r22, 0x3C	; 60
        Ethernet1.getCmdClient().println(F("Stopped."));
    1fea:	7d e0       	ldi	r23, 0x0D	; 13
    1fec:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    1ff0:	6a e6       	ldi	r22, 0x6A	; 106
      } else {
        
      if ( strcmp(pch, "up_revolutions") == 0) {
    1ff2:	72 e0       	ldi	r23, 0x02	; 2
    1ff4:	c7 01       	movw	r24, r14
    1ff6:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    1ffa:	89 2b       	or	r24, r25
    1ffc:	31 f5       	brne	.+76     	; 0x204a <_ZN17cmdProcessorClass11readCommandEv+0x526>
    1ffe:	c8 01       	movw	r24, r16
        int speedPct = parseMove();
    2000:	41 dd       	rcall	.-1406   	; 0x1a84 <_ZN17cmdProcessorClass9parseMoveEv>
    2002:	7c 01       	movw	r14, r24
    2004:	02 97       	sbiw	r24, 0x02	; 2
    2006:	83 36       	cpi	r24, 0x63	; 99
        if (speedPct < 2 || speedPct > 100 || moveTarget <= 0.0) {
    2008:	91 05       	cpc	r25, r1
    200a:	78 f4       	brcc	.+30     	; 0x202a <_ZN17cmdProcessorClass11readCommandEv+0x506>
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	a9 01       	movw	r20, r18
    2012:	60 91 a7 06 	lds	r22, 0x06A7
    2016:	70 91 a8 06 	lds	r23, 0x06A8
    201a:	80 91 a9 06 	lds	r24, 0x06A9
    201e:	90 91 aa 06 	lds	r25, 0x06AA
    2022:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2026:	18 16       	cp	r1, r24
    2028:	1c f0       	brlt	.+6      	; 0x2030 <_ZN17cmdProcessorClass11readCommandEv+0x50c>
    202a:	6e e2       	ldi	r22, 0x2E	; 46
    202c:	7d e0       	ldi	r23, 0x0D	; 13
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
    202e:	6b c7       	rjmp	.+3798   	; 0x2f06 <__stack+0xd07>
    2030:	80 91 76 07 	lds	r24, 0x0776
    2034:	90 91 77 07 	lds	r25, 0x0777
    2038:	85 70       	andi	r24, 0x05	; 5
    203a:	99 27       	eor	r25, r25
    203c:	89 2b       	or	r24, r25
    203e:	09 f4       	brne	.+2      	; 0x2042 <_ZN17cmdProcessorClass11readCommandEv+0x51e>
        } else {
        if ( MCtrl.isNoRaise() || MCtrl.isBrake() ) { 
    2040:	71 c7       	rjmp	.+3810   	; 0x2f24 <__stack+0xd25>
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	7d e0       	ldi	r23, 0x0D	; 13
          Ethernet1.getCmdClient().println(F("Cannot raise due to NO_RAISE or E_STOP input."));
    2046:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    204a:	69 e7       	ldi	r22, 0x79	; 121
    204c:	72 e0       	ldi	r23, 0x02	; 2
          Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
          checkIfMoving();
        }}
      } else {
        
      if ( strcmp(pch, "down_revolutions") == 0) {
    204e:	c7 01       	movw	r24, r14
    2050:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2054:	89 2b       	or	r24, r25
    2056:	31 f5       	brne	.+76     	; 0x20a4 <_ZN17cmdProcessorClass11readCommandEv+0x580>
    2058:	c8 01       	movw	r24, r16
    205a:	14 dd       	rcall	.-1496   	; 0x1a84 <_ZN17cmdProcessorClass9parseMoveEv>
        int speedPct = parseMove();
    205c:	7c 01       	movw	r14, r24
    205e:	02 97       	sbiw	r24, 0x02	; 2
    2060:	83 36       	cpi	r24, 0x63	; 99
    2062:	91 05       	cpc	r25, r1
        if (speedPct < 2 || speedPct > 100 || moveTarget <= 0.0) {
    2064:	78 f4       	brcc	.+30     	; 0x2084 <_ZN17cmdProcessorClass11readCommandEv+0x560>
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	a9 01       	movw	r20, r18
    206c:	60 91 a7 06 	lds	r22, 0x06A7
    2070:	70 91 a8 06 	lds	r23, 0x06A8
    2074:	80 91 a9 06 	lds	r24, 0x06A9
    2078:	90 91 aa 06 	lds	r25, 0x06AA
    207c:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2080:	18 16       	cp	r1, r24
    2082:	1c f0       	brlt	.+6      	; 0x208a <_ZN17cmdProcessorClass11readCommandEv+0x566>
    2084:	6e eb       	ldi	r22, 0xBE	; 190
    2086:	7c e0       	ldi	r23, 0x0C	; 12
    2088:	3e c7       	rjmp	.+3708   	; 0x2f06 <__stack+0xd07>
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
    208a:	80 91 76 07 	lds	r24, 0x0776
    208e:	90 91 77 07 	lds	r25, 0x0777
    2092:	86 70       	andi	r24, 0x06	; 6
    2094:	99 27       	eor	r25, r25
    2096:	89 2b       	or	r24, r25
    2098:	09 f4       	brne	.+2      	; 0x209c <_ZN17cmdProcessorClass11readCommandEv+0x578>
    209a:	7a c7       	rjmp	.+3828   	; 0x2f90 <__stack+0xd91>
        } else {
        if ( MCtrl.isNoLower() || MCtrl.isBrake() ) { 
    209c:	60 e9       	ldi	r22, 0x90	; 144
    209e:	7c e0       	ldi	r23, 0x0C	; 12
    20a0:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
    20a4:	6a e8       	ldi	r22, 0x8A	; 138
    20a6:	72 e0       	ldi	r23, 0x02	; 2
    20a8:	c7 01       	movw	r24, r14
          Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
          checkIfMoving();
        }}
      } else {
        
      if ( strcmp(pch, "up_distance") == 0) {
    20aa:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    20ae:	89 2b       	or	r24, r25
    20b0:	01 f5       	brne	.+64     	; 0x20f2 <_ZN17cmdProcessorClass11readCommandEv+0x5ce>
    20b2:	c8 01       	movw	r24, r16
    20b4:	e7 dc       	rcall	.-1586   	; 0x1a84 <_ZN17cmdProcessorClass9parseMoveEv>
    20b6:	7c 01       	movw	r14, r24
        int speedPct = parseMove();
    20b8:	82 30       	cpi	r24, 0x02	; 2
    20ba:	91 05       	cpc	r25, r1
    20bc:	0c f4       	brge	.+2      	; 0x20c0 <_ZN17cmdProcessorClass11readCommandEv+0x59c>
    20be:	9d c7       	rjmp	.+3898   	; 0x2ffa <__stack+0xdfb>
        if (speedPct < 2 || speedPct > posFB.getFeedbackMaxSpeed() || moveTarget <= 0.0) {
    20c0:	80 91 b3 06 	lds	r24, 0x06B3
    20c4:	90 91 b4 06 	lds	r25, 0x06B4
    20c8:	8e 15       	cp	r24, r14
    20ca:	9f 05       	cpc	r25, r15
    20cc:	0c f4       	brge	.+2      	; 0x20d0 <_ZN17cmdProcessorClass11readCommandEv+0x5ac>
    20ce:	95 c7       	rjmp	.+3882   	; 0x2ffa <__stack+0xdfb>
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	a9 01       	movw	r20, r18
    20d6:	60 91 a7 06 	lds	r22, 0x06A7
    20da:	70 91 a8 06 	lds	r23, 0x06A8
    20de:	80 91 a9 06 	lds	r24, 0x06A9
    20e2:	90 91 aa 06 	lds	r25, 0x06AA
    20e6:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	0c f4       	brge	.+2      	; 0x20f0 <_ZN17cmdProcessorClass11readCommandEv+0x5cc>
    20ee:	a3 c7       	rjmp	.+3910   	; 0x3036 <__stack+0xe37>
    20f0:	84 c7       	rjmp	.+3848   	; 0x2ffa <__stack+0xdfb>
    20f2:	66 e9       	ldi	r22, 0x96	; 150
    20f4:	72 e0       	ldi	r23, 0x02	; 2
    20f6:	c7 01       	movw	r24, r14
    20f8:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
            Ethernet1.getCmdClient().println(F(" No recent position feedback."));
          }
        }}
      } else {
        
      if ( strcmp(pch, "down_distance") == 0) {
    20fc:	89 2b       	or	r24, r25
    20fe:	19 f5       	brne	.+70     	; 0x2146 <_ZN17cmdProcessorClass11readCommandEv+0x622>
    2100:	c8 01       	movw	r24, r16
    2102:	c0 dc       	rcall	.-1664   	; 0x1a84 <_ZN17cmdProcessorClass9parseMoveEv>
    2104:	7c 01       	movw	r14, r24
    2106:	82 e0       	ldi	r24, 0x02	; 2
        int speedPct = parseMove();
    2108:	e8 16       	cp	r14, r24
    210a:	f1 04       	cpc	r15, r1
    210c:	14 f4       	brge	.+4      	; 0x2112 <_ZN17cmdProcessorClass11readCommandEv+0x5ee>
    210e:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__stack+0xf3f>
        if (speedPct < 2 || speedPct > posFB.getFeedbackMaxSpeed() || moveTarget <= 0.0) {
    2112:	80 91 b3 06 	lds	r24, 0x06B3
    2116:	90 91 b4 06 	lds	r25, 0x06B4
    211a:	8e 15       	cp	r24, r14
    211c:	9f 05       	cpc	r25, r15
    211e:	14 f4       	brge	.+4      	; 0x2124 <_ZN17cmdProcessorClass11readCommandEv+0x600>
    2120:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__stack+0xf3f>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	a9 01       	movw	r20, r18
    212a:	60 91 a7 06 	lds	r22, 0x06A7
    212e:	70 91 a8 06 	lds	r23, 0x06A8
    2132:	80 91 a9 06 	lds	r24, 0x06A9
    2136:	90 91 aa 06 	lds	r25, 0x06AA
    213a:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    213e:	18 16       	cp	r1, r24
    2140:	0c f4       	brge	.+2      	; 0x2144 <_ZN17cmdProcessorClass11readCommandEv+0x620>
    2142:	f2 c7       	rjmp	.+4068   	; 0x3128 <__stack+0xf29>
    2144:	fc c7       	rjmp	.+4088   	; 0x313e <__stack+0xf3f>
    2146:	64 ea       	ldi	r22, 0xA4	; 164
    2148:	72 e0       	ldi	r23, 0x02	; 2
    214a:	c7 01       	movw	r24, r14
    214c:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2150:	89 2b       	or	r24, r25
    2152:	91 f5       	brne	.+100    	; 0x21b8 <_ZN17cmdProcessorClass11readCommandEv+0x694>
            Ethernet1.getCmdClient().println(F(" No recent position feedback."));
          }
        }}
      } else {
        
      if ( strcmp(pch, "move_to_revolution") == 0) {
    2154:	c8 01       	movw	r24, r16
    2156:	96 dc       	rcall	.-1748   	; 0x1a84 <_ZN17cmdProcessorClass9parseMoveEv>
    2158:	5c 01       	movw	r10, r24
    215a:	02 97       	sbiw	r24, 0x02	; 2
    215c:	83 36       	cpi	r24, 0x63	; 99
    215e:	91 05       	cpc	r25, r1
    2160:	18 f0       	brcs	.+6      	; 0x2168 <_ZN17cmdProcessorClass11readCommandEv+0x644>
        int speedPct = parseMove();
    2162:	64 e6       	ldi	r22, 0x64	; 100
    2164:	7a e0       	ldi	r23, 0x0A	; 10
    2166:	cf c6       	rjmp	.+3486   	; 0x2f06 <__stack+0xd07>
    2168:	c0 90 6e 07 	lds	r12, 0x076E
        if (speedPct < 2 || speedPct > 100) {
    216c:	d0 90 6f 07 	lds	r13, 0x076F
    2170:	e0 90 70 07 	lds	r14, 0x0770
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
    2174:	f0 90 71 07 	lds	r15, 0x0771
  void setDTerm(unsigned int n);
  void setPIDScalar(unsigned int n);
  void setVFF(unsigned int n);
  void storeTuning();

  double getCurrPos() { return m_currPos; }
    2178:	40 90 a7 06 	lds	r4, 0x06A7
    217c:	50 90 a8 06 	lds	r5, 0x06A8
    2180:	60 90 a9 06 	lds	r6, 0x06A9
    2184:	70 90 aa 06 	lds	r7, 0x06AA
        } else {
        if ( (MCtrl.getCurrPos() < moveTarget) && (MCtrl.isNoLower() || MCtrl.isBrake() )) { 
    2188:	a3 01       	movw	r20, r6
    218a:	92 01       	movw	r18, r4
    218c:	c7 01       	movw	r24, r14
    218e:	b6 01       	movw	r22, r12
    2190:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2194:	87 fd       	sbrc	r24, 7
    2196:	02 c0       	rjmp	.+4      	; 0x219c <_ZN17cmdProcessorClass11readCommandEv+0x678>
    2198:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__stack+0x1051>
    219c:	80 91 76 07 	lds	r24, 0x0776
    21a0:	90 91 77 07 	lds	r25, 0x0777
    21a4:	86 70       	andi	r24, 0x06	; 6
    21a6:	99 27       	eor	r25, r25
    21a8:	89 2b       	or	r24, r25
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <_ZN17cmdProcessorClass11readCommandEv+0x68c>
    21ac:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__stack+0x1051>
    21b0:	66 e3       	ldi	r22, 0x36	; 54
    21b2:	7a e0       	ldi	r23, 0x0A	; 10
    21b4:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    21b8:	67 eb       	ldi	r22, 0xB7	; 183
    21ba:	72 e0       	ldi	r23, 0x02	; 2
    21bc:	c7 01       	movw	r24, r14
    21be:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
    21c2:	89 2b       	or	r24, r25
    21c4:	a1 f4       	brne	.+40     	; 0x21ee <_ZN17cmdProcessorClass11readCommandEv+0x6ca>
    21c6:	c8 01       	movw	r24, r16
          Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
          checkIfMoving();
        }}}
      } else {
        
      if ( strcmp(pch, "move_to_position") == 0) {
    21c8:	5d dc       	rcall	.-1862   	; 0x1a84 <_ZN17cmdProcessorClass9parseMoveEv>
    21ca:	5c 01       	movw	r10, r24
    21cc:	92 e0       	ldi	r25, 0x02	; 2
    21ce:	a9 16       	cp	r10, r25
    21d0:	b1 04       	cpc	r11, r1
    21d2:	14 f4       	brge	.+4      	; 0x21d8 <_ZN17cmdProcessorClass11readCommandEv+0x6b4>
    21d4:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__stack+0x10ed>
        int speedPct = parseMove();
    21d8:	80 91 b3 06 	lds	r24, 0x06B3
    21dc:	90 91 b4 06 	lds	r25, 0x06B4
        if (speedPct < 2 || speedPct > posFB.getFeedbackMaxSpeed()) {
    21e0:	8a 15       	cp	r24, r10
    21e2:	9b 05       	cpc	r25, r11
    21e4:	14 f4       	brge	.+4      	; 0x21ea <_ZN17cmdProcessorClass11readCommandEv+0x6c6>
    21e6:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__stack+0x10ed>
    21ea:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__stack+0x1129>
    21ee:	68 ec       	ldi	r22, 0xC8	; 200
    21f0:	72 e0       	ldi	r23, 0x02	; 2
    21f2:	c7 01       	movw	r24, r14
    21f4:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    21f8:	89 2b       	or	r24, r25
    21fa:	59 f4       	brne	.+22     	; 0x2212 <__stack+0x13>
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
            Ethernet1.getCmdClient().println(F(" No recent position feedback."));
          }
        }}}
      } else {
        
      if ( strcmp(pch, "set_zero") == 0) {
    2200:	ba 01       	movw	r22, r20
    2202:	8e e6       	ldi	r24, 0x6E	; 110
    2204:	97 e0       	ldi	r25, 0x07	; 7
    2206:	0e 94 91 23 	call	0x4722	; 0x4722 <_ZN8MM3Class6setPosEd>
    220a:	64 eb       	ldi	r22, 0xB4	; 180
    220c:	78 e0       	ldi	r23, 0x08	; 8
        MCtrl.setPos(0);
    220e:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    2212:	61 ed       	ldi	r22, 0xD1	; 209
    2214:	72 e0       	ldi	r23, 0x02	; 2
    2216:	c7 01       	movw	r24, r14
    2218:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
        Ethernet1.getCmdClient().println(F("Current positon set to zero."));
    221c:	89 2b       	or	r24, r25
    221e:	09 f0       	breq	.+2      	; 0x2222 <__stack+0x23>
    2220:	60 c0       	rjmp	.+192    	; 0x22e2 <__stack+0xe3>
    2222:	6c e0       	ldi	r22, 0x0C	; 12
      } else {
        
      if ( strcmp(pch, "amps_limit") == 0) {
    2224:	72 e0       	ldi	r23, 0x02	; 2
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    222e:	7c 01       	movw	r14, r24
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	49 f4       	brne	.+18     	; 0x2246 <__stack+0x47>
        pch = strtok(NULL, " \r\n");  // get the next token
    2234:	40 91 80 07 	lds	r20, 0x0780
    2238:	50 91 81 07 	lds	r21, 0x0781
    223c:	60 91 82 07 	lds	r22, 0x0782
    2240:	70 91 83 07 	lds	r23, 0x0783

        if (pch == 0) {
    2244:	dd c4       	rjmp	.+2490   	; 0x2c00 <__stack+0xa01>
          Ethernet1.getCmdClient().println(MCtrl.getAmpsLimit());
    2246:	0e 94 9c 5b 	call	0xb738	; 0xb738 <atof>
    224a:	5b 01       	movw	r10, r22
    224c:	6c 01       	movw	r12, r24
    224e:	b7 01       	movw	r22, r14
    2250:	ce 01       	movw	r24, r28
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
        } else {
          float al = atof(pch);
    2258:	ce 01       	movw	r24, r28
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
          if (!isValidNumber(pch) || al <= 0) {  // must be greater than zero (zero disables)
    2260:	ff 24       	eor	r15, r15
    2262:	f3 94       	inc	r15
    2264:	88 23       	and	r24, r24
    2266:	51 f0       	breq	.+20     	; 0x227c <__stack+0x7d>
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	a9 01       	movw	r20, r18
    226e:	b5 01       	movw	r22, r10
    2270:	c6 01       	movw	r24, r12
    2272:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2276:	18 16       	cp	r1, r24
    2278:	0c f4       	brge	.+2      	; 0x227c <__stack+0x7d>
    227a:	f1 2c       	mov	r15, r1
    227c:	ce 01       	movw	r24, r28
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2284:	ff 20       	and	r15, r15
    2286:	19 f0       	breq	.+6      	; 0x228e <__stack+0x8f>
    2288:	66 ea       	ldi	r22, 0xA6	; 166
    228a:	78 e0       	ldi	r23, 0x08	; 8
    228c:	3c c6       	rjmp	.+3192   	; 0x2f06 <__stack+0xd07>
    228e:	80 90 0f 05 	lds	r8, 0x050F
    2292:	90 90 10 05 	lds	r9, 0x0510
    2296:	e0 90 11 05 	lds	r14, 0x0511
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
    229a:	f0 90 12 05 	lds	r15, 0x0512
    229e:	94 01       	movw	r18, r8
          } else {
            if (al > MCtrl.MAX_AMPS) { al = MCtrl.MAX_AMPS; }  // can't go over MAX_AMPS
    22a0:	a7 01       	movw	r20, r14
    22a2:	b5 01       	movw	r22, r10
    22a4:	c6 01       	movw	r24, r12
    22a6:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	14 f0       	brlt	.+4      	; 0x22b2 <__stack+0xb3>
    22ae:	45 01       	movw	r8, r10
    22b0:	76 01       	movw	r14, r12
    22b2:	a4 01       	movw	r20, r8
    22b4:	b7 01       	movw	r22, r14
    22b6:	8e e6       	ldi	r24, 0x6E	; 110
    22b8:	97 e0       	ldi	r25, 0x07	; 7
    22ba:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <_ZN8MM3Class12setAmpsLimitEf>
    22be:	6a e8       	ldi	r22, 0x8A	; 138
        pch = strtok(NULL, " \r\n");  // get the next token

        if (pch == 0) {
          Ethernet1.getCmdClient().println(MCtrl.getAmpsLimit());
        } else {
          float al = atof(pch);
    22c0:	78 e0       	ldi	r23, 0x08	; 8
    22c2:	8a ed       	ldi	r24, 0xDA	; 218
          if (!isValidNumber(pch) || al <= 0) {  // must be greater than zero (zero disables)
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
          } else {
            if (al > MCtrl.MAX_AMPS) { al = MCtrl.MAX_AMPS; }  // can't go over MAX_AMPS
            MCtrl.setAmpsLimit(al);            
    22c4:	97 e0       	ldi	r25, 0x07	; 7
    22c6:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    22ca:	22 e0       	ldi	r18, 0x02	; 2
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	a4 01       	movw	r20, r8
            Ethernet1.getCmdClient().print(F("Motor current limit set to ")); Ethernet1.getCmdClient().print(al);
    22d0:	b7 01       	movw	r22, r14
    22d2:	8a ed       	ldi	r24, 0xDA	; 218
    22d4:	97 e0       	ldi	r25, 0x07	; 7
    22d6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    22da:	63 e8       	ldi	r22, 0x83	; 131
    22dc:	78 e0       	ldi	r23, 0x08	; 8
    22de:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    22e2:	6c ed       	ldi	r22, 0xDC	; 220
    22e4:	72 e0       	ldi	r23, 0x02	; 2
    22e6:	c7 01       	movw	r24, r14
    22e8:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
            Ethernet1.getCmdClient().println(F(" amps."));
    22ec:	89 2b       	or	r24, r25
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <__stack+0xf3>
    22f0:	c3 c0       	rjmp	.+390    	; 0x2478 <__stack+0x279>
    22f2:	6c e0       	ldi	r22, 0x0C	; 12
          }
        }
      } else {
        
      if ( strcmp(pch, "max_revolutions") == 0) {
    22f4:	72 e0       	ldi	r23, 0x02	; 2
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    22fe:	5c 01       	movw	r10, r24
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	49 f4       	brne	.+18     	; 0x2316 <__stack+0x117>
        pch = strtok(NULL, " \r\n");  // get the next token
    2304:	40 91 8d 07 	lds	r20, 0x078D
    2308:	50 91 8e 07 	lds	r21, 0x078E
    230c:	60 91 8f 07 	lds	r22, 0x078F
    2310:	70 91 90 07 	lds	r23, 0x0790

        if (pch == 0) {
    2314:	75 c4       	rjmp	.+2282   	; 0x2c00 <__stack+0xa01>
          Ethernet1.getCmdClient().println(Motor.getMaxRevolutions());
    2316:	0e 94 9c 5b 	call	0xb738	; 0xb738 <atof>
    231a:	6b 01       	movw	r12, r22
    231c:	7c 01       	movw	r14, r24
    231e:	b5 01       	movw	r22, r10
    2320:	ce 01       	movw	r24, r28
    2322:	01 96       	adiw	r24, 0x01	; 1
    2324:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
        } else {
          float mr = atof(pch);
    2328:	ce 01       	movw	r24, r28
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
          if (!isValidNumber(pch) || mr <= 0) {  // must be greater than zero
    2330:	bb 24       	eor	r11, r11
    2332:	b3 94       	inc	r11
    2334:	88 23       	and	r24, r24
    2336:	51 f0       	breq	.+20     	; 0x234c <__stack+0x14d>
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	c7 01       	movw	r24, r14
    2340:	b6 01       	movw	r22, r12
    2342:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2346:	18 16       	cp	r1, r24
    2348:	0c f4       	brge	.+2      	; 0x234c <__stack+0x14d>
    234a:	b1 2c       	mov	r11, r1
    234c:	ce 01       	movw	r24, r28
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2354:	bb 20       	and	r11, r11
    2356:	79 f0       	breq	.+30     	; 0x2376 <__stack+0x177>
    2358:	65 e7       	ldi	r22, 0x75	; 117
    235a:	78 e0       	ldi	r23, 0x08	; 8
    235c:	8a ed       	ldi	r24, 0xDA	; 218
    235e:	97 e0       	ldi	r25, 0x07	; 7
    2360:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2364:	b8 01       	movw	r22, r16
    2366:	8a ed       	ldi	r24, 0xDA	; 218
    2368:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    236a:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    236e:	6f e4       	ldi	r22, 0x4F	; 79
    2370:	78 e0       	ldi	r23, 0x08	; 8
    2372:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    2376:	b7 01       	movw	r22, r14
    2378:	a6 01       	movw	r20, r12
    237a:	85 e8       	ldi	r24, 0x85	; 133
    237c:	97 e0       	ldi	r25, 0x07	; 7
    237e:	0e 94 92 29 	call	0x5324	; 0x5324 <_ZN10MotorClass17setMaxRevolutionsEd>
            Ethernet1.getCmdClient().println(F("  Must be a number greater than zero."));
    2382:	60 91 85 07 	lds	r22, 0x0785
    2386:	70 91 86 07 	lds	r23, 0x0786
          } else {
            Motor.setMaxRevolutions(mr);
    238a:	80 91 87 07 	lds	r24, 0x0787
    238e:	90 91 88 07 	lds	r25, 0x0788
    2392:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>

            // Create virtual limits that will be slightly larger than the max revolutions value
            // as a failsafe in case the arduino crashes while moving.
            MCtrl.setVirtualNegativeLimit(long(-1 * Motor.getMaxRevolutions()*Motor.getCPR()) - long(0.25*Motor.getCPR()));
    2396:	6b 01       	movw	r12, r22
    2398:	7c 01       	movw	r14, r24
    239a:	80 91 8d 07 	lds	r24, 0x078D
    239e:	90 91 8e 07 	lds	r25, 0x078E
    23a2:	a0 91 8f 07 	lds	r26, 0x078F
    23a6:	b0 91 90 07 	lds	r27, 0x0790
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	90 58       	subi	r25, 0x80	; 128
    23b0:	a7 01       	movw	r20, r14
    23b2:	96 01       	movw	r18, r12
    23b4:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    23b8:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    23bc:	4b 01       	movw	r8, r22
    23be:	5c 01       	movw	r10, r24
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5e e3       	ldi	r21, 0x3E	; 62
    23c8:	c7 01       	movw	r24, r14
    23ca:	b6 01       	movw	r22, r12
    23cc:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    23d0:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    23d4:	75 01       	movw	r14, r10
    23d6:	64 01       	movw	r12, r8
    23d8:	c6 1a       	sub	r12, r22
    23da:	d7 0a       	sbc	r13, r23
    23dc:	e8 0a       	sbc	r14, r24
    23de:	f9 0a       	sbc	r15, r25
    23e0:	b7 01       	movw	r22, r14
    23e2:	a6 01       	movw	r20, r12
    23e4:	8e e6       	ldi	r24, 0x6E	; 110
    23e6:	97 e0       	ldi	r25, 0x07	; 7
    23e8:	0e 94 ef 23 	call	0x47de	; 0x47de <_ZN8MM3Class23setVirtualNegativeLimitEl>
    23ec:	60 91 85 07 	lds	r22, 0x0785
    23f0:	70 91 86 07 	lds	r23, 0x0786
    23f4:	80 91 87 07 	lds	r24, 0x0787
    23f8:	90 91 88 07 	lds	r25, 0x0788
    23fc:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
            MCtrl.setVirtualPositiveLimit(long(     Motor.getMaxRevolutions()*Motor.getCPR()) + long(0.25*Motor.getCPR()));
    2400:	6b 01       	movw	r12, r22
    2402:	7c 01       	movw	r14, r24
    2404:	20 91 8d 07 	lds	r18, 0x078D
    2408:	30 91 8e 07 	lds	r19, 0x078E
    240c:	40 91 8f 07 	lds	r20, 0x078F
    2410:	50 91 90 07 	lds	r21, 0x0790
    2414:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    2418:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    241c:	4b 01       	movw	r8, r22
    241e:	5c 01       	movw	r10, r24
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5e e3       	ldi	r21, 0x3E	; 62
    2428:	c7 01       	movw	r24, r14
    242a:	b6 01       	movw	r22, r12
    242c:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    2430:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    2434:	ab 01       	movw	r20, r22
    2436:	bc 01       	movw	r22, r24
    2438:	48 0d       	add	r20, r8
    243a:	59 1d       	adc	r21, r9
    243c:	6a 1d       	adc	r22, r10
    243e:	7b 1d       	adc	r23, r11
    2440:	8e e6       	ldi	r24, 0x6E	; 110
    2442:	97 e0       	ldi	r25, 0x07	; 7
    2444:	0e 94 35 24 	call	0x486a	; 0x486a <_ZN8MM3Class23setVirtualPositiveLimitEl>
    2448:	67 e3       	ldi	r22, 0x37	; 55
    244a:	78 e0       	ldi	r23, 0x08	; 8
    244c:	8a ed       	ldi	r24, 0xDA	; 218
    244e:	97 e0       	ldi	r25, 0x07	; 7
    2450:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2454:	40 91 8d 07 	lds	r20, 0x078D
    2458:	50 91 8e 07 	lds	r21, 0x078E

            Ethernet1.getCmdClient().print(F("Max revolutions set to ")); Ethernet1.getCmdClient().print(Motor.getMaxRevolutions());
    245c:	60 91 8f 07 	lds	r22, 0x078F
    2460:	70 91 90 07 	lds	r23, 0x0790
    2464:	22 e0       	ldi	r18, 0x02	; 2
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	8a ed       	ldi	r24, 0xDA	; 218
    246a:	97 e0       	ldi	r25, 0x07	; 7
    246c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    2470:	69 e2       	ldi	r22, 0x29	; 41
    2472:	78 e0       	ldi	r23, 0x08	; 8
    2474:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <__stack+0x1291>
    2478:	6c ee       	ldi	r22, 0xEC	; 236
    247a:	72 e0       	ldi	r23, 0x02	; 2
    247c:	c7 01       	movw	r24, r14
    247e:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
            Ethernet1.getCmdClient().println(F(" revolutions."));
    2482:	89 2b       	or	r24, r25
    2484:	09 f0       	breq	.+2      	; 0x2488 <__stack+0x289>
    2486:	47 c0       	rjmp	.+142    	; 0x2516 <__stack+0x317>
    2488:	6c e0       	ldi	r22, 0x0C	; 12
          }        
        }
      } else {
        
      if ( strcmp(pch, "pterm") == 0) {
    248a:	72 e0       	ldi	r23, 0x02	; 2
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    2494:	5c 01       	movw	r10, r24
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	19 f4       	brne	.+6      	; 0x24a0 <__stack+0x2a1>
        pch = strtok(NULL, " \r\n");  // get the next token
    249a:	62 ef       	ldi	r22, 0xF2	; 242
    249c:	72 e0       	ldi	r23, 0x02	; 2
    249e:	4e c0       	rjmp	.+156    	; 0x253c <__stack+0x33d>
    24a0:	0e 94 bc 5b 	call	0xb778	; 0xb778 <atol>
    24a4:	6b 01       	movw	r12, r22
    24a6:	7c 01       	movw	r14, r24

        if (pch == 0) {
    24a8:	b5 01       	movw	r22, r10
    24aa:	ce 01       	movw	r24, r28

  void init();

  void readController();

  unsigned int getPTerm() { return readRegister("04"); }
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
          Ethernet1.getCmdClient().println(MCtrl.getPTerm());
        } else {
          long p = atol(pch);
    24b2:	ce 01       	movw	r24, r28
    24b4:	01 96       	adiw	r24, 0x01	; 1
    24b6:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
          if (!isValidNumber(pch) || p < 0 || p > 65535) {  // must be positive int
    24ba:	21 e0       	ldi	r18, 0x01	; 1
    24bc:	88 23       	and	r24, r24
    24be:	49 f0       	breq	.+18     	; 0x24d2 <__stack+0x2d3>
    24c0:	f7 fc       	sbrc	r15, 7
    24c2:	07 c0       	rjmp	.+14     	; 0x24d2 <__stack+0x2d3>
    24c4:	c1 14       	cp	r12, r1
    24c6:	d1 04       	cpc	r13, r1
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	e8 06       	cpc	r14, r24
    24cc:	f1 04       	cpc	r15, r1
    24ce:	0c f4       	brge	.+2      	; 0x24d2 <__stack+0x2d3>
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	ce 01       	movw	r24, r28
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	a9 96       	adiw	r28, 0x29	; 41
    24d8:	2f af       	std	Y+63, r18	; 0x3f
    24da:	a9 97       	sbiw	r28, 0x29	; 41
    24dc:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    24e0:	a9 96       	adiw	r28, 0x29	; 41
    24e2:	2f ad       	ldd	r18, Y+63	; 0x3f
    24e4:	a9 97       	sbiw	r28, 0x29	; 41
    24e6:	22 23       	and	r18, r18
    24e8:	71 f0       	breq	.+28     	; 0x2506 <__stack+0x307>
    24ea:	6b e1       	ldi	r22, 0x1B	; 27
    24ec:	78 e0       	ldi	r23, 0x08	; 8
    24ee:	8a ed       	ldi	r24, 0xDA	; 218
    24f0:	97 e0       	ldi	r25, 0x07	; 7
    24f2:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    24f6:	b8 01       	movw	r22, r16
    24f8:	8a ed       	ldi	r24, 0xDA	; 218
    24fa:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    24fc:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    2500:	60 ef       	ldi	r22, 0xF0	; 240
    2502:	77 e0       	ldi	r23, 0x07	; 7
    2504:	c5 c7       	rjmp	.+3978   	; 0x3490 <__stack+0x1291>
    2506:	b6 01       	movw	r22, r12
    2508:	8e e6       	ldi	r24, 0x6E	; 110
    250a:	97 e0       	ldi	r25, 0x07	; 7
    250c:	0e 94 14 21 	call	0x4228	; 0x4228 <_ZN8MM3Class8setPTermEj>
    2510:	60 ee       	ldi	r22, 0xE0	; 224
            Ethernet1.getCmdClient().println(F("  Must be an integer from 0 through 65535."));
    2512:	77 e0       	ldi	r23, 0x07	; 7
    2514:	dd c2       	rjmp	.+1466   	; 0x2ad0 <__stack+0x8d1>
    2516:	65 ef       	ldi	r22, 0xF5	; 245
          } else {
            MCtrl.setPTerm(p);
    2518:	72 e0       	ldi	r23, 0x02	; 2
    251a:	c7 01       	movw	r24, r14
    251c:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2520:	89 2b       	or	r24, r25
            Ethernet1.getCmdClient().print(F("P term set to: ")); Ethernet1.getCmdClient().println(p);
    2522:	09 f0       	breq	.+2      	; 0x2526 <__stack+0x327>
    2524:	5b c0       	rjmp	.+182    	; 0x25dc <__stack+0x3dd>
    2526:	6c e0       	ldi	r22, 0x0C	; 12
          }        
        }
      } else {
        
      if ( strcmp(pch, "iterm") == 0) {
    2528:	72 e0       	ldi	r23, 0x02	; 2
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    2532:	5c 01       	movw	r10, r24
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	b9 f4       	brne	.+46     	; 0x2566 <__stack+0x367>
        pch = strtok(NULL, " \r\n");  // get the next token
    2538:	6b ef       	ldi	r22, 0xFB	; 251
    253a:	72 e0       	ldi	r23, 0x02	; 2
    253c:	ce 01       	movw	r24, r28
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    2544:	be 01       	movw	r22, r28

        if (pch == 0) {
    2546:	6f 5f       	subi	r22, 0xFF	; 255
    2548:	7f 4f       	sbci	r23, 0xFF	; 255
  unsigned int getITerm() { return readRegister("05"); }
    254a:	8e e6       	ldi	r24, 0x6E	; 110
    254c:	97 e0       	ldi	r25, 0x07	; 7
    254e:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    2552:	6b 01       	movw	r12, r22
    2554:	7c 01       	movw	r14, r24
    2556:	ce 01       	movw	r24, r28
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    255e:	4a e0       	ldi	r20, 0x0A	; 10
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	b6 01       	movw	r22, r12
    2564:	55 c1       	rjmp	.+682    	; 0x2810 <__stack+0x611>
    2566:	0e 94 bc 5b 	call	0xb778	; 0xb778 <atol>
    256a:	6b 01       	movw	r12, r22
    256c:	7c 01       	movw	r14, r24
    256e:	b5 01       	movw	r22, r10
          Ethernet1.getCmdClient().println(MCtrl.getITerm());
    2570:	ce 01       	movw	r24, r28
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
        } else {
          long it = atol(pch);
    2578:	ce 01       	movw	r24, r28
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
          if (!isValidNumber(pch) || it < 0 || it > 65535) {  // must be positive int
    2580:	21 e0       	ldi	r18, 0x01	; 1
    2582:	88 23       	and	r24, r24
    2584:	49 f0       	breq	.+18     	; 0x2598 <__stack+0x399>
    2586:	f7 fc       	sbrc	r15, 7
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <__stack+0x399>
    258a:	c1 14       	cp	r12, r1
    258c:	d1 04       	cpc	r13, r1
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	e9 06       	cpc	r14, r25
    2592:	f1 04       	cpc	r15, r1
    2594:	0c f4       	brge	.+2      	; 0x2598 <__stack+0x399>
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	ce 01       	movw	r24, r28
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	a9 96       	adiw	r28, 0x29	; 41
    259e:	2f af       	std	Y+63, r18	; 0x3f
    25a0:	a9 97       	sbiw	r28, 0x29	; 41
    25a2:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    25a6:	a9 96       	adiw	r28, 0x29	; 41
    25a8:	2f ad       	ldd	r18, Y+63	; 0x3f
    25aa:	a9 97       	sbiw	r28, 0x29	; 41
    25ac:	22 23       	and	r18, r18
    25ae:	71 f0       	breq	.+28     	; 0x25cc <__stack+0x3cd>
    25b0:	62 ed       	ldi	r22, 0xD2	; 210
    25b2:	77 e0       	ldi	r23, 0x07	; 7
    25b4:	8a ed       	ldi	r24, 0xDA	; 218
    25b6:	97 e0       	ldi	r25, 0x07	; 7
    25b8:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    25bc:	b8 01       	movw	r22, r16
    25be:	8a ed       	ldi	r24, 0xDA	; 218
    25c0:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    25c2:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    25c6:	67 ea       	ldi	r22, 0xA7	; 167
    25c8:	77 e0       	ldi	r23, 0x07	; 7
    25ca:	62 c7       	rjmp	.+3780   	; 0x3490 <__stack+0x1291>
    25cc:	b6 01       	movw	r22, r12
    25ce:	8e e6       	ldi	r24, 0x6E	; 110
    25d0:	97 e0       	ldi	r25, 0x07	; 7
    25d2:	0e 94 53 21 	call	0x42a6	; 0x42a6 <_ZN8MM3Class8setITermEj>
    25d6:	67 e9       	ldi	r22, 0x97	; 151
            Ethernet1.getCmdClient().println(F("  Must be an integer from 0 through 65535."));
    25d8:	77 e0       	ldi	r23, 0x07	; 7
    25da:	7a c2       	rjmp	.+1268   	; 0x2ad0 <__stack+0x8d1>
    25dc:	6e ef       	ldi	r22, 0xFE	; 254
          } else {
            MCtrl.setITerm(it);
    25de:	72 e0       	ldi	r23, 0x02	; 2
    25e0:	c7 01       	movw	r24, r14
    25e2:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    25e6:	89 2b       	or	r24, r25
            Ethernet1.getCmdClient().print(F("I term set to: "));  Ethernet1.getCmdClient().println(it);
    25e8:	09 f0       	breq	.+2      	; 0x25ec <__stack+0x3ed>
    25ea:	47 c0       	rjmp	.+142    	; 0x267a <__stack+0x47b>
    25ec:	6c e0       	ldi	r22, 0x0C	; 12
          }        
        }
      } else {
        
      if ( strcmp(pch, "dterm") == 0) {
    25ee:	72 e0       	ldi	r23, 0x02	; 2
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    25f8:	5c 01       	movw	r10, r24
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	19 f4       	brne	.+6      	; 0x2604 <__stack+0x405>
        pch = strtok(NULL, " \r\n");  // get the next token
    25fe:	64 e0       	ldi	r22, 0x04	; 4
    2600:	73 e0       	ldi	r23, 0x03	; 3
    2602:	9c cf       	rjmp	.-200    	; 0x253c <__stack+0x33d>
    2604:	0e 94 bc 5b 	call	0xb778	; 0xb778 <atol>
    2608:	6b 01       	movw	r12, r22
    260a:	7c 01       	movw	r14, r24

        if (pch == 0) {
    260c:	b5 01       	movw	r22, r10
    260e:	ce 01       	movw	r24, r28
  unsigned int getDTerm() { return readRegister("06"); }
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
          Ethernet1.getCmdClient().println(MCtrl.getDTerm());
        } else {
          long d = atol(pch);
    2616:	ce 01       	movw	r24, r28
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
          if (!isValidNumber(pch) || d < 0 || d > 65535) {  // must be positive int
    261e:	21 e0       	ldi	r18, 0x01	; 1
    2620:	88 23       	and	r24, r24
    2622:	49 f0       	breq	.+18     	; 0x2636 <__stack+0x437>
    2624:	f7 fc       	sbrc	r15, 7
    2626:	07 c0       	rjmp	.+14     	; 0x2636 <__stack+0x437>
    2628:	c1 14       	cp	r12, r1
    262a:	d1 04       	cpc	r13, r1
    262c:	e1 e0       	ldi	r30, 0x01	; 1
    262e:	ee 06       	cpc	r14, r30
    2630:	f1 04       	cpc	r15, r1
    2632:	0c f4       	brge	.+2      	; 0x2636 <__stack+0x437>
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	ce 01       	movw	r24, r28
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	a9 96       	adiw	r28, 0x29	; 41
    263c:	2f af       	std	Y+63, r18	; 0x3f
    263e:	a9 97       	sbiw	r28, 0x29	; 41
    2640:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2644:	a9 96       	adiw	r28, 0x29	; 41
    2646:	2f ad       	ldd	r18, Y+63	; 0x3f
    2648:	a9 97       	sbiw	r28, 0x29	; 41
    264a:	22 23       	and	r18, r18
    264c:	71 f0       	breq	.+28     	; 0x266a <__stack+0x46b>
    264e:	69 e8       	ldi	r22, 0x89	; 137
    2650:	77 e0       	ldi	r23, 0x07	; 7
    2652:	8a ed       	ldi	r24, 0xDA	; 218
    2654:	97 e0       	ldi	r25, 0x07	; 7
    2656:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    265a:	b8 01       	movw	r22, r16
    265c:	8a ed       	ldi	r24, 0xDA	; 218
    265e:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    2660:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    2664:	6e e5       	ldi	r22, 0x5E	; 94
    2666:	77 e0       	ldi	r23, 0x07	; 7
    2668:	13 c7       	rjmp	.+3622   	; 0x3490 <__stack+0x1291>
    266a:	b6 01       	movw	r22, r12
    266c:	8e e6       	ldi	r24, 0x6E	; 110
    266e:	97 e0       	ldi	r25, 0x07	; 7
    2670:	0e 94 92 21 	call	0x4324	; 0x4324 <_ZN8MM3Class8setDTermEj>
    2674:	6e e4       	ldi	r22, 0x4E	; 78
            Ethernet1.getCmdClient().println(F("  Must be an integer from 0 through 65535."));
    2676:	77 e0       	ldi	r23, 0x07	; 7
    2678:	2b c2       	rjmp	.+1110   	; 0x2ad0 <__stack+0x8d1>
    267a:	67 e0       	ldi	r22, 0x07	; 7
          } else {
            MCtrl.setDTerm(d);
    267c:	73 e0       	ldi	r23, 0x03	; 3
    267e:	c7 01       	movw	r24, r14
    2680:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2684:	89 2b       	or	r24, r25
            Ethernet1.getCmdClient().print(F("D term set to: "));  Ethernet1.getCmdClient().println(d);
    2686:	09 f0       	breq	.+2      	; 0x268a <__stack+0x48b>
    2688:	44 c0       	rjmp	.+136    	; 0x2712 <__stack+0x513>
    268a:	6c e0       	ldi	r22, 0x0C	; 12
          }        
        }
      } else {
        
      if ( strcmp(pch, "pidscalar") == 0) {
    268c:	72 e0       	ldi	r23, 0x02	; 2
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    2696:	6c 01       	movw	r12, r24
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	19 f4       	brne	.+6      	; 0x26a2 <__stack+0x4a3>
        pch = strtok(NULL, " \r\n");  // get the next token
    269c:	61 e1       	ldi	r22, 0x11	; 17
    269e:	73 e0       	ldi	r23, 0x03	; 3
    26a0:	4d cf       	rjmp	.-358    	; 0x253c <__stack+0x33d>
    26a2:	0e 94 9f 5b 	call	0xb73e	; 0xb73e <atoi>
    26a6:	7c 01       	movw	r14, r24
    26a8:	b6 01       	movw	r22, r12

        if (pch == 0) {
    26aa:	ce 01       	movw	r24, r28
    26ac:	01 96       	adiw	r24, 0x01	; 1
  unsigned int getPIDScalar() { return readRegister("08"); }
    26ae:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    26b2:	ce 01       	movw	r24, r28
          Ethernet1.getCmdClient().println(MCtrl.getPIDScalar());
        } else {
          int p = atoi(pch);
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
          if (!isValidNumber(pch) || p < 0 || p > 32) {  // must be positive int
    26ba:	21 e0       	ldi	r18, 0x01	; 1
    26bc:	88 23       	and	r24, r24
    26be:	39 f0       	breq	.+14     	; 0x26ce <__stack+0x4cf>
    26c0:	f7 fc       	sbrc	r15, 7
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <__stack+0x4cf>
    26c4:	f1 e2       	ldi	r31, 0x21	; 33
    26c6:	ef 16       	cp	r14, r31
    26c8:	f1 04       	cpc	r15, r1
    26ca:	0c f4       	brge	.+2      	; 0x26ce <__stack+0x4cf>
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	ce 01       	movw	r24, r28
    26d0:	01 96       	adiw	r24, 0x01	; 1
    26d2:	a9 96       	adiw	r28, 0x29	; 41
    26d4:	2f af       	std	Y+63, r18	; 0x3f
    26d6:	a9 97       	sbiw	r28, 0x29	; 41
    26d8:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    26dc:	a9 96       	adiw	r28, 0x29	; 41
    26de:	2f ad       	ldd	r18, Y+63	; 0x3f
    26e0:	a9 97       	sbiw	r28, 0x29	; 41
    26e2:	22 23       	and	r18, r18
    26e4:	71 f0       	breq	.+28     	; 0x2702 <__stack+0x503>
    26e6:	60 e4       	ldi	r22, 0x40	; 64
    26e8:	77 e0       	ldi	r23, 0x07	; 7
    26ea:	8a ed       	ldi	r24, 0xDA	; 218
    26ec:	97 e0       	ldi	r25, 0x07	; 7
    26ee:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    26f2:	b8 01       	movw	r22, r16
    26f4:	8a ed       	ldi	r24, 0xDA	; 218
    26f6:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    26f8:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    26fc:	68 e1       	ldi	r22, 0x18	; 24
    26fe:	77 e0       	ldi	r23, 0x07	; 7
    2700:	c7 c6       	rjmp	.+3470   	; 0x3490 <__stack+0x1291>
    2702:	b7 01       	movw	r22, r14
    2704:	8e e6       	ldi	r24, 0x6E	; 110
    2706:	97 e0       	ldi	r25, 0x07	; 7
    2708:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <_ZN8MM3Class12setPIDScalarEj>
    270c:	65 e0       	ldi	r22, 0x05	; 5
            Ethernet1.getCmdClient().println(F("  Must be an integer from 0 through 32."));
    270e:	77 e0       	ldi	r23, 0x07	; 7
    2710:	4c c0       	rjmp	.+152    	; 0x27aa <__stack+0x5ab>
    2712:	64 e1       	ldi	r22, 0x14	; 20
          } else {
            MCtrl.setPIDScalar(p);
    2714:	73 e0       	ldi	r23, 0x03	; 3
    2716:	c7 01       	movw	r24, r14
    2718:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    271c:	89 2b       	or	r24, r25
            Ethernet1.getCmdClient().print(F("PIDSCALAR set to: "));  Ethernet1.getCmdClient().println(p);
    271e:	09 f0       	breq	.+2      	; 0x2722 <__stack+0x523>
    2720:	50 c0       	rjmp	.+160    	; 0x27c2 <__stack+0x5c3>
    2722:	6c e0       	ldi	r22, 0x0C	; 12
          }        
        }
      } else {
        
      if ( strcmp(pch, "vff") == 0) {
    2724:	72 e0       	ldi	r23, 0x02	; 2
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    272e:	6c 01       	movw	r12, r24
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	19 f4       	brne	.+6      	; 0x273a <__stack+0x53b>
        pch = strtok(NULL, " \r\n");  // get the next token
    2734:	68 e1       	ldi	r22, 0x18	; 24
    2736:	73 e0       	ldi	r23, 0x03	; 3
    2738:	01 cf       	rjmp	.-510    	; 0x253c <__stack+0x33d>
    273a:	0e 94 9f 5b 	call	0xb73e	; 0xb73e <atoi>
    273e:	7c 01       	movw	r14, r24
    2740:	b6 01       	movw	r22, r12

        if (pch == 0) {
    2742:	ce 01       	movw	r24, r28
    2744:	01 96       	adiw	r24, 0x01	; 1
  unsigned int getVFF() { return readRegister("02"); }
    2746:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    274a:	ce 01       	movw	r24, r28
          Ethernet1.getCmdClient().println(MCtrl.getVFF());
        } else {
          int p = atoi(pch);
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
          if (!isValidNumber(pch) || p < 0 || p > 255) {  // must be positive int
    2752:	21 e0       	ldi	r18, 0x01	; 1
    2754:	88 23       	and	r24, r24
    2756:	41 f0       	breq	.+16     	; 0x2768 <__stack+0x569>
    2758:	f7 fc       	sbrc	r15, 7
    275a:	06 c0       	rjmp	.+12     	; 0x2768 <__stack+0x569>
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	e8 16       	cp	r14, r24
    2760:	f1 04       	cpc	r15, r1
    2762:	09 f0       	breq	.+2      	; 0x2766 <__stack+0x567>
    2764:	0c f4       	brge	.+2      	; 0x2768 <__stack+0x569>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	ce 01       	movw	r24, r28
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	a9 96       	adiw	r28, 0x29	; 41
    276e:	2f af       	std	Y+63, r18	; 0x3f
    2770:	a9 97       	sbiw	r28, 0x29	; 41
    2772:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2776:	a9 96       	adiw	r28, 0x29	; 41
    2778:	2f ad       	ldd	r18, Y+63	; 0x3f
    277a:	a9 97       	sbiw	r28, 0x29	; 41
    277c:	22 23       	and	r18, r18
    277e:	71 f0       	breq	.+28     	; 0x279c <__stack+0x59d>
    2780:	67 ef       	ldi	r22, 0xF7	; 247
    2782:	76 e0       	ldi	r23, 0x06	; 6
    2784:	8a ed       	ldi	r24, 0xDA	; 218
    2786:	97 e0       	ldi	r25, 0x07	; 7
    2788:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    278c:	b8 01       	movw	r22, r16
    278e:	8a ed       	ldi	r24, 0xDA	; 218
    2790:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    2792:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    2796:	6e ec       	ldi	r22, 0xCE	; 206
    2798:	76 e0       	ldi	r23, 0x06	; 6
    279a:	7a c6       	rjmp	.+3316   	; 0x3490 <__stack+0x1291>
    279c:	b7 01       	movw	r22, r14
    279e:	8e e6       	ldi	r24, 0x6E	; 110
    27a0:	97 e0       	ldi	r25, 0x07	; 7
    27a2:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN8MM3Class6setVFFEj>
    27a6:	6f ea       	ldi	r22, 0xAF	; 175
            Ethernet1.getCmdClient().println(F("  Must be an integer from 0 through 255."));
    27a8:	76 e0       	ldi	r23, 0x06	; 6
    27aa:	8a ed       	ldi	r24, 0xDA	; 218
    27ac:	97 e0       	ldi	r25, 0x07	; 7
          } else {
            MCtrl.setVFF(p);
    27ae:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    27b2:	4a e0       	ldi	r20, 0x0A	; 10
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	b7 01       	movw	r22, r14
            Ethernet1.getCmdClient().print(F("Velocity feed forward set to: "));  Ethernet1.getCmdClient().println(p);
    27b8:	8a ed       	ldi	r24, 0xDA	; 218
    27ba:	97 e0       	ldi	r25, 0x07	; 7
    27bc:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <_ZN5Print7printlnEii>
    27c0:	ab c3       	rjmp	.+1878   	; 0x2f18 <__stack+0xd19>
    27c2:	6b e1       	ldi	r22, 0x1B	; 27
    27c4:	73 e0       	ldi	r23, 0x03	; 3
    27c6:	c7 01       	movw	r24, r14
    27c8:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    27cc:	89 2b       	or	r24, r25
    27ce:	39 f4       	brne	.+14     	; 0x27de <__stack+0x5df>
    27d0:	8e e6       	ldi	r24, 0x6E	; 110
    27d2:	97 e0       	ldi	r25, 0x07	; 7
          }        
        }
      } else {
        
      if ( strcmp(pch, "store_tuning") == 0) {
    27d4:	0e 94 4f 22 	call	0x449e	; 0x449e <_ZN8MM3Class11storeTuningEv>
    27d8:	67 e8       	ldi	r22, 0x87	; 135
    27da:	76 e0       	ldi	r23, 0x06	; 6
    27dc:	59 c6       	rjmp	.+3250   	; 0x3490 <__stack+0x1291>
    27de:	68 e2       	ldi	r22, 0x28	; 40
    27e0:	73 e0       	ldi	r23, 0x03	; 3
        MCtrl.storeTuning();
    27e2:	c7 01       	movw	r24, r14
    27e4:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    27e8:	89 2b       	or	r24, r25
        Ethernet1.getCmdClient().println(F("PID tuning parameters stored to EEPROM."));
    27ea:	09 f0       	breq	.+2      	; 0x27ee <__stack+0x5ef>
    27ec:	5e c0       	rjmp	.+188    	; 0x28aa <__stack+0x6ab>
    27ee:	6c e0       	ldi	r22, 0x0C	; 12
      } else {
        
      if ( strcmp(pch, "port_base") == 0) {
    27f0:	72 e0       	ldi	r23, 0x02	; 2
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    27fa:	5c 01       	movw	r10, r24
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f4       	brne	.+26     	; 0x281a <__stack+0x61b>
        pch = strtok(NULL, " \r\n");  // get the next token
    2800:	64 e7       	ldi	r22, 0x74	; 116
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	87 ef       	ldi	r24, 0xF7	; 247
    2806:	97 e0       	ldi	r25, 0x07	; 7
    2808:	6d d6       	rcall	.+3290   	; 0x34e4 <_ZN17EepromAccessClass13readEEPromIntEi>
    280a:	4a e0       	ldi	r20, 0x0A	; 10
    280c:	50 e0       	ldi	r21, 0x00	; 0

        if (pch == 0) {
    280e:	bc 01       	movw	r22, r24
    2810:	8a ed       	ldi	r24, 0xDA	; 218
          Ethernet1.getCmdClient().println(EepromAccess.readEEPromInt(EepromAccess.PORT_BASE));
    2812:	97 e0       	ldi	r25, 0x07	; 7
    2814:	0e 94 cc 50 	call	0xa198	; 0xa198 <_ZN5Print7printlnEji>
    2818:	7f c3       	rjmp	.+1790   	; 0x2f18 <__stack+0xd19>
    281a:	0e 94 bc 5b 	call	0xb778	; 0xb778 <atol>
    281e:	6b 01       	movw	r12, r22
    2820:	7c 01       	movw	r14, r24
    2822:	b5 01       	movw	r22, r10
    2824:	ce 01       	movw	r24, r28
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    282c:	ce 01       	movw	r24, r28
        } else {
          long p = atol(pch);
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
    2834:	21 e0       	ldi	r18, 0x01	; 1
          if (!isValidNumber(pch) || p < 0 || p > 65533) {  // must be positive int
    2836:	88 23       	and	r24, r24
    2838:	51 f0       	breq	.+20     	; 0x284e <__stack+0x64f>
    283a:	f7 fc       	sbrc	r15, 7
    283c:	08 c0       	rjmp	.+16     	; 0x284e <__stack+0x64f>
    283e:	9e ef       	ldi	r25, 0xFE	; 254
    2840:	c9 16       	cp	r12, r25
    2842:	9f ef       	ldi	r25, 0xFF	; 255
    2844:	d9 06       	cpc	r13, r25
    2846:	e1 04       	cpc	r14, r1
    2848:	f1 04       	cpc	r15, r1
    284a:	0c f4       	brge	.+2      	; 0x284e <__stack+0x64f>
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	ce 01       	movw	r24, r28
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	a9 96       	adiw	r28, 0x29	; 41
    2854:	2f af       	std	Y+63, r18	; 0x3f
    2856:	a9 97       	sbiw	r28, 0x29	; 41
    2858:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    285c:	a9 96       	adiw	r28, 0x29	; 41
    285e:	2f ad       	ldd	r18, Y+63	; 0x3f
    2860:	a9 97       	sbiw	r28, 0x29	; 41
    2862:	22 23       	and	r18, r18
    2864:	71 f0       	breq	.+28     	; 0x2882 <__stack+0x683>
    2866:	69 e7       	ldi	r22, 0x79	; 121
    2868:	76 e0       	ldi	r23, 0x06	; 6
    286a:	8a ed       	ldi	r24, 0xDA	; 218
    286c:	97 e0       	ldi	r25, 0x07	; 7
    286e:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2872:	b8 01       	movw	r22, r16
    2874:	8a ed       	ldi	r24, 0xDA	; 218
    2876:	97 e0       	ldi	r25, 0x07	; 7
    2878:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    287c:	6e e4       	ldi	r22, 0x4E	; 78
    287e:	76 e0       	ldi	r23, 0x06	; 6
    2880:	07 c6       	rjmp	.+3086   	; 0x3490 <__stack+0x1291>
    2882:	a6 01       	movw	r20, r12
    2884:	64 e7       	ldi	r22, 0x74	; 116
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	87 ef       	ldi	r24, 0xF7	; 247
    288a:	97 e0       	ldi	r25, 0x07	; 7
    288c:	41 d6       	rcall	.+3202   	; 0x3510 <_ZN17EepromAccessClass14writeEEPromIntEii>
    288e:	6b e3       	ldi	r22, 0x3B	; 59
            Ethernet1.getCmdClient().println(F("  Must be an integer from 0 through 65533."));
    2890:	76 e0       	ldi	r23, 0x06	; 6
    2892:	8a ed       	ldi	r24, 0xDA	; 218
    2894:	97 e0       	ldi	r25, 0x07	; 7
          } else {
            EepromAccess.writeEEPromInt(EepromAccess.PORT_BASE, (unsigned int) p);
    2896:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    289a:	b5 01       	movw	r22, r10
    289c:	8a ed       	ldi	r24, 0xDA	; 218
    289e:	97 e0       	ldi	r25, 0x07	; 7
    28a0:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
            Ethernet1.getCmdClient().print(F("Port base set to: ")); Ethernet1.getCmdClient().print(pch);
    28a4:	67 e1       	ldi	r22, 0x17	; 23
    28a6:	76 e0       	ldi	r23, 0x06	; 6
    28a8:	f3 c5       	rjmp	.+3046   	; 0x3490 <__stack+0x1291>
    28aa:	62 e3       	ldi	r22, 0x32	; 50
    28ac:	73 e0       	ldi	r23, 0x03	; 3
    28ae:	c7 01       	movw	r24, r14
    28b0:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    28b4:	89 2b       	or	r24, r25
    28b6:	49 f4       	brne	.+18     	; 0x28ca <__stack+0x6cb>
    28b8:	62 e0       	ldi	r22, 0x02	; 2
            Ethernet1.getCmdClient().println(F(".  Requires restart to take effect."));
    28ba:	76 e0       	ldi	r23, 0x06	; 6
    28bc:	8a ed       	ldi	r24, 0xDA	; 218
    28be:	97 e0       	ldi	r25, 0x07	; 7
          }        
        }
      } else {
        
      if ( strcmp(pch, "save_state") == 0) {
    28c0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    28c4:	0e 94 0a 30 	call	0x6014	; 0x6014 <_Z9saveStatev>
    28c8:	27 c3       	rjmp	.+1614   	; 0x2f18 <__stack+0xd19>
    28ca:	6d e3       	ldi	r22, 0x3D	; 61
    28cc:	73 e0       	ldi	r23, 0x03	; 3
        Ethernet1.getCmdClient().println(F("Saving system state."));
    28ce:	c7 01       	movw	r24, r14
    28d0:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    28d4:	89 2b       	or	r24, r25
    28d6:	59 f4       	brne	.+22     	; 0x28ee <__stack+0x6ef>
    28d8:	6f ee       	ldi	r22, 0xEF	; 239
        saveState();
    28da:	75 e0       	ldi	r23, 0x05	; 5
    28dc:	8a ed       	ldi	r24, 0xDA	; 218
    28de:	97 e0       	ldi	r25, 0x07	; 7
      } else {

        if ( strcmp(pch, "reboot") == 0) {
    28e0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    28e4:	0e 94 0a 30 	call	0x6014	; 0x6014 <_Z9saveStatev>
    28e8:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <_Z15software_Rebootv>
    28ec:	15 c3       	rjmp	.+1578   	; 0x2f18 <__stack+0xd19>
        Ethernet1.getCmdClient().println(F("System restarting."));
    28ee:	6a e4       	ldi	r22, 0x4A	; 74
    28f0:	73 e0       	ldi	r23, 0x03	; 3
    28f2:	c7 01       	movw	r24, r14
    28f4:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    28f8:	89 2b       	or	r24, r25
        saveState();
    28fa:	09 f0       	breq	.+2      	; 0x28fe <__stack+0x6ff>
    28fc:	66 c0       	rjmp	.+204    	; 0x29ca <__stack+0x7cb>
        software_Reboot();
    28fe:	6c e0       	ldi	r22, 0x0C	; 12
    2900:	72 e0       	ldi	r23, 0x02	; 2
    2902:	80 e0       	ldi	r24, 0x00	; 0
      } else {
        
      if ( strcmp(pch, "motor_time") == 0) {
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    290a:	5c 01       	movw	r10, r24
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	d9 f4       	brne	.+54     	; 0x2946 <__stack+0x747>
    2910:	60 91 99 07 	lds	r22, 0x0799
        pch = strtok(NULL, " \r\n");  // get the next token
    2914:	70 91 9a 07 	lds	r23, 0x079A
    2918:	80 91 9b 07 	lds	r24, 0x079B
    291c:	90 91 9c 07 	lds	r25, 0x079C
    2920:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>

        if (pch == 0) {
    2924:	20 e0       	ldi	r18, 0x00	; 0
  void setRPM(float f);

  double getMaxRevolutions() { return m_maxRevolutions; }
  void setMaxRevolutions(double m);

  float getMotorTimeDays() { return float(m_motor_time / (60.0*60.0*24.0)); }
    2926:	30 ec       	ldi	r19, 0xC0	; 192
    2928:	48 ea       	ldi	r20, 0xA8	; 168
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    2930:	ab 01       	movw	r20, r22
    2932:	bc 01       	movw	r22, r24
    2934:	23 e0       	ldi	r18, 0x03	; 3
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	8a ed       	ldi	r24, 0xDA	; 218
    293a:	97 e0       	ldi	r25, 0x07	; 7
    293c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    2940:	69 ee       	ldi	r22, 0xE9	; 233
    2942:	75 e0       	ldi	r23, 0x05	; 5
    2944:	a5 c5       	rjmp	.+2890   	; 0x3490 <__stack+0x1291>
    2946:	0e 94 9c 5b 	call	0xb738	; 0xb738 <atof>
          Ethernet1.getCmdClient().print( Motor.getMotorTimeDays(), 3);
    294a:	6b 01       	movw	r12, r22
    294c:	7c 01       	movw	r14, r24
    294e:	b5 01       	movw	r22, r10
    2950:	ce 01       	movw	r24, r28
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
          Ethernet1.getCmdClient().println(F(" Days"));
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
        } else {
          float p = atof(pch);  // argument in fractional days
    295c:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
    2960:	88 23       	and	r24, r24
    2962:	61 f0       	breq	.+24     	; 0x297c <__stack+0x77d>
          if (!isValidNumber(pch) || p < 0.0) {  // must be positive
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	a9 01       	movw	r20, r18
    296a:	c7 01       	movw	r24, r14
    296c:	b6 01       	movw	r22, r12
    296e:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2972:	b8 2e       	mov	r11, r24
    2974:	bb 1c       	adc	r11, r11
    2976:	bb 24       	eor	r11, r11
    2978:	bb 1c       	adc	r11, r11
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <__stack+0x781>
    297c:	bb 24       	eor	r11, r11
    297e:	b3 94       	inc	r11
    2980:	ce 01       	movw	r24, r28
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2988:	bb 20       	and	r11, r11
    298a:	71 f0       	breq	.+28     	; 0x29a8 <__stack+0x7a9>
    298c:	6b ed       	ldi	r22, 0xDB	; 219
    298e:	75 e0       	ldi	r23, 0x05	; 5
    2990:	8a ed       	ldi	r24, 0xDA	; 218
    2992:	97 e0       	ldi	r25, 0x07	; 7
    2994:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2998:	b8 01       	movw	r22, r16
    299a:	8a ed       	ldi	r24, 0xDA	; 218
    299c:	97 e0       	ldi	r25, 0x07	; 7
    299e:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    29a2:	6e eb       	ldi	r22, 0xBE	; 190
    29a4:	75 e0       	ldi	r23, 0x05	; 5
    29a6:	74 c5       	rjmp	.+2792   	; 0x3490 <__stack+0x1291>
    29a8:	b7 01       	movw	r22, r14
    29aa:	a6 01       	movw	r20, r12
    29ac:	85 e8       	ldi	r24, 0x85	; 133
    29ae:	97 e0       	ldi	r25, 0x07	; 7
    29b0:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN10MotorClass16setMotorTimeDaysEf>
    29b4:	6a ea       	ldi	r22, 0xAA	; 170
    29b6:	75 e0       	ldi	r23, 0x05	; 5
            Ethernet1.getCmdClient().println(F("  Must be a positive number."));
    29b8:	8a ed       	ldi	r24, 0xDA	; 218
    29ba:	97 e0       	ldi	r25, 0x07	; 7
    29bc:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
          } else {
            Motor.setMotorTimeDays(p);
    29c0:	23 e0       	ldi	r18, 0x03	; 3
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	b7 01       	movw	r22, r14
    29c6:	a6 01       	movw	r20, r12
    29c8:	1d c1       	rjmp	.+570    	; 0x2c04 <__stack+0xa05>
            Ethernet1.getCmdClient().print(F("Motor time set to: ")); Ethernet1.getCmdClient().println(p,3);
    29ca:	64 e4       	ldi	r22, 0x44	; 68
    29cc:	73 e0       	ldi	r23, 0x03	; 3
    29ce:	c7 01       	movw	r24, r14
    29d0:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    29d4:	89 2b       	or	r24, r25
    29d6:	71 f4       	brne	.+28     	; 0x29f4 <__stack+0x7f5>
    29d8:	66 e7       	ldi	r22, 0x76	; 118
    29da:	75 e0       	ldi	r23, 0x05	; 5
    29dc:	8a ed       	ldi	r24, 0xDA	; 218
    29de:	97 e0       	ldi	r25, 0x07	; 7
          }        
        }
      } else {
        
      if ( strcmp(pch, "reset_motor_time") == 0) {
    29e0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	ba 01       	movw	r22, r20
    29ea:	85 e8       	ldi	r24, 0x85	; 133
    29ec:	97 e0       	ldi	r25, 0x07	; 7
        Ethernet1.getCmdClient().println(F("Resetting total accumulated motor run time to zero."));
    29ee:	0e 94 17 29 	call	0x522e	; 0x522e <_ZN10MotorClass16setMotorTimeDaysEf>
    29f2:	92 c2       	rjmp	.+1316   	; 0x2f18 <__stack+0xd19>
    29f4:	65 e5       	ldi	r22, 0x55	; 85
    29f6:	73 e0       	ldi	r23, 0x03	; 3
    29f8:	c7 01       	movw	r24, r14
        Motor.setMotorTimeDays(0.0);
    29fa:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    29fe:	89 2b       	or	r24, r25
    2a00:	19 f4       	brne	.+6      	; 0x2a08 <__stack+0x809>
    2a02:	69 e5       	ldi	r22, 0x59	; 89
    2a04:	73 e0       	ldi	r23, 0x03	; 3
    2a06:	84 c2       	rjmp	.+1288   	; 0x2f10 <__stack+0xd11>
    2a08:	6d e5       	ldi	r22, 0x5D	; 93
      } else {

      if ( strcmp(pch, "ver") == 0) {
    2a0a:	73 e0       	ldi	r23, 0x03	; 3
    2a0c:	c7 01       	movw	r24, r14
    2a0e:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2a12:	89 2b       	or	r24, r25
    2a14:	31 f4       	brne	.+12     	; 0x2a22 <__stack+0x823>
    2a16:	88 ef       	ldi	r24, 0xF8	; 248
        Ethernet1.getCmdClient().println(SWVERSION);
    2a18:	97 e0       	ldi	r25, 0x07	; 7
    2a1a:	13 d8       	rcall	.-4058   	; 0x1a42 <_ZN19CApplicationMonitor12ClearReportsEv>
    2a1c:	61 e5       	ldi	r22, 0x51	; 81
      } else {
        
      if ( strcmp(pch, "clearreports") == 0) {
    2a1e:	75 e0       	ldi	r23, 0x05	; 5
    2a20:	37 c5       	rjmp	.+2670   	; 0x3490 <__stack+0x1291>
    2a22:	6a e6       	ldi	r22, 0x6A	; 106
    2a24:	73 e0       	ldi	r23, 0x03	; 3
    2a26:	c7 01       	movw	r24, r14
    2a28:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
        ApplicationMonitor.ClearReports();
    2a2c:	89 2b       	or	r24, r25
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <__stack+0x833>
    2a30:	5c c0       	rjmp	.+184    	; 0x2aea <__stack+0x8eb>
    2a32:	6c e0       	ldi	r22, 0x0C	; 12
        Ethernet1.getCmdClient().println(F("Application Monitor Reports Cleared."));
    2a34:	72 e0       	ldi	r23, 0x02	; 2
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
      } else {        
        
      if ( strcmp(pch, "motor_cpr") == 0) {
    2a3a:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    2a3e:	5c 01       	movw	r10, r24
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	79 f4       	brne	.+30     	; 0x2a62 <__stack+0x863>
    2a44:	40 91 85 07 	lds	r20, 0x0785
    2a48:	50 91 86 07 	lds	r21, 0x0786
        pch = strtok(NULL, " \r\n");  // get the next token
    2a4c:	60 91 87 07 	lds	r22, 0x0787
    2a50:	70 91 88 07 	lds	r23, 0x0788
    2a54:	2a e0       	ldi	r18, 0x0A	; 10
    2a56:	30 e0       	ldi	r19, 0x00	; 0

        if (pch == 0) {
    2a58:	8a ed       	ldi	r24, 0xDA	; 218
    2a5a:	97 e0       	ldi	r25, 0x07	; 7
          Ethernet1.getCmdClient().println(Motor.getCPR());
    2a5c:	0e 94 e0 50 	call	0xa1c0	; 0xa1c0 <_ZN5Print7printlnEmi>
    2a60:	5b c2       	rjmp	.+1206   	; 0x2f18 <__stack+0xd19>
    2a62:	0e 94 bc 5b 	call	0xb778	; 0xb778 <atol>
    2a66:	6b 01       	movw	r12, r22
    2a68:	7c 01       	movw	r14, r24
    2a6a:	b5 01       	movw	r22, r10
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
        } else {
          long p = atol(pch);
    2a7c:	88 23       	and	r24, r24
    2a7e:	51 f0       	breq	.+20     	; 0x2a94 <__stack+0x895>
    2a80:	d7 01       	movw	r26, r14
          if (!isValidNumber(pch) || p < 0) {  // must be positive long
    2a82:	c6 01       	movw	r24, r12
    2a84:	88 27       	eor	r24, r24
    2a86:	b7 fd       	sbrc	r27, 7
    2a88:	83 95       	inc	r24
    2a8a:	99 27       	eor	r25, r25
    2a8c:	aa 27       	eor	r26, r26
    2a8e:	bb 27       	eor	r27, r27
    2a90:	b8 2e       	mov	r11, r24
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <__stack+0x899>
    2a94:	bb 24       	eor	r11, r11
    2a96:	b3 94       	inc	r11
    2a98:	ce 01       	movw	r24, r28
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2aa0:	bb 20       	and	r11, r11
    2aa2:	71 f0       	breq	.+28     	; 0x2ac0 <__stack+0x8c1>
    2aa4:	63 e4       	ldi	r22, 0x43	; 67
    2aa6:	75 e0       	ldi	r23, 0x05	; 5
    2aa8:	8a ed       	ldi	r24, 0xDA	; 218
    2aaa:	97 e0       	ldi	r25, 0x07	; 7
    2aac:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2ab0:	b8 01       	movw	r22, r16
    2ab2:	8a ed       	ldi	r24, 0xDA	; 218
    2ab4:	97 e0       	ldi	r25, 0x07	; 7
    2ab6:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    2aba:	65 e2       	ldi	r22, 0x25	; 37
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    2abc:	75 e0       	ldi	r23, 0x05	; 5
    2abe:	e8 c4       	rjmp	.+2512   	; 0x3490 <__stack+0x1291>
    2ac0:	b7 01       	movw	r22, r14
    2ac2:	a6 01       	movw	r20, r12
    2ac4:	85 e8       	ldi	r24, 0x85	; 133
    2ac6:	97 e0       	ldi	r25, 0x07	; 7
    2ac8:	0e 94 64 29 	call	0x52c8	; 0x52c8 <_ZN10MotorClass6setCPREm>
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	75 e0       	ldi	r23, 0x05	; 5
    2ad0:	8a ed       	ldi	r24, 0xDA	; 218
            Ethernet1.getCmdClient().println(F("  Must be a positive integer."));
    2ad2:	97 e0       	ldi	r25, 0x07	; 7
    2ad4:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
          } else {
            Motor.setCPR(p);
    2ad8:	2a e0       	ldi	r18, 0x0A	; 10
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	b7 01       	movw	r22, r14
    2ade:	a6 01       	movw	r20, r12
    2ae0:	8a ed       	ldi	r24, 0xDA	; 218
    2ae2:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Motor counts per revolution set to: ")); Ethernet1.getCmdClient().println(p);
    2ae4:	0e 94 95 50 	call	0xa12a	; 0xa12a <_ZN5Print7printlnEli>
    2ae8:	17 c2       	rjmp	.+1070   	; 0x2f18 <__stack+0xd19>
    2aea:	64 e7       	ldi	r22, 0x74	; 116
    2aec:	73 e0       	ldi	r23, 0x03	; 3
    2aee:	c7 01       	movw	r24, r14
    2af0:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2af4:	89 2b       	or	r24, r25
    2af6:	09 f0       	breq	.+2      	; 0x2afa <__stack+0x8fb>
    2af8:	60 c0       	rjmp	.+192    	; 0x2bba <__stack+0x9bb>
    2afa:	6c e0       	ldi	r22, 0x0C	; 12
    2afc:	72 e0       	ldi	r23, 0x02	; 2
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
          }        
        }
      } else {

      if ( strcmp(pch, "motor_rpm") == 0) {
    2b02:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    2b06:	5c 01       	movw	r10, r24
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	49 f4       	brne	.+18     	; 0x2b1e <__stack+0x91f>
    2b0c:	40 91 89 07 	lds	r20, 0x0789
    2b10:	50 91 8a 07 	lds	r21, 0x078A
        pch = strtok(NULL, " \r\n");  // get the next token
    2b14:	60 91 8b 07 	lds	r22, 0x078B
    2b18:	70 91 8c 07 	lds	r23, 0x078C
    2b1c:	71 c0       	rjmp	.+226    	; 0x2c00 <__stack+0xa01>
    2b1e:	0e 94 9c 5b 	call	0xb738	; 0xb738 <atof>

        if (pch == 0) {
    2b22:	6b 01       	movw	r12, r22
          Ethernet1.getCmdClient().println(Motor.getRPM());
    2b24:	7c 01       	movw	r14, r24
    2b26:	b5 01       	movw	r22, r10
    2b28:	ce 01       	movw	r24, r28
    2b2a:	01 96       	adiw	r24, 0x01	; 1
    2b2c:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    2b30:	ce 01       	movw	r24, r28
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
        } else {
          float al = atof(pch);
    2b38:	bb 24       	eor	r11, r11
    2b3a:	b3 94       	inc	r11
    2b3c:	88 23       	and	r24, r24
          if (!isValidNumber(pch) || al <= 0) {  // must be greater than zero
    2b3e:	51 f0       	breq	.+20     	; 0x2b54 <__stack+0x955>
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	a9 01       	movw	r20, r18
    2b46:	c7 01       	movw	r24, r14
    2b48:	b6 01       	movw	r22, r12
    2b4a:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	0c f4       	brge	.+2      	; 0x2b54 <__stack+0x955>
    2b52:	b1 2c       	mov	r11, r1
    2b54:	ce 01       	movw	r24, r28
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2b5c:	bb 20       	and	r11, r11
    2b5e:	71 f0       	breq	.+28     	; 0x2b7c <__stack+0x97d>
    2b60:	62 ef       	ldi	r22, 0xF2	; 242
    2b62:	74 e0       	ldi	r23, 0x04	; 4
    2b64:	8a ed       	ldi	r24, 0xDA	; 218
    2b66:	97 e0       	ldi	r25, 0x07	; 7
    2b68:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2b6c:	b8 01       	movw	r22, r16
    2b6e:	8a ed       	ldi	r24, 0xDA	; 218
    2b70:	97 e0       	ldi	r25, 0x07	; 7
    2b72:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    2b76:	6c ec       	ldi	r22, 0xCC	; 204
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    2b78:	74 e0       	ldi	r23, 0x04	; 4
    2b7a:	8a c4       	rjmp	.+2324   	; 0x3490 <__stack+0x1291>
    2b7c:	b7 01       	movw	r22, r14
    2b7e:	a6 01       	movw	r20, r12
    2b80:	85 e8       	ldi	r24, 0x85	; 133
    2b82:	97 e0       	ldi	r25, 0x07	; 7
    2b84:	0e 94 71 29 	call	0x52e2	; 0x52e2 <_ZN10MotorClass6setRPMEf>
    2b88:	6a eb       	ldi	r22, 0xBA	; 186
    2b8a:	74 e0       	ldi	r23, 0x04	; 4
    2b8c:	8a ed       	ldi	r24, 0xDA	; 218
            Ethernet1.getCmdClient().println(F("  Must be a number greater than zero."));
    2b8e:	97 e0       	ldi	r25, 0x07	; 7
    2b90:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
          } else {
            Motor.setRPM(al);
    2b94:	40 91 89 07 	lds	r20, 0x0789
    2b98:	50 91 8a 07 	lds	r21, 0x078A
    2b9c:	60 91 8b 07 	lds	r22, 0x078B
            Ethernet1.getCmdClient().print(F("Motor RPM set to ")); Ethernet1.getCmdClient().println(Motor.getRPM());
    2ba0:	70 91 8c 07 	lds	r23, 0x078C
    2ba4:	22 e0       	ldi	r18, 0x02	; 2
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	8a ed       	ldi	r24, 0xDA	; 218
    2baa:	97 e0       	ldi	r25, 0x07	; 7
    2bac:	0e 94 c8 51 	call	0xa390	; 0xa390 <_ZN5Print7printlnEdi>
    2bb0:	83 eb       	ldi	r24, 0xB3	; 179
    2bb2:	96 e0       	ldi	r25, 0x06	; 6
    2bb4:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_ZN21PositionFeedbackClass19setFeedbackMaxSpeedEv>
    2bb8:	af c1       	rjmp	.+862    	; 0x2f18 <__stack+0xd19>
    2bba:	6e e7       	ldi	r22, 0x7E	; 126
    2bbc:	73 e0       	ldi	r23, 0x03	; 3
    2bbe:	c7 01       	movw	r24, r14
    2bc0:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2bc4:	89 2b       	or	r24, r25
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <__stack+0x9cb>
            posFB.setFeedbackMaxSpeed();
    2bc8:	82 c0       	rjmp	.+260    	; 0x2cce <__stack+0xacf>
    2bca:	6c e0       	ldi	r22, 0x0C	; 12
    2bcc:	72 e0       	ldi	r23, 0x02	; 2
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
          }
        }
      } else {

      if ( strcmp(pch, "fb_period") == 0) {
    2bd2:	0e 94 1a 5c 	call	0xb834	; 0xb834 <strtok>
    2bd6:	5c 01       	movw	r10, r24
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	c9 f4       	brne	.+50     	; 0x2c0e <__stack+0xa0f>
    2bdc:	60 91 b7 06 	lds	r22, 0x06B7
    2be0:	70 91 b8 06 	lds	r23, 0x06B8
        pch = strtok(NULL, " \r\n");  // get the next token
    2be4:	80 91 b9 06 	lds	r24, 0x06B9
    2be8:	90 91 ba 06 	lds	r25, 0x06BA
    2bec:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>

        if (pch == 0) {
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
  char posBuf[POS_BUF_LEN];

public:
  PositionFeedbackClass();  // constructor

  float getFeedbackPeriod() { return float(m_fb_period) / 1000.0; }
    2bf4:	4a e7       	ldi	r20, 0x7A	; 122
    2bf6:	54 e4       	ldi	r21, 0x44	; 68
    2bf8:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    2bfc:	ab 01       	movw	r20, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	22 e0       	ldi	r18, 0x02	; 2
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	8a ed       	ldi	r24, 0xDA	; 218
    2c06:	97 e0       	ldi	r25, 0x07	; 7
    2c08:	0e 94 c8 51 	call	0xa390	; 0xa390 <_ZN5Print7printlnEdi>
    2c0c:	85 c1       	rjmp	.+778    	; 0x2f18 <__stack+0xd19>
    2c0e:	0e 94 9c 5b 	call	0xb738	; 0xb738 <atof>
    2c12:	6b 01       	movw	r12, r22
    2c14:	7c 01       	movw	r14, r24
    2c16:	b5 01       	movw	r22, r10
          Ethernet1.getCmdClient().println( posFB.getFeedbackPeriod() );
    2c18:	ce 01       	movw	r24, r28
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    2c20:	ce 01       	movw	r24, r28
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <_Z13isValidNumber6String>
        } else {
          float al = atof(pch);
    2c28:	bb 24       	eor	r11, r11
    2c2a:	b3 94       	inc	r11
    2c2c:	88 23       	and	r24, r24
          if (!isValidNumber(pch) || al <= 0) {  // must be greater than zero
    2c2e:	51 f0       	breq	.+20     	; 0x2c44 <__stack+0xa45>
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	a9 01       	movw	r20, r18
    2c36:	c7 01       	movw	r24, r14
    2c38:	b6 01       	movw	r22, r12
    2c3a:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	0c f4       	brge	.+2      	; 0x2c44 <__stack+0xa45>
    2c42:	b1 2c       	mov	r11, r1
    2c44:	ce 01       	movw	r24, r28
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    2c4c:	bb 20       	and	r11, r11
    2c4e:	71 f0       	breq	.+28     	; 0x2c6c <__stack+0xa6d>
    2c50:	6c ea       	ldi	r22, 0xAC	; 172
    2c52:	74 e0       	ldi	r23, 0x04	; 4
    2c54:	8a ed       	ldi	r24, 0xDA	; 218
    2c56:	97 e0       	ldi	r25, 0x07	; 7
    2c58:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2c5c:	b8 01       	movw	r22, r16
    2c5e:	8a ed       	ldi	r24, 0xDA	; 218
    2c60:	97 e0       	ldi	r25, 0x07	; 7
    2c62:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    2c66:	66 e8       	ldi	r22, 0x86	; 134
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    2c68:	74 e0       	ldi	r23, 0x04	; 4
    2c6a:	12 c4       	rjmp	.+2084   	; 0x3490 <__stack+0x1291>
    2c6c:	b7 01       	movw	r22, r14
    2c6e:	a6 01       	movw	r20, r12
    2c70:	83 eb       	ldi	r24, 0xB3	; 179
    2c72:	96 e0       	ldi	r25, 0x06	; 6
    2c74:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <_ZN21PositionFeedbackClass17setFeedbackPeriodEf>
    2c78:	6e e6       	ldi	r22, 0x6E	; 110
    2c7a:	74 e0       	ldi	r23, 0x04	; 4
    2c7c:	8a ed       	ldi	r24, 0xDA	; 218
            Ethernet1.getCmdClient().println(F("  Must be a number greater than zero."));
    2c7e:	97 e0       	ldi	r25, 0x07	; 7
    2c80:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
          } else {
            posFB.setFeedbackPeriod(al);
    2c84:	22 e0       	ldi	r18, 0x02	; 2
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	b7 01       	movw	r22, r14
    2c8a:	a6 01       	movw	r20, r12
    2c8c:	8a ed       	ldi	r24, 0xDA	; 218
    2c8e:	97 e0       	ldi	r25, 0x07	; 7
            Ethernet1.getCmdClient().print(F("Feedback period set to ")); Ethernet1.getCmdClient().print(al);
    2c90:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    2c94:	64 e6       	ldi	r22, 0x64	; 100
    2c96:	74 e0       	ldi	r23, 0x04	; 4
    2c98:	8a ed       	ldi	r24, 0xDA	; 218
    2c9a:	97 e0       	ldi	r25, 0x07	; 7
    2c9c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2ca0:	83 eb       	ldi	r24, 0xB3	; 179
    2ca2:	96 e0       	ldi	r25, 0x06	; 6
    2ca4:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_ZN21PositionFeedbackClass19setFeedbackMaxSpeedEv>
    2ca8:	62 e5       	ldi	r22, 0x52	; 82
    2caa:	74 e0       	ldi	r23, 0x04	; 4
            Ethernet1.getCmdClient().println(F(" seconds."));
    2cac:	8a ed       	ldi	r24, 0xDA	; 218
    2cae:	97 e0       	ldi	r25, 0x07	; 7
    2cb0:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2cb4:	60 91 b3 06 	lds	r22, 0x06B3
            posFB.setFeedbackMaxSpeed();
    2cb8:	70 91 b4 06 	lds	r23, 0x06B4
    2cbc:	4a e0       	ldi	r20, 0x0A	; 10
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
            Ethernet1.getCmdClient().print(F("Max Speed set to ")); Ethernet1.getCmdClient().print(posFB.getFeedbackMaxSpeed());
    2cc0:	8a ed       	ldi	r24, 0xDA	; 218
    2cc2:	97 e0       	ldi	r25, 0x07	; 7
    2cc4:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    2cc8:	6f e2       	ldi	r22, 0x2F	; 47
    2cca:	74 e0       	ldi	r23, 0x04	; 4
    2ccc:	e1 c3       	rjmp	.+1986   	; 0x3490 <__stack+0x1291>
    2cce:	68 e8       	ldi	r22, 0x88	; 136
    2cd0:	73 e0       	ldi	r23, 0x03	; 3
    2cd2:	c7 01       	movw	r24, r14
    2cd4:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2cd8:	89 2b       	or	r24, r25
    2cda:	49 f5       	brne	.+82     	; 0x2d2e <__stack+0xb2f>
    2cdc:	0e 94 65 30 	call	0x60ca	; 0x60ca <_Z9upSecondsv>
            Ethernet1.getCmdClient().println(F(" percent for feedback based moves."));
    2ce0:	d8 2e       	mov	r13, r24
    2ce2:	c9 2e       	mov	r12, r25
    2ce4:	0e 94 53 30 	call	0x60a6	; 0x60a6 <_Z9upMinutesv>
          }
        }
      } else {

      if ( strcmp(pch, "uptime") == 0) {
    2ce8:	f8 2e       	mov	r15, r24
    2cea:	e9 2e       	mov	r14, r25
    2cec:	0e 94 49 30 	call	0x6092	; 0x6092 <_Z7upHoursv>
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
        char upTimeString[100];
        snprintf(upTimeString, 100, "%d:%02d:%02d HH:MM:SS", upHours(), upMinutes(), upSeconds());
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	9f 93       	push	r25
    2cfa:	8f 93       	push	r24
    2cfc:	8f e8       	ldi	r24, 0x8F	; 143
    2cfe:	93 e0       	ldi	r25, 0x03	; 3
    2d00:	9f 93       	push	r25
    2d02:	8f 93       	push	r24
    2d04:	1f 92       	push	r1
    2d06:	84 e6       	ldi	r24, 0x64	; 100
    2d08:	8f 93       	push	r24
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	31 96       	adiw	r30, 0x01	; 1
    2d0e:	7f 01       	movw	r14, r30
    2d10:	ff 92       	push	r15
    2d12:	ef 93       	push	r30
    2d14:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
    2d18:	b7 01       	movw	r22, r14
    2d1a:	8a ed       	ldi	r24, 0xDA	; 218
    2d1c:	97 e0       	ldi	r25, 0x07	; 7
    2d1e:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	f5 c0       	rjmp	.+490    	; 0x2f18 <__stack+0xd19>
    2d2e:	65 ea       	ldi	r22, 0xA5	; 165
        Ethernet1.getCmdClient().println(upTimeString);
    2d30:	73 e0       	ldi	r23, 0x03	; 3
    2d32:	c7 01       	movw	r24, r14
    2d34:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
    2d38:	89 2b       	or	r24, r25
    2d3a:	41 f0       	breq	.+16     	; 0x2d4c <__stack+0xb4d>
    2d3c:	6a ea       	ldi	r22, 0xAA	; 170
    2d3e:	73 e0       	ldi	r23, 0x03	; 3
    2d40:	c7 01       	movw	r24, r14
    2d42:	0e 94 3e 5c 	call	0xb87c	; 0xb87c <strcmp>
      } else {

      if ( strcmp(pch, "help") == 0 ||  strcmp(pch, "?") == 0) {
    2d46:	89 2b       	or	r24, r25
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <__stack+0xb4d>
    2d4a:	db c0       	rjmp	.+438    	; 0x2f02 <__stack+0xd03>
    2d4c:	69 e1       	ldi	r22, 0x19	; 25
    2d4e:	74 e0       	ldi	r23, 0x04	; 4
    2d50:	8a ed       	ldi	r24, 0xDA	; 218
    2d52:	97 e0       	ldi	r25, 0x07	; 7
    2d54:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2d58:	64 e0       	ldi	r22, 0x04	; 4
    2d5a:	74 e0       	ldi	r23, 0x04	; 4
    2d5c:	8a ed       	ldi	r24, 0xDA	; 218
    2d5e:	97 e0       	ldi	r25, 0x07	; 7
    2d60:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("\nCommands Available:\n"));
    2d64:	65 ee       	ldi	r22, 0xE5	; 229
    2d66:	73 e0       	ldi	r23, 0x03	; 3
    2d68:	8a ed       	ldi	r24, 0xDA	; 218
    2d6a:	97 e0       	ldi	r25, 0x07	; 7
    2d6c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("\n  Network Commands:"));
    2d70:	6d ec       	ldi	r22, 0xCD	; 205
    2d72:	73 e0       	ldi	r23, 0x03	; 3
    2d74:	8a ed       	ldi	r24, 0xDA	; 218
    2d76:	97 e0       	ldi	r25, 0x07	; 7
    2d78:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    ip_address xxx,xxx,xxx,xxx"));
    2d7c:	61 eb       	ldi	r22, 0xB1	; 177
    2d7e:	73 e0       	ldi	r23, 0x03	; 3
    2d80:	8a ed       	ldi	r24, 0xDA	; 218
    2d82:	97 e0       	ldi	r25, 0x07	; 7
    2d84:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    dns xxx,xxx,xxx,xxx"));
    2d88:	66 e9       	ldi	r22, 0x96	; 150
    2d8a:	73 e0       	ldi	r23, 0x03	; 3
    2d8c:	8a ed       	ldi	r24, 0xDA	; 218
    2d8e:	97 e0       	ldi	r25, 0x07	; 7
    2d90:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    gateway xxx,xxx,xxx,xxx"));
    2d94:	66 e8       	ldi	r22, 0x86	; 134
    2d96:	73 e0       	ldi	r23, 0x03	; 3
    2d98:	8a ed       	ldi	r24, 0xDA	; 218
    2d9a:	97 e0       	ldi	r25, 0x07	; 7
    2d9c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    subnet xxx,xxx,xxx,xxx"));
    2da0:	63 e7       	ldi	r22, 0x73	; 115
    2da2:	73 e0       	ldi	r23, 0x03	; 3
    2da4:	8a ed       	ldi	r24, 0xDA	; 218
    2da6:	97 e0       	ldi	r25, 0x07	; 7
    2da8:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    port_base x"));
    2dac:	6a e6       	ldi	r22, 0x6A	; 106
    2dae:	73 e0       	ldi	r23, 0x03	; 3
    2db0:	8a ed       	ldi	r24, 0xDA	; 218
    2db2:	97 e0       	ldi	r25, 0x07	; 7
    2db4:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("\n  Motor Commands:"));
    2db8:	60 e5       	ldi	r22, 0x50	; 80
    2dba:	73 e0       	ldi	r23, 0x03	; 3
    2dbc:	8a ed       	ldi	r24, 0xDA	; 218
    2dbe:	97 e0       	ldi	r25, 0x07	; 7
    2dc0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    stop"));
    2dc4:	64 e3       	ldi	r22, 0x34	; 52
    2dc6:	73 e0       	ldi	r23, 0x03	; 3
    2dc8:	8a ed       	ldi	r24, 0xDA	; 218
    2dca:	97 e0       	ldi	r25, 0x07	; 7
    2dcc:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    up_revolutions x at x"));
    2dd0:	6d e1       	ldi	r22, 0x1D	; 29
    2dd2:	73 e0       	ldi	r23, 0x03	; 3
    2dd4:	8a ed       	ldi	r24, 0xDA	; 218
    2dd6:	97 e0       	ldi	r25, 0x07	; 7
    2dd8:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    down_revolutions x at x"));
    2ddc:	64 e0       	ldi	r22, 0x04	; 4
    2dde:	73 e0       	ldi	r23, 0x03	; 3
    2de0:	8a ed       	ldi	r24, 0xDA	; 218
    2de2:	97 e0       	ldi	r25, 0x07	; 7
    2de4:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    up_distance x at x"));
    2de8:	66 ee       	ldi	r22, 0xE6	; 230
    2dea:	72 e0       	ldi	r23, 0x02	; 2
    2dec:	8a ed       	ldi	r24, 0xDA	; 218
    2dee:	97 e0       	ldi	r25, 0x07	; 7
    2df0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    down_distance x at x"));
    2df4:	6a ec       	ldi	r22, 0xCA	; 202
    2df6:	72 e0       	ldi	r23, 0x02	; 2
    2df8:	8a ed       	ldi	r24, 0xDA	; 218
    2dfa:	97 e0       	ldi	r25, 0x07	; 7
    2dfc:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    move_to_revolution x at x"));
    2e00:	6d eb       	ldi	r22, 0xBD	; 189
    2e02:	72 e0       	ldi	r23, 0x02	; 2
    2e04:	8a ed       	ldi	r24, 0xDA	; 218
    2e06:	97 e0       	ldi	r25, 0x07	; 7
    2e08:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    move_to_position x at x"));
    2e0c:	6c ea       	ldi	r22, 0xAC	; 172
    2e0e:	72 e0       	ldi	r23, 0x02	; 2
    2e10:	8a ed       	ldi	r24, 0xDA	; 218
    2e12:	97 e0       	ldi	r25, 0x07	; 7
    2e14:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    set_zero"));
    2e18:	6c e9       	ldi	r22, 0x9C	; 156
    2e1a:	72 e0       	ldi	r23, 0x02	; 2
    2e1c:	8a ed       	ldi	r24, 0xDA	; 218
    2e1e:	97 e0       	ldi	r25, 0x07	; 7
    2e20:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    amps_limit x"));
    2e24:	6c e8       	ldi	r22, 0x8C	; 140
    2e26:	72 e0       	ldi	r23, 0x02	; 2
    2e28:	8a ed       	ldi	r24, 0xDA	; 218
    2e2a:	97 e0       	ldi	r25, 0x07	; 7
    2e2c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    motor_cpr x"));
    2e30:	66 e7       	ldi	r22, 0x76	; 118
    2e32:	72 e0       	ldi	r23, 0x02	; 2
    2e34:	8a ed       	ldi	r24, 0xDA	; 218
    2e36:	97 e0       	ldi	r25, 0x07	; 7
    2e38:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    motor_rpm x"));
    2e3c:	6e e5       	ldi	r22, 0x5E	; 94
    2e3e:	72 e0       	ldi	r23, 0x02	; 2
    2e40:	8a ed       	ldi	r24, 0xDA	; 218
    2e42:	97 e0       	ldi	r25, 0x07	; 7
    2e44:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    max_revolutions x"));
    2e48:	62 e5       	ldi	r22, 0x52	; 82
    2e4a:	72 e0       	ldi	r23, 0x02	; 2
    2e4c:	8a ed       	ldi	r24, 0xDA	; 218
    2e4e:	97 e0       	ldi	r25, 0x07	; 7
    2e50:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("\n  PID Tuning Commands:"));
    2e54:	66 e4       	ldi	r22, 0x46	; 70
    2e56:	72 e0       	ldi	r23, 0x02	; 2
    2e58:	8a ed       	ldi	r24, 0xDA	; 218
    2e5a:	97 e0       	ldi	r25, 0x07	; 7
    2e5c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    pterm x"));
    2e60:	6a e3       	ldi	r22, 0x3A	; 58
    2e62:	72 e0       	ldi	r23, 0x02	; 2
    2e64:	8a ed       	ldi	r24, 0xDA	; 218
    2e66:	97 e0       	ldi	r25, 0x07	; 7
    2e68:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    iterm x"));
    2e6c:	6a e2       	ldi	r22, 0x2A	; 42
    2e6e:	72 e0       	ldi	r23, 0x02	; 2
    2e70:	8a ed       	ldi	r24, 0xDA	; 218
    2e72:	97 e0       	ldi	r25, 0x07	; 7
    2e74:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    dterm x"));
    2e78:	60 e2       	ldi	r22, 0x20	; 32
    2e7a:	72 e0       	ldi	r23, 0x02	; 2
    2e7c:	8a ed       	ldi	r24, 0xDA	; 218
    2e7e:	97 e0       	ldi	r25, 0x07	; 7
    2e80:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    pidscalar x"));
    2e84:	6f e0       	ldi	r22, 0x0F	; 15
    2e86:	72 e0       	ldi	r23, 0x02	; 2
    2e88:	8a ed       	ldi	r24, 0xDA	; 218
    2e8a:	97 e0       	ldi	r25, 0x07	; 7
    2e8c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    vff x"));
    2e90:	6b ef       	ldi	r22, 0xFB	; 251
    2e92:	71 e0       	ldi	r23, 0x01	; 1
    2e94:	8a ed       	ldi	r24, 0xDA	; 218
    2e96:	97 e0       	ldi	r25, 0x07	; 7
    2e98:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    store_tuning"));
    2e9c:	6d ee       	ldi	r22, 0xED	; 237
    2e9e:	71 e0       	ldi	r23, 0x01	; 1
    2ea0:	8a ed       	ldi	r24, 0xDA	; 218
    2ea2:	97 e0       	ldi	r25, 0x07	; 7
    2ea4:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("\n  System Commands:"));
    2ea8:	6e ed       	ldi	r22, 0xDE	; 222
    2eaa:	71 e0       	ldi	r23, 0x01	; 1
    2eac:	8a ed       	ldi	r24, 0xDA	; 218
    2eae:	97 e0       	ldi	r25, 0x07	; 7
    2eb0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    fb_period"));
    2eb4:	63 ed       	ldi	r22, 0xD3	; 211
    2eb6:	71 e0       	ldi	r23, 0x01	; 1
    2eb8:	8a ed       	ldi	r24, 0xDA	; 218
    2eba:	97 e0       	ldi	r25, 0x07	; 7
    2ebc:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    save_state"));
    2ec0:	64 ec       	ldi	r22, 0xC4	; 196
    2ec2:	71 e0       	ldi	r23, 0x01	; 1
    2ec4:	8a ed       	ldi	r24, 0xDA	; 218
    2ec6:	97 e0       	ldi	r25, 0x07	; 7
    2ec8:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    reboot"));
    2ecc:	6f ea       	ldi	r22, 0xAF	; 175
    2ece:	71 e0       	ldi	r23, 0x01	; 1
    2ed0:	8a ed       	ldi	r24, 0xDA	; 218
    2ed2:	97 e0       	ldi	r25, 0x07	; 7
    2ed4:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    motor_time"));
    2ed8:	6e e9       	ldi	r22, 0x9E	; 158
    2eda:	71 e0       	ldi	r23, 0x01	; 1
    2edc:	8a ed       	ldi	r24, 0xDA	; 218
    2ede:	97 e0       	ldi	r25, 0x07	; 7
    2ee0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    reset_motor_time"));
    2ee4:	66 e9       	ldi	r22, 0x96	; 150
    2ee6:	71 e0       	ldi	r23, 0x01	; 1
    2ee8:	8a ed       	ldi	r24, 0xDA	; 218
    2eea:	97 e0       	ldi	r25, 0x07	; 7
    2eec:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    clearreports"));
    2ef0:	6b e8       	ldi	r22, 0x8B	; 139
    2ef2:	71 e0       	ldi	r23, 0x01	; 1
    2ef4:	8a ed       	ldi	r24, 0xDA	; 218
    2ef6:	97 e0       	ldi	r25, 0x07	; 7
    2ef8:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
        Ethernet1.getCmdClient().println(F("    ver"));
    2efc:	6a e8       	ldi	r22, 0x8A	; 138
    2efe:	71 e0       	ldi	r23, 0x01	; 1
    2f00:	c7 c2       	rjmp	.+1422   	; 0x3490 <__stack+0x1291>
    2f02:	6c e7       	ldi	r22, 0x7C	; 124
    2f04:	71 e0       	ldi	r23, 0x01	; 1
    2f06:	8a ed       	ldi	r24, 0xDA	; 218
        Ethernet1.getCmdClient().println(F("    uptime"));
    2f08:	97 e0       	ldi	r25, 0x07	; 7
    2f0a:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2f0e:	b8 01       	movw	r22, r16
    2f10:	8a ed       	ldi	r24, 0xDA	; 218
    2f12:	97 e0       	ldi	r25, 0x07	; 7
        Ethernet1.getCmdClient().println(F(""));
    2f14:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    2f18:	80 e8       	ldi	r24, 0x80	; 128
      } else {

        Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	11 92       	st	Z+, r1
    2f1e:	8a 95       	dec	r24
    2f20:	e9 f7       	brne	.-6      	; 0x2f1c <__stack+0xd1d>
    2f22:	bb c2       	rjmp	.+1398   	; 0x349a <__stack+0x129b>
    2f24:	b7 01       	movw	r22, r14
    2f26:	8e e6       	ldi	r24, 0x6E	; 110
    2f28:	97 e0       	ldi	r25, 0x07	; 7
    2f2a:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
    2f2e:	40 91 a7 06 	lds	r20, 0x06A7
      }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

    }
      memset(cmdBuf, 0, CMD_BUF_LEN);  // clear the command buffer after processing
    2f32:	50 91 a8 06 	lds	r21, 0x06A8
    2f36:	60 91 a9 06 	lds	r22, 0x06A9
    2f3a:	70 91 aa 06 	lds	r23, 0x06AA
        } else {
        if ( MCtrl.isNoRaise() || MCtrl.isBrake() ) { 
          Ethernet1.getCmdClient().println(F("Cannot raise due to NO_RAISE or E_STOP input."));
        } else {
          // do the move
          MCtrl.moveSetup(speedPct);
    2f3e:	70 58       	subi	r23, 0x80	; 128
    2f40:	8e e6       	ldi	r24, 0x6E	; 110
    2f42:	97 e0       	ldi	r25, 0x07	; 7
    2f44:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN8MM3Class12moveRelativeEd>
          MCtrl.moveRelative(-1.0 * moveTarget);
    2f48:	65 ef       	ldi	r22, 0xF5	; 245
    2f4a:	7c e0       	ldi	r23, 0x0C	; 12
    2f4c:	8a ed       	ldi	r24, 0xDA	; 218
    2f4e:	97 e0       	ldi	r25, 0x07	; 7
    2f50:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2f54:	40 91 a7 06 	lds	r20, 0x06A7
    2f58:	50 91 a8 06 	lds	r21, 0x06A8
    2f5c:	60 91 a9 06 	lds	r22, 0x06A9
          
          Ethernet1.getCmdClient().print(F("Moving up ")); Ethernet1.getCmdClient().print(moveTarget);
    2f60:	70 91 aa 06 	lds	r23, 0x06AA
    2f64:	22 e0       	ldi	r18, 0x02	; 2
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	8a ed       	ldi	r24, 0xDA	; 218
    2f6a:	97 e0       	ldi	r25, 0x07	; 7
    2f6c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    2f70:	64 ee       	ldi	r22, 0xE4	; 228
    2f72:	7c e0       	ldi	r23, 0x0C	; 12
    2f74:	8a ed       	ldi	r24, 0xDA	; 218
    2f76:	97 e0       	ldi	r25, 0x07	; 7
    2f78:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2f7c:	4a e0       	ldi	r20, 0x0A	; 10
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	b7 01       	movw	r22, r14
    2f82:	8a ed       	ldi	r24, 0xDA	; 218
    2f84:	97 e0       	ldi	r25, 0x07	; 7
    2f86:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
          Ethernet1.getCmdClient().print(F(" revolutions at "));
    2f8a:	6c ec       	ldi	r22, 0xCC	; 204
    2f8c:	7c e0       	ldi	r23, 0x0C	; 12
    2f8e:	a7 c1       	rjmp	.+846    	; 0x32de <__stack+0x10df>
    2f90:	b7 01       	movw	r22, r14
    2f92:	8e e6       	ldi	r24, 0x6E	; 110
          Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
    2f94:	97 e0       	ldi	r25, 0x07	; 7
    2f96:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
    2f9a:	40 91 a7 06 	lds	r20, 0x06A7
    2f9e:	50 91 a8 06 	lds	r21, 0x06A8
    2fa2:	60 91 a9 06 	lds	r22, 0x06A9
    2fa6:	70 91 aa 06 	lds	r23, 0x06AA
        } else {
        if ( MCtrl.isNoLower() || MCtrl.isBrake() ) { 
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
        } else {
          // do the move
          MCtrl.moveSetup(speedPct);
    2faa:	8e e6       	ldi	r24, 0x6E	; 110
    2fac:	97 e0       	ldi	r25, 0x07	; 7
    2fae:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_ZN8MM3Class12moveRelativeEd>
          MCtrl.moveRelative(moveTarget);
    2fb2:	63 e8       	ldi	r22, 0x83	; 131
    2fb4:	7c e0       	ldi	r23, 0x0C	; 12
    2fb6:	8a ed       	ldi	r24, 0xDA	; 218
    2fb8:	97 e0       	ldi	r25, 0x07	; 7
    2fba:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2fbe:	40 91 a7 06 	lds	r20, 0x06A7
    2fc2:	50 91 a8 06 	lds	r21, 0x06A8
    2fc6:	60 91 a9 06 	lds	r22, 0x06A9
          
          Ethernet1.getCmdClient().print(F("Moving down ")); Ethernet1.getCmdClient().print(moveTarget);
    2fca:	70 91 aa 06 	lds	r23, 0x06AA
    2fce:	22 e0       	ldi	r18, 0x02	; 2
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	8a ed       	ldi	r24, 0xDA	; 218
    2fd4:	97 e0       	ldi	r25, 0x07	; 7
    2fd6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    2fda:	62 e7       	ldi	r22, 0x72	; 114
    2fdc:	7c e0       	ldi	r23, 0x0C	; 12
    2fde:	8a ed       	ldi	r24, 0xDA	; 218
    2fe0:	97 e0       	ldi	r25, 0x07	; 7
    2fe2:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    2fe6:	4a e0       	ldi	r20, 0x0A	; 10
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	b7 01       	movw	r22, r14
    2fec:	8a ed       	ldi	r24, 0xDA	; 218
    2fee:	97 e0       	ldi	r25, 0x07	; 7
    2ff0:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
          Ethernet1.getCmdClient().print(F(" revolutions at "));
    2ff4:	6a e5       	ldi	r22, 0x5A	; 90
    2ff6:	7c e0       	ldi	r23, 0x0C	; 12
    2ff8:	72 c1       	rjmp	.+740    	; 0x32de <__stack+0x10df>
    2ffa:	6c e4       	ldi	r22, 0x4C	; 76
    2ffc:	7c e0       	ldi	r23, 0x0C	; 12
          Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
    2ffe:	8a ed       	ldi	r24, 0xDA	; 218
    3000:	97 e0       	ldi	r25, 0x07	; 7
    3002:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    3006:	b8 01       	movw	r22, r16
    3008:	8a ed       	ldi	r24, 0xDA	; 218
    300a:	97 e0       	ldi	r25, 0x07	; 7
    300c:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    3010:	6e e0       	ldi	r22, 0x0E	; 14
      } else {
        
      if ( strcmp(pch, "up_distance") == 0) {
        int speedPct = parseMove();
        if (speedPct < 2 || speedPct > posFB.getFeedbackMaxSpeed() || moveTarget <= 0.0) {
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    3012:	7c e0       	ldi	r23, 0x0C	; 12
    3014:	8a ed       	ldi	r24, 0xDA	; 218
    3016:	97 e0       	ldi	r25, 0x07	; 7
    3018:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    301c:	60 91 b3 06 	lds	r22, 0x06B3
    3020:	70 91 b4 06 	lds	r23, 0x06B4
    3024:	4a e0       	ldi	r20, 0x0A	; 10
    3026:	50 e0       	ldi	r21, 0x00	; 0
          Ethernet1.getCmdClient().print(F("  Distance must be positive and speed must be from 2 through "));
    3028:	8a ed       	ldi	r24, 0xDA	; 218
    302a:	97 e0       	ldi	r25, 0x07	; 7
    302c:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    3030:	64 e0       	ldi	r22, 0x04	; 4
    3032:	7c e0       	ldi	r23, 0x0C	; 12
          Ethernet1.getCmdClient().print(posFB.getFeedbackMaxSpeed()); Ethernet1.getCmdClient().println(F(" percent."));
    3034:	2d c2       	rjmp	.+1114   	; 0x3490 <__stack+0x1291>
    3036:	80 91 76 07 	lds	r24, 0x0776
    303a:	90 91 77 07 	lds	r25, 0x0777
    303e:	85 70       	andi	r24, 0x05	; 5
    3040:	99 27       	eor	r25, r25
    3042:	89 2b       	or	r24, r25
    3044:	19 f0       	breq	.+6      	; 0x304c <__stack+0xe4d>
    3046:	66 ed       	ldi	r22, 0xD6	; 214
    3048:	7b e0       	ldi	r23, 0x0B	; 11
    304a:	22 c2       	rjmp	.+1092   	; 0x3490 <__stack+0x1291>
    304c:	83 eb       	ldi	r24, 0xB3	; 179
    304e:	96 e0       	ldi	r25, 0x06	; 6
    3050:	0e 94 84 2a 	call	0x5508	; 0x5508 <_ZN21PositionFeedbackClass26haveRecentPositionFeedbackEv>
    3054:	88 23       	and	r24, r24
    3056:	09 f4       	brne	.+2      	; 0x305a <__stack+0xe5b>
    3058:	59 c0       	rjmp	.+178    	; 0x310c <__stack+0xf0d>
        } else {
        if ( MCtrl.isNoRaise() || MCtrl.isBrake() ) { 
    305a:	b7 01       	movw	r22, r14
    305c:	8e e6       	ldi	r24, 0x6E	; 110
          Ethernet1.getCmdClient().println(F("Cannot raise due to NO_RAISE or E_STOP input."));
    305e:	97 e0       	ldi	r25, 0x07	; 7
    3060:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
        } else {
          if (posFB.haveRecentPositionFeedback() == true) {
    3064:	b7 01       	movw	r22, r14
    3066:	83 eb       	ldi	r24, 0xB3	; 179
    3068:	96 e0       	ldi	r25, 0x06	; 6
    306a:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <_ZN21PositionFeedbackClass16setFeedbackDeltaEi>
    306e:	66 27       	eor	r22, r22
    3070:	77 27       	eor	r23, r23
            // do the move
            MCtrl.moveSetup(speedPct);
    3072:	6e 19       	sub	r22, r14
    3074:	7f 09       	sbc	r23, r15
    3076:	8e e6       	ldi	r24, 0x6E	; 110
    3078:	97 e0       	ldi	r25, 0x07	; 7
    307a:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
            posFB.setFeedbackDelta(speedPct);
    307e:	6b ec       	ldi	r22, 0xCB	; 203
    3080:	7b e0       	ldi	r23, 0x0B	; 11
    3082:	8a ed       	ldi	r24, 0xDA	; 218
    3084:	97 e0       	ldi	r25, 0x07	; 7
            MCtrl.moveAtSpeed(-1 * speedPct);
    3086:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    308a:	40 91 a7 06 	lds	r20, 0x06A7
    308e:	50 91 a8 06 	lds	r21, 0x06A8
    3092:	60 91 a9 06 	lds	r22, 0x06A9
            
            Ethernet1.getCmdClient().print(F("Moving up ")); Ethernet1.getCmdClient().print(moveTarget);
    3096:	70 91 aa 06 	lds	r23, 0x06AA
    309a:	22 e0       	ldi	r18, 0x02	; 2
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	8a ed       	ldi	r24, 0xDA	; 218
    30a0:	97 e0       	ldi	r25, 0x07	; 7
    30a2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    30a6:	6b ea       	ldi	r22, 0xAB	; 171
    30a8:	7b e0       	ldi	r23, 0x0B	; 11
    30aa:	8a ed       	ldi	r24, 0xDA	; 218
    30ac:	97 e0       	ldi	r25, 0x07	; 7
    30ae:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    30b2:	4a e0       	ldi	r20, 0x0A	; 10
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	b7 01       	movw	r22, r14
    30b8:	8a ed       	ldi	r24, 0xDA	; 218
    30ba:	97 e0       	ldi	r25, 0x07	; 7
    30bc:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
            Ethernet1.getCmdClient().print(F(" based on position feedback at "));
    30c0:	63 e9       	ldi	r22, 0x93	; 147
    30c2:	7b e0       	ldi	r23, 0x0B	; 11
    30c4:	8a ed       	ldi	r24, 0xDA	; 218
    30c6:	97 e0       	ldi	r25, 0x07	; 7
    30c8:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
            Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
    30cc:	0e 94 65 2f 	call	0x5eca	; 0x5eca <_Z13checkIfMovingv>
    30d0:	20 91 a7 06 	lds	r18, 0x06A7
    30d4:	30 91 a8 06 	lds	r19, 0x06A8
    30d8:	40 91 a9 06 	lds	r20, 0x06A9
    30dc:	50 91 aa 06 	lds	r21, 0x06AA
    30e0:	60 91 bb 06 	lds	r22, 0x06BB
            checkIfMoving();
    30e4:	70 91 bc 06 	lds	r23, 0x06BC
            
            // convert moveTarget to an absolute position
            moveTarget = double(posFB.getFeedbackPosition()) - moveTarget;
    30e8:	80 91 bd 06 	lds	r24, 0x06BD
    30ec:	90 91 be 06 	lds	r25, 0x06BE
    30f0:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <__subsf3>
    30f4:	60 93 a7 06 	sts	0x06A7, r22
    30f8:	70 93 a8 06 	sts	0x06A8, r23
    30fc:	80 93 a9 06 	sts	0x06A9, r24
    3100:	90 93 aa 06 	sts	0x06AA, r25
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	80 93 c0 06 	sts	0x06C0, r24
    310a:	06 cf       	rjmp	.-500    	; 0x2f18 <__stack+0xd19>
    310c:	65 e8       	ldi	r22, 0x85	; 133
    310e:	7b e0       	ldi	r23, 0x0B	; 11
    3110:	8a ed       	ldi	r24, 0xDA	; 218
    3112:	97 e0       	ldi	r25, 0x07	; 7
    3114:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    3118:	b8 01       	movw	r22, r16
    311a:	8a ed       	ldi	r24, 0xDA	; 218

  float getFeedbackPosition() { return m_fbPos; }

  bool haveRecentPositionFeedback();
  bool movingUpWithFeedback() { return m_movingDownWithFeedback; }
  void setMovingUpWithFeedback(bool b) { m_movingUpWithFeedback = b; }
    311c:	97 e0       	ldi	r25, 0x07	; 7
    311e:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    3122:	67 e6       	ldi	r22, 0x67	; 103
            posFB.setMovingUpWithFeedback(true);
          } else {
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    3124:	7b e0       	ldi	r23, 0x0B	; 11
    3126:	b4 c1       	rjmp	.+872    	; 0x3490 <__stack+0x1291>
    3128:	80 91 76 07 	lds	r24, 0x0776
    312c:	90 91 77 07 	lds	r25, 0x0777
    3130:	86 70       	andi	r24, 0x06	; 6
    3132:	99 27       	eor	r25, r25
    3134:	89 2b       	or	r24, r25
    3136:	09 f1       	breq	.+66     	; 0x317a <__stack+0xf7b>
    3138:	63 ee       	ldi	r22, 0xE3	; 227
            Ethernet1.getCmdClient().println(F(" No recent position feedback."));
    313a:	7a e0       	ldi	r23, 0x0A	; 10
    313c:	a9 c1       	rjmp	.+850    	; 0x3490 <__stack+0x1291>
    313e:	69 e5       	ldi	r22, 0x59	; 89
    3140:	7b e0       	ldi	r23, 0x0B	; 11
    3142:	8a ed       	ldi	r24, 0xDA	; 218
    3144:	97 e0       	ldi	r25, 0x07	; 7
    3146:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    314a:	b8 01       	movw	r22, r16
        if (speedPct < 2 || speedPct > posFB.getFeedbackMaxSpeed() || moveTarget <= 0.0) {
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
          Ethernet1.getCmdClient().print(F("  Distance must be positive and speed must be from 2 through "));
          Ethernet1.getCmdClient().print(posFB.getFeedbackMaxSpeed()); Ethernet1.getCmdClient().println(F(" percent."));
        } else {
        if ( MCtrl.isNoLower() || MCtrl.isBrake() ) { 
    314c:	8a ed       	ldi	r24, 0xDA	; 218
    314e:	97 e0       	ldi	r25, 0x07	; 7
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
    3150:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    3154:	6b e1       	ldi	r22, 0x1B	; 27
      } else {
        
      if ( strcmp(pch, "down_distance") == 0) {
        int speedPct = parseMove();
        if (speedPct < 2 || speedPct > posFB.getFeedbackMaxSpeed() || moveTarget <= 0.0) {
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
    3156:	7b e0       	ldi	r23, 0x0B	; 11
    3158:	8a ed       	ldi	r24, 0xDA	; 218
    315a:	97 e0       	ldi	r25, 0x07	; 7
    315c:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    3160:	60 91 b3 06 	lds	r22, 0x06B3
    3164:	70 91 b4 06 	lds	r23, 0x06B4
    3168:	4a e0       	ldi	r20, 0x0A	; 10
    316a:	50 e0       	ldi	r21, 0x00	; 0
          Ethernet1.getCmdClient().print(F("  Distance must be positive and speed must be from 2 through "));
    316c:	8a ed       	ldi	r24, 0xDA	; 218
    316e:	97 e0       	ldi	r25, 0x07	; 7
    3170:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    3174:	61 e1       	ldi	r22, 0x11	; 17
    3176:	7b e0       	ldi	r23, 0x0B	; 11
          Ethernet1.getCmdClient().print(posFB.getFeedbackMaxSpeed()); Ethernet1.getCmdClient().println(F(" percent."));
    3178:	8b c1       	rjmp	.+790    	; 0x3490 <__stack+0x1291>
    317a:	83 eb       	ldi	r24, 0xB3	; 179
    317c:	96 e0       	ldi	r25, 0x06	; 6
    317e:	0e 94 84 2a 	call	0x5508	; 0x5508 <_ZN21PositionFeedbackClass26haveRecentPositionFeedbackEv>
    3182:	88 23       	and	r24, r24
    3184:	09 f4       	brne	.+2      	; 0x3188 <__stack+0xf89>
    3186:	56 c0       	rjmp	.+172    	; 0x3234 <__stack+0x1035>
    3188:	b7 01       	movw	r22, r14
    318a:	8e e6       	ldi	r24, 0x6E	; 110
    318c:	97 e0       	ldi	r25, 0x07	; 7
    318e:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
        } else {
        if ( MCtrl.isNoLower() || MCtrl.isBrake() ) { 
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
        } else {
          if (posFB.haveRecentPositionFeedback() == true) {
    3192:	b7 01       	movw	r22, r14
    3194:	83 eb       	ldi	r24, 0xB3	; 179
    3196:	96 e0       	ldi	r25, 0x06	; 6
    3198:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <_ZN21PositionFeedbackClass16setFeedbackDeltaEi>
    319c:	b7 01       	movw	r22, r14
    319e:	8e e6       	ldi	r24, 0x6E	; 110
            // do the move
            MCtrl.moveSetup(speedPct);
    31a0:	97 e0       	ldi	r25, 0x07	; 7
    31a2:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
    31a6:	66 ed       	ldi	r22, 0xD6	; 214
    31a8:	7a e0       	ldi	r23, 0x0A	; 10
            posFB.setFeedbackDelta(speedPct);
    31aa:	8a ed       	ldi	r24, 0xDA	; 218
    31ac:	97 e0       	ldi	r25, 0x07	; 7
    31ae:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    31b2:	40 91 a7 06 	lds	r20, 0x06A7
            MCtrl.moveAtSpeed(speedPct);
    31b6:	50 91 a8 06 	lds	r21, 0x06A8
    31ba:	60 91 a9 06 	lds	r22, 0x06A9
          
            Ethernet1.getCmdClient().print(F("Moving down ")); Ethernet1.getCmdClient().print(moveTarget);
    31be:	70 91 aa 06 	lds	r23, 0x06AA
    31c2:	22 e0       	ldi	r18, 0x02	; 2
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	8a ed       	ldi	r24, 0xDA	; 218
    31c8:	97 e0       	ldi	r25, 0x07	; 7
    31ca:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    31ce:	66 eb       	ldi	r22, 0xB6	; 182
    31d0:	7a e0       	ldi	r23, 0x0A	; 10
    31d2:	8a ed       	ldi	r24, 0xDA	; 218
    31d4:	97 e0       	ldi	r25, 0x07	; 7
    31d6:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    31da:	4a e0       	ldi	r20, 0x0A	; 10
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	b7 01       	movw	r22, r14
    31e0:	8a ed       	ldi	r24, 0xDA	; 218
    31e2:	97 e0       	ldi	r25, 0x07	; 7
    31e4:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
            Ethernet1.getCmdClient().print(F(" based on position feedback at "));
    31e8:	6e e9       	ldi	r22, 0x9E	; 158
    31ea:	7a e0       	ldi	r23, 0x0A	; 10
    31ec:	8a ed       	ldi	r24, 0xDA	; 218
    31ee:	97 e0       	ldi	r25, 0x07	; 7
    31f0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
            Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
    31f4:	0e 94 65 2f 	call	0x5eca	; 0x5eca <_Z13checkIfMovingv>
    31f8:	20 91 bb 06 	lds	r18, 0x06BB
    31fc:	30 91 bc 06 	lds	r19, 0x06BC
    3200:	40 91 bd 06 	lds	r20, 0x06BD
    3204:	50 91 be 06 	lds	r21, 0x06BE
    3208:	60 91 a7 06 	lds	r22, 0x06A7
            checkIfMoving();
    320c:	70 91 a8 06 	lds	r23, 0x06A8
            
            // convert moveTarget to an absolute position
            moveTarget = double(posFB.getFeedbackPosition()) + moveTarget;
    3210:	80 91 a9 06 	lds	r24, 0x06A9
    3214:	90 91 aa 06 	lds	r25, 0x06AA
    3218:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <__addsf3>
    321c:	60 93 a7 06 	sts	0x06A7, r22
    3220:	70 93 a8 06 	sts	0x06A8, r23
    3224:	80 93 a9 06 	sts	0x06A9, r24
    3228:	90 93 aa 06 	sts	0x06AA, r25
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	80 93 c1 06 	sts	0x06C1, r24
    3232:	72 ce       	rjmp	.-796    	; 0x2f18 <__stack+0xd19>
    3234:	60 e9       	ldi	r22, 0x90	; 144
    3236:	7a e0       	ldi	r23, 0x0A	; 10
    3238:	8a ed       	ldi	r24, 0xDA	; 218
    323a:	97 e0       	ldi	r25, 0x07	; 7
    323c:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    3240:	b8 01       	movw	r22, r16
    3242:	8a ed       	ldi	r24, 0xDA	; 218
  bool movingDownWithFeedback() { return m_movingDownWithFeedback; }
  void setMovingDownWithFeedback(bool b) { m_movingDownWithFeedback = b; }
    3244:	97 e0       	ldi	r25, 0x07	; 7
    3246:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    324a:	62 e7       	ldi	r22, 0x72	; 114
            posFB.setMovingDownWithFeedback(true);
          } else {
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    324c:	7a e0       	ldi	r23, 0x0A	; 10
    324e:	20 c1       	rjmp	.+576    	; 0x3490 <__stack+0x1291>
    3250:	a3 01       	movw	r20, r6
    3252:	92 01       	movw	r18, r4
    3254:	c7 01       	movw	r24, r14
    3256:	b6 01       	movw	r22, r12
    3258:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    325c:	18 16       	cp	r1, r24
    325e:	5c f4       	brge	.+22     	; 0x3276 <__stack+0x1077>
    3260:	80 91 76 07 	lds	r24, 0x0776
            Ethernet1.getCmdClient().println(F(" No recent position feedback."));
    3264:	90 91 77 07 	lds	r25, 0x0777
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().println(cmdBuf);
        } else {
        if ( (MCtrl.getCurrPos() < moveTarget) && (MCtrl.isNoLower() || MCtrl.isBrake() )) { 
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
        } else {
        if ( (MCtrl.getCurrPos() > moveTarget) && (MCtrl.isNoRaise() || MCtrl.isBrake() )) {
    3268:	85 70       	andi	r24, 0x05	; 5
    326a:	99 27       	eor	r25, r25
    326c:	89 2b       	or	r24, r25
    326e:	19 f0       	breq	.+6      	; 0x3276 <__stack+0x1077>
    3270:	68 e0       	ldi	r22, 0x08	; 8
    3272:	7a e0       	ldi	r23, 0x0A	; 10
    3274:	0d c1       	rjmp	.+538    	; 0x3490 <__stack+0x1291>
    3276:	b5 01       	movw	r22, r10
    3278:	8e e6       	ldi	r24, 0x6E	; 110
    327a:	97 e0       	ldi	r25, 0x07	; 7
    327c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
    3280:	40 91 a7 06 	lds	r20, 0x06A7
    3284:	50 91 a8 06 	lds	r21, 0x06A8
          Ethernet1.getCmdClient().println(F("Cannot raise due to NO_RAISE or E_STOP input."));
    3288:	60 91 a9 06 	lds	r22, 0x06A9
    328c:	70 91 aa 06 	lds	r23, 0x06AA
        } else {
          // do the command
          MCtrl.moveSetup(speedPct);
    3290:	8e e6       	ldi	r24, 0x6E	; 110
    3292:	97 e0       	ldi	r25, 0x07	; 7
    3294:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN8MM3Class9moveToPosEd>
          MCtrl.moveToPos(moveTarget);
    3298:	6d ef       	ldi	r22, 0xFD	; 253
    329a:	79 e0       	ldi	r23, 0x09	; 9
    329c:	8a ed       	ldi	r24, 0xDA	; 218
    329e:	97 e0       	ldi	r25, 0x07	; 7
    32a0:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    32a4:	40 91 a7 06 	lds	r20, 0x06A7
    32a8:	50 91 a8 06 	lds	r21, 0x06A8
    32ac:	60 91 a9 06 	lds	r22, 0x06A9
          
          Ethernet1.getCmdClient().print(F("Moving to ")); Ethernet1.getCmdClient().print(moveTarget);
    32b0:	70 91 aa 06 	lds	r23, 0x06AA
    32b4:	22 e0       	ldi	r18, 0x02	; 2
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	8a ed       	ldi	r24, 0xDA	; 218
    32ba:	97 e0       	ldi	r25, 0x07	; 7
    32bc:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    32c0:	6c ee       	ldi	r22, 0xEC	; 236
    32c2:	79 e0       	ldi	r23, 0x09	; 9
    32c4:	8a ed       	ldi	r24, 0xDA	; 218
    32c6:	97 e0       	ldi	r25, 0x07	; 7
    32c8:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    32cc:	4a e0       	ldi	r20, 0x0A	; 10
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	b5 01       	movw	r22, r10
    32d2:	8a ed       	ldi	r24, 0xDA	; 218
    32d4:	97 e0       	ldi	r25, 0x07	; 7
    32d6:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
          Ethernet1.getCmdClient().print(F(" revolutions at "));
    32da:	64 ed       	ldi	r22, 0xD4	; 212
    32dc:	79 e0       	ldi	r23, 0x09	; 9
    32de:	8a ed       	ldi	r24, 0xDA	; 218
    32e0:	97 e0       	ldi	r25, 0x07	; 7
    32e2:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
          Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
    32e6:	0e 94 65 2f 	call	0x5eca	; 0x5eca <_Z13checkIfMovingv>
    32ea:	16 ce       	rjmp	.-980    	; 0x2f18 <__stack+0xd19>
    32ec:	66 ec       	ldi	r22, 0xC6	; 198
    32ee:	79 e0       	ldi	r23, 0x09	; 9
    32f0:	8a ed       	ldi	r24, 0xDA	; 218
    32f2:	97 e0       	ldi	r25, 0x07	; 7
    32f4:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    32f8:	b8 01       	movw	r22, r16
    32fa:	8a ed       	ldi	r24, 0xDA	; 218
    32fc:	97 e0       	ldi	r25, 0x07	; 7
          checkIfMoving();
    32fe:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    3302:	66 ea       	ldi	r22, 0xA6	; 166
      } else {
        
      if ( strcmp(pch, "move_to_position") == 0) {
        int speedPct = parseMove();
        if (speedPct < 2 || speedPct > posFB.getFeedbackMaxSpeed()) {
          Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    3304:	79 e0       	ldi	r23, 0x09	; 9
    3306:	8a ed       	ldi	r24, 0xDA	; 218
    3308:	97 e0       	ldi	r25, 0x07	; 7
    330a:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    330e:	60 91 b3 06 	lds	r22, 0x06B3
    3312:	70 91 b4 06 	lds	r23, 0x06B4
    3316:	4a e0       	ldi	r20, 0x0A	; 10
    3318:	50 e0       	ldi	r21, 0x00	; 0
          Ethernet1.getCmdClient().print(F("  Speed must be from 2 through "));
    331a:	8a ed       	ldi	r24, 0xDA	; 218
    331c:	97 e0       	ldi	r25, 0x07	; 7
    331e:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    3322:	6c e9       	ldi	r22, 0x9C	; 156
    3324:	79 e0       	ldi	r23, 0x09	; 9
          Ethernet1.getCmdClient().print(posFB.getFeedbackMaxSpeed()); Ethernet1.getCmdClient().println(F(" percent."));
    3326:	b4 c0       	rjmp	.+360    	; 0x3490 <__stack+0x1291>
    3328:	c0 90 bb 06 	lds	r12, 0x06BB
    332c:	d0 90 bc 06 	lds	r13, 0x06BC
    3330:	e0 90 bd 06 	lds	r14, 0x06BD
    3334:	f0 90 be 06 	lds	r15, 0x06BE
    3338:	40 90 a7 06 	lds	r4, 0x06A7
    333c:	50 90 a8 06 	lds	r5, 0x06A8
  int getFeedbackMaxSpeed() { return m_fb_max_speed; }
  void setFeedbackMaxSpeed();

  void setFeedbackDelta(int speed_percent);

  float getFeedbackPosition() { return m_fbPos; }
    3340:	60 90 a9 06 	lds	r6, 0x06A9
    3344:	70 90 aa 06 	lds	r7, 0x06AA
    3348:	a3 01       	movw	r20, r6
    334a:	92 01       	movw	r18, r4
    334c:	c7 01       	movw	r24, r14
    334e:	b6 01       	movw	r22, r12
        } else {
        if ( (double(posFB.getFeedbackPosition()) < moveTarget) && (MCtrl.isNoLower() || MCtrl.isBrake()) ) { 
    3350:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    3354:	87 ff       	sbrs	r24, 7
    3356:	0b c0       	rjmp	.+22     	; 0x336e <__stack+0x116f>
    3358:	80 91 76 07 	lds	r24, 0x0776
    335c:	90 91 77 07 	lds	r25, 0x0777
    3360:	86 70       	andi	r24, 0x06	; 6
    3362:	99 27       	eor	r25, r25
    3364:	89 2b       	or	r24, r25
    3366:	19 f0       	breq	.+6      	; 0x336e <__stack+0x116f>
    3368:	6e e6       	ldi	r22, 0x6E	; 110
    336a:	79 e0       	ldi	r23, 0x09	; 9
    336c:	91 c0       	rjmp	.+290    	; 0x3490 <__stack+0x1291>
    336e:	a3 01       	movw	r20, r6
    3370:	92 01       	movw	r18, r4
    3372:	c7 01       	movw	r24, r14
    3374:	b6 01       	movw	r22, r12
    3376:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    337a:	18 16       	cp	r1, r24
    337c:	4c f4       	brge	.+18     	; 0x3390 <__stack+0x1191>
    337e:	80 91 76 07 	lds	r24, 0x0776
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
    3382:	90 91 77 07 	lds	r25, 0x0777
        } else {
        if ( (double(posFB.getFeedbackPosition()) > moveTarget) && (MCtrl.isNoRaise() || MCtrl.isBrake()) ) {
    3386:	85 70       	andi	r24, 0x05	; 5
    3388:	99 27       	eor	r25, r25
    338a:	89 2b       	or	r24, r25
    338c:	09 f0       	breq	.+2      	; 0x3390 <__stack+0x1191>
    338e:	7e c0       	rjmp	.+252    	; 0x348c <__stack+0x128d>
    3390:	83 eb       	ldi	r24, 0xB3	; 179
    3392:	96 e0       	ldi	r25, 0x06	; 6
    3394:	0e 94 84 2a 	call	0x5508	; 0x5508 <_ZN21PositionFeedbackClass26haveRecentPositionFeedbackEv>
    3398:	88 23       	and	r24, r24
    339a:	09 f4       	brne	.+2      	; 0x339e <__stack+0x119f>
    339c:	69 c0       	rjmp	.+210    	; 0x3470 <__stack+0x1271>
    339e:	b5 01       	movw	r22, r10
    33a0:	8e e6       	ldi	r24, 0x6E	; 110
    33a2:	97 e0       	ldi	r25, 0x07	; 7
    33a4:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
          Ethernet1.getCmdClient().println(F("Cannot raise due to NO_RAISE or E_STOP input."));
        } else {
          if (posFB.haveRecentPositionFeedback() == true) {
    33a8:	b5 01       	movw	r22, r10
    33aa:	83 eb       	ldi	r24, 0xB3	; 179
    33ac:	96 e0       	ldi	r25, 0x06	; 6
    33ae:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <_ZN21PositionFeedbackClass16setFeedbackDeltaEi>
    33b2:	20 91 a7 06 	lds	r18, 0x06A7
            // do the move
            MCtrl.moveSetup(speedPct);
    33b6:	30 91 a8 06 	lds	r19, 0x06A8
    33ba:	40 91 a9 06 	lds	r20, 0x06A9
    33be:	50 91 aa 06 	lds	r21, 0x06AA
            posFB.setFeedbackDelta(speedPct);
    33c2:	60 91 bb 06 	lds	r22, 0x06BB
    33c6:	70 91 bc 06 	lds	r23, 0x06BC

            // do we need to move up or down
            if (double(posFB.getFeedbackPosition()) < moveTarget) {
    33ca:	80 91 bd 06 	lds	r24, 0x06BD
    33ce:	90 91 be 06 	lds	r25, 0x06BE
    33d2:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    33d6:	87 ff       	sbrs	r24, 7
    33d8:	08 c0       	rjmp	.+16     	; 0x33ea <__stack+0x11eb>
    33da:	b5 01       	movw	r22, r10
    33dc:	8e e6       	ldi	r24, 0x6E	; 110
    33de:	97 e0       	ldi	r25, 0x07	; 7
    33e0:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	80 93 c1 06 	sts	0x06C1, r24
    33ea:	20 91 a7 06 	lds	r18, 0x06A7
    33ee:	30 91 a8 06 	lds	r19, 0x06A8
              MCtrl.moveAtSpeed(speedPct);
    33f2:	40 91 a9 06 	lds	r20, 0x06A9
    33f6:	50 91 aa 06 	lds	r21, 0x06AA
    33fa:	60 91 bb 06 	lds	r22, 0x06BB

  bool haveRecentPositionFeedback();
  bool movingUpWithFeedback() { return m_movingDownWithFeedback; }
  void setMovingUpWithFeedback(bool b) { m_movingUpWithFeedback = b; }
  bool movingDownWithFeedback() { return m_movingDownWithFeedback; }
  void setMovingDownWithFeedback(bool b) { m_movingDownWithFeedback = b; }
    33fe:	70 91 bc 06 	lds	r23, 0x06BC
              posFB.setMovingDownWithFeedback(true);
            }
            if (double(posFB.getFeedbackPosition()) > moveTarget) {
    3402:	80 91 bd 06 	lds	r24, 0x06BD
    3406:	90 91 be 06 	lds	r25, 0x06BE
    340a:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    340e:	18 16       	cp	r1, r24
    3410:	5c f4       	brge	.+22     	; 0x3428 <__stack+0x1229>
    3412:	66 27       	eor	r22, r22
    3414:	77 27       	eor	r23, r23
    3416:	6a 19       	sub	r22, r10
    3418:	7b 09       	sbc	r23, r11
    341a:	8e e6       	ldi	r24, 0x6E	; 110
    341c:	97 e0       	ldi	r25, 0x07	; 7
    341e:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	80 93 c0 06 	sts	0x06C0, r24
    3428:	65 e3       	ldi	r22, 0x35	; 53
              MCtrl.moveAtSpeed(-1 * speedPct);
    342a:	79 e0       	ldi	r23, 0x09	; 9
    342c:	8a ed       	ldi	r24, 0xDA	; 218
    342e:	97 e0       	ldi	r25, 0x07	; 7
    3430:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    3434:	40 91 a7 06 	lds	r20, 0x06A7
    3438:	50 91 a8 06 	lds	r21, 0x06A8

  float getFeedbackPosition() { return m_fbPos; }

  bool haveRecentPositionFeedback();
  bool movingUpWithFeedback() { return m_movingDownWithFeedback; }
  void setMovingUpWithFeedback(bool b) { m_movingUpWithFeedback = b; }
    343c:	60 91 a9 06 	lds	r22, 0x06A9
              posFB.setMovingUpWithFeedback(true);
            }
          
            Ethernet1.getCmdClient().print(F("Moving to ")); Ethernet1.getCmdClient().print(moveTarget);
    3440:	70 91 aa 06 	lds	r23, 0x06AA
    3444:	22 e0       	ldi	r18, 0x02	; 2
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	8a ed       	ldi	r24, 0xDA	; 218
    344a:	97 e0       	ldi	r25, 0x07	; 7
    344c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    3450:	65 e1       	ldi	r22, 0x15	; 21
    3452:	79 e0       	ldi	r23, 0x09	; 9
    3454:	8a ed       	ldi	r24, 0xDA	; 218
    3456:	97 e0       	ldi	r25, 0x07	; 7
    3458:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    345c:	4a e0       	ldi	r20, 0x0A	; 10
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	b5 01       	movw	r22, r10
    3462:	8a ed       	ldi	r24, 0xDA	; 218
    3464:	97 e0       	ldi	r25, 0x07	; 7
    3466:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
            Ethernet1.getCmdClient().print(F(" based on position feedback at "));
    346a:	6d ef       	ldi	r22, 0xFD	; 253
    346c:	78 e0       	ldi	r23, 0x08	; 8
    346e:	37 cf       	rjmp	.-402    	; 0x32de <__stack+0x10df>
    3470:	6f ee       	ldi	r22, 0xEF	; 239
    3472:	78 e0       	ldi	r23, 0x08	; 8
            Ethernet1.getCmdClient().print(speedPct); Ethernet1.getCmdClient().println(F(" percent of full speed."));
    3474:	8a ed       	ldi	r24, 0xDA	; 218
    3476:	97 e0       	ldi	r25, 0x07	; 7
    3478:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    347c:	b8 01       	movw	r22, r16
    347e:	8a ed       	ldi	r24, 0xDA	; 218
    3480:	97 e0       	ldi	r25, 0x07	; 7
    3482:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    3486:	61 ed       	ldi	r22, 0xD1	; 209
            checkIfMoving();
          } else {
            Ethernet1.getCmdClient().print(F("Bad command: ")); Ethernet1.getCmdClient().print(cmdBuf);
    3488:	78 e0       	ldi	r23, 0x08	; 8
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <__stack+0x1291>
    348c:	60 e4       	ldi	r22, 0x40	; 64
    348e:	79 e0       	ldi	r23, 0x09	; 9
    3490:	8a ed       	ldi	r24, 0xDA	; 218
    3492:	97 e0       	ldi	r25, 0x07	; 7
    3494:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3498:	3f cd       	rjmp	.-1410   	; 0x2f18 <__stack+0xd19>
    349a:	c8 59       	subi	r28, 0x98	; 152
    349c:	df 4f       	sbci	r29, 0xFF	; 255
            Ethernet1.getCmdClient().println(F(" No recent position feedback."));
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
        } else {
        if ( (double(posFB.getFeedbackPosition()) < moveTarget) && (MCtrl.isNoLower() || MCtrl.isBrake()) ) { 
          Ethernet1.getCmdClient().println(F("Cannot lower due to NO_LOWER or E_STOP input."));
        } else {
        if ( (double(posFB.getFeedbackPosition()) > moveTarget) && (MCtrl.isNoRaise() || MCtrl.isBrake()) ) {
          Ethernet1.getCmdClient().println(F("Cannot raise due to NO_RAISE or E_STOP input."));
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	df 91       	pop	r29
    34aa:	cf 91       	pop	r28
    34ac:	1f 91       	pop	r17
    34ae:	0f 91       	pop	r16
    34b0:	ff 90       	pop	r15
      }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}

    }
      memset(cmdBuf, 0, CMD_BUF_LEN);  // clear the command buffer after processing
  }
}
    34b2:	ef 90       	pop	r14
    34b4:	df 90       	pop	r13
    34b6:	cf 90       	pop	r12
    34b8:	bf 90       	pop	r11
    34ba:	af 90       	pop	r10
    34bc:	9f 90       	pop	r9
    34be:	8f 90       	pop	r8
    34c0:	7f 90       	pop	r7
    34c2:	6f 90       	pop	r6
    34c4:	5f 90       	pop	r5
    34c6:	4f 90       	pop	r4
    34c8:	08 95       	ret

000034ca <_GLOBAL__sub_I__ZN17cmdProcessorClassC2Ev>:
    34ca:	0f 93       	push	r16
    34cc:	00 e0       	ldi	r16, 0x00	; 0
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	40 e0       	ldi	r20, 0x00	; 0
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	88 e8       	ldi	r24, 0x88	; 136
    34d6:	96 e0       	ldi	r25, 0x06	; 6
    34d8:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
    34dc:	0f 91       	pop	r16
    34de:	08 95       	ret

000034e0 <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    34e0:	0c 94 ed 5e 	jmp	0xbdda	; 0xbdda <__eerd_byte_m2560>

000034e4 <_ZN17EepromAccessClass13readEEPromIntEi>:
// 
// 

#include "EepromAccess.h"

unsigned int EepromAccessClass::readEEPromInt(int addr) {
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	eb 01       	movw	r28, r22
  byte b1 = EEPROM.read(addr);
    34ec:	cb 01       	movw	r24, r22
    34ee:	f8 df       	rcall	.-16     	; 0x34e0 <_ZN11EEPROMClass4readEi.isra.0>
    34f0:	18 2f       	mov	r17, r24
    34f2:	ce 01       	movw	r24, r28
  byte b2 = EEPROM.read(addr + 1);
    34f4:	01 96       	adiw	r24, 0x01	; 1
    34f6:	f4 df       	rcall	.-24     	; 0x34e0 <_ZN11EEPROMClass4readEi.isra.0>
    34f8:	21 2f       	mov	r18, r17
    34fa:	30 e0       	ldi	r19, 0x00	; 0
  return (unsigned int)b1 * 256 + (unsigned int)b2;
    34fc:	32 2f       	mov	r19, r18
    34fe:	22 27       	eor	r18, r18
    3500:	a9 01       	movw	r20, r18
    3502:	48 0f       	add	r20, r24
}
    3504:	51 1d       	adc	r21, r1
    3506:	ca 01       	movw	r24, r20
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	08 95       	ret

00003510 <_ZN17EepromAccessClass14writeEEPromIntEii>:
    3510:	df 92       	push	r13
    3512:	ef 92       	push	r14

void EepromAccessClass::writeEEPromInt(int addr, int val) {
    3514:	ff 92       	push	r15
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    351a:	cf 93       	push	r28
    351c:	df 93       	push	r29
    351e:	8b 01       	movw	r16, r22
    3520:	ea 01       	movw	r28, r20
  // Read the value, see if it has changed, and write only if it has.
  byte b1 = EEPROM.read(addr);
    3522:	cb 01       	movw	r24, r22
    3524:	dd df       	rcall	.-70     	; 0x34e0 <_ZN11EEPROMClass4readEi.isra.0>
    3526:	d8 2e       	mov	r13, r24
    3528:	78 01       	movw	r14, r16
  byte b2 = EEPROM.read(addr + 1);
    352a:	8f ef       	ldi	r24, 0xFF	; 255
    352c:	e8 1a       	sub	r14, r24
    352e:	f8 0a       	sbc	r15, r24
    3530:	c7 01       	movw	r24, r14
    3532:	d6 df       	rcall	.-84     	; 0x34e0 <_ZN11EEPROMClass4readEi.isra.0>
    3534:	2d 2d       	mov	r18, r13
    3536:	30 e0       	ldi	r19, 0x00	; 0
  unsigned int v = (unsigned int)b1 * 256 + (unsigned int)b2;
    3538:	32 2f       	mov	r19, r18
    353a:	22 27       	eor	r18, r18
    353c:	28 0f       	add	r18, r24
    353e:	31 1d       	adc	r19, r1
    3540:	2c 17       	cp	r18, r28
    3542:	3d 07       	cpc	r19, r29
  if ((int)v != val) {
    3544:	49 f1       	breq	.+82     	; 0x3598 <_ZN17EepromAccessClass14writeEEPromIntEii+0x88>
    3546:	6f e8       	ldi	r22, 0x8F	; 143
    3548:	7e e0       	ldi	r23, 0x0E	; 14
    b1 = (byte)(val >> 8);
    b2 = (byte)(val & 0xFF);

    Serial.print(F("Writing the following values to EEPROM: "));
    354a:	86 ec       	ldi	r24, 0xC6	; 198
    354c:	98 e0       	ldi	r25, 0x08	; 8
    354e:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    3552:	4a e0       	ldi	r20, 0x0A	; 10
    3554:	50 e0       	ldi	r21, 0x00	; 0
    Serial.print(b1);
    3556:	6d 2f       	mov	r22, r29
    3558:	86 ec       	ldi	r24, 0xC6	; 198
    355a:	98 e0       	ldi	r25, 0x08	; 8
    355c:	0e 94 b1 50 	call	0xa162	; 0xa162 <_ZN5Print5printEhi>
    3560:	6c ea       	ldi	r22, 0xAC	; 172
    3562:	73 e0       	ldi	r23, 0x03	; 3
    Serial.print(", ");
    3564:	86 ec       	ldi	r24, 0xC6	; 198
    3566:	98 e0       	ldi	r25, 0x08	; 8
    3568:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    356c:	4a e0       	ldi	r20, 0x0A	; 10
    356e:	50 e0       	ldi	r21, 0x00	; 0
    Serial.println(b2);
    3570:	6c 2f       	mov	r22, r28
    3572:	86 ec       	ldi	r24, 0xC6	; 198
    3574:	98 e0       	ldi	r25, 0x08	; 8
    3576:	0e 94 b7 50 	call	0xa16e	; 0xa16e <_ZN5Print7printlnEhi>
    357a:	6d 2f       	mov	r22, r29
    357c:	c8 01       	movw	r24, r16
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    357e:	0e 94 f5 5e 	call	0xbdea	; 0xbdea <__eewr_byte_m2560>
    3582:	6c 2f       	mov	r22, r28
    3584:	c7 01       	movw	r24, r14
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28

    EEPROM.write(addr, b1);
    EEPROM.write(addr + 1, b2);
  }
}
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	df 90       	pop	r13
    3594:	0c 94 f5 5e 	jmp	0xbdea	; 0xbdea <__eewr_byte_m2560>
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	ff 90       	pop	r15
    35a2:	ef 90       	pop	r14
    35a4:	df 90       	pop	r13
    35a6:	08 95       	ret

000035a8 <_ZN17EepromAccessClass14readEEPromLongEi>:
    35a8:	cf 92       	push	r12
    35aa:	df 92       	push	r13

unsigned long EepromAccessClass::readEEPromLong(int addr) {
    35ac:	ef 92       	push	r14
    35ae:	ff 92       	push	r15
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	cf 93       	push	r28
    35b6:	df 93       	push	r29
    35b8:	8b 01       	movw	r16, r22
    35ba:	c8 e1       	ldi	r28, 0x18	; 24
    35bc:	d0 e0       	ldi	r29, 0x00	; 0
  byte b[4];
  unsigned long retval = 0;
    35be:	c1 2c       	mov	r12, r1
    35c0:	d1 2c       	mov	r13, r1
    35c2:	76 01       	movw	r14, r12

  for (int i = 0; i<4; i++) {
    b[i] = EEPROM.read(addr + i);
    35c4:	c8 01       	movw	r24, r16
    35c6:	8c df       	rcall	.-232    	; 0x34e0 <_ZN11EEPROMClass4readEi.isra.0>
    35c8:	48 2f       	mov	r20, r24
    retval += (unsigned long)b[i] << (24 - i * 8);
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	0c 2e       	mov	r0, r28
    35d2:	04 c0       	rjmp	.+8      	; 0x35dc <_ZN17EepromAccessClass14readEEPromLongEi+0x34>
    35d4:	44 0f       	add	r20, r20
    35d6:	55 1f       	adc	r21, r21
    35d8:	66 1f       	adc	r22, r22
    35da:	77 1f       	adc	r23, r23
    35dc:	0a 94       	dec	r0
    35de:	d2 f7       	brpl	.-12     	; 0x35d4 <_ZN17EepromAccessClass14readEEPromLongEi+0x2c>
    35e0:	c4 0e       	add	r12, r20
    35e2:	d5 1e       	adc	r13, r21
    35e4:	e6 1e       	adc	r14, r22
    35e6:	f7 1e       	adc	r15, r23
    35e8:	0f 5f       	subi	r16, 0xFF	; 255
    35ea:	1f 4f       	sbci	r17, 0xFF	; 255
    35ec:	28 97       	sbiw	r28, 0x08	; 8
    35ee:	c8 3f       	cpi	r28, 0xF8	; 248

unsigned long EepromAccessClass::readEEPromLong(int addr) {
  byte b[4];
  unsigned long retval = 0;

  for (int i = 0; i<4; i++) {
    35f0:	8f ef       	ldi	r24, 0xFF	; 255
    35f2:	d8 07       	cpc	r29, r24
    35f4:	39 f7       	brne	.-50     	; 0x35c4 <_ZN17EepromAccessClass14readEEPromLongEi+0x1c>
    35f6:	c7 01       	movw	r24, r14
    b[i] = EEPROM.read(addr + i);
    retval += (unsigned long)b[i] << (24 - i * 8);
  }
  return retval;
}
    35f8:	b6 01       	movw	r22, r12
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	ef 90       	pop	r14
    3606:	df 90       	pop	r13
    3608:	cf 90       	pop	r12
    360a:	08 95       	ret

0000360c <_ZN17EepromAccessClass15writeEEPromLongEil>:
    360c:	8f 92       	push	r8

void EepromAccessClass::writeEEPromLong(int addr, long val) {
    360e:	9f 92       	push	r9
    3610:	af 92       	push	r10
    3612:	bf 92       	push	r11
    3614:	cf 92       	push	r12
    3616:	df 92       	push	r13
    3618:	ef 92       	push	r14
    361a:	ff 92       	push	r15
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	8b 01       	movw	r16, r22
    3626:	49 01       	movw	r8, r18
    3628:	5a 01       	movw	r10, r20
  // Read the value, see if it has changed, and write only if it has.
  byte b[4];
  unsigned long v = readEEPromLong(addr);
    362a:	be df       	rcall	.-132    	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    362c:	68 15       	cp	r22, r8
  //  Serial.print("Storing value: ");
  //  Serial.println(val);
  //  Serial.print("Read from EEProm: ");
  //  Serial.println(v);

  if ((long)v != val) {
    362e:	79 05       	cpc	r23, r9
    3630:	8a 05       	cpc	r24, r10
    3632:	9b 05       	cpc	r25, r11
    3634:	d9 f1       	breq	.+118    	; 0x36ac <_ZN17EepromAccessClass15writeEEPromLongEil+0xa0>
    3636:	66 e6       	ldi	r22, 0x66	; 102
    Serial.print(F("Writing the following values to EEPROM: "));
    3638:	7e e0       	ldi	r23, 0x0E	; 14
    363a:	86 ec       	ldi	r24, 0xC6	; 198
    363c:	98 e0       	ldi	r25, 0x08	; 8
    363e:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    3642:	e8 01       	movw	r28, r16
    3644:	08 e1       	ldi	r16, 0x18	; 24
    3646:	10 e0       	ldi	r17, 0x00	; 0
    3648:	75 01       	movw	r14, r10
    for (int i = 0; i<4; i++) {
      b[i] = (byte)((val >> (24 - i * 8)) & 0xFF);
    364a:	64 01       	movw	r12, r8
    364c:	00 2e       	mov	r0, r16
    364e:	04 c0       	rjmp	.+8      	; 0x3658 <_ZN17EepromAccessClass15writeEEPromLongEil+0x4c>
    3650:	f5 94       	asr	r15
    3652:	e7 94       	ror	r14
    3654:	d7 94       	ror	r13
    3656:	c7 94       	ror	r12
    3658:	0a 94       	dec	r0
    365a:	d2 f7       	brpl	.-12     	; 0x3650 <_ZN17EepromAccessClass15writeEEPromLongEil+0x44>
    365c:	4a e0       	ldi	r20, 0x0A	; 10
      Serial.print(b[i]); Serial.print(", ");
    365e:	50 e0       	ldi	r21, 0x00	; 0
    3660:	6c 2d       	mov	r22, r12
    3662:	86 ec       	ldi	r24, 0xC6	; 198
    3664:	98 e0       	ldi	r25, 0x08	; 8
    3666:	0e 94 b1 50 	call	0xa162	; 0xa162 <_ZN5Print5printEhi>
    366a:	6c ea       	ldi	r22, 0xAC	; 172
    366c:	73 e0       	ldi	r23, 0x03	; 3
    366e:	86 ec       	ldi	r24, 0xC6	; 198
    3670:	98 e0       	ldi	r25, 0x08	; 8
    3672:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    3676:	6c 2d       	mov	r22, r12
    3678:	ce 01       	movw	r24, r28
    367a:	0e 94 f5 5e 	call	0xbdea	; 0xbdea <__eewr_byte_m2560>
    367e:	08 50       	subi	r16, 0x08	; 8
    3680:	11 09       	sbc	r17, r1
    3682:	21 96       	adiw	r28, 0x01	; 1
    3684:	08 3f       	cpi	r16, 0xF8	; 248
  //  Serial.print("Read from EEProm: ");
  //  Serial.println(v);

  if ((long)v != val) {
    Serial.print(F("Writing the following values to EEPROM: "));
    for (int i = 0; i<4; i++) {
    3686:	8f ef       	ldi	r24, 0xFF	; 255
    3688:	18 07       	cpc	r17, r24
    368a:	f1 f6       	brne	.-68     	; 0x3648 <_ZN17EepromAccessClass15writeEEPromLongEil+0x3c>
    368c:	86 ec       	ldi	r24, 0xC6	; 198
      b[i] = (byte)((val >> (24 - i * 8)) & 0xFF);
      Serial.print(b[i]); Serial.print(", ");
      EEPROM.write(addr + i, b[i]);
    }
    Serial.println();
    368e:	98 e0       	ldi	r25, 0x08	; 8
    3690:	df 91       	pop	r29
  }
}
    3692:	cf 91       	pop	r28
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	df 90       	pop	r13
    369e:	cf 90       	pop	r12
    36a0:	bf 90       	pop	r11
    36a2:	af 90       	pop	r10
    36a4:	9f 90       	pop	r9
    36a6:	8f 90       	pop	r8
    36a8:	0c 94 88 4f 	jmp	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    for (int i = 0; i<4; i++) {
      b[i] = (byte)((val >> (24 - i * 8)) & 0xFF);
      Serial.print(b[i]); Serial.print(", ");
      EEPROM.write(addr + i, b[i]);
    }
    Serial.println();
    36ac:	df 91       	pop	r29
  }
}
    36ae:	cf 91       	pop	r28
    36b0:	1f 91       	pop	r17
    36b2:	0f 91       	pop	r16
    36b4:	ff 90       	pop	r15
    36b6:	ef 90       	pop	r14
    36b8:	df 90       	pop	r13
    36ba:	cf 90       	pop	r12
    36bc:	bf 90       	pop	r11
    36be:	af 90       	pop	r10
    36c0:	9f 90       	pop	r9
    36c2:	8f 90       	pop	r8
    36c4:	08 95       	ret

000036c6 <_ZN15EthernetSupportC1Ev>:
// Constructor - constructs servers with default port numbers
// 
// Note: As far as I can tell, there must be a port number in order to declare these
// servers.  These port numbers will be overwritten by values in EEPROM during setup
// (if necessary).
EthernetSupport::EthernetSupport()
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	ec 01       	movw	r28, r24
  : outputServer(DEFAULT_PORT_BASE),
       cmdServer(DEFAULT_PORT_BASE+1),
       posServer(DEFAULT_PORT_BASE+2) {
    36cc:	06 96       	adiw	r24, 0x06	; 6
    36ce:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    36d2:	ce 01       	movw	r24, r28
    36d4:	0c 96       	adiw	r24, 0x0c	; 12
    36d6:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    36da:	ce 01       	movw	r24, r28
    36dc:	42 96       	adiw	r24, 0x12	; 18
    36de:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    36e2:	ce 01       	movw	r24, r28
    36e4:	48 96       	adiw	r24, 0x18	; 24
    36e6:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    36ea:	60 e2       	ldi	r22, 0x20	; 32
    36ec:	78 ef       	ldi	r23, 0xF8	; 248
    36ee:	ce 01       	movw	r24, r28
    36f0:	4e 96       	adiw	r24, 0x1e	; 30
    36f2:	0e 94 7b 40 	call	0x80f6	; 0x80f6 <_ZN14EthernetServerC1Ej>
    36f6:	61 e2       	ldi	r22, 0x21	; 33
    36f8:	78 ef       	ldi	r23, 0xF8	; 248
    36fa:	ce 01       	movw	r24, r28
    36fc:	84 96       	adiw	r24, 0x24	; 36
    36fe:	0e 94 7b 40 	call	0x80f6	; 0x80f6 <_ZN14EthernetServerC1Ej>
    3702:	62 e2       	ldi	r22, 0x22	; 34
    3704:	78 ef       	ldi	r23, 0xF8	; 248
    3706:	ce 01       	movw	r24, r28
    3708:	8a 96       	adiw	r24, 0x2a	; 42
    370a:	0e 94 7b 40 	call	0x80f6	; 0x80f6 <_ZN14EthernetServerC1Ej>
    370e:	ce 01       	movw	r24, r28
    3710:	c0 96       	adiw	r24, 0x30	; 48
    3712:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZN14EthernetClientC1Ev>
    3716:	ce 01       	movw	r24, r28
    3718:	cd 96       	adiw	r24, 0x3d	; 61
    371a:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZN14EthernetClientC1Ev>
    371e:	ce 01       	movw	r24, r28
    3720:	86 5b       	subi	r24, 0xB6	; 182
    3722:	9f 4f       	sbci	r25, 0xFF	; 255
    3724:	0e 94 37 3f 	call	0x7e6e	; 0x7e6e <_ZN14EthernetClientC1Ev>
    3728:	fe 01       	movw	r30, r28
    372a:	e9 5a       	subi	r30, 0xA9	; 169
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	10 82       	st	Z, r1
    3730:	31 96       	adiw	r30, 0x01	; 1
    3732:	10 82       	st	Z, r1
    3734:	c7 5a       	subi	r28, 0xA7	; 167
    3736:	df 4f       	sbci	r29, 0xFF	; 255
    3738:	18 82       	st	Y, r1

  // initialize variables       
  outputConnected = false; // whether or not the client was connected previously
  cmdConnected = false;
  posConnected = false;
}
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	08 95       	ret

00003740 <_ZN15EthernetSupport8IPtoLongE6String>:
}


// converts a period separated list of four ints in the form of an IP address
// to a long value and returns it.  Returns -1 if failed.
unsigned long EthernetSupport::IPtoLong(String rb) {
    3740:	4f 92       	push	r4
    3742:	5f 92       	push	r5
    3744:	6f 92       	push	r6
    3746:	7f 92       	push	r7
    3748:	8f 92       	push	r8
    374a:	9f 92       	push	r9
    374c:	af 92       	push	r10
    374e:	bf 92       	push	r11
    3750:	cf 92       	push	r12
    3752:	df 92       	push	r13
    3754:	ef 92       	push	r14
    3756:	ff 92       	push	r15
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	60 97       	sbiw	r28, 0x10	; 16
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	6b 01       	movw	r12, r22
  String s;
    3772:	6f e0       	ldi	r22, 0x0F	; 15
    3774:	72 e0       	ldi	r23, 0x02	; 2
    3776:	ce 01       	movw	r24, r28
    3778:	07 96       	adiw	r24, 0x07	; 7
    377a:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    377e:	28 e1       	ldi	r18, 0x18	; 24
    3780:	82 2e       	mov	r8, r18
    3782:	91 2c       	mov	r9, r1
  byte bytes[4];
  unsigned long retVal = 0;

  // parse the values we are interested in
  int itemNum = 0;
    3784:	a1 2c       	mov	r10, r1
    3786:	b1 2c       	mov	r11, r1
// converts a period separated list of four ints in the form of an IP address
// to a long value and returns it.  Returns -1 if failed.
unsigned long EthernetSupport::IPtoLong(String rb) {
  String s;
  byte bytes[4];
  unsigned long retVal = 0;
    3788:	41 2c       	mov	r4, r1
    378a:	51 2c       	mov	r5, r1
    378c:	32 01       	movw	r6, r4

  // parse the values we are interested in
  int itemNum = 0;
  int b = 0;
    378e:	e1 2c       	mov	r14, r1
    3790:	f1 2c       	mov	r15, r1
  int i = 0;
  while (i != -1) {
    // find the next s
    if (i != 0) { b = i + 1; }  // skip the first time
    i = rb.indexOf('.', b);
    3792:	a7 01       	movw	r20, r14
    3794:	6e e2       	ldi	r22, 0x2E	; 46
    3796:	c6 01       	movw	r24, r12
    3798:	0e 94 79 54 	call	0xa8f2	; 0xa8f2 <_ZNK6String7indexOfEcj>
    379c:	8c 01       	movw	r16, r24
    if (i == -1) {
    379e:	8f 3f       	cpi	r24, 0xFF	; 255
    37a0:	ff ef       	ldi	r31, 0xFF	; 255
    37a2:	9f 07       	cpc	r25, r31
    37a4:	21 f4       	brne	.+8      	; 0x37ae <_ZN15EthernetSupport8IPtoLongE6String+0x6e>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    37a6:	f6 01       	movw	r30, r12
    37a8:	24 81       	ldd	r18, Z+4	; 0x04
    37aa:	35 81       	ldd	r19, Z+5	; 0x05
    37ac:	01 c0       	rjmp	.+2      	; 0x37b0 <_ZN15EthernetSupport8IPtoLongE6String+0x70>
      s = rb.substring(b);  // to the end
    }
    else {
      s = rb.substring(b, i);
    37ae:	9c 01       	movw	r18, r24
    37b0:	a7 01       	movw	r20, r14
    37b2:	b6 01       	movw	r22, r12
    37b4:	ce 01       	movw	r24, r28
    37b6:	01 96       	adiw	r24, 0x01	; 1
    37b8:	0e 94 94 54 	call	0xa928	; 0xa928 <_ZNK6String9substringEjj>
    37bc:	be 01       	movw	r22, r28
    37be:	6f 5f       	subi	r22, 0xFF	; 255
    37c0:	7f 4f       	sbci	r23, 0xFF	; 255
    37c2:	ce 01       	movw	r24, r28
    37c4:	07 96       	adiw	r24, 0x07	; 7
    37c6:	0e 94 5c 53 	call	0xa6b8	; 0xa6b8 <_ZN6StringaSERKS_>
    37ca:	ce 01       	movw	r24, r28
    37cc:	01 96       	adiw	r24, 0x01	; 1
    37ce:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    }
    s.trim();
    37d2:	ce 01       	movw	r24, r28
    37d4:	07 96       	adiw	r24, 0x07	; 7
    37d6:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <_ZN6String4trimEv>

    bytes[itemNum] = (byte)s.toInt();
    37da:	ce 01       	movw	r24, r28
    37dc:	07 96       	adiw	r24, 0x07	; 7
    37de:	0e 94 33 55 	call	0xaa66	; 0xaa66 <_ZNK6String5toIntEv>
    37e2:	6d 87       	std	Y+13, r22	; 0x0d
    37e4:	7e 87       	std	Y+14, r23	; 0x0e
    37e6:	8f 87       	std	Y+15, r24	; 0x0f
    37e8:	98 8b       	std	Y+16, r25	; 0x10
    if ((s.toInt() < 0) || (s.toInt() > 255)) {
    37ea:	ce 01       	movw	r24, r28
    37ec:	07 96       	adiw	r24, 0x07	; 7
    37ee:	0e 94 33 55 	call	0xaa66	; 0xaa66 <_ZNK6String5toIntEv>
    37f2:	97 fd       	sbrc	r25, 7
    37f4:	0a c0       	rjmp	.+20     	; 0x380a <_ZN15EthernetSupport8IPtoLongE6String+0xca>
    37f6:	ce 01       	movw	r24, r28
    37f8:	07 96       	adiw	r24, 0x07	; 7
    37fa:	0e 94 33 55 	call	0xaa66	; 0xaa66 <_ZNK6String5toIntEv>
    37fe:	6f 3f       	cpi	r22, 0xFF	; 255
    3800:	71 05       	cpc	r23, r1
    3802:	81 05       	cpc	r24, r1
    3804:	91 05       	cpc	r25, r1
    3806:	71 f0       	breq	.+28     	; 0x3824 <_ZN15EthernetSupport8IPtoLongE6String+0xe4>
    3808:	6c f0       	brlt	.+26     	; 0x3824 <_ZN15EthernetSupport8IPtoLongE6String+0xe4>
      retVal = -1;  // fail
    380a:	44 24       	eor	r4, r4
    380c:	4a 94       	dec	r4
    380e:	54 2c       	mov	r5, r4
    3810:	32 01       	movw	r6, r4

    retVal += (unsigned long)bytes[itemNum] << (24 - itemNum * 8);
    itemNum++;
  }

  if (itemNum != 4) {
    3812:	f4 e0       	ldi	r31, 0x04	; 4
    3814:	af 16       	cp	r10, r31
    3816:	b1 04       	cpc	r11, r1
    3818:	51 f1       	breq	.+84     	; 0x386e <_ZN15EthernetSupport8IPtoLongE6String+0x12e>
    retVal = -1;  // fail
    381a:	44 24       	eor	r4, r4
    381c:	4a 94       	dec	r4
    381e:	54 2c       	mov	r5, r4
    3820:	32 01       	movw	r6, r4
    3822:	25 c0       	rjmp	.+74     	; 0x386e <_ZN15EthernetSupport8IPtoLongE6String+0x12e>
    3824:	8d 85       	ldd	r24, Y+13	; 0x0d
    3826:	9e 85       	ldd	r25, Y+14	; 0x0e
    3828:	af 85       	ldd	r26, Y+15	; 0x0f
    382a:	b8 89       	ldd	r27, Y+16	; 0x10
    382c:	99 27       	eor	r25, r25
    382e:	aa 27       	eor	r26, r26
    3830:	bb 27       	eor	r27, r27
    if ((s.toInt() < 0) || (s.toInt() > 255)) {
      retVal = -1;  // fail
      break;
    }

    retVal += (unsigned long)bytes[itemNum] << (24 - itemNum * 8);
    3832:	08 2c       	mov	r0, r8
    3834:	04 c0       	rjmp	.+8      	; 0x383e <_ZN15EthernetSupport8IPtoLongE6String+0xfe>
    3836:	88 0f       	add	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	aa 1f       	adc	r26, r26
    383c:	bb 1f       	adc	r27, r27
    383e:	0a 94       	dec	r0
    3840:	d2 f7       	brpl	.-12     	; 0x3836 <_ZN15EthernetSupport8IPtoLongE6String+0xf6>
    3842:	48 0e       	add	r4, r24
    3844:	59 1e       	adc	r5, r25
    3846:	6a 1e       	adc	r6, r26
    3848:	7b 1e       	adc	r7, r27
    itemNum++;
    384a:	8f ef       	ldi	r24, 0xFF	; 255
    384c:	a8 1a       	sub	r10, r24
    384e:	b8 0a       	sbc	r11, r24

  // parse the values we are interested in
  int itemNum = 0;
  int b = 0;
  int i = 0;
  while (i != -1) {
    3850:	0f 3f       	cpi	r16, 0xFF	; 255
    3852:	ef ef       	ldi	r30, 0xFF	; 255
    3854:	1e 07       	cpc	r17, r30
    3856:	e9 f2       	breq	.-70     	; 0x3812 <_ZN15EthernetSupport8IPtoLongE6String+0xd2>
    // find the next s
    if (i != 0) { b = i + 1; }  // skip the first time
    3858:	01 15       	cp	r16, r1
    385a:	11 05       	cpc	r17, r1
    385c:	21 f0       	breq	.+8      	; 0x3866 <_ZN15EthernetSupport8IPtoLongE6String+0x126>
    385e:	78 01       	movw	r14, r16
    3860:	8f ef       	ldi	r24, 0xFF	; 255
    3862:	e8 1a       	sub	r14, r24
    3864:	f8 0a       	sbc	r15, r24
    3866:	e8 e0       	ldi	r30, 0x08	; 8
    3868:	8e 1a       	sub	r8, r30
    386a:	91 08       	sbc	r9, r1
    386c:	92 cf       	rjmp	.-220    	; 0x3792 <_ZN15EthernetSupport8IPtoLongE6String+0x52>
  }

  if (itemNum != 4) {
    retVal = -1;  // fail
  }
  return retVal;
    386e:	ce 01       	movw	r24, r28
    3870:	07 96       	adiw	r24, 0x07	; 7
    3872:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
}
    3876:	c3 01       	movw	r24, r6
    3878:	b2 01       	movw	r22, r4
    387a:	60 96       	adiw	r28, 0x10	; 16
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	1f 91       	pop	r17
    388c:	0f 91       	pop	r16
    388e:	ff 90       	pop	r15
    3890:	ef 90       	pop	r14
    3892:	df 90       	pop	r13
    3894:	cf 90       	pop	r12
    3896:	bf 90       	pop	r11
    3898:	af 90       	pop	r10
    389a:	9f 90       	pop	r9
    389c:	8f 90       	pop	r8
    389e:	7f 90       	pop	r7
    38a0:	6f 90       	pop	r6
    38a2:	5f 90       	pop	r5
    38a4:	4f 90       	pop	r4
    38a6:	08 95       	ret

000038a8 <_ZN15EthernetSupport15resetIPDefaultsEv>:
  cmdConnected = false;
  posConnected = false;
}


bool EthernetSupport::resetIPDefaults() {
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	00 d0       	rcall	.+0      	; 0x38b2 <_ZN15EthernetSupport15resetIPDefaultsEv+0xa>
    38b2:	00 d0       	rcall	.+0      	; 0x38b4 <_ZN15EthernetSupport15resetIPDefaultsEv+0xc>
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	8c 01       	movw	r16, r24
  EepromAccess.writeEEPromLong(EepromAccess.IP, IPtoLong(F("192.168.0.150")));
    38ba:	6e ed       	ldi	r22, 0xDE	; 222
    38bc:	7e e0       	ldi	r23, 0x0E	; 14
    38be:	ce 01       	movw	r24, r28
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    38c6:	be 01       	movw	r22, r28
    38c8:	6f 5f       	subi	r22, 0xFF	; 255
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	c8 01       	movw	r24, r16
    38ce:	38 df       	rcall	.-400    	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    38d0:	9b 01       	movw	r18, r22
    38d2:	ac 01       	movw	r20, r24
    38d4:	64 e6       	ldi	r22, 0x64	; 100
    38d6:	70 e0       	ldi	r23, 0x00	; 0
    38d8:	87 ef       	ldi	r24, 0xF7	; 247
    38da:	97 e0       	ldi	r25, 0x07	; 7
    38dc:	97 de       	rcall	.-722    	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
    38de:	ce 01       	movw	r24, r28
    38e0:	01 96       	adiw	r24, 0x01	; 1
    38e2:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    38e6:	62 ed       	ldi	r22, 0xD2	; 210
    38e8:	7e e0       	ldi	r23, 0x0E	; 14
  EepromAccess.writeEEPromLong(EepromAccess.DNS, IPtoLong(F("192.168.0.1")));
    38ea:	ce 01       	movw	r24, r28
    38ec:	01 96       	adiw	r24, 0x01	; 1
    38ee:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    38f2:	be 01       	movw	r22, r28
    38f4:	6f 5f       	subi	r22, 0xFF	; 255
    38f6:	7f 4f       	sbci	r23, 0xFF	; 255
    38f8:	c8 01       	movw	r24, r16
    38fa:	22 df       	rcall	.-444    	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    38fc:	9b 01       	movw	r18, r22
    38fe:	ac 01       	movw	r20, r24
    3900:	68 e6       	ldi	r22, 0x68	; 104
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	87 ef       	ldi	r24, 0xF7	; 247
    3906:	97 e0       	ldi	r25, 0x07	; 7
    3908:	81 de       	rcall	.-766    	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
    390a:	ce 01       	movw	r24, r28
    390c:	01 96       	adiw	r24, 0x01	; 1
    390e:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    3912:	66 ec       	ldi	r22, 0xC6	; 198
    3914:	7e e0       	ldi	r23, 0x0E	; 14
    3916:	ce 01       	movw	r24, r28
    3918:	01 96       	adiw	r24, 0x01	; 1
  EepromAccess.writeEEPromLong(EepromAccess.GATE, IPtoLong(F("192.168.0.1")));
    391a:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    391e:	be 01       	movw	r22, r28
    3920:	6f 5f       	subi	r22, 0xFF	; 255
    3922:	7f 4f       	sbci	r23, 0xFF	; 255
    3924:	c8 01       	movw	r24, r16
    3926:	0c df       	rcall	.-488    	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    3928:	9b 01       	movw	r18, r22
    392a:	ac 01       	movw	r20, r24
    392c:	6c e6       	ldi	r22, 0x6C	; 108
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	87 ef       	ldi	r24, 0xF7	; 247
    3932:	97 e0       	ldi	r25, 0x07	; 7
    3934:	6b de       	rcall	.-810    	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
    3936:	ce 01       	movw	r24, r28
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    393e:	68 eb       	ldi	r22, 0xB8	; 184
    3940:	7e e0       	ldi	r23, 0x0E	; 14
    3942:	ce 01       	movw	r24, r28
    3944:	01 96       	adiw	r24, 0x01	; 1
    3946:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
  EepromAccess.writeEEPromLong(EepromAccess.SUB, IPtoLong(F("255.255.255.0")));
    394a:	be 01       	movw	r22, r28
    394c:	6f 5f       	subi	r22, 0xFF	; 255
    394e:	7f 4f       	sbci	r23, 0xFF	; 255
    3950:	c8 01       	movw	r24, r16
    3952:	f6 de       	rcall	.-532    	; 0x3740 <_ZN15EthernetSupport8IPtoLongE6String>
    3954:	9b 01       	movw	r18, r22
    3956:	ac 01       	movw	r20, r24
    3958:	60 e7       	ldi	r22, 0x70	; 112
    395a:	70 e0       	ldi	r23, 0x00	; 0
    395c:	87 ef       	ldi	r24, 0xF7	; 247
    395e:	97 e0       	ldi	r25, 0x07	; 7
    3960:	55 de       	rcall	.-854    	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
    3962:	ce 01       	movw	r24, r28
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    396a:	40 e2       	ldi	r20, 0x20	; 32
    396c:	58 ef       	ldi	r21, 0xF8	; 248
    396e:	64 e7       	ldi	r22, 0x74	; 116
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	87 ef       	ldi	r24, 0xF7	; 247
    3974:	97 e0       	ldi	r25, 0x07	; 7
    3976:	cc dd       	rcall	.-1128   	; 0x3510 <_ZN17EepromAccessClass14writeEEPromIntEii>
    3978:	81 e0       	ldi	r24, 0x01	; 1
  EepromAccess.writeEEPromInt(EepromAccess.PORT_BASE, (unsigned int)DEFAULT_PORT_BASE);
    397a:	26 96       	adiw	r28, 0x06	; 6
    397c:	0f b6       	in	r0, 0x3f	; 63
    397e:	f8 94       	cli
    3980:	de bf       	out	0x3e, r29	; 62
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	cd bf       	out	0x3d, r28	; 61
    3986:	df 91       	pop	r29
    3988:	cf 91       	pop	r28

  return(true); // for now...
}
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
    398e:	08 95       	ret

00003990 <_ZN15EthernetSupport8longToIPEm>:
    3990:	8f 92       	push	r8
    3992:	9f 92       	push	r9
    3994:	af 92       	push	r10
    3996:	bf 92       	push	r11
    3998:	cf 92       	push	r12
    399a:	df 92       	push	r13
    399c:	ef 92       	push	r14
    399e:	ff 92       	push	r15
    39a0:	0f 93       	push	r16
  }
  return retVal;
}


IPAddress EthernetSupport::longToIP(unsigned long addr) {
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	ec 01       	movw	r28, r24
  byte b[4];
  for (int i = 0; i<4; i++) {
    b[i] = (byte)((addr >> (24 - i * 8)) & 0xFF);
    39a8:	83 2e       	mov	r8, r19
    39aa:	94 2e       	mov	r9, r20
    39ac:	a5 2e       	mov	r10, r21
    39ae:	bb 24       	eor	r11, r11
    39b0:	6a 01       	movw	r12, r20
    39b2:	ee 24       	eor	r14, r14
    39b4:	ff 24       	eor	r15, r15
    39b6:	65 2f       	mov	r22, r21
    39b8:	77 27       	eor	r23, r23
    39ba:	88 27       	eor	r24, r24
    39bc:	99 27       	eor	r25, r25
  }
  return IPAddress(b[0], b[1], b[2], b[3]);
    39be:	02 2f       	mov	r16, r18
    39c0:	28 2d       	mov	r18, r8
    39c2:	4c 2d       	mov	r20, r12
    39c4:	ce 01       	movw	r24, r28
    39c6:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
}
    39ca:	ce 01       	movw	r24, r28
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	0f 91       	pop	r16
    39d2:	ff 90       	pop	r15
    39d4:	ef 90       	pop	r14
    39d6:	df 90       	pop	r13
    39d8:	cf 90       	pop	r12
    39da:	bf 90       	pop	r11
    39dc:	af 90       	pop	r10
    39de:	9f 90       	pop	r9
    39e0:	8f 90       	pop	r8
    39e2:	08 95       	ret

000039e4 <_GLOBAL__sub_I__ZN15EthernetSupportC2Ev>:
    39e4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    39e6:	00 e0       	ldi	r16, 0x00	; 0
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	40 e0       	ldi	r20, 0x00	; 0
    39ec:	60 e0       	ldi	r22, 0x00	; 0
    39ee:	8e e8       	ldi	r24, 0x8E	; 142
    39f0:	96 e0       	ldi	r25, 0x06	; 6
    39f2:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
    39f6:	0f 91       	pop	r16
    39f8:	08 95       	ret

000039fa <_ZN15EthernetSupport5startEv>:

  return(true); // for now...
}

// initialize the arduino ethernet library
bool EthernetSupport::start() {
    39fa:	cf 92       	push	r12
    39fc:	df 92       	push	r13
    39fe:	ef 92       	push	r14
    3a00:	ff 92       	push	r15
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	e1 97       	sbiw	r28, 0x31	; 49
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	6c 01       	movw	r12, r24
  bool retval = true;

  // Read the ip address etc from EEPROM
  IPAddress ipaddr = longToIP(EepromAccess.readEEPromLong(EepromAccess.IP));
    3a1c:	64 e6       	ldi	r22, 0x64	; 100
    3a1e:	70 e0       	ldi	r23, 0x00	; 0
    3a20:	87 ef       	ldi	r24, 0xF7	; 247
    3a22:	97 e0       	ldi	r25, 0x07	; 7
    3a24:	c1 dd       	rcall	.-1150   	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    3a26:	9b 01       	movw	r18, r22
    3a28:	ac 01       	movw	r20, r24
    3a2a:	b6 01       	movw	r22, r12
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	8b 96       	adiw	r24, 0x2b	; 43
    3a30:	af df       	rcall	.-162    	; 0x3990 <_ZN15EthernetSupport8longToIPEm>
    3a32:	68 e6       	ldi	r22, 0x68	; 104
    3a34:	70 e0       	ldi	r23, 0x00	; 0
  IPAddress dns = longToIP(EepromAccess.readEEPromLong(EepromAccess.DNS));
    3a36:	87 ef       	ldi	r24, 0xF7	; 247
    3a38:	97 e0       	ldi	r25, 0x07	; 7
    3a3a:	b6 dd       	rcall	.-1172   	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    3a3c:	9b 01       	movw	r18, r22
    3a3e:	ac 01       	movw	r20, r24
    3a40:	b6 01       	movw	r22, r12
    3a42:	ce 01       	movw	r24, r28
    3a44:	85 96       	adiw	r24, 0x25	; 37
    3a46:	a4 df       	rcall	.-184    	; 0x3990 <_ZN15EthernetSupport8longToIPEm>
    3a48:	6c e6       	ldi	r22, 0x6C	; 108
    3a4a:	70 e0       	ldi	r23, 0x00	; 0
    3a4c:	87 ef       	ldi	r24, 0xF7	; 247
    3a4e:	97 e0       	ldi	r25, 0x07	; 7
  IPAddress gate = longToIP(EepromAccess.readEEPromLong(EepromAccess.GATE));
    3a50:	ab dd       	rcall	.-1194   	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    3a52:	9b 01       	movw	r18, r22
    3a54:	ac 01       	movw	r20, r24
    3a56:	b6 01       	movw	r22, r12
    3a58:	ce 01       	movw	r24, r28
    3a5a:	4f 96       	adiw	r24, 0x1f	; 31
    3a5c:	99 df       	rcall	.-206    	; 0x3990 <_ZN15EthernetSupport8longToIPEm>
    3a5e:	60 e7       	ldi	r22, 0x70	; 112
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	87 ef       	ldi	r24, 0xF7	; 247
    3a64:	97 e0       	ldi	r25, 0x07	; 7
    3a66:	a0 dd       	rcall	.-1216   	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    3a68:	9b 01       	movw	r18, r22
  IPAddress sub = longToIP(EepromAccess.readEEPromLong(EepromAccess.SUB));
    3a6a:	ac 01       	movw	r20, r24
    3a6c:	b6 01       	movw	r22, r12
    3a6e:	ce 01       	movw	r24, r28
    3a70:	49 96       	adiw	r24, 0x19	; 25
    3a72:	8e df       	rcall	.-228    	; 0x3990 <_ZN15EthernetSupport8longToIPEm>
    3a74:	64 e6       	ldi	r22, 0x64	; 100
    3a76:	70 e0       	ldi	r23, 0x00	; 0
    3a78:	87 ef       	ldi	r24, 0xF7	; 247
    3a7a:	97 e0       	ldi	r25, 0x07	; 7
    3a7c:	95 dd       	rcall	.-1238   	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    3a7e:	67 2b       	or	r22, r23
    3a80:	68 2b       	or	r22, r24
    3a82:	69 2b       	or	r22, r25

  if (EepromAccess.readEEPromLong(EepromAccess.IP) == 0) {
    3a84:	51 f4       	brne	.+20     	; 0x3a9a <_ZN15EthernetSupport5startEv+0xa0>
    3a86:	b6 01       	movw	r22, r12
    3a88:	87 e7       	ldi	r24, 0x77	; 119
    3a8a:	98 e0       	ldi	r25, 0x08	; 8
    3a8c:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <_ZN13EthernetClass5beginEPh>
    3a90:	41 e0       	ldi	r20, 0x01	; 1
    3a92:	89 2b       	or	r24, r25
    3a94:	f1 f5       	brne	.+124    	; 0x3b12 <_ZN15EthernetSupport5startEv+0x118>
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    if (Ethernet.begin(mMac) == 0) {  // start using DHCP
    3a98:	3c c0       	rjmp	.+120    	; 0x3b12 <_ZN15EthernetSupport5startEv+0x118>
    3a9a:	28 e7       	ldi	r18, 0x78	; 120
    3a9c:	36 e0       	ldi	r19, 0x06	; 6
    3a9e:	3a 83       	std	Y+2, r19	; 0x02
    3aa0:	29 83       	std	Y+1, r18	; 0x01
    3aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aa6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3aa8:	be 8d       	ldd	r27, Y+30	; 0x1e
    3aaa:	8b 83       	std	Y+3, r24	; 0x03
#include <stdint.h>
#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3aac:	9c 83       	std	Y+4, r25	; 0x04
    3aae:	ad 83       	std	Y+5, r26	; 0x05
    3ab0:	be 83       	std	Y+6, r27	; 0x06
    3ab2:	38 87       	std	Y+8, r19	; 0x08
    3ab4:	2f 83       	std	Y+7, r18	; 0x07
    3ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    3aba:	ab a1       	ldd	r26, Y+35	; 0x23
    3abc:	bc a1       	ldd	r27, Y+36	; 0x24
    3abe:	89 87       	std	Y+9, r24	; 0x09
    3ac0:	9a 87       	std	Y+10, r25	; 0x0a
    3ac2:	ab 87       	std	Y+11, r26	; 0x0b
    3ac4:	bc 87       	std	Y+12, r27	; 0x0c
    3ac6:	3e 87       	std	Y+14, r19	; 0x0e
    3ac8:	2d 87       	std	Y+13, r18	; 0x0d
    3aca:	8f a1       	ldd	r24, Y+39	; 0x27
    3acc:	98 a5       	ldd	r25, Y+40	; 0x28
    3ace:	a9 a5       	ldd	r26, Y+41	; 0x29
    3ad0:	ba a5       	ldd	r27, Y+42	; 0x2a
    3ad2:	8f 87       	std	Y+15, r24	; 0x0f
    3ad4:	98 8b       	std	Y+16, r25	; 0x10
    3ad6:	a9 8b       	std	Y+17, r26	; 0x11
    3ad8:	ba 8b       	std	Y+18, r27	; 0x12
    3ada:	3c 8b       	std	Y+20, r19	; 0x14
    3adc:	2b 8b       	std	Y+19, r18	; 0x13
    3ade:	4d a5       	ldd	r20, Y+45	; 0x2d
    3ae0:	5e a5       	ldd	r21, Y+46	; 0x2e
    3ae2:	6f a5       	ldd	r22, Y+47	; 0x2f
    3ae4:	78 a9       	ldd	r23, Y+48	; 0x30
    3ae6:	4d 8b       	std	Y+21, r20	; 0x15
    3ae8:	5e 8b       	std	Y+22, r21	; 0x16
    3aea:	6f 8b       	std	Y+23, r22	; 0x17
    3aec:	78 8f       	std	Y+24, r23	; 0x18
    3aee:	ce 01       	movw	r24, r28
    3af0:	01 96       	adiw	r24, 0x01	; 1
    3af2:	7c 01       	movw	r14, r24
    3af4:	8e 01       	movw	r16, r28
    3af6:	09 5f       	subi	r16, 0xF9	; 249
    3af8:	1f 4f       	sbci	r17, 0xFF	; 255
    3afa:	9e 01       	movw	r18, r28
    3afc:	23 5f       	subi	r18, 0xF3	; 243
    3afe:	3f 4f       	sbci	r19, 0xFF	; 255
      retval = false;
    }
  }
  else {
    Ethernet.begin(mMac, ipaddr, dns, gate, sub); // this call does not return a value
    3b00:	ae 01       	movw	r20, r28
    3b02:	4d 5e       	subi	r20, 0xED	; 237
    3b04:	5f 4f       	sbci	r21, 0xFF	; 255
    3b06:	b6 01       	movw	r22, r12
    3b08:	87 e7       	ldi	r24, 0x77	; 119
    3b0a:	98 e0       	ldi	r25, 0x08	; 8
    3b0c:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	64 e7       	ldi	r22, 0x74	; 116
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	87 ef       	ldi	r24, 0xF7	; 247
    3b18:	97 e0       	ldi	r25, 0x07	; 7
    3b1a:	49 ab       	std	Y+49, r20	; 0x31
    3b1c:	e3 dc       	rcall	.-1594   	; 0x34e4 <_ZN17EepromAccessClass13readEEPromIntEi>
    3b1e:	8c 01       	movw	r16, r24
    3b20:	bc 01       	movw	r22, r24
  return(true); // for now...
}

// initialize the arduino ethernet library
bool EthernetSupport::start() {
  bool retval = true;
    3b22:	ce 01       	movw	r24, r28
  else {
    Ethernet.begin(mMac, ipaddr, dns, gate, sub); // this call does not return a value
  }

  // start listening for clients
  unsigned int p = EepromAccess.readEEPromInt(EepromAccess.PORT_BASE);
    3b24:	01 96       	adiw	r24, 0x01	; 1
    3b26:	0e 94 7b 40 	call	0x80f6	; 0x80f6 <_ZN14EthernetServerC1Ej>
    3b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2e:	f6 01       	movw	r30, r12
    3b30:	91 a3       	std	Z+33, r25	; 0x21
    3b32:	80 a3       	std	Z+32, r24	; 0x20
  outputServer = EthernetServer(p);
    3b34:	2d 81       	ldd	r18, Y+5	; 0x05
    3b36:	3e 81       	ldd	r19, Y+6	; 0x06
    3b38:	33 a3       	std	Z+35, r19	; 0x23
    3b3a:	22 a3       	std	Z+34, r18	; 0x22
    3b3c:	b8 01       	movw	r22, r16
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    3b3e:	6f 5f       	subi	r22, 0xFF	; 255
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	ce 01       	movw	r24, r28
    3b44:	01 96       	adiw	r24, 0x01	; 1
    3b46:	0e 94 7b 40 	call	0x80f6	; 0x80f6 <_ZN14EthernetServerC1Ej>

#include "Server.h"

class EthernetClient;

class EthernetServer : 
    3b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b4e:	f6 01       	movw	r30, r12
  cmdServer = EthernetServer(p + 1);
    3b50:	37 a3       	std	Z+39, r19	; 0x27
    3b52:	26 a3       	std	Z+38, r18	; 0x26
    3b54:	2d 81       	ldd	r18, Y+5	; 0x05
    3b56:	3e 81       	ldd	r19, Y+6	; 0x06
    3b58:	31 a7       	std	Z+41, r19	; 0x29
    3b5a:	20 a7       	std	Z+40, r18	; 0x28
    3b5c:	b8 01       	movw	r22, r16
    3b5e:	6e 5f       	subi	r22, 0xFE	; 254
    3b60:	7f 4f       	sbci	r23, 0xFF	; 255
    3b62:	ce 01       	movw	r24, r28
    3b64:	01 96       	adiw	r24, 0x01	; 1
    3b66:	0e 94 7b 40 	call	0x80f6	; 0x80f6 <_ZN14EthernetServerC1Ej>
    3b6a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b6c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b6e:	f6 01       	movw	r30, r12
  posServer = EthernetServer(p + 2);
    3b70:	35 a7       	std	Z+45, r19	; 0x2d
    3b72:	24 a7       	std	Z+44, r18	; 0x2c
    3b74:	2d 81       	ldd	r18, Y+5	; 0x05
    3b76:	3e 81       	ldd	r19, Y+6	; 0x06
    3b78:	37 a7       	std	Z+47, r19	; 0x2f
    3b7a:	26 a7       	std	Z+46, r18	; 0x2e
    3b7c:	c6 01       	movw	r24, r12
    3b7e:	4e 96       	adiw	r24, 0x1e	; 30
    3b80:	0e 94 3b 40 	call	0x8076	; 0x8076 <_ZN14EthernetServer5beginEv>
    3b84:	c6 01       	movw	r24, r12
    3b86:	84 96       	adiw	r24, 0x24	; 36
    3b88:	0e 94 3b 40 	call	0x8076	; 0x8076 <_ZN14EthernetServer5beginEv>
    3b8c:	c6 01       	movw	r24, r12
    3b8e:	8a 96       	adiw	r24, 0x2a	; 42
  outputServer.begin();
    3b90:	0e 94 3b 40 	call	0x8076	; 0x8076 <_ZN14EthernetServer5beginEv>
    3b94:	49 a9       	ldd	r20, Y+49	; 0x31
    3b96:	84 2f       	mov	r24, r20
  cmdServer.begin();
    3b98:	e1 96       	adiw	r28, 0x31	; 49
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
  posServer.begin();
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28

  return retval;
}
    3ba8:	1f 91       	pop	r17
    3baa:	0f 91       	pop	r16
    3bac:	ff 90       	pop	r15
    3bae:	ef 90       	pop	r14
    3bb0:	df 90       	pop	r13
    3bb2:	cf 90       	pop	r12
    3bb4:	08 95       	ret

00003bb6 <_ZN15EthernetSupport21checkOutputConnectionEv>:
    3bb6:	ef 92       	push	r14
    3bb8:	ff 92       	push	r15
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	2d 97       	sbiw	r28, 0x0d	; 13
    3bc8:	0f b6       	in	r0, 0x3f	; 63

ConnectionChange EthernetSupport::checkOutputConnection() {
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
    3bd2:	8c 01       	movw	r16, r24
  ConnectionChange retval = NO_CHANGE;

  if (!outputConnected) {
    3bd4:	7c 01       	movw	r14, r24
    3bd6:	87 e5       	ldi	r24, 0x57	; 87
    3bd8:	e8 0e       	add	r14, r24
    3bda:	f1 1c       	adc	r15, r1
    3bdc:	f7 01       	movw	r30, r14
    3bde:	80 81       	ld	r24, Z
    3be0:	81 11       	cpse	r24, r1
    3be2:	1e c0       	rjmp	.+60     	; 0x3c20 <_ZN15EthernetSupport21checkOutputConnectionEv+0x6a>
    outputClient = outputServer.available();
    3be4:	b8 01       	movw	r22, r16
    3be6:	62 5e       	subi	r22, 0xE2	; 226
    3be8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bea:	ce 01       	movw	r24, r28
    3bec:	01 96       	adiw	r24, 0x01	; 1
    3bee:	0e 94 36 41 	call	0x826c	; 0x826c <_ZN14EthernetServer9availableEv>
    3bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	93 ab       	std	Z+51, r25	; 0x33
    3bfa:	82 ab       	std	Z+50, r24	; 0x32
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
    3bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3c00:	af 81       	ldd	r26, Y+7	; 0x07
    3c02:	b8 85       	ldd	r27, Y+8	; 0x08
    3c04:	84 ab       	std	Z+52, r24	; 0x34
    3c06:	95 ab       	std	Z+53, r25	; 0x35
    3c08:	a6 ab       	std	Z+54, r26	; 0x36
    3c0a:	b7 ab       	std	Z+55, r27	; 0x37
    3c0c:	49 85       	ldd	r20, Y+9	; 0x09
    3c0e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c14:	40 af       	std	Z+56, r20	; 0x38
    3c16:	51 af       	std	Z+57, r21	; 0x39
    3c18:	62 af       	std	Z+58, r22	; 0x3a
    3c1a:	73 af       	std	Z+59, r23	; 0x3b
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    3c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1e:	84 af       	std	Z+60, r24	; 0x3c
  }
  // when the output client sends the first byte
  if (outputClient.connected()) {
    3c20:	00 5d       	subi	r16, 0xD0	; 208
    3c22:	1f 4f       	sbci	r17, 0xFF	; 255
    3c24:	c8 01       	movw	r24, r16
    3c26:	0e 94 f7 3f 	call	0x7fee	; 0x7fee <_ZN14EthernetClient9connectedEv>
    if (!outputConnected) {
    3c2a:	f7 01       	movw	r30, r14

  if (!outputConnected) {
    outputClient = outputServer.available();
  }
  // when the output client sends the first byte
  if (outputClient.connected()) {
    3c2c:	88 23       	and	r24, r24
    3c2e:	61 f0       	breq	.+24     	; 0x3c48 <_ZN15EthernetSupport21checkOutputConnectionEv+0x92>
    if (!outputConnected) {
    3c30:	80 81       	ld	r24, Z
    3c32:	81 11       	cpse	r24, r1
    3c34:	14 c0       	rjmp	.+40     	; 0x3c5e <_ZN15EthernetSupport21checkOutputConnectionEv+0xa8>
      // clear out the input buffer:
      outputClient.flush();
    3c36:	c8 01       	movw	r24, r16
    3c38:	0e 94 da 3e 	call	0x7db4	; 0x7db4 <_ZN14EthernetClient5flushEv>
      outputConnected = true;
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	f7 01       	movw	r30, r14
    3c40:	80 83       	st	Z, r24
      retval = NEW_CONNECT;
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	0d c0       	rjmp	.+26     	; 0x3c62 <_ZN15EthernetSupport21checkOutputConnectionEv+0xac>
    }
  }
  else {
    if (outputConnected) {
    3c48:	80 81       	ld	r24, Z
    3c4a:	81 11       	cpse	r24, r1
    3c4c:	03 c0       	rjmp	.+6      	; 0x3c54 <_ZN15EthernetSupport21checkOutputConnectionEv+0x9e>

  return retval;
}

ConnectionChange EthernetSupport::checkOutputConnection() {
  ConnectionChange retval = NO_CHANGE;
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	02 c0       	rjmp	.+4      	; 0x3c58 <_ZN15EthernetSupport21checkOutputConnectionEv+0xa2>
      retval = NEW_CONNECT;
    }
  }
  else {
    if (outputConnected) {
      retval = NEW_DISCONNECT;
    3c54:	82 e0       	ldi	r24, 0x02	; 2
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    }
    outputConnected = false;
    3c58:	f7 01       	movw	r30, r14
    3c5a:	10 82       	st	Z, r1
    3c5c:	02 c0       	rjmp	.+4      	; 0x3c62 <_ZN15EthernetSupport21checkOutputConnectionEv+0xac>

  return retval;
}

ConnectionChange EthernetSupport::checkOutputConnection() {
  ConnectionChange retval = NO_CHANGE;
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    }
    outputConnected = false;
  }

  return retval;
}
    3c62:	2d 96       	adiw	r28, 0x0d	; 13
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	08 95       	ret

00003c7c <_ZN15EthernetSupport18checkCmdConnectionEv>:

ConnectionChange EthernetSupport::checkCmdConnection() {
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	0f 93       	push	r16
    3c82:	1f 93       	push	r17
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	2d 97       	sbiw	r28, 0x0d	; 13
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	8c 01       	movw	r16, r24
  ConnectionChange retval = NO_CHANGE;

  if (!cmdConnected) {
    3c9a:	7c 01       	movw	r14, r24
    3c9c:	88 e5       	ldi	r24, 0x58	; 88
    3c9e:	e8 0e       	add	r14, r24
    3ca0:	f1 1c       	adc	r15, r1
    3ca2:	f7 01       	movw	r30, r14
    3ca4:	80 81       	ld	r24, Z
    3ca6:	81 11       	cpse	r24, r1
    3ca8:	22 c0       	rjmp	.+68     	; 0x3cee <_ZN15EthernetSupport18checkCmdConnectionEv+0x72>
    cmdClient = cmdServer.available();
    3caa:	b8 01       	movw	r22, r16
    3cac:	6c 5d       	subi	r22, 0xDC	; 220
    3cae:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb0:	ce 01       	movw	r24, r28
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	0e 94 36 41 	call	0x826c	; 0x826c <_ZN14EthernetServer9availableEv>
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	ff 96       	adiw	r30, 0x3f	; 63
    3cc0:	91 83       	std	Z+1, r25	; 0x01
    3cc2:	80 83       	st	Z, r24
    3cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc8:	af 81       	ldd	r26, Y+7	; 0x07
    3cca:	b8 85       	ldd	r27, Y+8	; 0x08
    3ccc:	32 96       	adiw	r30, 0x02	; 2
    3cce:	80 83       	st	Z, r24
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	a2 83       	std	Z+2, r26	; 0x02
    3cd4:	b3 83       	std	Z+3, r27	; 0x03
    3cd6:	49 85       	ldd	r20, Y+9	; 0x09
    3cd8:	5a 85       	ldd	r21, Y+10	; 0x0a
    3cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cde:	34 96       	adiw	r30, 0x04	; 4
    3ce0:	40 83       	st	Z, r20
    3ce2:	51 83       	std	Z+1, r21	; 0x01
    3ce4:	62 83       	std	Z+2, r22	; 0x02
    3ce6:	73 83       	std	Z+3, r23	; 0x03
    3ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cea:	34 96       	adiw	r30, 0x04	; 4
    3cec:	80 83       	st	Z, r24
  }
  // when the cmd client sends the first byte
  if (cmdClient.connected()) {
    3cee:	03 5c       	subi	r16, 0xC3	; 195
    3cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf2:	c8 01       	movw	r24, r16
    3cf4:	0e 94 f7 3f 	call	0x7fee	; 0x7fee <_ZN14EthernetClient9connectedEv>
    if (!cmdConnected) {
    3cf8:	f7 01       	movw	r30, r14

  if (!cmdConnected) {
    cmdClient = cmdServer.available();
  }
  // when the cmd client sends the first byte
  if (cmdClient.connected()) {
    3cfa:	88 23       	and	r24, r24
    3cfc:	61 f0       	breq	.+24     	; 0x3d16 <_ZN15EthernetSupport18checkCmdConnectionEv+0x9a>
    if (!cmdConnected) {
    3cfe:	80 81       	ld	r24, Z
    3d00:	81 11       	cpse	r24, r1
    3d02:	14 c0       	rjmp	.+40     	; 0x3d2c <_ZN15EthernetSupport18checkCmdConnectionEv+0xb0>
      // clear out the input buffer
      cmdClient.flush();
    3d04:	c8 01       	movw	r24, r16
    3d06:	0e 94 da 3e 	call	0x7db4	; 0x7db4 <_ZN14EthernetClient5flushEv>
      cmdConnected = true;
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	f7 01       	movw	r30, r14
    3d0e:	80 83       	st	Z, r24
      retval = NEW_CONNECT;
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0d c0       	rjmp	.+26     	; 0x3d30 <_ZN15EthernetSupport18checkCmdConnectionEv+0xb4>
    }
  }
  else {
    if (cmdConnected) {
    3d16:	80 81       	ld	r24, Z
    3d18:	81 11       	cpse	r24, r1
    3d1a:	03 c0       	rjmp	.+6      	; 0x3d22 <_ZN15EthernetSupport18checkCmdConnectionEv+0xa6>

  return retval;
}

ConnectionChange EthernetSupport::checkCmdConnection() {
  ConnectionChange retval = NO_CHANGE;
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	02 c0       	rjmp	.+4      	; 0x3d26 <_ZN15EthernetSupport18checkCmdConnectionEv+0xaa>
      retval = NEW_CONNECT;
    }
  }
  else {
    if (cmdConnected) {
      retval = NEW_DISCONNECT;
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    }
    cmdConnected = false;
    3d26:	f7 01       	movw	r30, r14
    3d28:	10 82       	st	Z, r1
    3d2a:	02 c0       	rjmp	.+4      	; 0x3d30 <_ZN15EthernetSupport18checkCmdConnectionEv+0xb4>

  return retval;
}

ConnectionChange EthernetSupport::checkCmdConnection() {
  ConnectionChange retval = NO_CHANGE;
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    }
    cmdConnected = false;
  }

  return retval;
}
    3d30:	2d 96       	adiw	r28, 0x0d	; 13
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	ff 90       	pop	r15
    3d46:	ef 90       	pop	r14
    3d48:	08 95       	ret

00003d4a <_ZN15EthernetSupport18checkPosConnectionEv>:

ConnectionChange EthernetSupport::checkPosConnection() {
    3d4a:	ef 92       	push	r14
    3d4c:	ff 92       	push	r15
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	cd b7       	in	r28, 0x3d	; 61
    3d58:	de b7       	in	r29, 0x3e	; 62
    3d5a:	2d 97       	sbiw	r28, 0x0d	; 13
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	cd bf       	out	0x3d, r28	; 61
  ConnectionChange retval = NO_CHANGE;

  if (!posConnected) {
    3d66:	7c 01       	movw	r14, r24
    3d68:	29 e5       	ldi	r18, 0x59	; 89
    3d6a:	e2 0e       	add	r14, r18
    3d6c:	f1 1c       	adc	r15, r1
    3d6e:	f7 01       	movw	r30, r14
    3d70:	20 81       	ld	r18, Z
    3d72:	8c 01       	movw	r16, r24
    3d74:	06 5b       	subi	r16, 0xB6	; 182
    3d76:	1f 4f       	sbci	r17, 0xFF	; 255
    3d78:	21 11       	cpse	r18, r1
    3d7a:	1e c0       	rjmp	.+60     	; 0x3db8 <_ZN15EthernetSupport18checkPosConnectionEv+0x6e>
    posClient = posServer.available();
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	66 5d       	subi	r22, 0xD6	; 214
    3d80:	7f 4f       	sbci	r23, 0xFF	; 255
    3d82:	ce 01       	movw	r24, r28
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	0e 94 36 41 	call	0x826c	; 0x826c <_ZN14EthernetServer9availableEv>
    3d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8e:	f8 01       	movw	r30, r16
    3d90:	93 83       	std	Z+3, r25	; 0x03
    3d92:	82 83       	std	Z+2, r24	; 0x02
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	9e 81       	ldd	r25, Y+6	; 0x06
    3d98:	af 81       	ldd	r26, Y+7	; 0x07
    3d9a:	b8 85       	ldd	r27, Y+8	; 0x08
    3d9c:	84 83       	std	Z+4, r24	; 0x04
    3d9e:	95 83       	std	Z+5, r25	; 0x05
    3da0:	a6 83       	std	Z+6, r26	; 0x06
    3da2:	b7 83       	std	Z+7, r27	; 0x07
    3da4:	49 85       	ldd	r20, Y+9	; 0x09
    3da6:	5a 85       	ldd	r21, Y+10	; 0x0a
    3da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dac:	40 87       	std	Z+8, r20	; 0x08
    3dae:	51 87       	std	Z+9, r21	; 0x09
    3db0:	62 87       	std	Z+10, r22	; 0x0a
    3db2:	73 87       	std	Z+11, r23	; 0x0b
    3db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db6:	84 87       	std	Z+12, r24	; 0x0c
  }
  // when the pos client sends the first byte
  if (posClient.connected()) {
    3db8:	c8 01       	movw	r24, r16
    3dba:	0e 94 f7 3f 	call	0x7fee	; 0x7fee <_ZN14EthernetClient9connectedEv>
    if (!posConnected) {
    3dbe:	f7 01       	movw	r30, r14

  if (!posConnected) {
    posClient = posServer.available();
  }
  // when the pos client sends the first byte
  if (posClient.connected()) {
    3dc0:	88 23       	and	r24, r24
    3dc2:	61 f0       	breq	.+24     	; 0x3ddc <_ZN15EthernetSupport18checkPosConnectionEv+0x92>
    if (!posConnected) {
    3dc4:	80 81       	ld	r24, Z
    3dc6:	81 11       	cpse	r24, r1
    3dc8:	14 c0       	rjmp	.+40     	; 0x3df2 <_ZN15EthernetSupport18checkPosConnectionEv+0xa8>
      // clear out the input buffer:
      posClient.flush();
    3dca:	c8 01       	movw	r24, r16
    3dcc:	0e 94 da 3e 	call	0x7db4	; 0x7db4 <_ZN14EthernetClient5flushEv>
      posConnected = true;
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	f7 01       	movw	r30, r14
    3dd4:	80 83       	st	Z, r24
      retval = NEW_CONNECT;
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0d c0       	rjmp	.+26     	; 0x3df6 <_ZN15EthernetSupport18checkPosConnectionEv+0xac>
    }
  }
  else {
    if (posConnected) {
    3ddc:	80 81       	ld	r24, Z
    3dde:	81 11       	cpse	r24, r1
    3de0:	03 c0       	rjmp	.+6      	; 0x3de8 <_ZN15EthernetSupport18checkPosConnectionEv+0x9e>

  return retval;
}

ConnectionChange EthernetSupport::checkPosConnection() {
  ConnectionChange retval = NO_CHANGE;
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <_ZN15EthernetSupport18checkPosConnectionEv+0xa2>
      retval = NEW_CONNECT;
    }
  }
  else {
    if (posConnected) {
      retval = NEW_DISCONNECT;
    3de8:	82 e0       	ldi	r24, 0x02	; 2
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    }
    posConnected = false;
    3dec:	f7 01       	movw	r30, r14
    3dee:	10 82       	st	Z, r1
    3df0:	02 c0       	rjmp	.+4      	; 0x3df6 <_ZN15EthernetSupport18checkPosConnectionEv+0xac>

  return retval;
}

ConnectionChange EthernetSupport::checkPosConnection() {
  ConnectionChange retval = NO_CHANGE;
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    }
    posConnected = false;
  }

  return retval;
}
    3df6:	2d 96       	adiw	r28, 0x0d	; 13
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	de bf       	out	0x3e, r29	; 62
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	df 91       	pop	r29
    3e04:	cf 91       	pop	r28
    3e06:	1f 91       	pop	r17
    3e08:	0f 91       	pop	r16
    3e0a:	ff 90       	pop	r15
    3e0c:	ef 90       	pop	r14
    3e0e:	08 95       	ret

00003e10 <_ZN8MM3Class12readRegisterE6String>:

  ui = (unsigned int)readRegister("16");
  if (badRead == false) { m_currStatus = ui; }
}

long MM3Class::readRegister(String r) {
    3e10:	cf 92       	push	r12
    3e12:	df 92       	push	r13
    3e14:	ef 92       	push	r14
    3e16:	ff 92       	push	r15
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	cc 50       	subi	r28, 0x0C	; 12
    3e22:	d1 40       	sbci	r29, 0x01	; 1
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	7b 01       	movw	r14, r22
  char rcvBuf[256] = "";
    3e30:	19 82       	std	Y+1, r1	; 0x01
    3e32:	1a 82       	std	Y+2, r1	; 0x02
    3e34:	1b 82       	std	Y+3, r1	; 0x03
    3e36:	1c 82       	std	Y+4, r1	; 0x04
    3e38:	fe 01       	movw	r30, r28
    3e3a:	35 96       	adiw	r30, 0x05	; 5
    3e3c:	8c ef       	ldi	r24, 0xFC	; 252
    3e3e:	df 01       	movw	r26, r30
    3e40:	1d 92       	st	X+, r1
    3e42:	8a 95       	dec	r24
    3e44:	e9 f7       	brne	.-6      	; 0x3e40 <_ZN8MM3Class12readRegisterE6String+0x30>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3e46:	6f ea       	ldi	r22, 0xAF	; 175
    3e48:	73 e0       	ldi	r23, 0x03	; 3
    3e4a:	ce 01       	movw	r24, r28
    3e4c:	8f 5f       	subi	r24, 0xFF	; 255
    3e4e:	9e 4f       	sbci	r25, 0xFE	; 254
    3e50:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
  int bytesRead;
  String cmd = "R01 " + r;
    3e54:	b7 01       	movw	r22, r14
    3e56:	ce 01       	movw	r24, r28
    3e58:	8f 5f       	subi	r24, 0xFF	; 255
    3e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    3e5c:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    3e60:	bc 01       	movw	r22, r24
    3e62:	ce 01       	movw	r24, r28
    3e64:	89 5f       	subi	r24, 0xF9	; 249
    3e66:	9e 4f       	sbci	r25, 0xFE	; 254
    3e68:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	8f 5f       	subi	r24, 0xFF	; 255
    3e70:	9e 4f       	sbci	r25, 0xFE	; 254
    3e72:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>

  Serial3.println(cmd);
    3e76:	be 01       	movw	r22, r28
    3e78:	69 5f       	subi	r22, 0xF9	; 249
    3e7a:	7e 4f       	sbci	r23, 0xFE	; 254
    3e7c:	83 e6       	ldi	r24, 0x63	; 99
    3e7e:	99 e0       	ldi	r25, 0x09	; 9
    3e80:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
  bytesRead = Serial3.readBytesUntil('\n', rcvBuf, 256);
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	31 e0       	ldi	r19, 0x01	; 1
    3e88:	ae 01       	movw	r20, r28
    3e8a:	4f 5f       	subi	r20, 0xFF	; 255
    3e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8e:	6a e0       	ldi	r22, 0x0A	; 10
    3e90:	83 e6       	ldi	r24, 0x63	; 99
    3e92:	99 e0       	ldi	r25, 0x09	; 9
    3e94:	0e 94 0a 52 	call	0xa414	; 0xa414 <_ZN6Stream14readBytesUntilEcPcj>
  if (bytesRead == 0) {
    3e98:	89 2b       	or	r24, r25
    3e9a:	e9 f4       	brne	.+58     	; 0x3ed6 <_ZN8MM3Class12readRegisterE6String+0xc6>
    badRead = true;
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	80 93 94 06 	sts	0x0694, r24
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3ea2:	64 eb       	ldi	r22, 0xB4	; 180
    3ea4:	73 e0       	ldi	r23, 0x03	; 3
    3ea6:	ce 01       	movw	r24, r28
    3ea8:	8f 5f       	subi	r24, 0xFF	; 255
    3eaa:	9e 4f       	sbci	r25, 0xFE	; 254
    3eac:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    Serial.println("ERROR Timed out waiting for response from: " + cmd);
    3eb0:	be 01       	movw	r22, r28
    3eb2:	69 5f       	subi	r22, 0xF9	; 249
    3eb4:	7e 4f       	sbci	r23, 0xFE	; 254
    3eb6:	ce 01       	movw	r24, r28
    3eb8:	8f 5f       	subi	r24, 0xFF	; 255
    3eba:	9e 4f       	sbci	r25, 0xFE	; 254
    3ebc:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	86 ec       	ldi	r24, 0xC6	; 198
    3ec4:	98 e0       	ldi	r25, 0x08	; 8
    3ec6:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3eca:	ce 01       	movw	r24, r28
    3ecc:	8f 5f       	subi	r24, 0xFF	; 255
    3ece:	9e 4f       	sbci	r25, 0xFE	; 254
    3ed0:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    3ed4:	02 c0       	rjmp	.+4      	; 0x3eda <_ZN8MM3Class12readRegisterE6String+0xca>
  }
  else {
    badRead = false;
    3ed6:	10 92 94 06 	sts	0x0694, r1
  }

  // parse the response from this command
//  Serial.print("readRegister returning: "); Serial.println( atol(strchr(rcvBuf, '=')+1) );
  return atol(strchr(rcvBuf, '=')+1);
    3eda:	6d e3       	ldi	r22, 0x3D	; 61
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	ce 01       	movw	r24, r28
    3ee0:	01 96       	adiw	r24, 0x01	; 1
    3ee2:	0e 94 33 5c 	call	0xb866	; 0xb866 <strchr>
    3ee6:	01 96       	adiw	r24, 0x01	; 1
    3ee8:	0e 94 bc 5b 	call	0xb778	; 0xb778 <atol>
    3eec:	6b 01       	movw	r12, r22
    3eee:	7c 01       	movw	r14, r24
    3ef0:	ce 01       	movw	r24, r28
    3ef2:	89 5f       	subi	r24, 0xF9	; 249
    3ef4:	9e 4f       	sbci	r25, 0xFE	; 254
    3ef6:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
}
    3efa:	c7 01       	movw	r24, r14
    3efc:	b6 01       	movw	r22, r12
    3efe:	c4 5f       	subi	r28, 0xF4	; 244
    3f00:	de 4f       	sbci	r29, 0xFE	; 254
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	ff 90       	pop	r15
    3f12:	ef 90       	pop	r14
    3f14:	df 90       	pop	r13
    3f16:	cf 90       	pop	r12
    3f18:	08 95       	ret

00003f1a <_ZN8MM3Class14readControllerEv>:
boolean badRead;  // true if readRegister fails

// The old way that read all registers at one time for some reason
// caused a slight hiccup in the velocity of the motor.  This way 
// works smoothly.
void MM3Class::readController() {
    3f1a:	4f 92       	push	r4
    3f1c:	5f 92       	push	r5
    3f1e:	6f 92       	push	r6
    3f20:	7f 92       	push	r7
    3f22:	8f 92       	push	r8
    3f24:	9f 92       	push	r9
    3f26:	af 92       	push	r10
    3f28:	bf 92       	push	r11
    3f2a:	cf 92       	push	r12
    3f2c:	df 92       	push	r13
    3f2e:	ef 92       	push	r14
    3f30:	ff 92       	push	r15
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <_ZN8MM3Class14readControllerEv+0x22>
    3f3c:	00 d0       	rcall	.+0      	; 0x3f3e <_ZN8MM3Class14readControllerEv+0x24>
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	4c 01       	movw	r8, r24
  long l;
  int i;
  unsigned int ui;

  l = (long)readRegister("00");
    3f44:	60 ee       	ldi	r22, 0xE0	; 224
    3f46:	73 e0       	ldi	r23, 0x03	; 3
    3f48:	ce 01       	movw	r24, r28
    3f4a:	01 96       	adiw	r24, 0x01	; 1
    3f4c:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    3f50:	be 01       	movw	r22, r28
    3f52:	6f 5f       	subi	r22, 0xFF	; 255
    3f54:	7f 4f       	sbci	r23, 0xFF	; 255
    3f56:	c4 01       	movw	r24, r8
    3f58:	5b df       	rcall	.-330    	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    3f5a:	2b 01       	movw	r4, r22
    3f5c:	3c 01       	movw	r6, r24
    3f5e:	ce 01       	movw	r24, r28
    3f60:	01 96       	adiw	r24, 0x01	; 1
    3f62:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    3f66:	80 91 94 06 	lds	r24, 0x0694
  if (badRead == false) { m_currPos = double(l) / Motor.getCPR(); }
    3f6a:	81 11       	cpse	r24, r1
    3f6c:	1b c0       	rjmp	.+54     	; 0x3fa4 <_ZN8MM3Class14readControllerEv+0x8a>
    3f6e:	c3 01       	movw	r24, r6
    3f70:	b2 01       	movw	r22, r4
    3f72:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>
    3f76:	2b 01       	movw	r4, r22
    3f78:	3c 01       	movw	r6, r24
    3f7a:	60 91 85 07 	lds	r22, 0x0785
    3f7e:	70 91 86 07 	lds	r23, 0x0786
    3f82:	80 91 87 07 	lds	r24, 0x0787
    3f86:	90 91 88 07 	lds	r25, 0x0788
    3f8a:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    3f8e:	9b 01       	movw	r18, r22
    3f90:	ac 01       	movw	r20, r24
    3f92:	c3 01       	movw	r24, r6
    3f94:	b2 01       	movw	r22, r4
    3f96:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    3f9a:	f4 01       	movw	r30, r8
    3f9c:	60 83       	st	Z, r22
    3f9e:	71 83       	std	Z+1, r23	; 0x01
    3fa0:	82 83       	std	Z+2, r24	; 0x02
    3fa2:	93 83       	std	Z+3, r25	; 0x03
    3fa4:	60 91 85 07 	lds	r22, 0x0785

  i = map((int)readRegister("14"), 0, SPEED_RANGE, 0, 100);
    3fa8:	70 91 86 07 	lds	r23, 0x0786
    3fac:	80 91 87 07 	lds	r24, 0x0787
    3fb0:	90 91 88 07 	lds	r25, 0x0788
    3fb4:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    3fb8:	20 91 89 07 	lds	r18, 0x0789
    3fbc:	30 91 8a 07 	lds	r19, 0x078A
    3fc0:	40 91 8b 07 	lds	r20, 0x078B
    3fc4:	50 91 8c 07 	lds	r21, 0x078C
    3fc8:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e8       	ldi	r19, 0x80	; 128
    3fd0:	4b e3       	ldi	r20, 0x3B	; 59
    3fd2:	56 e4       	ldi	r21, 0x46	; 70
    3fd4:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	40 e0       	ldi	r20, 0x00	; 0
    3fde:	5f e3       	ldi	r21, 0x3F	; 63
    3fe0:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <__addsf3>
    3fe4:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    3fe8:	2b 01       	movw	r4, r22
    3fea:	66 24       	eor	r6, r6
    3fec:	57 fc       	sbrc	r5, 7
    3fee:	60 94       	com	r6
    3ff0:	76 2c       	mov	r7, r6
    3ff2:	63 ee       	ldi	r22, 0xE3	; 227
    3ff4:	73 e0       	ldi	r23, 0x03	; 3
    3ff6:	ce 01       	movw	r24, r28
    3ff8:	01 96       	adiw	r24, 0x01	; 1
    3ffa:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    3ffe:	be 01       	movw	r22, r28
    4000:	6f 5f       	subi	r22, 0xFF	; 255
    4002:	7f 4f       	sbci	r23, 0xFF	; 255
    4004:	c4 01       	movw	r24, r8
    4006:	04 df       	rcall	.-504    	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    4008:	88 27       	eor	r24, r24
    400a:	77 fd       	sbrc	r23, 7
    400c:	80 95       	com	r24
    400e:	98 2f       	mov	r25, r24
    4010:	1f 92       	push	r1
    4012:	1f 92       	push	r1
    4014:	1f 92       	push	r1
    4016:	24 e6       	ldi	r18, 0x64	; 100
    4018:	2f 93       	push	r18
    401a:	a1 2c       	mov	r10, r1
    401c:	b1 2c       	mov	r11, r1
    401e:	65 01       	movw	r12, r10
    4020:	83 01       	movw	r16, r6
    4022:	72 01       	movw	r14, r4
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	a9 01       	movw	r20, r18
    402a:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <_Z3maplllll>
    402e:	2b 01       	movw	r4, r22
    4030:	3c 01       	movw	r6, r24
    4032:	ce 01       	movw	r24, r28
    4034:	01 96       	adiw	r24, 0x01	; 1
    4036:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
  if (badRead == false) { m_currSpd = i; }
    403e:	0f 90       	pop	r0
    4040:	0f 90       	pop	r0
    4042:	80 91 94 06 	lds	r24, 0x0694
    4046:	81 11       	cpse	r24, r1
    4048:	03 c0       	rjmp	.+6      	; 0x4050 <_ZN8MM3Class14readControllerEv+0x136>
    404a:	f4 01       	movw	r30, r8
    404c:	55 82       	std	Z+5, r5	; 0x05
  unsigned int ui;

  l = (long)readRegister("00");
  if (badRead == false) { m_currPos = double(l) / Motor.getCPR(); }

  i = map((int)readRegister("14"), 0, SPEED_RANGE, 0, 100);
    404e:	44 82       	std	Z+4, r4	; 0x04
    4050:	66 ee       	ldi	r22, 0xE6	; 230
    4052:	73 e0       	ldi	r23, 0x03	; 3
  if (badRead == false) { m_currSpd = i; }

  i = (int)readRegister("29");
    4054:	ce 01       	movw	r24, r28
    4056:	01 96       	adiw	r24, 0x01	; 1
    4058:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    405c:	be 01       	movw	r22, r28
    405e:	6f 5f       	subi	r22, 0xFF	; 255
    4060:	7f 4f       	sbci	r23, 0xFF	; 255
    4062:	c4 01       	movw	r24, r8
    4064:	d5 de       	rcall	.-598    	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    4066:	2b 01       	movw	r4, r22
    4068:	3c 01       	movw	r6, r24
    406a:	ce 01       	movw	r24, r28
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4072:	80 91 94 06 	lds	r24, 0x0694
    4076:	81 11       	cpse	r24, r1
  if (badRead == false) { m_currAmps = i; }
    4078:	03 c0       	rjmp	.+6      	; 0x4080 <_ZN8MM3Class14readControllerEv+0x166>
    407a:	f4 01       	movw	r30, r8
    407c:	57 82       	std	Z+7, r5	; 0x07
    407e:	46 82       	std	Z+6, r4	; 0x06
  if (badRead == false) { m_currPos = double(l) / Motor.getCPR(); }

  i = map((int)readRegister("14"), 0, SPEED_RANGE, 0, 100);
  if (badRead == false) { m_currSpd = i; }

  i = (int)readRegister("29");
    4080:	69 ee       	ldi	r22, 0xE9	; 233
    4082:	73 e0       	ldi	r23, 0x03	; 3
    4084:	ce 01       	movw	r24, r28
  if (badRead == false) { m_currAmps = i; }

  ui = (unsigned int)readRegister("16");
    4086:	01 96       	adiw	r24, 0x01	; 1
    4088:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    408c:	be 01       	movw	r22, r28
    408e:	6f 5f       	subi	r22, 0xFF	; 255
    4090:	7f 4f       	sbci	r23, 0xFF	; 255
    4092:	c4 01       	movw	r24, r8
    4094:	bd de       	rcall	.-646    	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    4096:	2b 01       	movw	r4, r22
    4098:	3c 01       	movw	r6, r24
    409a:	ce 01       	movw	r24, r28
    409c:	01 96       	adiw	r24, 0x01	; 1
    409e:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    40a2:	80 91 94 06 	lds	r24, 0x0694
    40a6:	81 11       	cpse	r24, r1
    40a8:	03 c0       	rjmp	.+6      	; 0x40b0 <_ZN8MM3Class14readControllerEv+0x196>
  if (badRead == false) { m_currStatus = ui; }
    40aa:	f4 01       	movw	r30, r8
    40ac:	51 86       	std	Z+9, r5	; 0x09
    40ae:	40 86       	std	Z+8, r4	; 0x08
    40b0:	26 96       	adiw	r28, 0x06	; 6
  if (badRead == false) { m_currSpd = i; }

  i = (int)readRegister("29");
  if (badRead == false) { m_currAmps = i; }

  ui = (unsigned int)readRegister("16");
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	de bf       	out	0x3e, r29	; 62
  if (badRead == false) { m_currStatus = ui; }
}
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	ff 90       	pop	r15
    40c6:	ef 90       	pop	r14
    40c8:	df 90       	pop	r13
    40ca:	cf 90       	pop	r12
    40cc:	bf 90       	pop	r11
    40ce:	af 90       	pop	r10
    40d0:	9f 90       	pop	r9
    40d2:	8f 90       	pop	r8
    40d4:	7f 90       	pop	r7
    40d6:	6f 90       	pop	r6
    40d8:	5f 90       	pop	r5
    40da:	4f 90       	pop	r4
    40dc:	08 95       	ret

000040de <_ZN8MM3Class8writeMM3E6String>:
    40de:	ef 92       	push	r14
    40e0:	ff 92       	push	r15
    40e2:	0f 93       	push	r16
    40e4:	1f 93       	push	r17
//  Serial.print("readRegister returning: "); Serial.println( atol(strchr(rcvBuf, '=')+1) );
  return atol(strchr(rcvBuf, '=')+1);
}


void MM3Class::writeMM3(String cmd) {
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
    40ee:	6c 97       	sbiw	r28, 0x1c	; 28
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
    40fa:	8b 01       	movw	r16, r22
  char rcvBuf[16] = "";
    40fc:	19 82       	std	Y+1, r1	; 0x01
    40fe:	1a 82       	std	Y+2, r1	; 0x02
    4100:	1b 82       	std	Y+3, r1	; 0x03
    4102:	1c 82       	std	Y+4, r1	; 0x04
    4104:	fe 01       	movw	r30, r28
    4106:	35 96       	adiw	r30, 0x05	; 5
    4108:	8c e0       	ldi	r24, 0x0C	; 12
    410a:	df 01       	movw	r26, r30
    410c:	1d 92       	st	X+, r1
    410e:	8a 95       	dec	r24
    4110:	e9 f7       	brne	.-6      	; 0x410c <_ZN8MM3Class8writeMM3E6String+0x2e>
  int bytesRead;

  Serial3.println(cmd);
    4112:	83 e6       	ldi	r24, 0x63	; 99
    4114:	99 e0       	ldi	r25, 0x09	; 9
    4116:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
  bytesRead = Serial3.readBytesUntil('\n', rcvBuf, 16);
    411a:	20 e1       	ldi	r18, 0x10	; 16
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	ae 01       	movw	r20, r28
    4120:	4f 5f       	subi	r20, 0xFF	; 255
    4122:	5f 4f       	sbci	r21, 0xFF	; 255
    4124:	6a e0       	ldi	r22, 0x0A	; 10
    4126:	83 e6       	ldi	r24, 0x63	; 99
    4128:	99 e0       	ldi	r25, 0x09	; 9
    412a:	0e 94 0a 52 	call	0xa414	; 0xa414 <_ZN6Stream14readBytesUntilEcPcj>
    412e:	7c 01       	movw	r14, r24
  String rb = String(rcvBuf);  // create a String out of the receive buffer
    4130:	be 01       	movw	r22, r28
    4132:	6f 5f       	subi	r22, 0xFF	; 255
    4134:	7f 4f       	sbci	r23, 0xFF	; 255
    4136:	ce 01       	movw	r24, r28
    4138:	47 96       	adiw	r24, 0x17	; 23
    413a:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
  if (bytesRead == 0) {
    413e:	ef 28       	or	r14, r15
    4140:	a1 f4       	brne	.+40     	; 0x416a <_ZN8MM3Class8writeMM3E6String+0x8c>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4142:	64 eb       	ldi	r22, 0xB4	; 180
    4144:	73 e0       	ldi	r23, 0x03	; 3
    4146:	ce 01       	movw	r24, r28
    4148:	41 96       	adiw	r24, 0x11	; 17
    414a:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    Serial.println("ERROR Timed out waiting for response from: " + cmd);
    414e:	b8 01       	movw	r22, r16
    4150:	ce 01       	movw	r24, r28
    4152:	41 96       	adiw	r24, 0x11	; 17
    4154:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    4158:	bc 01       	movw	r22, r24
    415a:	86 ec       	ldi	r24, 0xC6	; 198
    415c:	98 e0       	ldi	r25, 0x08	; 8
    415e:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4162:	ce 01       	movw	r24, r28
    4164:	41 96       	adiw	r24, 0x11	; 17
    4166:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
  }
  if (!rb.startsWith("OK")) {
    416a:	6c ee       	ldi	r22, 0xEC	; 236
    416c:	73 e0       	ldi	r23, 0x03	; 3
    416e:	ce 01       	movw	r24, r28
    4170:	41 96       	adiw	r24, 0x11	; 17
    4172:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4176:	be 01       	movw	r22, r28
    4178:	6f 5e       	subi	r22, 0xEF	; 239
    417a:	7f 4f       	sbci	r23, 0xFF	; 255
    417c:	ce 01       	movw	r24, r28
    417e:	47 96       	adiw	r24, 0x17	; 23
    4180:	0e 94 59 54 	call	0xa8b2	; 0xa8b2 <_ZNK6String10startsWithERKS_>
    4184:	f8 2e       	mov	r15, r24
    4186:	ce 01       	movw	r24, r28
    4188:	41 96       	adiw	r24, 0x11	; 17
    418a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    418e:	f1 10       	cpse	r15, r1
    4190:	1d c0       	rjmp	.+58     	; 0x41cc <_ZN8MM3Class8writeMM3E6String+0xee>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4192:	6f ee       	ldi	r22, 0xEF	; 239
    4194:	73 e0       	ldi	r23, 0x03	; 3
    4196:	ce 01       	movw	r24, r28
    4198:	41 96       	adiw	r24, 0x11	; 17
    419a:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    Serial.println("ERROR Bad response of: " + rb + " from command: " + cmd);
    419e:	be 01       	movw	r22, r28
    41a0:	69 5e       	subi	r22, 0xE9	; 233
    41a2:	7f 4f       	sbci	r23, 0xFF	; 255
    41a4:	ce 01       	movw	r24, r28
    41a6:	41 96       	adiw	r24, 0x11	; 17
    41a8:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    41ac:	67 e0       	ldi	r22, 0x07	; 7
    41ae:	74 e0       	ldi	r23, 0x04	; 4
    41b0:	0e 94 1e 54 	call	0xa83c	; 0xa83c <_ZplRK15StringSumHelperPKc>
    41b4:	b8 01       	movw	r22, r16
    41b6:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    41ba:	bc 01       	movw	r22, r24
    41bc:	86 ec       	ldi	r24, 0xC6	; 198
    41be:	98 e0       	ldi	r25, 0x08	; 8
    41c0:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    41c4:	ce 01       	movw	r24, r28
    41c6:	41 96       	adiw	r24, 0x11	; 17
    41c8:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    41cc:	67 e1       	ldi	r22, 0x17	; 23
    41ce:	74 e0       	ldi	r23, 0x04	; 4
    41d0:	ce 01       	movw	r24, r28
    41d2:	41 96       	adiw	r24, 0x11	; 17
    41d4:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
  }
  // debugging output
  Serial.println("Response of: " + rb + " from command: " + cmd);
    41d8:	be 01       	movw	r22, r28
    41da:	69 5e       	subi	r22, 0xE9	; 233
    41dc:	7f 4f       	sbci	r23, 0xFF	; 255
    41de:	ce 01       	movw	r24, r28
    41e0:	41 96       	adiw	r24, 0x11	; 17
    41e2:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    41e6:	67 e0       	ldi	r22, 0x07	; 7
    41e8:	74 e0       	ldi	r23, 0x04	; 4
    41ea:	0e 94 1e 54 	call	0xa83c	; 0xa83c <_ZplRK15StringSumHelperPKc>
    41ee:	b8 01       	movw	r22, r16
    41f0:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    41f4:	bc 01       	movw	r22, r24
    41f6:	86 ec       	ldi	r24, 0xC6	; 198
    41f8:	98 e0       	ldi	r25, 0x08	; 8
    41fa:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    41fe:	ce 01       	movw	r24, r28
    4200:	41 96       	adiw	r24, 0x11	; 17
    4202:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4206:	ce 01       	movw	r24, r28
    4208:	47 96       	adiw	r24, 0x17	; 23
    420a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
}
    420e:	6c 96       	adiw	r28, 0x1c	; 28
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	f8 94       	cli
    4214:	de bf       	out	0x3e, r29	; 62
    4216:	0f be       	out	0x3f, r0	; 63
    4218:	cd bf       	out	0x3d, r28	; 61
    421a:	df 91       	pop	r29
    421c:	cf 91       	pop	r28
    421e:	1f 91       	pop	r17
    4220:	0f 91       	pop	r16
    4222:	ff 90       	pop	r15
    4224:	ef 90       	pop	r14
    4226:	08 95       	ret

00004228 <_ZN8MM3Class8setPTermEj>:
  m_stopped = false;
  Motor.setIdleTime(0L);                // indicate that we are not idle
  Motor.setMotorRunTime(millis());      // save a time stamp for when we started running
}

void MM3Class::setPTerm(unsigned int n) {
    4228:	ef 92       	push	r14
    422a:	ff 92       	push	r15
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	a4 97       	sbiw	r28, 0x24	; 36
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	7c 01       	movw	r14, r24
  char s[30];
  snprintf(s, 30, "W01 04 %d", n);
    4246:	7f 93       	push	r23
    4248:	6f 93       	push	r22
    424a:	25 e2       	ldi	r18, 0x25	; 37
    424c:	34 e0       	ldi	r19, 0x04	; 4
    424e:	3f 93       	push	r19
    4250:	2f 93       	push	r18
    4252:	1f 92       	push	r1
    4254:	8e e1       	ldi	r24, 0x1E	; 30
    4256:	8f 93       	push	r24
    4258:	8e 01       	movw	r16, r28
    425a:	0f 5f       	subi	r16, 0xFF	; 255
    425c:	1f 4f       	sbci	r17, 0xFF	; 255
    425e:	1f 93       	push	r17
    4260:	0f 93       	push	r16
    4262:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s); 
    4266:	b8 01       	movw	r22, r16
    4268:	ce 01       	movw	r24, r28
    426a:	4f 96       	adiw	r24, 0x1f	; 31
    426c:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4270:	be 01       	movw	r22, r28
    4272:	61 5e       	subi	r22, 0xE1	; 225
    4274:	7f 4f       	sbci	r23, 0xFF	; 255
    4276:	c7 01       	movw	r24, r14
    4278:	32 df       	rcall	.-412    	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    427a:	ce 01       	movw	r24, r28
    427c:	4f 96       	adiw	r24, 0x1f	; 31
    427e:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4282:	0f b6       	in	r0, 0x3f	; 63
    4284:	f8 94       	cli
    4286:	de bf       	out	0x3e, r29	; 62
    4288:	0f be       	out	0x3f, r0	; 63
    428a:	cd bf       	out	0x3d, r28	; 61
    428c:	a4 96       	adiw	r28, 0x24	; 36
}
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	08 95       	ret

000042a6 <_ZN8MM3Class8setITermEj>:
    42a6:	ef 92       	push	r14

void MM3Class::setITerm(unsigned int n) {
    42a8:	ff 92       	push	r15
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	a4 97       	sbiw	r28, 0x24	; 36
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	7c 01       	movw	r14, r24
  char s[30];
  snprintf(s, 30, "W01 05 %d", n);
    42c4:	7f 93       	push	r23
    42c6:	6f 93       	push	r22
    42c8:	2f e2       	ldi	r18, 0x2F	; 47
    42ca:	34 e0       	ldi	r19, 0x04	; 4
    42cc:	3f 93       	push	r19
    42ce:	2f 93       	push	r18
    42d0:	1f 92       	push	r1
    42d2:	8e e1       	ldi	r24, 0x1E	; 30
    42d4:	8f 93       	push	r24
    42d6:	8e 01       	movw	r16, r28
    42d8:	0f 5f       	subi	r16, 0xFF	; 255
    42da:	1f 4f       	sbci	r17, 0xFF	; 255
    42dc:	1f 93       	push	r17
    42de:	0f 93       	push	r16
    42e0:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);
    42e4:	b8 01       	movw	r22, r16
    42e6:	ce 01       	movw	r24, r28
    42e8:	4f 96       	adiw	r24, 0x1f	; 31
    42ea:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    42ee:	be 01       	movw	r22, r28
    42f0:	61 5e       	subi	r22, 0xE1	; 225
    42f2:	7f 4f       	sbci	r23, 0xFF	; 255
    42f4:	c7 01       	movw	r24, r14
    42f6:	f3 de       	rcall	.-538    	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    42f8:	ce 01       	movw	r24, r28
    42fa:	4f 96       	adiw	r24, 0x1f	; 31
    42fc:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	a4 96       	adiw	r28, 0x24	; 36
}
    430c:	0f b6       	in	r0, 0x3f	; 63
    430e:	f8 94       	cli
    4310:	de bf       	out	0x3e, r29	; 62
    4312:	0f be       	out	0x3f, r0	; 63
    4314:	cd bf       	out	0x3d, r28	; 61
    4316:	df 91       	pop	r29
    4318:	cf 91       	pop	r28
    431a:	1f 91       	pop	r17
    431c:	0f 91       	pop	r16
    431e:	ff 90       	pop	r15
    4320:	ef 90       	pop	r14
    4322:	08 95       	ret

00004324 <_ZN8MM3Class8setDTermEj>:
    4324:	ef 92       	push	r14

void MM3Class::setDTerm(unsigned int n) {
    4326:	ff 92       	push	r15
    4328:	0f 93       	push	r16
    432a:	1f 93       	push	r17
    432c:	cf 93       	push	r28
    432e:	df 93       	push	r29
    4330:	cd b7       	in	r28, 0x3d	; 61
    4332:	de b7       	in	r29, 0x3e	; 62
    4334:	a4 97       	sbiw	r28, 0x24	; 36
    4336:	0f b6       	in	r0, 0x3f	; 63
    4338:	f8 94       	cli
    433a:	de bf       	out	0x3e, r29	; 62
    433c:	0f be       	out	0x3f, r0	; 63
    433e:	cd bf       	out	0x3d, r28	; 61
    4340:	7c 01       	movw	r14, r24
  char s[30];
  snprintf(s, 30, "W01 06 %d", n);
    4342:	7f 93       	push	r23
    4344:	6f 93       	push	r22
    4346:	29 e3       	ldi	r18, 0x39	; 57
    4348:	34 e0       	ldi	r19, 0x04	; 4
    434a:	3f 93       	push	r19
    434c:	2f 93       	push	r18
    434e:	1f 92       	push	r1
    4350:	8e e1       	ldi	r24, 0x1E	; 30
    4352:	8f 93       	push	r24
    4354:	8e 01       	movw	r16, r28
    4356:	0f 5f       	subi	r16, 0xFF	; 255
    4358:	1f 4f       	sbci	r17, 0xFF	; 255
    435a:	1f 93       	push	r17
    435c:	0f 93       	push	r16
    435e:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);
    4362:	b8 01       	movw	r22, r16
    4364:	ce 01       	movw	r24, r28
    4366:	4f 96       	adiw	r24, 0x1f	; 31
    4368:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    436c:	be 01       	movw	r22, r28
    436e:	61 5e       	subi	r22, 0xE1	; 225
    4370:	7f 4f       	sbci	r23, 0xFF	; 255
    4372:	c7 01       	movw	r24, r14
    4374:	b4 de       	rcall	.-664    	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4376:	ce 01       	movw	r24, r28
    4378:	4f 96       	adiw	r24, 0x1f	; 31
    437a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	a4 96       	adiw	r28, 0x24	; 36
}
    438a:	0f b6       	in	r0, 0x3f	; 63
    438c:	f8 94       	cli
    438e:	de bf       	out	0x3e, r29	; 62
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	cd bf       	out	0x3d, r28	; 61
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	1f 91       	pop	r17
    439a:	0f 91       	pop	r16
    439c:	ff 90       	pop	r15
    439e:	ef 90       	pop	r14
    43a0:	08 95       	ret

000043a2 <_ZN8MM3Class12setPIDScalarEj>:
    43a2:	ef 92       	push	r14

void MM3Class::setPIDScalar(unsigned int n) {
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	a4 97       	sbiw	r28, 0x24	; 36
    43b4:	0f b6       	in	r0, 0x3f	; 63
    43b6:	f8 94       	cli
    43b8:	de bf       	out	0x3e, r29	; 62
    43ba:	0f be       	out	0x3f, r0	; 63
    43bc:	cd bf       	out	0x3d, r28	; 61
    43be:	7c 01       	movw	r14, r24
  char s[30];
  snprintf(s, 30, "W01 08 %d", n);
    43c0:	7f 93       	push	r23
    43c2:	6f 93       	push	r22
    43c4:	23 e4       	ldi	r18, 0x43	; 67
    43c6:	34 e0       	ldi	r19, 0x04	; 4
    43c8:	3f 93       	push	r19
    43ca:	2f 93       	push	r18
    43cc:	1f 92       	push	r1
    43ce:	8e e1       	ldi	r24, 0x1E	; 30
    43d0:	8f 93       	push	r24
    43d2:	8e 01       	movw	r16, r28
    43d4:	0f 5f       	subi	r16, 0xFF	; 255
    43d6:	1f 4f       	sbci	r17, 0xFF	; 255
    43d8:	1f 93       	push	r17
    43da:	0f 93       	push	r16
    43dc:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);
    43e0:	b8 01       	movw	r22, r16
    43e2:	ce 01       	movw	r24, r28
    43e4:	4f 96       	adiw	r24, 0x1f	; 31
    43e6:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    43ea:	be 01       	movw	r22, r28
    43ec:	61 5e       	subi	r22, 0xE1	; 225
    43ee:	7f 4f       	sbci	r23, 0xFF	; 255
    43f0:	c7 01       	movw	r24, r14
    43f2:	75 de       	rcall	.-790    	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    43f4:	ce 01       	movw	r24, r28
    43f6:	4f 96       	adiw	r24, 0x1f	; 31
    43f8:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	f8 94       	cli
    4400:	de bf       	out	0x3e, r29	; 62
    4402:	0f be       	out	0x3f, r0	; 63
    4404:	cd bf       	out	0x3d, r28	; 61
    4406:	a4 96       	adiw	r28, 0x24	; 36
}
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	0f 91       	pop	r16
    441a:	ff 90       	pop	r15
    441c:	ef 90       	pop	r14
    441e:	08 95       	ret

00004420 <_ZN8MM3Class6setVFFEj>:
    4420:	ef 92       	push	r14

void MM3Class::setVFF(unsigned int n) {
    4422:	ff 92       	push	r15
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	cd b7       	in	r28, 0x3d	; 61
    442e:	de b7       	in	r29, 0x3e	; 62
    4430:	a4 97       	sbiw	r28, 0x24	; 36
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	f8 94       	cli
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	cd bf       	out	0x3d, r28	; 61
    443c:	7c 01       	movw	r14, r24
  char s[30];
  snprintf(s, 30, "W01 02 %d", n);
    443e:	7f 93       	push	r23
    4440:	6f 93       	push	r22
    4442:	2d e4       	ldi	r18, 0x4D	; 77
    4444:	34 e0       	ldi	r19, 0x04	; 4
    4446:	3f 93       	push	r19
    4448:	2f 93       	push	r18
    444a:	1f 92       	push	r1
    444c:	8e e1       	ldi	r24, 0x1E	; 30
    444e:	8f 93       	push	r24
    4450:	8e 01       	movw	r16, r28
    4452:	0f 5f       	subi	r16, 0xFF	; 255
    4454:	1f 4f       	sbci	r17, 0xFF	; 255
    4456:	1f 93       	push	r17
    4458:	0f 93       	push	r16
    445a:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);
    445e:	b8 01       	movw	r22, r16
    4460:	ce 01       	movw	r24, r28
    4462:	4f 96       	adiw	r24, 0x1f	; 31
    4464:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4468:	be 01       	movw	r22, r28
    446a:	61 5e       	subi	r22, 0xE1	; 225
    446c:	7f 4f       	sbci	r23, 0xFF	; 255
    446e:	c7 01       	movw	r24, r14
    4470:	36 de       	rcall	.-916    	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4472:	ce 01       	movw	r24, r28
    4474:	4f 96       	adiw	r24, 0x1f	; 31
    4476:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	a4 96       	adiw	r28, 0x24	; 36
}
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	f8 94       	cli
    448a:	de bf       	out	0x3e, r29	; 62
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	cd bf       	out	0x3d, r28	; 61
    4490:	df 91       	pop	r29
    4492:	cf 91       	pop	r28
    4494:	1f 91       	pop	r17
    4496:	0f 91       	pop	r16
    4498:	ff 90       	pop	r15
    449a:	ef 90       	pop	r14
    449c:	08 95       	ret

0000449e <_ZN8MM3Class11storeTuningEv>:
    449e:	cf 92       	push	r12

// until tuning parameters are stored, they are temporary
void MM3Class::storeTuning() {
    44a0:	df 92       	push	r13
    44a2:	ef 92       	push	r14
    44a4:	ff 92       	push	r15
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
    44b2:	62 97       	sbiw	r28, 0x12	; 18
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	8c 01       	movw	r16, r24

  void init();

  void readController();

  unsigned int getPTerm() { return readRegister("04"); }
    44c0:	62 ef       	ldi	r22, 0xF2	; 242
    44c2:	72 e0       	ldi	r23, 0x02	; 2
    44c4:	ce 01       	movw	r24, r28
    44c6:	01 96       	adiw	r24, 0x01	; 1
    44c8:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    44cc:	be 01       	movw	r22, r28
    44ce:	6f 5f       	subi	r22, 0xFF	; 255
    44d0:	7f 4f       	sbci	r23, 0xFF	; 255
    44d2:	c8 01       	movw	r24, r16
    44d4:	9d dc       	rcall	.-1734   	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    44d6:	6b 01       	movw	r12, r22
    44d8:	7c 01       	movw	r14, r24
    44da:	ce 01       	movw	r24, r28
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    44e2:	4a e0       	ldi	r20, 0x0A	; 10
  writeMM3("S01 04 " + String(getPTerm()     ) );
    44e4:	b6 01       	movw	r22, r12
    44e6:	ce 01       	movw	r24, r28
    44e8:	0d 96       	adiw	r24, 0x0d	; 13
    44ea:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    44ee:	67 e5       	ldi	r22, 0x57	; 87
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    44f0:	74 e0       	ldi	r23, 0x04	; 4
    44f2:	ce 01       	movw	r24, r28
    44f4:	07 96       	adiw	r24, 0x07	; 7
    44f6:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    44fa:	be 01       	movw	r22, r28
    44fc:	63 5f       	subi	r22, 0xF3	; 243
    44fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4500:	ce 01       	movw	r24, r28
    4502:	07 96       	adiw	r24, 0x07	; 7
    4504:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    4508:	bc 01       	movw	r22, r24
    450a:	ce 01       	movw	r24, r28
    450c:	01 96       	adiw	r24, 0x01	; 1
    450e:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    4512:	be 01       	movw	r22, r28
    4514:	6f 5f       	subi	r22, 0xFF	; 255
    4516:	7f 4f       	sbci	r23, 0xFF	; 255
    4518:	c8 01       	movw	r24, r16
    451a:	e1 dd       	rcall	.-1086   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    451c:	ce 01       	movw	r24, r28
    451e:	01 96       	adiw	r24, 0x01	; 1
    4520:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4524:	ce 01       	movw	r24, r28
    4526:	07 96       	adiw	r24, 0x07	; 7
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4528:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    452c:	ce 01       	movw	r24, r28
    452e:	0d 96       	adiw	r24, 0x0d	; 13
    4530:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4534:	6b ef       	ldi	r22, 0xFB	; 251
    4536:	72 e0       	ldi	r23, 0x02	; 2
  unsigned int getITerm() { return readRegister("05"); }
    4538:	ce 01       	movw	r24, r28
    453a:	01 96       	adiw	r24, 0x01	; 1
    453c:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4540:	be 01       	movw	r22, r28
    4542:	6f 5f       	subi	r22, 0xFF	; 255
    4544:	7f 4f       	sbci	r23, 0xFF	; 255
    4546:	c8 01       	movw	r24, r16
    4548:	63 dc       	rcall	.-1850   	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    454a:	6b 01       	movw	r12, r22
    454c:	7c 01       	movw	r14, r24
    454e:	ce 01       	movw	r24, r28
    4550:	01 96       	adiw	r24, 0x01	; 1
    4552:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4556:	4a e0       	ldi	r20, 0x0A	; 10
    4558:	b6 01       	movw	r22, r12
    455a:	ce 01       	movw	r24, r28
  writeMM3("S01 05 " + String(getITerm()     ) );
    455c:	0d 96       	adiw	r24, 0x0d	; 13
    455e:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    4562:	6f e5       	ldi	r22, 0x5F	; 95
    4564:	74 e0       	ldi	r23, 0x04	; 4
    4566:	ce 01       	movw	r24, r28
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4568:	07 96       	adiw	r24, 0x07	; 7
    456a:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    456e:	be 01       	movw	r22, r28
    4570:	63 5f       	subi	r22, 0xF3	; 243
    4572:	7f 4f       	sbci	r23, 0xFF	; 255
    4574:	ce 01       	movw	r24, r28
    4576:	07 96       	adiw	r24, 0x07	; 7
    4578:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    457c:	bc 01       	movw	r22, r24
    457e:	ce 01       	movw	r24, r28
    4580:	01 96       	adiw	r24, 0x01	; 1
    4582:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    4586:	be 01       	movw	r22, r28
    4588:	6f 5f       	subi	r22, 0xFF	; 255
    458a:	7f 4f       	sbci	r23, 0xFF	; 255
    458c:	c8 01       	movw	r24, r16
    458e:	a7 dd       	rcall	.-1202   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4590:	ce 01       	movw	r24, r28
    4592:	01 96       	adiw	r24, 0x01	; 1
    4594:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4598:	ce 01       	movw	r24, r28
    459a:	07 96       	adiw	r24, 0x07	; 7
    459c:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    45a0:	ce 01       	movw	r24, r28
    45a2:	0d 96       	adiw	r24, 0x0d	; 13
    45a4:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    45a8:	64 e0       	ldi	r22, 0x04	; 4
    45aa:	73 e0       	ldi	r23, 0x03	; 3
    45ac:	ce 01       	movw	r24, r28
    45ae:	01 96       	adiw	r24, 0x01	; 1
  unsigned int getDTerm() { return readRegister("06"); }
    45b0:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    45b4:	be 01       	movw	r22, r28
    45b6:	6f 5f       	subi	r22, 0xFF	; 255
    45b8:	7f 4f       	sbci	r23, 0xFF	; 255
    45ba:	c8 01       	movw	r24, r16
    45bc:	29 dc       	rcall	.-1966   	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    45be:	6b 01       	movw	r12, r22
    45c0:	7c 01       	movw	r14, r24
    45c2:	ce 01       	movw	r24, r28
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    45ca:	4a e0       	ldi	r20, 0x0A	; 10
    45cc:	b6 01       	movw	r22, r12
    45ce:	ce 01       	movw	r24, r28
    45d0:	0d 96       	adiw	r24, 0x0d	; 13
    45d2:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
  writeMM3("S01 06 " + String(getDTerm()     ) );
    45d6:	67 e6       	ldi	r22, 0x67	; 103
    45d8:	74 e0       	ldi	r23, 0x04	; 4
    45da:	ce 01       	movw	r24, r28
    45dc:	07 96       	adiw	r24, 0x07	; 7
    45de:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    45e2:	be 01       	movw	r22, r28
    45e4:	63 5f       	subi	r22, 0xF3	; 243
    45e6:	7f 4f       	sbci	r23, 0xFF	; 255
    45e8:	ce 01       	movw	r24, r28
    45ea:	07 96       	adiw	r24, 0x07	; 7
    45ec:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    45f0:	bc 01       	movw	r22, r24
    45f2:	ce 01       	movw	r24, r28
    45f4:	01 96       	adiw	r24, 0x01	; 1
    45f6:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    45fa:	be 01       	movw	r22, r28
    45fc:	6f 5f       	subi	r22, 0xFF	; 255
    45fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4600:	c8 01       	movw	r24, r16
    4602:	6d dd       	rcall	.-1318   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4604:	ce 01       	movw	r24, r28
    4606:	01 96       	adiw	r24, 0x01	; 1
    4608:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    460c:	ce 01       	movw	r24, r28
    460e:	07 96       	adiw	r24, 0x07	; 7
    4610:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4614:	ce 01       	movw	r24, r28
    4616:	0d 96       	adiw	r24, 0x0d	; 13
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4618:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    461c:	61 e1       	ldi	r22, 0x11	; 17
    461e:	73 e0       	ldi	r23, 0x03	; 3
    4620:	ce 01       	movw	r24, r28
    4622:	01 96       	adiw	r24, 0x01	; 1
    4624:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
  unsigned int getPIDScalar() { return readRegister("08"); }
    4628:	be 01       	movw	r22, r28
    462a:	6f 5f       	subi	r22, 0xFF	; 255
    462c:	7f 4f       	sbci	r23, 0xFF	; 255
    462e:	c8 01       	movw	r24, r16
    4630:	ef db       	rcall	.-2082   	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    4632:	6b 01       	movw	r12, r22
    4634:	7c 01       	movw	r14, r24
    4636:	ce 01       	movw	r24, r28
    4638:	01 96       	adiw	r24, 0x01	; 1
    463a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    463e:	4a e0       	ldi	r20, 0x0A	; 10
    4640:	b6 01       	movw	r22, r12
    4642:	ce 01       	movw	r24, r28
    4644:	0d 96       	adiw	r24, 0x0d	; 13
    4646:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    464a:	6f e6       	ldi	r22, 0x6F	; 111
  writeMM3("S01 08 " + String(getPIDScalar() ) );
    464c:	74 e0       	ldi	r23, 0x04	; 4
    464e:	ce 01       	movw	r24, r28
    4650:	07 96       	adiw	r24, 0x07	; 7
    4652:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4656:	be 01       	movw	r22, r28
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4658:	63 5f       	subi	r22, 0xF3	; 243
    465a:	7f 4f       	sbci	r23, 0xFF	; 255
    465c:	ce 01       	movw	r24, r28
    465e:	07 96       	adiw	r24, 0x07	; 7
    4660:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    4664:	bc 01       	movw	r22, r24
    4666:	ce 01       	movw	r24, r28
    4668:	01 96       	adiw	r24, 0x01	; 1
    466a:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    466e:	be 01       	movw	r22, r28
    4670:	6f 5f       	subi	r22, 0xFF	; 255
    4672:	7f 4f       	sbci	r23, 0xFF	; 255
    4674:	c8 01       	movw	r24, r16
    4676:	33 dd       	rcall	.-1434   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4678:	ce 01       	movw	r24, r28
    467a:	01 96       	adiw	r24, 0x01	; 1
    467c:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4680:	ce 01       	movw	r24, r28
    4682:	07 96       	adiw	r24, 0x07	; 7
    4684:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4688:	ce 01       	movw	r24, r28
    468a:	0d 96       	adiw	r24, 0x0d	; 13
    468c:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4690:	68 e1       	ldi	r22, 0x18	; 24
    4692:	73 e0       	ldi	r23, 0x03	; 3
    4694:	ce 01       	movw	r24, r28
    4696:	01 96       	adiw	r24, 0x01	; 1
    4698:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    469c:	be 01       	movw	r22, r28
    469e:	6f 5f       	subi	r22, 0xFF	; 255
  unsigned int getVFF() { return readRegister("02"); }
    46a0:	7f 4f       	sbci	r23, 0xFF	; 255
    46a2:	c8 01       	movw	r24, r16
    46a4:	b5 db       	rcall	.-2198   	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    46a6:	6b 01       	movw	r12, r22
    46a8:	7c 01       	movw	r14, r24
    46aa:	ce 01       	movw	r24, r28
    46ac:	01 96       	adiw	r24, 0x01	; 1
    46ae:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    46b2:	4a e0       	ldi	r20, 0x0A	; 10
    46b4:	b6 01       	movw	r22, r12
    46b6:	ce 01       	movw	r24, r28
    46b8:	0d 96       	adiw	r24, 0x0d	; 13
    46ba:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    46be:	67 e7       	ldi	r22, 0x77	; 119
    46c0:	74 e0       	ldi	r23, 0x04	; 4
    46c2:	ce 01       	movw	r24, r28
  writeMM3("S01 02 " + String(getVFF()       ) );
    46c4:	07 96       	adiw	r24, 0x07	; 7
    46c6:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    46ca:	be 01       	movw	r22, r28
    46cc:	63 5f       	subi	r22, 0xF3	; 243
    46ce:	7f 4f       	sbci	r23, 0xFF	; 255
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    46d0:	ce 01       	movw	r24, r28
    46d2:	07 96       	adiw	r24, 0x07	; 7
    46d4:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    46d8:	bc 01       	movw	r22, r24
    46da:	ce 01       	movw	r24, r28
    46dc:	01 96       	adiw	r24, 0x01	; 1
    46de:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    46e2:	be 01       	movw	r22, r28
    46e4:	6f 5f       	subi	r22, 0xFF	; 255
    46e6:	7f 4f       	sbci	r23, 0xFF	; 255
    46e8:	c8 01       	movw	r24, r16
    46ea:	f9 dc       	rcall	.-1550   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    46ec:	ce 01       	movw	r24, r28
    46ee:	01 96       	adiw	r24, 0x01	; 1
    46f0:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    46f4:	ce 01       	movw	r24, r28
    46f6:	07 96       	adiw	r24, 0x07	; 7
    46f8:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    46fc:	ce 01       	movw	r24, r28
    46fe:	0d 96       	adiw	r24, 0x0d	; 13
    4700:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4704:	62 96       	adiw	r28, 0x12	; 18
    4706:	0f b6       	in	r0, 0x3f	; 63
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	df 91       	pop	r29
    4712:	cf 91       	pop	r28
    4714:	1f 91       	pop	r17
    4716:	0f 91       	pop	r16
}
    4718:	ff 90       	pop	r15
    471a:	ef 90       	pop	r14
    471c:	df 90       	pop	r13
    471e:	cf 90       	pop	r12
    4720:	08 95       	ret

00004722 <_ZN8MM3Class6setPosEd>:
    4722:	cf 92       	push	r12
    4724:	df 92       	push	r13
    4726:	ef 92       	push	r14
    4728:	ff 92       	push	r15
    472a:	0f 93       	push	r16
    472c:	1f 93       	push	r17
    472e:	cf 93       	push	r28
    4730:	df 93       	push	r29
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62

void MM3Class::setPos(double pos) {
    4736:	a4 97       	sbiw	r28, 0x24	; 36
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	8c 01       	movw	r16, r24
    4744:	6a 01       	movw	r12, r20
    4746:	7b 01       	movw	r14, r22
  char s[30];
  m_currPos = pos;
    4748:	fc 01       	movw	r30, r24
    474a:	40 83       	st	Z, r20
    474c:	51 83       	std	Z+1, r21	; 0x01
    474e:	62 83       	std	Z+2, r22	; 0x02
    4750:	73 83       	std	Z+3, r23	; 0x03
  snprintf(s, 30, "W01 00 %ld", long(pos * Motor.getCPR()));
    4752:	60 91 85 07 	lds	r22, 0x0785
    4756:	70 91 86 07 	lds	r23, 0x0786
    475a:	80 91 87 07 	lds	r24, 0x0787
    475e:	90 91 88 07 	lds	r25, 0x0788
    4762:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    4766:	9b 01       	movw	r18, r22
    4768:	ac 01       	movw	r20, r24
    476a:	c7 01       	movw	r24, r14
    476c:	b6 01       	movw	r22, r12
    476e:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    4772:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    4776:	9f 93       	push	r25
    4778:	8f 93       	push	r24
    477a:	7f 93       	push	r23
    477c:	6f 93       	push	r22
    477e:	8f e7       	ldi	r24, 0x7F	; 127
    4780:	94 e0       	ldi	r25, 0x04	; 4
    4782:	9f 93       	push	r25
    4784:	8f 93       	push	r24
    4786:	1f 92       	push	r1
    4788:	8e e1       	ldi	r24, 0x1E	; 30
    478a:	8f 93       	push	r24
    478c:	ce 01       	movw	r24, r28
    478e:	01 96       	adiw	r24, 0x01	; 1
    4790:	7c 01       	movw	r14, r24
    4792:	ff 92       	push	r15
    4794:	8f 93       	push	r24
    4796:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);  // tell the motor controller that this is the current position
    479a:	b7 01       	movw	r22, r14
    479c:	ce 01       	movw	r24, r28
    479e:	4f 96       	adiw	r24, 0x1f	; 31
    47a0:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    47a4:	be 01       	movw	r22, r28
    47a6:	61 5e       	subi	r22, 0xE1	; 225
    47a8:	7f 4f       	sbci	r23, 0xFF	; 255
    47aa:	c8 01       	movw	r24, r16
    47ac:	98 dc       	rcall	.-1744   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    47ae:	ce 01       	movw	r24, r28
    47b0:	4f 96       	adiw	r24, 0x1f	; 31
    47b2:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    47b6:	0f b6       	in	r0, 0x3f	; 63
    47b8:	f8 94       	cli
    47ba:	de bf       	out	0x3e, r29	; 62
    47bc:	0f be       	out	0x3f, r0	; 63
    47be:	cd bf       	out	0x3d, r28	; 61
    47c0:	a4 96       	adiw	r28, 0x24	; 36
}
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	1f 91       	pop	r17
    47d2:	0f 91       	pop	r16
    47d4:	ff 90       	pop	r15
    47d6:	ef 90       	pop	r14
    47d8:	df 90       	pop	r13
    47da:	cf 90       	pop	r12
    47dc:	08 95       	ret

000047de <_ZN8MM3Class23setVirtualNegativeLimitEl>:
    47de:	ef 92       	push	r14

void MM3Class::setVirtualNegativeLimit(long v) { 
    47e0:	ff 92       	push	r15
    47e2:	0f 93       	push	r16
    47e4:	1f 93       	push	r17
    47e6:	cf 93       	push	r28
    47e8:	df 93       	push	r29
    47ea:	cd b7       	in	r28, 0x3d	; 61
    47ec:	de b7       	in	r29, 0x3e	; 62
    47ee:	a4 97       	sbiw	r28, 0x24	; 36
    47f0:	0f b6       	in	r0, 0x3f	; 63
    47f2:	f8 94       	cli
    47f4:	de bf       	out	0x3e, r29	; 62
    47f6:	0f be       	out	0x3f, r0	; 63
    47f8:	cd bf       	out	0x3d, r28	; 61
    47fa:	8c 01       	movw	r16, r24
  char s[30];
  m_vnlim = v;
    47fc:	fc 01       	movw	r30, r24
    47fe:	42 87       	std	Z+10, r20	; 0x0a
    4800:	53 87       	std	Z+11, r21	; 0x0b
    4802:	64 87       	std	Z+12, r22	; 0x0c
    4804:	75 87       	std	Z+13, r23	; 0x0d
  snprintf(s, 30, "W01 23 %ld", m_vnlim);
    4806:	7f 93       	push	r23
    4808:	6f 93       	push	r22
    480a:	5f 93       	push	r21
    480c:	4f 93       	push	r20
    480e:	8a e8       	ldi	r24, 0x8A	; 138
    4810:	94 e0       	ldi	r25, 0x04	; 4
    4812:	9f 93       	push	r25
    4814:	8f 93       	push	r24
    4816:	1f 92       	push	r1
    4818:	8e e1       	ldi	r24, 0x1E	; 30
    481a:	8f 93       	push	r24
    481c:	ce 01       	movw	r24, r28
    481e:	01 96       	adiw	r24, 0x01	; 1
    4820:	7c 01       	movw	r14, r24
    4822:	ff 92       	push	r15
    4824:	8f 93       	push	r24
    4826:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);      // vnlimit
    482a:	b7 01       	movw	r22, r14
    482c:	ce 01       	movw	r24, r28
    482e:	4f 96       	adiw	r24, 0x1f	; 31
    4830:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4834:	be 01       	movw	r22, r28
    4836:	61 5e       	subi	r22, 0xE1	; 225
    4838:	7f 4f       	sbci	r23, 0xFF	; 255
    483a:	c8 01       	movw	r24, r16
    483c:	50 dc       	rcall	.-1888   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    483e:	ce 01       	movw	r24, r28
    4840:	4f 96       	adiw	r24, 0x1f	; 31
    4842:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4846:	0f b6       	in	r0, 0x3f	; 63
    4848:	f8 94       	cli
    484a:	de bf       	out	0x3e, r29	; 62
    484c:	0f be       	out	0x3f, r0	; 63
    484e:	cd bf       	out	0x3d, r28	; 61
    4850:	a4 96       	adiw	r28, 0x24	; 36
}
    4852:	0f b6       	in	r0, 0x3f	; 63
    4854:	f8 94       	cli
    4856:	de bf       	out	0x3e, r29	; 62
    4858:	0f be       	out	0x3f, r0	; 63
    485a:	cd bf       	out	0x3d, r28	; 61
    485c:	df 91       	pop	r29
    485e:	cf 91       	pop	r28
    4860:	1f 91       	pop	r17
    4862:	0f 91       	pop	r16
    4864:	ff 90       	pop	r15
    4866:	ef 90       	pop	r14
    4868:	08 95       	ret

0000486a <_ZN8MM3Class23setVirtualPositiveLimitEl>:
    486a:	ef 92       	push	r14

void MM3Class::setVirtualPositiveLimit(long v) { 
    486c:	ff 92       	push	r15
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	cd b7       	in	r28, 0x3d	; 61
    4878:	de b7       	in	r29, 0x3e	; 62
    487a:	a4 97       	sbiw	r28, 0x24	; 36
    487c:	0f b6       	in	r0, 0x3f	; 63
    487e:	f8 94       	cli
    4880:	de bf       	out	0x3e, r29	; 62
    4882:	0f be       	out	0x3f, r0	; 63
    4884:	cd bf       	out	0x3d, r28	; 61
    4886:	8c 01       	movw	r16, r24
  char s[30];
  m_vplim = v;
    4888:	fc 01       	movw	r30, r24
    488a:	46 87       	std	Z+14, r20	; 0x0e
    488c:	57 87       	std	Z+15, r21	; 0x0f
    488e:	60 8b       	std	Z+16, r22	; 0x10
    4890:	71 8b       	std	Z+17, r23	; 0x11
  snprintf(s, 30, "W01 24 %ld", m_vplim);
    4892:	7f 93       	push	r23
    4894:	6f 93       	push	r22
    4896:	5f 93       	push	r21
    4898:	4f 93       	push	r20
    489a:	85 e9       	ldi	r24, 0x95	; 149
    489c:	94 e0       	ldi	r25, 0x04	; 4
    489e:	9f 93       	push	r25
    48a0:	8f 93       	push	r24
    48a2:	1f 92       	push	r1
    48a4:	8e e1       	ldi	r24, 0x1E	; 30
    48a6:	8f 93       	push	r24
    48a8:	ce 01       	movw	r24, r28
    48aa:	01 96       	adiw	r24, 0x01	; 1
    48ac:	7c 01       	movw	r14, r24
    48ae:	ff 92       	push	r15
    48b0:	8f 93       	push	r24
    48b2:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);      // vplimit
    48b6:	b7 01       	movw	r22, r14
    48b8:	ce 01       	movw	r24, r28
    48ba:	4f 96       	adiw	r24, 0x1f	; 31
    48bc:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    48c0:	be 01       	movw	r22, r28
    48c2:	61 5e       	subi	r22, 0xE1	; 225
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255
    48c6:	c8 01       	movw	r24, r16
    48c8:	0a dc       	rcall	.-2028   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    48ca:	ce 01       	movw	r24, r28
    48cc:	4f 96       	adiw	r24, 0x1f	; 31
    48ce:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    48d2:	0f b6       	in	r0, 0x3f	; 63
    48d4:	f8 94       	cli
    48d6:	de bf       	out	0x3e, r29	; 62
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	cd bf       	out	0x3d, r28	; 61
    48dc:	a4 96       	adiw	r28, 0x24	; 36
}
    48de:	0f b6       	in	r0, 0x3f	; 63
    48e0:	f8 94       	cli
    48e2:	de bf       	out	0x3e, r29	; 62
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	cd bf       	out	0x3d, r28	; 61
    48e8:	df 91       	pop	r29
    48ea:	cf 91       	pop	r28
    48ec:	1f 91       	pop	r17
    48ee:	0f 91       	pop	r16
    48f0:	ff 90       	pop	r15
    48f2:	ef 90       	pop	r14
    48f4:	08 95       	ret

000048f6 <_ZN8MM3Class11moveAtSpeedEi>:
    48f6:	4f 92       	push	r4

// positive is down and negative is up
void MM3Class::moveAtSpeed(int pct) {
    48f8:	5f 92       	push	r5
    48fa:	6f 92       	push	r6
    48fc:	7f 92       	push	r7
    48fe:	8f 92       	push	r8
    4900:	9f 92       	push	r9
    4902:	af 92       	push	r10
    4904:	bf 92       	push	r11
    4906:	cf 92       	push	r12
    4908:	df 92       	push	r13
    490a:	ef 92       	push	r14
    490c:	ff 92       	push	r15
    490e:	0f 93       	push	r16
    4910:	1f 93       	push	r17
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	cd b7       	in	r28, 0x3d	; 61
    4918:	de b7       	in	r29, 0x3e	; 62
    491a:	a4 97       	sbiw	r28, 0x24	; 36
    491c:	0f b6       	in	r0, 0x3f	; 63
    491e:	f8 94       	cli
    4920:	de bf       	out	0x3e, r29	; 62
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	cd bf       	out	0x3d, r28	; 61
    4926:	4c 01       	movw	r8, r24
  char s[30];
  int spd = map(pct, 0, 100, 0, SPEED_RANGE);
    4928:	2b 01       	movw	r4, r22
    492a:	66 24       	eor	r6, r6
    492c:	57 fc       	sbrc	r5, 7
    492e:	60 94       	com	r6
    4930:	76 2c       	mov	r7, r6
    4932:	60 91 85 07 	lds	r22, 0x0785
    4936:	70 91 86 07 	lds	r23, 0x0786
    493a:	80 91 87 07 	lds	r24, 0x0787
    493e:	90 91 88 07 	lds	r25, 0x0788
    4942:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    4946:	20 91 89 07 	lds	r18, 0x0789
    494a:	30 91 8a 07 	lds	r19, 0x078A
    494e:	40 91 8b 07 	lds	r20, 0x078B
    4952:	50 91 8c 07 	lds	r21, 0x078C
    4956:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    495a:	20 e0       	ldi	r18, 0x00	; 0
    495c:	30 e8       	ldi	r19, 0x80	; 128
    495e:	4b e3       	ldi	r20, 0x3B	; 59
    4960:	56 e4       	ldi	r21, 0x46	; 70
    4962:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	40 e0       	ldi	r20, 0x00	; 0
    496c:	5f e3       	ldi	r21, 0x3F	; 63
    496e:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <__addsf3>
    4972:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    4976:	cb 01       	movw	r24, r22
    4978:	aa 27       	eor	r26, r26
    497a:	97 fd       	sbrc	r25, 7
    497c:	a0 95       	com	r26
    497e:	ba 2f       	mov	r27, r26
    4980:	bf 93       	push	r27
    4982:	af 93       	push	r26
    4984:	9f 93       	push	r25
    4986:	8f 93       	push	r24
    4988:	a1 2c       	mov	r10, r1
    498a:	b1 2c       	mov	r11, r1
    498c:	65 01       	movw	r12, r10
    498e:	14 e6       	ldi	r17, 0x64	; 100
    4990:	e1 2e       	mov	r14, r17
    4992:	f1 2c       	mov	r15, r1
    4994:	00 e0       	ldi	r16, 0x00	; 0
    4996:	10 e0       	ldi	r17, 0x00	; 0
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	a9 01       	movw	r20, r18
    499e:	c3 01       	movw	r24, r6
    49a0:	b2 01       	movw	r22, r4
    49a2:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <_Z3maplllll>
  snprintf(s, 30, "V01 %d", spd);
    49a6:	7f 93       	push	r23
    49a8:	6f 93       	push	r22
    49aa:	80 ea       	ldi	r24, 0xA0	; 160
    49ac:	94 e0       	ldi	r25, 0x04	; 4
    49ae:	9f 93       	push	r25
    49b0:	8f 93       	push	r24
    49b2:	1f 92       	push	r1
    49b4:	8e e1       	ldi	r24, 0x1E	; 30
    49b6:	8f 93       	push	r24
    49b8:	8e 01       	movw	r16, r28
    49ba:	0f 5f       	subi	r16, 0xFF	; 255
    49bc:	1f 4f       	sbci	r17, 0xFF	; 255
    49be:	1f 93       	push	r17
    49c0:	0f 93       	push	r16
    49c2:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);
    49c6:	b8 01       	movw	r22, r16
    49c8:	ce 01       	movw	r24, r28
    49ca:	4f 96       	adiw	r24, 0x1f	; 31
    49cc:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    49d0:	be 01       	movw	r22, r28
    49d2:	61 5e       	subi	r22, 0xE1	; 225
    49d4:	7f 4f       	sbci	r23, 0xFF	; 255
    49d6:	c4 01       	movw	r24, r8
    49d8:	82 db       	rcall	.-2300   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    49da:	ce 01       	movw	r24, r28
    49dc:	4f 96       	adiw	r24, 0x1f	; 31
    49de:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    49e2:	0f b6       	in	r0, 0x3f	; 63
    49e4:	f8 94       	cli
    49e6:	de bf       	out	0x3e, r29	; 62
    49e8:	0f be       	out	0x3f, r0	; 63
    49ea:	cd bf       	out	0x3d, r28	; 61
    49ec:	a4 96       	adiw	r28, 0x24	; 36
}
    49ee:	0f b6       	in	r0, 0x3f	; 63
    49f0:	f8 94       	cli
    49f2:	de bf       	out	0x3e, r29	; 62
    49f4:	0f be       	out	0x3f, r0	; 63
    49f6:	cd bf       	out	0x3d, r28	; 61
    49f8:	df 91       	pop	r29
    49fa:	cf 91       	pop	r28
    49fc:	1f 91       	pop	r17
    49fe:	0f 91       	pop	r16
    4a00:	ff 90       	pop	r15
    4a02:	ef 90       	pop	r14
    4a04:	df 90       	pop	r13
    4a06:	cf 90       	pop	r12
    4a08:	bf 90       	pop	r11
    4a0a:	af 90       	pop	r10
    4a0c:	9f 90       	pop	r9
    4a0e:	8f 90       	pop	r8
    4a10:	7f 90       	pop	r7
    4a12:	6f 90       	pop	r6
    4a14:	5f 90       	pop	r5
    4a16:	4f 90       	pop	r4
    4a18:	08 95       	ret

00004a1a <_ZN8MM3Class9moveToPosEd>:
    4a1a:	cf 92       	push	r12

// measured in revolutions
void MM3Class::moveToPos(double pos) {
    4a1c:	df 92       	push	r13
    4a1e:	ef 92       	push	r14
    4a20:	ff 92       	push	r15
    4a22:	0f 93       	push	r16
    4a24:	1f 93       	push	r17
    4a26:	cf 93       	push	r28
    4a28:	df 93       	push	r29
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	a4 97       	sbiw	r28, 0x24	; 36
    4a30:	0f b6       	in	r0, 0x3f	; 63
    4a32:	f8 94       	cli
    4a34:	de bf       	out	0x3e, r29	; 62
    4a36:	0f be       	out	0x3f, r0	; 63
    4a38:	cd bf       	out	0x3d, r28	; 61
    4a3a:	8c 01       	movw	r16, r24
    4a3c:	6a 01       	movw	r12, r20
    4a3e:	7b 01       	movw	r14, r22
  char s[30];
  long counts = long(pos * double(Motor.getCPR()) + 0.5);  // +0.5 to round since long() truncates
    4a40:	60 91 85 07 	lds	r22, 0x0785
    4a44:	70 91 86 07 	lds	r23, 0x0786
    4a48:	80 91 87 07 	lds	r24, 0x0787
    4a4c:	90 91 88 07 	lds	r25, 0x0788
    4a50:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    4a54:	9b 01       	movw	r18, r22
    4a56:	ac 01       	movw	r20, r24
    4a58:	c7 01       	movw	r24, r14
    4a5a:	b6 01       	movw	r22, r12
    4a5c:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    4a60:	20 e0       	ldi	r18, 0x00	; 0
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	40 e0       	ldi	r20, 0x00	; 0
    4a66:	5f e3       	ldi	r21, 0x3F	; 63
    4a68:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <__addsf3>
    4a6c:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
  snprintf(s, 30, "P01 %ld", counts);
    4a70:	9f 93       	push	r25
    4a72:	8f 93       	push	r24
    4a74:	7f 93       	push	r23
    4a76:	6f 93       	push	r22
    4a78:	87 ea       	ldi	r24, 0xA7	; 167
    4a7a:	94 e0       	ldi	r25, 0x04	; 4
    4a7c:	9f 93       	push	r25
    4a7e:	8f 93       	push	r24
    4a80:	1f 92       	push	r1
    4a82:	8e e1       	ldi	r24, 0x1E	; 30
    4a84:	8f 93       	push	r24
    4a86:	ce 01       	movw	r24, r28
    4a88:	01 96       	adiw	r24, 0x01	; 1
    4a8a:	7c 01       	movw	r14, r24
    4a8c:	ff 92       	push	r15
    4a8e:	8f 93       	push	r24
    4a90:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);
    4a94:	b7 01       	movw	r22, r14
    4a96:	ce 01       	movw	r24, r28
    4a98:	4f 96       	adiw	r24, 0x1f	; 31
    4a9a:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4a9e:	be 01       	movw	r22, r28
    4aa0:	61 5e       	subi	r22, 0xE1	; 225
    4aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa4:	c8 01       	movw	r24, r16
    4aa6:	1b db       	rcall	.-2506   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4aa8:	ce 01       	movw	r24, r28
    4aaa:	4f 96       	adiw	r24, 0x1f	; 31
    4aac:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	f8 94       	cli
    4ab4:	de bf       	out	0x3e, r29	; 62
    4ab6:	0f be       	out	0x3f, r0	; 63
    4ab8:	cd bf       	out	0x3d, r28	; 61
    4aba:	a4 96       	adiw	r28, 0x24	; 36
}
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	cd bf       	out	0x3d, r28	; 61
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	1f 91       	pop	r17
    4acc:	0f 91       	pop	r16
    4ace:	ff 90       	pop	r15
    4ad0:	ef 90       	pop	r14
    4ad2:	df 90       	pop	r13
    4ad4:	cf 90       	pop	r12
    4ad6:	08 95       	ret

00004ad8 <_ZN8MM3Class12moveRelativeEd>:
    4ad8:	cf 92       	push	r12

// measured in revolutions
void MM3Class::moveRelative(double revs) {
    4ada:	df 92       	push	r13
    4adc:	ef 92       	push	r14
    4ade:	ff 92       	push	r15
    4ae0:	0f 93       	push	r16
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	a4 97       	sbiw	r28, 0x24	; 36
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	8c 01       	movw	r16, r24
    4afa:	6a 01       	movw	r12, r20
    4afc:	7b 01       	movw	r14, r22
  char s[30];
  long counts = long(revs * double(Motor.getCPR()) + 0.5);  // +0.5 to round since long() truncates
    4afe:	60 91 85 07 	lds	r22, 0x0785
    4b02:	70 91 86 07 	lds	r23, 0x0786
    4b06:	80 91 87 07 	lds	r24, 0x0787
    4b0a:	90 91 88 07 	lds	r25, 0x0788
    4b0e:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    4b12:	9b 01       	movw	r18, r22
    4b14:	ac 01       	movw	r20, r24
    4b16:	c7 01       	movw	r24, r14
    4b18:	b6 01       	movw	r22, r12
    4b1a:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	40 e0       	ldi	r20, 0x00	; 0
    4b24:	5f e3       	ldi	r21, 0x3F	; 63
    4b26:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <__addsf3>
    4b2a:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
  snprintf(s, 30, "M01 %ld", counts);
    4b2e:	9f 93       	push	r25
    4b30:	8f 93       	push	r24
    4b32:	7f 93       	push	r23
    4b34:	6f 93       	push	r22
    4b36:	8f ea       	ldi	r24, 0xAF	; 175
    4b38:	94 e0       	ldi	r25, 0x04	; 4
    4b3a:	9f 93       	push	r25
    4b3c:	8f 93       	push	r24
    4b3e:	1f 92       	push	r1
    4b40:	8e e1       	ldi	r24, 0x1E	; 30
    4b42:	8f 93       	push	r24
    4b44:	ce 01       	movw	r24, r28
    4b46:	01 96       	adiw	r24, 0x01	; 1
    4b48:	7c 01       	movw	r14, r24
    4b4a:	ff 92       	push	r15
    4b4c:	8f 93       	push	r24
    4b4e:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);
    4b52:	b7 01       	movw	r22, r14
    4b54:	ce 01       	movw	r24, r28
    4b56:	4f 96       	adiw	r24, 0x1f	; 31
    4b58:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4b5c:	be 01       	movw	r22, r28
    4b5e:	61 5e       	subi	r22, 0xE1	; 225
    4b60:	7f 4f       	sbci	r23, 0xFF	; 255
    4b62:	c8 01       	movw	r24, r16
    4b64:	bc da       	rcall	.-2696   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4b66:	ce 01       	movw	r24, r28
    4b68:	4f 96       	adiw	r24, 0x1f	; 31
    4b6a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4b6e:	0f b6       	in	r0, 0x3f	; 63
    4b70:	f8 94       	cli
    4b72:	de bf       	out	0x3e, r29	; 62
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	cd bf       	out	0x3d, r28	; 61
    4b78:	a4 96       	adiw	r28, 0x24	; 36
}
    4b7a:	0f b6       	in	r0, 0x3f	; 63
    4b7c:	f8 94       	cli
    4b7e:	de bf       	out	0x3e, r29	; 62
    4b80:	0f be       	out	0x3f, r0	; 63
    4b82:	cd bf       	out	0x3d, r28	; 61
    4b84:	df 91       	pop	r29
    4b86:	cf 91       	pop	r28
    4b88:	1f 91       	pop	r17
    4b8a:	0f 91       	pop	r16
    4b8c:	ff 90       	pop	r15
    4b8e:	ef 90       	pop	r14
    4b90:	df 90       	pop	r13
    4b92:	cf 90       	pop	r12
    4b94:	08 95       	ret

00004b96 <_ZN8MM3Class12setAmpsLimitEf>:
    4b96:	ef 92       	push	r14

void MM3Class::setAmpsLimit(float a) {
    4b98:	ff 92       	push	r15
    4b9a:	0f 93       	push	r16
    4b9c:	1f 93       	push	r17
    4b9e:	cf 93       	push	r28
    4ba0:	df 93       	push	r29
    4ba2:	cd b7       	in	r28, 0x3d	; 61
    4ba4:	de b7       	in	r29, 0x3e	; 62
    4ba6:	a4 97       	sbiw	r28, 0x24	; 36
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	de bf       	out	0x3e, r29	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	cd bf       	out	0x3d, r28	; 61
    4bb2:	8c 01       	movw	r16, r24
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	ba 01       	movw	r22, r20
  char s[30];
  m_ampsLimit = a;
    4bb8:	f8 01       	movw	r30, r16
    4bba:	62 8b       	std	Z+18, r22	; 0x12
    4bbc:	73 8b       	std	Z+19, r23	; 0x13
    4bbe:	84 8b       	std	Z+20, r24	; 0x14
    4bc0:	95 8b       	std	Z+21, r25	; 0x15
  int t = int((a / 0.02) + 0.5);  // since int truncates, adding 0.5 beforehand rounds
    4bc2:	2a e0       	ldi	r18, 0x0A	; 10
    4bc4:	37 ed       	ldi	r19, 0xD7	; 215
    4bc6:	43 ea       	ldi	r20, 0xA3	; 163
    4bc8:	5c e3       	ldi	r21, 0x3C	; 60
    4bca:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    4bce:	20 e0       	ldi	r18, 0x00	; 0
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	5f e3       	ldi	r21, 0x3F	; 63
    4bd6:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <__addsf3>
    4bda:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
  if (t == 0) { t = 1; }          // since 0 disables the amps limit, small numbers get set to 1
    4bde:	61 15       	cp	r22, r1
    4be0:	71 05       	cpc	r23, r1
    4be2:	11 f4       	brne	.+4      	; 0x4be8 <_ZN8MM3Class12setAmpsLimitEf+0x52>
    4be4:	61 e0       	ldi	r22, 0x01	; 1
    4be6:	70 e0       	ldi	r23, 0x00	; 0
  snprintf(s, 30, "W01 28 %d", t);
    4be8:	7f 93       	push	r23
    4bea:	6f 93       	push	r22
    4bec:	87 eb       	ldi	r24, 0xB7	; 183
    4bee:	94 e0       	ldi	r25, 0x04	; 4
    4bf0:	9f 93       	push	r25
    4bf2:	8f 93       	push	r24
    4bf4:	1f 92       	push	r1
    4bf6:	8e e1       	ldi	r24, 0x1E	; 30
    4bf8:	8f 93       	push	r24
    4bfa:	ce 01       	movw	r24, r28
    4bfc:	01 96       	adiw	r24, 0x01	; 1
    4bfe:	7c 01       	movw	r14, r24
    4c00:	ff 92       	push	r15
    4c02:	8f 93       	push	r24
    4c04:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
  writeMM3(s);                    // set amps limit
    4c08:	b7 01       	movw	r22, r14
    4c0a:	ce 01       	movw	r24, r28
    4c0c:	4f 96       	adiw	r24, 0x1f	; 31
    4c0e:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4c12:	be 01       	movw	r22, r28
    4c14:	61 5e       	subi	r22, 0xE1	; 225
    4c16:	7f 4f       	sbci	r23, 0xFF	; 255
    4c18:	c8 01       	movw	r24, r16
    4c1a:	61 da       	rcall	.-2878   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4c1c:	ce 01       	movw	r24, r28
    4c1e:	4f 96       	adiw	r24, 0x1f	; 31
    4c20:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4c24:	0f b6       	in	r0, 0x3f	; 63
    4c26:	f8 94       	cli
    4c28:	de bf       	out	0x3e, r29	; 62
    4c2a:	0f be       	out	0x3f, r0	; 63
    4c2c:	cd bf       	out	0x3d, r28	; 61
    4c2e:	a4 96       	adiw	r28, 0x24	; 36
}
    4c30:	0f b6       	in	r0, 0x3f	; 63
    4c32:	f8 94       	cli
    4c34:	de bf       	out	0x3e, r29	; 62
    4c36:	0f be       	out	0x3f, r0	; 63
    4c38:	cd bf       	out	0x3d, r28	; 61
    4c3a:	df 91       	pop	r29
    4c3c:	cf 91       	pop	r28
    4c3e:	1f 91       	pop	r17
    4c40:	0f 91       	pop	r16
    4c42:	ff 90       	pop	r15
    4c44:	ef 90       	pop	r14
    4c46:	08 95       	ret

00004c48 <_ZN8MM3Class4initEv>:
    4c48:	0f 93       	push	r16

// class level variables
const float MM3Class::MAX_AMPS = 14.0; // amps cannot exceed this value


void MM3Class::init() {
    4c4a:	1f 93       	push	r17
    4c4c:	cf 93       	push	r28
    4c4e:	df 93       	push	r29
    4c50:	cd b7       	in	r28, 0x3d	; 61
    4c52:	de b7       	in	r29, 0x3e	; 62
    4c54:	62 97       	sbiw	r28, 0x12	; 18
    4c56:	0f b6       	in	r0, 0x3f	; 63
    4c58:	f8 94       	cli
    4c5a:	de bf       	out	0x3e, r29	; 62
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	cd bf       	out	0x3d, r28	; 61
    4c60:	8c 01       	movw	r16, r24
  m_currPos = float(EepromAccess.readEEPromLong(EepromAccess.SAVED_POSITION)) / 1000.0;
    4c62:	64 e8       	ldi	r22, 0x84	; 132
    4c64:	70 e0       	ldi	r23, 0x00	; 0
    4c66:	87 ef       	ldi	r24, 0xF7	; 247
    4c68:	97 e0       	ldi	r25, 0x07	; 7
    4c6a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    4c6e:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	4a e7       	ldi	r20, 0x7A	; 122
    4c78:	54 e4       	ldi	r21, 0x44	; 68
    4c7a:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    4c7e:	ab 01       	movw	r20, r22
    4c80:	bc 01       	movw	r22, r24
    4c82:	f8 01       	movw	r30, r16
    4c84:	40 83       	st	Z, r20
    4c86:	51 83       	std	Z+1, r21	; 0x01
    4c88:	62 83       	std	Z+2, r22	; 0x02
    4c8a:	73 83       	std	Z+3, r23	; 0x03
  setPos(m_currPos);
    4c8c:	c8 01       	movw	r24, r16
    4c8e:	49 dd       	rcall	.-1390   	; 0x4722 <_ZN8MM3Class6setPosEd>
    4c90:	80 e0       	ldi	r24, 0x00	; 0

  m_ampsLimit = MAX_AMPS;
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	a0 e6       	ldi	r26, 0x60	; 96
    4c96:	b1 e4       	ldi	r27, 0x41	; 65
    4c98:	f8 01       	movw	r30, r16
    4c9a:	82 8b       	std	Z+18, r24	; 0x12
    4c9c:	93 8b       	std	Z+19, r25	; 0x13
    4c9e:	a4 8b       	std	Z+20, r26	; 0x14
    4ca0:	b5 8b       	std	Z+21, r27	; 0x15
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
  m_stopped = true;
    4ca4:	86 8b       	std	Z+22, r24	; 0x16
    4ca6:	6c e3       	ldi	r22, 0x3C	; 60

  // Set up all of the registers and values in the motor controller
  writeMM3(F("W01 01 1023"));       // velocitylimit
    4ca8:	7f e0       	ldi	r23, 0x0F	; 15
    4caa:	ce 01       	movw	r24, r28
    4cac:	01 96       	adiw	r24, 0x01	; 1
    4cae:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    4cb2:	be 01       	movw	r22, r28
    4cb4:	6f 5f       	subi	r22, 0xFF	; 255
    4cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb8:	c8 01       	movw	r24, r16
    4cba:	11 da       	rcall	.-3038   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4cbc:	ce 01       	movw	r24, r28
    4cbe:	01 96       	adiw	r24, 0x01	; 1
    4cc0:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4cc4:	4a e0       	ldi	r20, 0x0A	; 10
    4cc6:	61 ee       	ldi	r22, 0xE1	; 225
  writeMM3("W01 03 " + FN_REG_STOPPED);      // function register
    4cc8:	78 e6       	ldi	r23, 0x68	; 104
    4cca:	ce 01       	movw	r24, r28
    4ccc:	0d 96       	adiw	r24, 0x0d	; 13
    4cce:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    4cd2:	61 ec       	ldi	r22, 0xC1	; 193
    4cd4:	74 e0       	ldi	r23, 0x04	; 4
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4cd6:	ce 01       	movw	r24, r28
    4cd8:	07 96       	adiw	r24, 0x07	; 7
    4cda:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4cde:	be 01       	movw	r22, r28
    4ce0:	63 5f       	subi	r22, 0xF3	; 243
    4ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce4:	ce 01       	movw	r24, r28
    4ce6:	07 96       	adiw	r24, 0x07	; 7
    4ce8:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    4cec:	bc 01       	movw	r22, r24
    4cee:	ce 01       	movw	r24, r28
    4cf0:	01 96       	adiw	r24, 0x01	; 1
    4cf2:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    4cf6:	be 01       	movw	r22, r28
    4cf8:	6f 5f       	subi	r22, 0xFF	; 255
    4cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfc:	c8 01       	movw	r24, r16
    4cfe:	ef d9       	rcall	.-3106   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4d00:	ce 01       	movw	r24, r28
    4d02:	01 96       	adiw	r24, 0x01	; 1
    4d04:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4d08:	ce 01       	movw	r24, r28
    4d0a:	07 96       	adiw	r24, 0x07	; 7
    4d0c:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4d10:	ce 01       	movw	r24, r28
    4d12:	0d 96       	adiw	r24, 0x0d	; 13
    4d14:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4d18:	63 e3       	ldi	r22, 0x33	; 51
    4d1a:	7f e0       	ldi	r23, 0x0F	; 15
    4d1c:	ce 01       	movw	r24, r28
  writeMM3(F("W01 07 1"));          // address
    4d1e:	01 96       	adiw	r24, 0x01	; 1
    4d20:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    4d24:	be 01       	movw	r22, r28
    4d26:	6f 5f       	subi	r22, 0xFF	; 255
    4d28:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2a:	c8 01       	movw	r24, r16
    4d2c:	d8 d9       	rcall	.-3152   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4d2e:	ce 01       	movw	r24, r28
    4d30:	01 96       	adiw	r24, 0x01	; 1
    4d32:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4d36:	69 e2       	ldi	r22, 0x29	; 41
    4d38:	7f e0       	ldi	r23, 0x0F	; 15
    4d3a:	ce 01       	movw	r24, r28
    4d3c:	01 96       	adiw	r24, 0x01	; 1
  writeMM3(F("W01 09 10"));         // timer
    4d3e:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    4d42:	be 01       	movw	r22, r28
    4d44:	6f 5f       	subi	r22, 0xFF	; 255
    4d46:	7f 4f       	sbci	r23, 0xFF	; 255
    4d48:	c8 01       	movw	r24, r16
    4d4a:	c9 d9       	rcall	.-3182   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4d54:	6d e1       	ldi	r22, 0x1D	; 29
    4d56:	7f e0       	ldi	r23, 0x0F	; 15
    4d58:	ce 01       	movw	r24, r28
    4d5a:	01 96       	adiw	r24, 0x01	; 1
    4d5c:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
  writeMM3(F("W01 10 1152"));       // rcmax
    4d60:	be 01       	movw	r22, r28
    4d62:	6f 5f       	subi	r22, 0xFF	; 255
    4d64:	7f 4f       	sbci	r23, 0xFF	; 255
    4d66:	c8 01       	movw	r24, r16
    4d68:	ba d9       	rcall	.-3212   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	01 96       	adiw	r24, 0x01	; 1
    4d6e:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4d72:	62 e1       	ldi	r22, 0x12	; 18
    4d74:	7f e0       	ldi	r23, 0x0F	; 15
    4d76:	ce 01       	movw	r24, r28
    4d78:	01 96       	adiw	r24, 0x01	; 1
    4d7a:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
  writeMM3(F("W01 11 576"));        // rcmon
    4d7e:	be 01       	movw	r22, r28
    4d80:	6f 5f       	subi	r22, 0xFF	; 255
    4d82:	7f 4f       	sbci	r23, 0xFF	; 255
    4d84:	c8 01       	movw	r24, r16
    4d86:	ab d9       	rcall	.-3242   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4d88:	ce 01       	movw	r24, r28
    4d8a:	01 96       	adiw	r24, 0x01	; 1
    4d8c:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4d90:	68 e0       	ldi	r22, 0x08	; 8
    4d92:	7f e0       	ldi	r23, 0x0F	; 15
    4d94:	ce 01       	movw	r24, r28
    4d96:	01 96       	adiw	r24, 0x01	; 1
    4d98:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    4d9c:	be 01       	movw	r22, r28
  writeMM3(F("W01 12 15"));         // rcband
    4d9e:	6f 5f       	subi	r22, 0xFF	; 255
    4da0:	7f 4f       	sbci	r23, 0xFF	; 255
    4da2:	c8 01       	movw	r24, r16
    4da4:	9c d9       	rcall	.-3272   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4da6:	ce 01       	movw	r24, r28
    4da8:	01 96       	adiw	r24, 0x01	; 1
    4daa:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4dae:	6f ef       	ldi	r22, 0xFF	; 255
    4db0:	7e e0       	ldi	r23, 0x0E	; 14
    4db2:	ce 01       	movw	r24, r28
    4db4:	01 96       	adiw	r24, 0x01	; 1
    4db6:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    4dba:	be 01       	movw	r22, r28
    4dbc:	6f 5f       	subi	r22, 0xFF	; 255
//  setVirtualNegativeLimit(m_vnlim);  Done when max revolutions is read and/or set
//  setVirtualPositiveLimit(m_vplim);
  writeMM3(F("W01 25 0"));          // pwmlimit (can't move when zero)
    4dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc0:	c8 01       	movw	r24, r16
    4dc2:	8d d9       	rcall	.-3302   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4dc4:	ce 01       	movw	r24, r28
    4dc6:	01 96       	adiw	r24, 0x01	; 1
    4dc8:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4dcc:	65 ef       	ldi	r22, 0xF5	; 245
    4dce:	7e e0       	ldi	r23, 0x0E	; 14
    4dd0:	ce 01       	movw	r24, r28
    4dd2:	01 96       	adiw	r24, 0x01	; 1
    4dd4:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    4dd8:	be 01       	movw	r22, r28
    4dda:	6f 5f       	subi	r22, 0xFF	; 255
    4ddc:	7f 4f       	sbci	r23, 0xFF	; 255
                                    //  writeMM3(F("W01 26 250"));        // deadband 250 is for when encoder is on drum
  writeMM3(F("W01 26 50"));         // deadband
    4dde:	c8 01       	movw	r24, r16
    4de0:	7e d9       	rcall	.-3332   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4de2:	ce 01       	movw	r24, r28
    4de4:	01 96       	adiw	r24, 0x01	; 1
    4de6:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4dea:	f8 01       	movw	r30, r16
    4dec:	42 89       	ldd	r20, Z+18	; 0x12
    4dee:	53 89       	ldd	r21, Z+19	; 0x13
    4df0:	64 89       	ldd	r22, Z+20	; 0x14
    4df2:	75 89       	ldd	r23, Z+21	; 0x15
    4df4:	c8 01       	movw	r24, r16
    4df6:	cf de       	rcall	.-610    	; 0x4b96 <_ZN8MM3Class12setAmpsLimitEf>
    4df8:	6c ee       	ldi	r22, 0xEC	; 236
    4dfa:	7e e0       	ldi	r23, 0x0E	; 14
    4dfc:	ce 01       	movw	r24, r28
  setAmpsLimit(m_ampsLimit);        // ampslimit (in 20 mA increments)
    4dfe:	01 96       	adiw	r24, 0x01	; 1
    4e00:	0e 94 da 53 	call	0xa7b4	; 0xa7b4 <_ZN6StringC1EPK19__FlashStringHelper>
    4e04:	be 01       	movw	r22, r28
    4e06:	6f 5f       	subi	r22, 0xFF	; 255
    4e08:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0a:	c8 01       	movw	r24, r16
    4e0c:	68 d9       	rcall	.-3376   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
  writeMM3(F("W01 30 0"));          // function2 register
    4e0e:	ce 01       	movw	r24, r28
    4e10:	01 96       	adiw	r24, 0x01	; 1
    4e12:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4e16:	c8 01       	movw	r24, r16
    4e18:	80 d8       	rcall	.-3840   	; 0x3f1a <_ZN8MM3Class14readControllerEv>
    4e1a:	62 96       	adiw	r28, 0x12	; 18
    4e1c:	0f b6       	in	r0, 0x3f	; 63
    4e1e:	f8 94       	cli
    4e20:	de bf       	out	0x3e, r29	; 62
    4e22:	0f be       	out	0x3f, r0	; 63
    4e24:	cd bf       	out	0x3d, r28	; 61
    4e26:	df 91       	pop	r29
    4e28:	cf 91       	pop	r28
    4e2a:	1f 91       	pop	r17
    4e2c:	0f 91       	pop	r16

  readController();  // to init values like status, amps, speed
    4e2e:	08 95       	ret

00004e30 <_ZN8MM3Class9moveSetupEi>:
    4e30:	2f 92       	push	r2
    4e32:	3f 92       	push	r3
}
    4e34:	4f 92       	push	r4
    4e36:	5f 92       	push	r5
    4e38:	6f 92       	push	r6
    4e3a:	7f 92       	push	r7
    4e3c:	8f 92       	push	r8
    4e3e:	9f 92       	push	r9
    4e40:	af 92       	push	r10
    4e42:	bf 92       	push	r11
    4e44:	cf 92       	push	r12
    4e46:	df 92       	push	r13
    4e48:	ef 92       	push	r14


void MM3Class::moveSetup(int speedPct) {
    4e4a:	ff 92       	push	r15
    4e4c:	0f 93       	push	r16
    4e4e:	1f 93       	push	r17
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
    4e54:	cd b7       	in	r28, 0x3d	; 61
    4e56:	de b7       	in	r29, 0x3e	; 62
    4e58:	aa 97       	sbiw	r28, 0x2a	; 42
    4e5a:	0f b6       	in	r0, 0x3f	; 63
    4e5c:	f8 94       	cli
    4e5e:	de bf       	out	0x3e, r29	; 62
    4e60:	0f be       	out	0x3f, r0	; 63
    4e62:	cd bf       	out	0x3d, r28	; 61
    4e64:	3c 01       	movw	r6, r24
    4e66:	1b 01       	movw	r2, r22
  char s[30];
  int tt;

  setAmpsLimit(m_ampsLimit);
    4e68:	fc 01       	movw	r30, r24
    4e6a:	42 89       	ldd	r20, Z+18	; 0x12
    4e6c:	53 89       	ldd	r21, Z+19	; 0x13
    4e6e:	64 89       	ldd	r22, Z+20	; 0x14
    4e70:	75 89       	ldd	r23, Z+21	; 0x15
    4e72:	91 de       	rcall	.-734    	; 0x4b96 <_ZN8MM3Class12setAmpsLimitEf>
    4e74:	69 ec       	ldi	r22, 0xC9	; 201
  writeMM3("W01 25 1023");              // set pwm limit to max value
    4e76:	74 e0       	ldi	r23, 0x04	; 4
    4e78:	ce 01       	movw	r24, r28
    4e7a:	01 96       	adiw	r24, 0x01	; 1
    4e7c:	4c 01       	movw	r8, r24
    4e7e:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4e82:	b4 01       	movw	r22, r8
    4e84:	c3 01       	movw	r24, r6
    4e86:	2b d9       	rcall	.-3498   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4e88:	c4 01       	movw	r24, r8
    4e8a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4e8e:	4a e0       	ldi	r20, 0x0A	; 10
    4e90:	61 ee       	ldi	r22, 0xE1	; 225
  writeMM3("W01 03 " + FN_REG_MOVING);  // change function register value to enable pid
    4e92:	78 e2       	ldi	r23, 0x28	; 40
    4e94:	ce 01       	movw	r24, r28
    4e96:	85 96       	adiw	r24, 0x25	; 37
    4e98:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    4e9c:	61 ec       	ldi	r22, 0xC1	; 193
    4e9e:	74 e0       	ldi	r23, 0x04	; 4
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4ea0:	ce 01       	movw	r24, r28
    4ea2:	4f 96       	adiw	r24, 0x1f	; 31
    4ea4:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4ea8:	be 01       	movw	r22, r28
    4eaa:	6b 5d       	subi	r22, 0xDB	; 219
    4eac:	7f 4f       	sbci	r23, 0xFF	; 255
    4eae:	ce 01       	movw	r24, r28
    4eb0:	4f 96       	adiw	r24, 0x1f	; 31
    4eb2:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    4eb6:	bc 01       	movw	r22, r24
    4eb8:	c4 01       	movw	r24, r8
    4eba:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    4ebe:	b4 01       	movw	r22, r8
    4ec0:	c3 01       	movw	r24, r6
    4ec2:	0d d9       	rcall	.-3558   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4ec4:	c4 01       	movw	r24, r8
    4ec6:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4eca:	ce 01       	movw	r24, r28
    4ecc:	4f 96       	adiw	r24, 0x1f	; 31
    4ece:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4ed2:	ce 01       	movw	r24, r28
    4ed4:	85 96       	adiw	r24, 0x25	; 37
    4ed6:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4eda:	44 24       	eor	r4, r4
    4edc:	37 fc       	sbrc	r3, 7
    4ede:	40 94       	com	r4

  tt = map(speedPct, 0, 100, 0, SPEED_RANGE);
    4ee0:	54 2c       	mov	r5, r4
    4ee2:	e5 e8       	ldi	r30, 0x85	; 133
    4ee4:	f7 e0       	ldi	r31, 0x07	; 7
    4ee6:	60 81       	ld	r22, Z
    4ee8:	71 81       	ldd	r23, Z+1	; 0x01
    4eea:	82 81       	ldd	r24, Z+2	; 0x02
    4eec:	93 81       	ldd	r25, Z+3	; 0x03
    4eee:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    4ef2:	20 91 89 07 	lds	r18, 0x0789
    4ef6:	30 91 8a 07 	lds	r19, 0x078A
    4efa:	40 91 8b 07 	lds	r20, 0x078B
    4efe:	50 91 8c 07 	lds	r21, 0x078C
    4f02:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	30 e8       	ldi	r19, 0x80	; 128
    4f0a:	4b e3       	ldi	r20, 0x3B	; 59
    4f0c:	56 e4       	ldi	r21, 0x46	; 70
    4f0e:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    4f12:	20 e0       	ldi	r18, 0x00	; 0
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	40 e0       	ldi	r20, 0x00	; 0
    4f18:	5f e3       	ldi	r21, 0x3F	; 63
    4f1a:	0e 94 3e 55 	call	0xaa7c	; 0xaa7c <__addsf3>
    4f1e:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    4f22:	cb 01       	movw	r24, r22
    4f24:	aa 27       	eor	r26, r26
    4f26:	97 fd       	sbrc	r25, 7
    4f28:	a0 95       	com	r26
    4f2a:	ba 2f       	mov	r27, r26
    4f2c:	bf 93       	push	r27
    4f2e:	af 93       	push	r26
    4f30:	9f 93       	push	r25
    4f32:	8f 93       	push	r24
    4f34:	a1 2c       	mov	r10, r1
    4f36:	b1 2c       	mov	r11, r1
    4f38:	65 01       	movw	r12, r10
    4f3a:	14 e6       	ldi	r17, 0x64	; 100
    4f3c:	e1 2e       	mov	r14, r17
    4f3e:	f1 2c       	mov	r15, r1
    4f40:	00 e0       	ldi	r16, 0x00	; 0
    4f42:	10 e0       	ldi	r17, 0x00	; 0
    4f44:	20 e0       	ldi	r18, 0x00	; 0
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	a9 01       	movw	r20, r18
    4f4a:	c2 01       	movw	r24, r4
    4f4c:	b1 01       	movw	r22, r2
    4f4e:	0e 94 7b 52 	call	0xa4f6	; 0xa4f6 <_Z3maplllll>
    4f52:	7f 93       	push	r23
    4f54:	6f 93       	push	r22
    4f56:	85 ed       	ldi	r24, 0xD5	; 213
  snprintf(s, 30, "W01 01 %d", tt);
    4f58:	94 e0       	ldi	r25, 0x04	; 4
    4f5a:	9f 93       	push	r25
    4f5c:	8f 93       	push	r24
    4f5e:	1f 92       	push	r1
    4f60:	8e e1       	ldi	r24, 0x1E	; 30
    4f62:	8f 93       	push	r24
    4f64:	9f 92       	push	r9
    4f66:	8f 92       	push	r8
    4f68:	0e 94 c3 5c 	call	0xb986	; 0xb986 <snprintf>
    4f6c:	b4 01       	movw	r22, r8
    4f6e:	ce 01       	movw	r24, r28
    4f70:	4f 96       	adiw	r24, 0x1f	; 31
  writeMM3(s);                          // set velocity limit
    4f72:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    4f76:	be 01       	movw	r22, r28
    4f78:	61 5e       	subi	r22, 0xE1	; 225
    4f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f7c:	c3 01       	movw	r24, r6
    4f7e:	af d8       	rcall	.-3746   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    4f80:	ce 01       	movw	r24, r28
    4f82:	4f 96       	adiw	r24, 0x1f	; 31
    4f84:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    4f88:	f3 01       	movw	r30, r6
    4f8a:	16 8a       	std	Z+22, r1	; 0x16
    4f8c:	10 92 91 07 	sts	0x0791, r1

  m_stopped = false;
    4f90:	10 92 92 07 	sts	0x0792, r1
  void setMotorTimeDays(float mdays);

  unsigned long getIdleTime() { return m_idle_time; }
  void setIdleTime(unsigned long t) { m_idle_time = t; }
    4f94:	10 92 93 07 	sts	0x0793, r1
    4f98:	10 92 94 07 	sts	0x0794, r1
    4f9c:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    4fa0:	60 93 95 07 	sts	0x0795, r22
  Motor.setIdleTime(0L);                // indicate that we are not idle
  Motor.setMotorRunTime(millis());      // save a time stamp for when we started running
    4fa4:	70 93 96 07 	sts	0x0796, r23

  void setMotorRunTime(unsigned long t) { m_motor_run_time = t; }
    4fa8:	80 93 97 07 	sts	0x0797, r24
    4fac:	90 93 98 07 	sts	0x0798, r25
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	f8 94       	cli
    4fb4:	de bf       	out	0x3e, r29	; 62
    4fb6:	0f be       	out	0x3f, r0	; 63
    4fb8:	cd bf       	out	0x3d, r28	; 61
    4fba:	aa 96       	adiw	r28, 0x2a	; 42
    4fbc:	0f b6       	in	r0, 0x3f	; 63
    4fbe:	f8 94       	cli
    4fc0:	de bf       	out	0x3e, r29	; 62
}
    4fc2:	0f be       	out	0x3f, r0	; 63
    4fc4:	cd bf       	out	0x3d, r28	; 61
    4fc6:	df 91       	pop	r29
    4fc8:	cf 91       	pop	r28
    4fca:	1f 91       	pop	r17
    4fcc:	0f 91       	pop	r16
    4fce:	ff 90       	pop	r15
    4fd0:	ef 90       	pop	r14
    4fd2:	df 90       	pop	r13
    4fd4:	cf 90       	pop	r12
    4fd6:	bf 90       	pop	r11
    4fd8:	af 90       	pop	r10
    4fda:	9f 90       	pop	r9
    4fdc:	8f 90       	pop	r8
    4fde:	7f 90       	pop	r7
    4fe0:	6f 90       	pop	r6
    4fe2:	5f 90       	pop	r5
    4fe4:	4f 90       	pop	r4
    4fe6:	3f 90       	pop	r3
    4fe8:	2f 90       	pop	r2
    4fea:	08 95       	ret

00004fec <_ZN8MM3Class10stopMovingEv>:
    4fec:	0f 93       	push	r16
    4fee:	1f 93       	push	r17
    4ff0:	cf 93       	push	r28
    4ff2:	df 93       	push	r29
  snprintf(s, 30, "W01 28 %d", t);
  writeMM3(s);                    // set amps limit
}


void MM3Class::stopMoving() {
    4ff4:	cd b7       	in	r28, 0x3d	; 61
    4ff6:	de b7       	in	r29, 0x3e	; 62
    4ff8:	62 97       	sbiw	r28, 0x12	; 18
    4ffa:	0f b6       	in	r0, 0x3f	; 63
    4ffc:	f8 94       	cli
    4ffe:	de bf       	out	0x3e, r29	; 62
    5000:	0f be       	out	0x3f, r0	; 63
    5002:	cd bf       	out	0x3d, r28	; 61
    5004:	8c 01       	movw	r16, r24
  writeMM3("W01 03 " + FN_REG_STOPPED); // function register 
    5006:	4a e0       	ldi	r20, 0x0A	; 10
    5008:	61 ee       	ldi	r22, 0xE1	; 225
    500a:	78 e6       	ldi	r23, 0x68	; 104
    500c:	ce 01       	movw	r24, r28
    500e:	0d 96       	adiw	r24, 0x0d	; 13
    5010:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    5014:	61 ec       	ldi	r22, 0xC1	; 193
    5016:	74 e0       	ldi	r23, 0x04	; 4
    5018:	ce 01       	movw	r24, r28
    501a:	07 96       	adiw	r24, 0x07	; 7
    501c:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5020:	be 01       	movw	r22, r28
    5022:	63 5f       	subi	r22, 0xF3	; 243
    5024:	7f 4f       	sbci	r23, 0xFF	; 255
    5026:	ce 01       	movw	r24, r28
    5028:	07 96       	adiw	r24, 0x07	; 7
    502a:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    502e:	bc 01       	movw	r22, r24
    5030:	ce 01       	movw	r24, r28
    5032:	01 96       	adiw	r24, 0x01	; 1
    5034:	0e 94 71 53 	call	0xa6e2	; 0xa6e2 <_ZN6StringC1ERKS_>
    5038:	be 01       	movw	r22, r28
    503a:	6f 5f       	subi	r22, 0xFF	; 255
    503c:	7f 4f       	sbci	r23, 0xFF	; 255
    503e:	c8 01       	movw	r24, r16
    5040:	4e d8       	rcall	.-3940   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    5042:	ce 01       	movw	r24, r28
    5044:	01 96       	adiw	r24, 0x01	; 1
    5046:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    504a:	ce 01       	movw	r24, r28
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    504c:	07 96       	adiw	r24, 0x07	; 7
    504e:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5052:	ce 01       	movw	r24, r28
    5054:	0d 96       	adiw	r24, 0x0d	; 13
    5056:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    505a:	6f ed       	ldi	r22, 0xDF	; 223
  writeMM3("W01 01 0");                 // velocitylimit to 0
    505c:	74 e0       	ldi	r23, 0x04	; 4
    505e:	ce 01       	movw	r24, r28
    5060:	01 96       	adiw	r24, 0x01	; 1
    5062:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5066:	be 01       	movw	r22, r28
    5068:	6f 5f       	subi	r22, 0xFF	; 255
    506a:	7f 4f       	sbci	r23, 0xFF	; 255
    506c:	c8 01       	movw	r24, r16
    506e:	37 d8       	rcall	.-3986   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    5070:	ce 01       	movw	r24, r28
    5072:	01 96       	adiw	r24, 0x01	; 1
    5074:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5078:	68 ee       	ldi	r22, 0xE8	; 232
    507a:	74 e0       	ldi	r23, 0x04	; 4
  writeMM3("W01 25 0");                 // pwmlimit (can't move when zero)
    507c:	ce 01       	movw	r24, r28
    507e:	01 96       	adiw	r24, 0x01	; 1
    5080:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5084:	be 01       	movw	r22, r28
    5086:	6f 5f       	subi	r22, 0xFF	; 255
    5088:	7f 4f       	sbci	r23, 0xFF	; 255
    508a:	c8 01       	movw	r24, r16
    508c:	28 d8       	rcall	.-4016   	; 0x40de <_ZN8MM3Class8writeMM3E6String>
    508e:	ce 01       	movw	r24, r28
    5090:	01 96       	adiw	r24, 0x01	; 1
    5092:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5096:	f8 01       	movw	r30, r16
    5098:	86 89       	ldd	r24, Z+22	; 0x16
    509a:	81 11       	cpse	r24, r1
  if(!m_stopped) Motor.incrMotorTime(); // accumulate motor run time in seconds
    509c:	03 c0       	rjmp	.+6      	; 0x50a4 <_ZN8MM3Class10stopMovingEv+0xb8>
    509e:	85 e8       	ldi	r24, 0x85	; 133
    50a0:	97 e0       	ldi	r25, 0x07	; 7
    50a2:	ec d0       	rcall	.+472    	; 0x527c <_ZN10MotorClass13incrMotorTimeEv>
    50a4:	61 ef       	ldi	r22, 0xF1	; 241
    50a6:	74 e0       	ldi	r23, 0x04	; 4
    50a8:	86 ec       	ldi	r24, 0xC6	; 198
    50aa:	98 e0       	ldi	r25, 0x08	; 8
  Serial.print("Total motor run time: "); Serial.print(Motor.getMotorTimeDays(), 4); Serial.println(" Days.");
    50ac:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    50b0:	60 91 99 07 	lds	r22, 0x0799
    50b4:	70 91 9a 07 	lds	r23, 0x079A
  void setRPM(float f);

  double getMaxRevolutions() { return m_maxRevolutions; }
  void setMaxRevolutions(double m);

  float getMotorTimeDays() { return float(m_motor_time / (60.0*60.0*24.0)); }
    50b8:	80 91 9b 07 	lds	r24, 0x079B
    50bc:	90 91 9c 07 	lds	r25, 0x079C
    50c0:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    50c4:	20 e0       	ldi	r18, 0x00	; 0
    50c6:	30 ec       	ldi	r19, 0xC0	; 192
    50c8:	48 ea       	ldi	r20, 0xA8	; 168
    50ca:	57 e4       	ldi	r21, 0x47	; 71
    50cc:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    50d0:	ab 01       	movw	r20, r22
    50d2:	bc 01       	movw	r22, r24
    50d4:	24 e0       	ldi	r18, 0x04	; 4
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	86 ec       	ldi	r24, 0xC6	; 198
    50da:	98 e0       	ldi	r25, 0x08	; 8
    50dc:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    50e0:	68 e0       	ldi	r22, 0x08	; 8
    50e2:	75 e0       	ldi	r23, 0x05	; 5
    50e4:	86 ec       	ldi	r24, 0xC6	; 198
    50e6:	98 e0       	ldi	r25, 0x08	; 8
    50e8:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    50ec:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    50f0:	60 93 91 07 	sts	0x0791, r22
  Motor.setIdleTime(millis());          // set the idle time to when we last stopped.
    50f4:	70 93 92 07 	sts	0x0792, r23
  void setMotorTimeDays(float mdays);

  unsigned long getIdleTime() { return m_idle_time; }
  void setIdleTime(unsigned long t) { m_idle_time = t; }
    50f8:	80 93 93 07 	sts	0x0793, r24
    50fc:	90 93 94 07 	sts	0x0794, r25
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	f8 01       	movw	r30, r16
    5104:	86 8b       	std	Z+22, r24	; 0x16
    5106:	10 92 c0 06 	sts	0x06C0, r1
  m_stopped = true;
    510a:	10 92 c1 06 	sts	0x06C1, r1
    510e:	62 96       	adiw	r28, 0x12	; 18
    5110:	0f b6       	in	r0, 0x3f	; 63
  bool movingDownWithFeedback() { return m_movingDownWithFeedback; }
  void setMovingDownWithFeedback(bool b) { m_movingDownWithFeedback = b; }
    5112:	f8 94       	cli
    5114:	de bf       	out	0x3e, r29	; 62
  posFB.setMovingUpWithFeedback(false);         // reset the flag (if it had been set)
  posFB.setMovingDownWithFeedback(false);       // reset the flag (if it had been set)
}
    5116:	0f be       	out	0x3f, r0	; 63
    5118:	cd bf       	out	0x3d, r28	; 61
    511a:	df 91       	pop	r29
    511c:	cf 91       	pop	r28
    511e:	1f 91       	pop	r17
    5120:	0f 91       	pop	r16
    5122:	08 95       	ret

00005124 <_GLOBAL__sub_I__ZN8MM3Class8MAX_AMPSE>:
    5124:	0f 93       	push	r16
    5126:	00 e0       	ldi	r16, 0x00	; 0
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	40 e0       	ldi	r20, 0x00	; 0
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    512c:	60 e0       	ldi	r22, 0x00	; 0
    512e:	85 e9       	ldi	r24, 0x95	; 149
    5130:	96 e0       	ldi	r25, 0x06	; 6
    5132:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
  if (!rb.startsWith("OK")) {
    Serial.println("ERROR Bad response of: " + rb + " from command: " + cmd);
  }
  // debugging output
  Serial.println("Response of: " + rb + " from command: " + cmd);
}
    5136:	0f 91       	pop	r16
    5138:	08 95       	ret

0000513a <_ZN10MotorClassC1Ev>:
// keeps properties associated with the motor and encoder
// 

#include "MotorClass.h"

MotorClass::MotorClass() {
    513a:	8f 92       	push	r8
    513c:	9f 92       	push	r9
    513e:	af 92       	push	r10
    5140:	bf 92       	push	r11
    5142:	cf 92       	push	r12
    5144:	df 92       	push	r13
    5146:	ef 92       	push	r14
    5148:	ff 92       	push	r15
    514a:	cf 93       	push	r28
    514c:	df 93       	push	r29
    514e:	ec 01       	movw	r28, r24
  m_motor_run_time = 0;
    5150:	18 8a       	std	Y+16, r1	; 0x10
    5152:	19 8a       	std	Y+17, r1	; 0x11
    5154:	1a 8a       	std	Y+18, r1	; 0x12
    5156:	1b 8a       	std	Y+19, r1	; 0x13
  m_idle_time = 0L;
    5158:	1c 86       	std	Y+12, r1	; 0x0c
    515a:	1d 86       	std	Y+13, r1	; 0x0d
    515c:	1e 86       	std	Y+14, r1	; 0x0e
    515e:	1f 86       	std	Y+15, r1	; 0x0f
  m_motor_cpr = EepromAccess.readEEPromLong(EepromAccess.MOTOR_CPR);
    5160:	68 e7       	ldi	r22, 0x78	; 120
    5162:	70 e0       	ldi	r23, 0x00	; 0
    5164:	87 ef       	ldi	r24, 0xF7	; 247
    5166:	97 e0       	ldi	r25, 0x07	; 7
    5168:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    516c:	68 83       	st	Y, r22
    516e:	79 83       	std	Y+1, r23	; 0x01
    5170:	8a 83       	std	Y+2, r24	; 0x02
    5172:	9b 83       	std	Y+3, r25	; 0x03
  m_motor_rpm = float(EepromAccess.readEEPromLong(EepromAccess.MOTOR_RPM)) / 1000.0;
    5174:	6c e7       	ldi	r22, 0x7C	; 124
    5176:	70 e0       	ldi	r23, 0x00	; 0
    5178:	87 ef       	ldi	r24, 0xF7	; 247
    517a:	97 e0       	ldi	r25, 0x07	; 7
    517c:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    5180:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	4a e7       	ldi	r20, 0x7A	; 122
    518a:	54 e4       	ldi	r21, 0x44	; 68
    518c:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    5190:	6c 83       	std	Y+4, r22	; 0x04
    5192:	7d 83       	std	Y+5, r23	; 0x05
    5194:	8e 83       	std	Y+6, r24	; 0x06
    5196:	9f 83       	std	Y+7, r25	; 0x07
  m_motor_time = (unsigned long)EepromAccess.readEEPromLong(EepromAccess.MOTOR_TIME);
    5198:	68 e8       	ldi	r22, 0x88	; 136
    519a:	70 e0       	ldi	r23, 0x00	; 0
    519c:	87 ef       	ldi	r24, 0xF7	; 247
    519e:	97 e0       	ldi	r25, 0x07	; 7
    51a0:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    51a4:	6c 8b       	std	Y+20, r22	; 0x14
    51a6:	7d 8b       	std	Y+21, r23	; 0x15
    51a8:	8e 8b       	std	Y+22, r24	; 0x16
    51aa:	9f 8b       	std	Y+23, r25	; 0x17

  // Motor controller is constrained by a signed 4-byte integer for pulse counting (31 bits)
  m_maxRevolutions = double(EepromAccess.readEEPromLong(EepromAccess.MAX_REVOLUTIONS)) / 1000.0;
    51ac:	60 e8       	ldi	r22, 0x80	; 128
    51ae:	70 e0       	ldi	r23, 0x00	; 0
    51b0:	87 ef       	ldi	r24, 0xF7	; 247
    51b2:	97 e0       	ldi	r25, 0x07	; 7
    51b4:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    51b8:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    51bc:	20 e0       	ldi	r18, 0x00	; 0
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	4a e7       	ldi	r20, 0x7A	; 122
    51c2:	54 e4       	ldi	r21, 0x44	; 68
    51c4:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    51c8:	4b 01       	movw	r8, r22
    51ca:	5c 01       	movw	r10, r24
    51cc:	68 87       	std	Y+8, r22	; 0x08
    51ce:	79 87       	std	Y+9, r23	; 0x09
    51d0:	8a 87       	std	Y+10, r24	; 0x0a
    51d2:	9b 87       	std	Y+11, r25	; 0x0b
  if (m_maxRevolutions > ABSOLUTE_MAX_REVOLUTIONS) { m_maxRevolutions = ABSOLUTE_MAX_REVOLUTIONS; }  // can happen when uninitialized
    51d4:	68 81       	ld	r22, Y
    51d6:	79 81       	ldd	r23, Y+1	; 0x01
    51d8:	8a 81       	ldd	r24, Y+2	; 0x02
    51da:	9b 81       	ldd	r25, Y+3	; 0x03
    51dc:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    51e0:	9b 01       	movw	r18, r22
    51e2:	ac 01       	movw	r20, r24
    51e4:	60 e0       	ldi	r22, 0x00	; 0
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	9f e4       	ldi	r25, 0x4F	; 79
    51ec:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    51f0:	2d ec       	ldi	r18, 0xCD	; 205
    51f2:	3c ec       	ldi	r19, 0xCC	; 204
    51f4:	4c ec       	ldi	r20, 0xCC	; 204
    51f6:	5d e3       	ldi	r21, 0x3D	; 61
    51f8:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <__subsf3>
    51fc:	6b 01       	movw	r12, r22
    51fe:	7c 01       	movw	r14, r24
    5200:	9b 01       	movw	r18, r22
    5202:	ac 01       	movw	r20, r24
    5204:	c5 01       	movw	r24, r10
    5206:	b4 01       	movw	r22, r8
    5208:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    520c:	18 16       	cp	r1, r24
    520e:	24 f4       	brge	.+8      	; 0x5218 <_ZN10MotorClassC1Ev+0xde>
    5210:	c8 86       	std	Y+8, r12	; 0x08
    5212:	d9 86       	std	Y+9, r13	; 0x09
    5214:	ea 86       	std	Y+10, r14	; 0x0a
    5216:	fb 86       	std	Y+11, r15	; 0x0b
}
    5218:	df 91       	pop	r29
    521a:	cf 91       	pop	r28
    521c:	ff 90       	pop	r15
    521e:	ef 90       	pop	r14
    5220:	df 90       	pop	r13
    5222:	cf 90       	pop	r12
    5224:	bf 90       	pop	r11
    5226:	af 90       	pop	r10
    5228:	9f 90       	pop	r9
    522a:	8f 90       	pop	r8
    522c:	08 95       	ret

0000522e <_ZN10MotorClass16setMotorTimeDaysEf>:

void MotorClass::setMotorTimeDays(float mdays) {
    522e:	cf 93       	push	r28
    5230:	df 93       	push	r29
    5232:	ec 01       	movw	r28, r24
    5234:	cb 01       	movw	r24, r22
    5236:	ba 01       	movw	r22, r20
  m_motor_time = mdays *60.0*60.0*24.0;
    5238:	20 e0       	ldi	r18, 0x00	; 0
    523a:	30 e0       	ldi	r19, 0x00	; 0
    523c:	40 e7       	ldi	r20, 0x70	; 112
    523e:	52 e4       	ldi	r21, 0x42	; 66
    5240:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5244:	20 e0       	ldi	r18, 0x00	; 0
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	40 e7       	ldi	r20, 0x70	; 112
    524a:	52 e4       	ldi	r21, 0x42	; 66
    524c:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	40 ec       	ldi	r20, 0xC0	; 192
    5256:	51 e4       	ldi	r21, 0x41	; 65
    5258:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    525c:	0e 94 13 56 	call	0xac26	; 0xac26 <__fixunssfsi>
    5260:	9b 01       	movw	r18, r22
    5262:	ac 01       	movw	r20, r24
    5264:	6c 8b       	std	Y+20, r22	; 0x14
    5266:	7d 8b       	std	Y+21, r23	; 0x15
    5268:	8e 8b       	std	Y+22, r24	; 0x16
    526a:	9f 8b       	std	Y+23, r25	; 0x17
  EepromAccess.writeEEPromLong(EepromAccess.MOTOR_TIME, m_motor_time);
    526c:	68 e8       	ldi	r22, 0x88	; 136
    526e:	70 e0       	ldi	r23, 0x00	; 0
    5270:	87 ef       	ldi	r24, 0xF7	; 247
    5272:	97 e0       	ldi	r25, 0x07	; 7
}
    5274:	df 91       	pop	r29
    5276:	cf 91       	pop	r28
  if (m_maxRevolutions > ABSOLUTE_MAX_REVOLUTIONS) { m_maxRevolutions = ABSOLUTE_MAX_REVOLUTIONS; }  // can happen when uninitialized
}

void MotorClass::setMotorTimeDays(float mdays) {
  m_motor_time = mdays *60.0*60.0*24.0;
  EepromAccess.writeEEPromLong(EepromAccess.MOTOR_TIME, m_motor_time);
    5278:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>

0000527c <_ZN10MotorClass13incrMotorTimeEv>:
}

void MotorClass::incrMotorTime() {
    527c:	0f 93       	push	r16
    527e:	1f 93       	push	r17
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
    5284:	ec 01       	movw	r28, r24
  m_motor_time += (millis() - m_motor_run_time) / 1000;   // add to motor time in seconds
    5286:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    528a:	08 89       	ldd	r16, Y+16	; 0x10
    528c:	19 89       	ldd	r17, Y+17	; 0x11
    528e:	2a 89       	ldd	r18, Y+18	; 0x12
    5290:	3b 89       	ldd	r19, Y+19	; 0x13
    5292:	60 1b       	sub	r22, r16
    5294:	71 0b       	sbc	r23, r17
    5296:	82 0b       	sbc	r24, r18
    5298:	93 0b       	sbc	r25, r19
    529a:	28 ee       	ldi	r18, 0xE8	; 232
    529c:	33 e0       	ldi	r19, 0x03	; 3
    529e:	40 e0       	ldi	r20, 0x00	; 0
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    52a6:	8c 89       	ldd	r24, Y+20	; 0x14
    52a8:	9d 89       	ldd	r25, Y+21	; 0x15
    52aa:	ae 89       	ldd	r26, Y+22	; 0x16
    52ac:	bf 89       	ldd	r27, Y+23	; 0x17
    52ae:	82 0f       	add	r24, r18
    52b0:	93 1f       	adc	r25, r19
    52b2:	a4 1f       	adc	r26, r20
    52b4:	b5 1f       	adc	r27, r21
    52b6:	8c 8b       	std	Y+20, r24	; 0x14
    52b8:	9d 8b       	std	Y+21, r25	; 0x15
    52ba:	ae 8b       	std	Y+22, r26	; 0x16
    52bc:	bf 8b       	std	Y+23, r27	; 0x17
}
    52be:	df 91       	pop	r29
    52c0:	cf 91       	pop	r28
    52c2:	1f 91       	pop	r17
    52c4:	0f 91       	pop	r16
    52c6:	08 95       	ret

000052c8 <_ZN10MotorClass6setCPREm>:

void MotorClass::setCPR(unsigned long n) { 
  m_motor_cpr = n; 
    52c8:	fc 01       	movw	r30, r24
    52ca:	40 83       	st	Z, r20
    52cc:	51 83       	std	Z+1, r21	; 0x01
    52ce:	62 83       	std	Z+2, r22	; 0x02
    52d0:	73 83       	std	Z+3, r23	; 0x03
  EepromAccess.writeEEPromLong(EepromAccess.MOTOR_CPR, m_motor_cpr);
    52d2:	9a 01       	movw	r18, r20
    52d4:	ab 01       	movw	r20, r22
    52d6:	68 e7       	ldi	r22, 0x78	; 120
    52d8:	70 e0       	ldi	r23, 0x00	; 0
    52da:	87 ef       	ldi	r24, 0xF7	; 247
    52dc:	97 e0       	ldi	r25, 0x07	; 7
    52de:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>

000052e2 <_ZN10MotorClass6setRPMEf>:
}

void MotorClass::setRPM(float f) {
    52e2:	cf 92       	push	r12
    52e4:	df 92       	push	r13
    52e6:	ef 92       	push	r14
    52e8:	ff 92       	push	r15
    52ea:	6a 01       	movw	r12, r20
    52ec:	7b 01       	movw	r14, r22
  m_motor_rpm = f;
    52ee:	fc 01       	movw	r30, r24
    52f0:	44 83       	std	Z+4, r20	; 0x04
    52f2:	55 83       	std	Z+5, r21	; 0x05
    52f4:	66 83       	std	Z+6, r22	; 0x06
    52f6:	77 83       	std	Z+7, r23	; 0x07
  EepromAccess.writeEEPromLong(EepromAccess.MOTOR_RPM, long(m_motor_rpm * 1000));  // Store as a long multiplied by 1000
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	4a e7       	ldi	r20, 0x7A	; 122
    52fe:	54 e4       	ldi	r21, 0x44	; 68
    5300:	c7 01       	movw	r24, r14
    5302:	b6 01       	movw	r22, r12
    5304:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5308:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    530c:	9b 01       	movw	r18, r22
    530e:	ac 01       	movw	r20, r24
    5310:	6c e7       	ldi	r22, 0x7C	; 124
    5312:	70 e0       	ldi	r23, 0x00	; 0
    5314:	87 ef       	ldi	r24, 0xF7	; 247
    5316:	97 e0       	ldi	r25, 0x07	; 7
}
    5318:	ff 90       	pop	r15
    531a:	ef 90       	pop	r14
    531c:	df 90       	pop	r13
    531e:	cf 90       	pop	r12
  EepromAccess.writeEEPromLong(EepromAccess.MOTOR_CPR, m_motor_cpr);
}

void MotorClass::setRPM(float f) {
  m_motor_rpm = f;
  EepromAccess.writeEEPromLong(EepromAccess.MOTOR_RPM, long(m_motor_rpm * 1000));  // Store as a long multiplied by 1000
    5320:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>

00005324 <_ZN10MotorClass17setMaxRevolutionsEd>:
}

void MotorClass::setMaxRevolutions(double m) {
    5324:	af 92       	push	r10
    5326:	bf 92       	push	r11
    5328:	cf 92       	push	r12
    532a:	df 92       	push	r13
    532c:	ef 92       	push	r14
    532e:	ff 92       	push	r15
    5330:	0f 93       	push	r16
    5332:	1f 93       	push	r17
    5334:	cf 93       	push	r28
    5336:	df 93       	push	r29
    5338:	ec 01       	movw	r28, r24
    533a:	5a 01       	movw	r10, r20
    533c:	6b 01       	movw	r12, r22
  if (m > ABSOLUTE_MAX_REVOLUTIONS) { m = ABSOLUTE_MAX_REVOLUTIONS; }  // can't go over ABSOLUTE_MAX_REVOLUTIONS
    533e:	68 81       	ld	r22, Y
    5340:	79 81       	ldd	r23, Y+1	; 0x01
    5342:	8a 81       	ldd	r24, Y+2	; 0x02
    5344:	9b 81       	ldd	r25, Y+3	; 0x03
    5346:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    534a:	9b 01       	movw	r18, r22
    534c:	ac 01       	movw	r20, r24
    534e:	60 e0       	ldi	r22, 0x00	; 0
    5350:	70 e0       	ldi	r23, 0x00	; 0
    5352:	80 e0       	ldi	r24, 0x00	; 0
    5354:	9f e4       	ldi	r25, 0x4F	; 79
    5356:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    535a:	2d ec       	ldi	r18, 0xCD	; 205
    535c:	3c ec       	ldi	r19, 0xCC	; 204
    535e:	4c ec       	ldi	r20, 0xCC	; 204
    5360:	5d e3       	ldi	r21, 0x3D	; 61
    5362:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <__subsf3>
    5366:	7b 01       	movw	r14, r22
    5368:	8c 01       	movw	r16, r24
    536a:	9b 01       	movw	r18, r22
    536c:	ac 01       	movw	r20, r24
    536e:	b5 01       	movw	r22, r10
    5370:	c6 01       	movw	r24, r12
    5372:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    5376:	18 16       	cp	r1, r24
    5378:	14 f0       	brlt	.+4      	; 0x537e <_ZN10MotorClass17setMaxRevolutionsEd+0x5a>
    537a:	75 01       	movw	r14, r10
    537c:	86 01       	movw	r16, r12
  m_maxRevolutions = m;
    537e:	a7 01       	movw	r20, r14
    5380:	b8 01       	movw	r22, r16
    5382:	48 87       	std	Y+8, r20	; 0x08
    5384:	59 87       	std	Y+9, r21	; 0x09
    5386:	6a 87       	std	Y+10, r22	; 0x0a
    5388:	7b 87       	std	Y+11, r23	; 0x0b
  EepromAccess.writeEEPromLong(EepromAccess.MAX_REVOLUTIONS, long(m_maxRevolutions * 1000));  // Store as a long multiplied by 1000
    538a:	20 e0       	ldi	r18, 0x00	; 0
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	4a e7       	ldi	r20, 0x7A	; 122
    5390:	54 e4       	ldi	r21, 0x44	; 68
    5392:	b7 01       	movw	r22, r14
    5394:	c8 01       	movw	r24, r16
    5396:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    539a:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    539e:	9b 01       	movw	r18, r22
    53a0:	ac 01       	movw	r20, r24
    53a2:	60 e8       	ldi	r22, 0x80	; 128
    53a4:	70 e0       	ldi	r23, 0x00	; 0
    53a6:	87 ef       	ldi	r24, 0xF7	; 247
    53a8:	97 e0       	ldi	r25, 0x07	; 7

}
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	1f 91       	pop	r17
    53b0:	0f 91       	pop	r16
    53b2:	ff 90       	pop	r15
    53b4:	ef 90       	pop	r14
    53b6:	df 90       	pop	r13
    53b8:	cf 90       	pop	r12
    53ba:	bf 90       	pop	r11
    53bc:	af 90       	pop	r10
}

void MotorClass::setMaxRevolutions(double m) {
  if (m > ABSOLUTE_MAX_REVOLUTIONS) { m = ABSOLUTE_MAX_REVOLUTIONS; }  // can't go over ABSOLUTE_MAX_REVOLUTIONS
  m_maxRevolutions = m;
  EepromAccess.writeEEPromLong(EepromAccess.MAX_REVOLUTIONS, long(m_maxRevolutions * 1000));  // Store as a long multiplied by 1000
    53be:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>

000053c2 <_ZN21PositionFeedbackClass17setFeedbackPeriodEf>:
  m_posFbTime = 0;
  m_fb_delta = 0;
  m_fbPos = 0;
}

void PositionFeedbackClass::setFeedbackPeriod(float p_seconds) {
    53c2:	cf 93       	push	r28
    53c4:	df 93       	push	r29
    53c6:	ec 01       	movw	r28, r24
    53c8:	cb 01       	movw	r24, r22
    53ca:	ba 01       	movw	r22, r20
    m_fb_period = p_seconds * 1000.0;
    53cc:	20 e0       	ldi	r18, 0x00	; 0
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	4a e7       	ldi	r20, 0x7A	; 122
    53d2:	54 e4       	ldi	r21, 0x44	; 68
    53d4:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    53d8:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    53dc:	9b 01       	movw	r18, r22
    53de:	ac 01       	movw	r20, r24
    53e0:	6c 83       	std	Y+4, r22	; 0x04
    53e2:	7d 83       	std	Y+5, r23	; 0x05
    53e4:	8e 83       	std	Y+6, r24	; 0x06
    53e6:	9f 83       	std	Y+7, r25	; 0x07
    EepromAccess.writeEEPromLong(EepromAccess.FB_PERIOD, long(m_fb_period));
    53e8:	6c e8       	ldi	r22, 0x8C	; 140
    53ea:	70 e0       	ldi	r23, 0x00	; 0
    53ec:	87 ef       	ldi	r24, 0xF7	; 247
    53ee:	97 e0       	ldi	r25, 0x07	; 7
}
    53f0:	df 91       	pop	r29
    53f2:	cf 91       	pop	r28
  m_fbPos = 0;
}

void PositionFeedbackClass::setFeedbackPeriod(float p_seconds) {
    m_fb_period = p_seconds * 1000.0;
    EepromAccess.writeEEPromLong(EepromAccess.FB_PERIOD, long(m_fb_period));
    53f4:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>

000053f8 <_ZN21PositionFeedbackClass19setFeedbackMaxSpeedEv>:
}

void PositionFeedbackClass::setFeedbackMaxSpeed() {
    53f8:	cf 93       	push	r28
    53fa:	df 93       	push	r29
    53fc:	ec 01       	movw	r28, r24
  m_fb_max_speed = 100 * (60000.0 / ((1 / FB_DIST)*(float)m_fb_period)) / Motor.getRPM();
    53fe:	6c 81       	ldd	r22, Y+4	; 0x04
    5400:	7d 81       	ldd	r23, Y+5	; 0x05
    5402:	8e 81       	ldd	r24, Y+6	; 0x06
    5404:	9f 81       	ldd	r25, Y+7	; 0x07
    5406:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>
    540a:	20 e0       	ldi	r18, 0x00	; 0
    540c:	30 e0       	ldi	r19, 0x00	; 0
    540e:	40 e8       	ldi	r20, 0x80	; 128
    5410:	50 e4       	ldi	r21, 0x40	; 64
    5412:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5416:	9b 01       	movw	r18, r22
    5418:	ac 01       	movw	r20, r24
    541a:	60 e0       	ldi	r22, 0x00	; 0
    541c:	70 e6       	ldi	r23, 0x60	; 96
    541e:	8a e6       	ldi	r24, 0x6A	; 106
    5420:	97 e4       	ldi	r25, 0x47	; 71
    5422:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	48 ec       	ldi	r20, 0xC8	; 200
    542c:	52 e4       	ldi	r21, 0x42	; 66
    542e:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5432:	20 91 89 07 	lds	r18, 0x0789
    5436:	30 91 8a 07 	lds	r19, 0x078A
    543a:	40 91 8b 07 	lds	r20, 0x078B
    543e:	50 91 8c 07 	lds	r21, 0x078C
    5442:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    5446:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
  if (m_fb_max_speed > 100) { m_fb_max_speed = 100; }  // limit to 100 percent  
    544a:	65 36       	cpi	r22, 0x65	; 101
    544c:	71 05       	cpc	r23, r1
    544e:	1c f4       	brge	.+6      	; 0x5456 <_ZN21PositionFeedbackClass19setFeedbackMaxSpeedEv+0x5e>
    m_fb_period = p_seconds * 1000.0;
    EepromAccess.writeEEPromLong(EepromAccess.FB_PERIOD, long(m_fb_period));
}

void PositionFeedbackClass::setFeedbackMaxSpeed() {
  m_fb_max_speed = 100 * (60000.0 / ((1 / FB_DIST)*(float)m_fb_period)) / Motor.getRPM();
    5450:	79 83       	std	Y+1, r23	; 0x01
    5452:	68 83       	st	Y, r22
    5454:	04 c0       	rjmp	.+8      	; 0x545e <_ZN21PositionFeedbackClass19setFeedbackMaxSpeedEv+0x66>
  if (m_fb_max_speed > 100) { m_fb_max_speed = 100; }  // limit to 100 percent  
    5456:	84 e6       	ldi	r24, 0x64	; 100
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	99 83       	std	Y+1, r25	; 0x01
    545c:	88 83       	st	Y, r24
}
    545e:	df 91       	pop	r29
    5460:	cf 91       	pop	r28
    5462:	08 95       	ret

00005464 <_ZN21PositionFeedbackClassC1Ev>:
// 

#include "PositionFeedbackClass.h"
#include "winch.h"

PositionFeedbackClass::PositionFeedbackClass() {
    5464:	cf 93       	push	r28
    5466:	df 93       	push	r29
    5468:	ec 01       	movw	r28, r24
    546a:	1b 8a       	std	Y+19, r1	; 0x13
    546c:	1c 8a       	std	Y+20, r1	; 0x14
    546e:	1d 8a       	std	Y+21, r1	; 0x15
    5470:	1e 8a       	std	Y+22, r1	; 0x16
    5472:	1f 8a       	std	Y+23, r1	; 0x17
    5474:	18 8e       	std	Y+24, r1	; 0x18
    5476:	19 8e       	std	Y+25, r1	; 0x19
    5478:	1a 8e       	std	Y+26, r1	; 0x1a
  m_fb_period = float(EepromAccess.readEEPromLong(EepromAccess.FB_PERIOD));  // do not divide by 1000 - keep in ms.
    547a:	6c e8       	ldi	r22, 0x8C	; 140
    547c:	70 e0       	ldi	r23, 0x00	; 0
    547e:	87 ef       	ldi	r24, 0xF7	; 247
    5480:	97 e0       	ldi	r25, 0x07	; 7
    5482:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <_ZN17EepromAccessClass14readEEPromLongEi>
    5486:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    548a:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    548e:	6c 83       	std	Y+4, r22	; 0x04
    5490:	7d 83       	std	Y+5, r23	; 0x05
    5492:	8e 83       	std	Y+6, r24	; 0x06
    5494:	9f 83       	std	Y+7, r25	; 0x07

  setFeedbackMaxSpeed();
    5496:	ce 01       	movw	r24, r28
    5498:	af df       	rcall	.-162    	; 0x53f8 <_ZN21PositionFeedbackClass19setFeedbackMaxSpeedEv>
    549a:	1e 86       	std	Y+14, r1	; 0x0e

  m_movingDownWithFeedback = false;
    549c:	1c 86       	std	Y+12, r1	; 0x0c
  m_movingDownWithFeedback = false;
  m_recentPosFeedback = false;
    549e:	1f 86       	std	Y+15, r1	; 0x0f

  m_posFbTime = 0;
    54a0:	18 8a       	std	Y+16, r1	; 0x10
    54a2:	19 8a       	std	Y+17, r1	; 0x11
    54a4:	1a 8a       	std	Y+18, r1	; 0x12
    54a6:	1b 82       	std	Y+3, r1	; 0x03
  m_fb_delta = 0;
    54a8:	1a 82       	std	Y+2, r1	; 0x02
    54aa:	18 86       	std	Y+8, r1	; 0x08
  m_fbPos = 0;
    54ac:	19 86       	std	Y+9, r1	; 0x09
    54ae:	1a 86       	std	Y+10, r1	; 0x0a
    54b0:	1b 86       	std	Y+11, r1	; 0x0b
    54b2:	df 91       	pop	r29
}
    54b4:	cf 91       	pop	r28
    54b6:	08 95       	ret

000054b8 <_ZN21PositionFeedbackClass16setFeedbackDeltaEi>:
    54b8:	cf 93       	push	r28
void PositionFeedbackClass::setFeedbackMaxSpeed() {
  m_fb_max_speed = 100 * (60000.0 / ((1 / FB_DIST)*(float)m_fb_period)) / Motor.getRPM();
  if (m_fb_max_speed > 100) { m_fb_max_speed = 100; }  // limit to 100 percent  
}

void PositionFeedbackClass::setFeedbackDelta(int speed_percent) {
    54ba:	df 93       	push	r29
    54bc:	ec 01       	movw	r28, r24
  m_fb_delta = float(FB_DIST * 60000.0) / (((float)speed_percent / 100)*Motor.getRPM());  // ms per FB_DIST revolutions
    54be:	88 27       	eor	r24, r24
    54c0:	77 fd       	sbrc	r23, 7
    54c2:	80 95       	com	r24
    54c4:	98 2f       	mov	r25, r24
    54c6:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>
    54ca:	20 e0       	ldi	r18, 0x00	; 0
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	48 ec       	ldi	r20, 0xC8	; 200
    54d0:	52 e4       	ldi	r21, 0x42	; 66
    54d2:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    54d6:	20 91 89 07 	lds	r18, 0x0789
    54da:	30 91 8a 07 	lds	r19, 0x078A
    54de:	40 91 8b 07 	lds	r20, 0x078B
    54e2:	50 91 8c 07 	lds	r21, 0x078C
    54e6:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    54ea:	9b 01       	movw	r18, r22
    54ec:	ac 01       	movw	r20, r24
    54ee:	60 e0       	ldi	r22, 0x00	; 0
    54f0:	70 e6       	ldi	r23, 0x60	; 96
    54f2:	8a e6       	ldi	r24, 0x6A	; 106
    54f4:	96 e4       	ldi	r25, 0x46	; 70
    54f6:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    54fa:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    54fe:	7b 83       	std	Y+3, r23	; 0x03
    5500:	6a 83       	std	Y+2, r22	; 0x02
}
    5502:	df 91       	pop	r29
    5504:	cf 91       	pop	r28
    5506:	08 95       	ret

00005508 <_ZN21PositionFeedbackClass26haveRecentPositionFeedbackEv>:


bool PositionFeedbackClass::haveRecentPositionFeedback() {
    5508:	cf 92       	push	r12
    550a:	df 92       	push	r13
    550c:	ef 92       	push	r14
    550e:	ff 92       	push	r15
    5510:	cf 93       	push	r28
    5512:	df 93       	push	r29
    5514:	ec 01       	movw	r28, r24
  if (TimeSince(m_posFbTime) >= (long)(2.5*m_fb_period)) {
    5516:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    551a:	6b 01       	movw	r12, r22
    551c:	7c 01       	movw	r14, r24
    551e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5520:	98 89       	ldd	r25, Y+16	; 0x10
    5522:	a9 89       	ldd	r26, Y+17	; 0x11
    5524:	ba 89       	ldd	r27, Y+18	; 0x12
    5526:	c8 1a       	sub	r12, r24
    5528:	d9 0a       	sbc	r13, r25
    552a:	ea 0a       	sbc	r14, r26
    552c:	fb 0a       	sbc	r15, r27
    552e:	6c 81       	ldd	r22, Y+4	; 0x04
    5530:	7d 81       	ldd	r23, Y+5	; 0x05
    5532:	8e 81       	ldd	r24, Y+6	; 0x06
    5534:	9f 81       	ldd	r25, Y+7	; 0x07
    5536:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>
    553a:	20 e0       	ldi	r18, 0x00	; 0
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	40 e2       	ldi	r20, 0x20	; 32
    5540:	50 e4       	ldi	r21, 0x40	; 64
    5542:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5546:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    554a:	c6 16       	cp	r12, r22
    554c:	d7 06       	cpc	r13, r23
    554e:	e8 06       	cpc	r14, r24
    5550:	f9 06       	cpc	r15, r25
    5552:	0c f0       	brlt	.+2      	; 0x5556 <_ZN21PositionFeedbackClass26haveRecentPositionFeedbackEv+0x4e>
    m_recentPosFeedback = false;
    5554:	1c 86       	std	Y+12, r1	; 0x0c
  }
  return m_recentPosFeedback;
}
    5556:	8c 85       	ldd	r24, Y+12	; 0x0c
    5558:	df 91       	pop	r29
    555a:	cf 91       	pop	r28
    555c:	ff 90       	pop	r15
    555e:	ef 90       	pop	r14
    5560:	df 90       	pop	r13
    5562:	cf 90       	pop	r12
    5564:	08 95       	ret

00005566 <_ZN21PositionFeedbackClass7readPosEv>:


// check the Ethernet port for an incoming position.
// positions will be processed upon receipt of a newline character
void PositionFeedbackClass::readPos() {
    5566:	8f 92       	push	r8
    5568:	9f 92       	push	r9
    556a:	af 92       	push	r10
    556c:	bf 92       	push	r11
    556e:	cf 92       	push	r12
    5570:	df 92       	push	r13
    5572:	ef 92       	push	r14
    5574:	ff 92       	push	r15
    5576:	0f 93       	push	r16
    5578:	1f 93       	push	r17
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	cd b7       	in	r28, 0x3d	; 61
    5580:	de b7       	in	r29, 0x3e	; 62
    5582:	27 97       	sbiw	r28, 0x07	; 7
    5584:	0f b6       	in	r0, 0x3f	; 63
    5586:	f8 94       	cli
    5588:	de bf       	out	0x3e, r29	; 62
    558a:	0f be       	out	0x3f, r0	; 63
    558c:	cd bf       	out	0x3d, r28	; 61
    558e:	8c 01       	movw	r16, r24
  char c = ' ';  // init to anything other than newline

  int i = 0;
    5590:	e1 2c       	mov	r14, r1
    5592:	f1 2c       	mov	r15, r1


// check the Ethernet port for an incoming position.
// positions will be processed upon receipt of a newline character
void PositionFeedbackClass::readPos() {
  char c = ' ';  // init to anything other than newline
    5594:	20 e2       	ldi	r18, 0x20	; 32

  int i = 0;
  while (Ethernet1.getPosClient().available()) {
    5596:	e0 91 e7 07 	lds	r30, 0x07E7
    559a:	f0 91 e8 07 	lds	r31, 0x07E8
    559e:	04 80       	ldd	r0, Z+4	; 0x04
    55a0:	f5 81       	ldd	r31, Z+5	; 0x05
    55a2:	e0 2d       	mov	r30, r0
    55a4:	87 ee       	ldi	r24, 0xE7	; 231
    55a6:	97 e0       	ldi	r25, 0x07	; 7
    55a8:	2f 83       	std	Y+7, r18	; 0x07
    55aa:	19 95       	eicall
    55ac:	2f 81       	ldd	r18, Y+7	; 0x07
    55ae:	89 2b       	or	r24, r25
    55b0:	99 f0       	breq	.+38     	; 0x55d8 <_ZN21PositionFeedbackClass7readPosEv+0x72>
    c = Ethernet1.getPosClient().read();
    55b2:	e0 91 e7 07 	lds	r30, 0x07E7
    55b6:	f0 91 e8 07 	lds	r31, 0x07E8
    55ba:	06 80       	ldd	r0, Z+6	; 0x06
    55bc:	f7 81       	ldd	r31, Z+7	; 0x07
    55be:	e0 2d       	mov	r30, r0
    55c0:	87 ee       	ldi	r24, 0xE7	; 231
    55c2:	97 e0       	ldi	r25, 0x07	; 7
    55c4:	19 95       	eicall
    55c6:	28 2f       	mov	r18, r24
    posBuf[i++] = c;
    55c8:	8f ef       	ldi	r24, 0xFF	; 255
    55ca:	e8 1a       	sub	r14, r24
    55cc:	f8 0a       	sbc	r15, r24
    55ce:	f8 01       	movw	r30, r16
    55d0:	ee 0d       	add	r30, r14
    55d2:	ff 1d       	adc	r31, r15
    55d4:	22 8f       	std	Z+26, r18	; 0x1a
    55d6:	df cf       	rjmp	.-66     	; 0x5596 <_ZN21PositionFeedbackClass7readPosEv+0x30>
  }

  if (c == '\n') {  // process the line
    55d8:	2a 30       	cpi	r18, 0x0A	; 10
    55da:	09 f0       	breq	.+2      	; 0x55de <_ZN21PositionFeedbackClass7readPosEv+0x78>
    55dc:	20 c1       	rjmp	.+576    	; 0x581e <_ZN21PositionFeedbackClass7readPosEv+0x2b8>
//    Serial.print("Processing position: "); Serial.print(posBuf);
    if (isValidNumber(posBuf)) {
    55de:	78 01       	movw	r14, r16
    55e0:	eb e1       	ldi	r30, 0x1B	; 27
    55e2:	ee 0e       	add	r14, r30
    55e4:	f1 1c       	adc	r15, r1
    55e6:	b7 01       	movw	r22, r14
    55e8:	ce 01       	movw	r24, r28
    55ea:	01 96       	adiw	r24, 0x01	; 1
    55ec:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    55f0:	ce 01       	movw	r24, r28
    55f2:	01 96       	adiw	r24, 0x01	; 1
    55f4:	bd d4       	rcall	.+2426   	; 0x5f70 <_Z13isValidNumber6String>
    55f6:	b8 2e       	mov	r11, r24
    55f8:	ce 01       	movw	r24, r28
    55fa:	01 96       	adiw	r24, 0x01	; 1
    55fc:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5600:	bb 20       	and	r11, r11
    5602:	09 f4       	brne	.+2      	; 0x5606 <_ZN21PositionFeedbackClass7readPosEv+0xa0>
    5604:	07 c1       	rjmp	.+526    	; 0x5814 <_ZN21PositionFeedbackClass7readPosEv+0x2ae>
    5606:	c7 01       	movw	r24, r14
      // Input a floating point number as a position
      m_fbPos = atof(posBuf);
    5608:	0e 94 9c 5b 	call	0xb738	; 0xb738 <atof>
    560c:	f8 01       	movw	r30, r16
    560e:	60 87       	std	Z+8, r22	; 0x08
    5610:	71 87       	std	Z+9, r23	; 0x09
    5612:	82 87       	std	Z+10, r24	; 0x0a
    5614:	93 87       	std	Z+11, r25	; 0x0b
    5616:	81 e0       	ldi	r24, 0x01	; 1
      m_recentPosFeedback = true;
    5618:	84 87       	std	Z+12, r24	; 0x0c
    561a:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
      m_posFbTime = (unsigned long)millis();
    561e:	f8 01       	movw	r30, r16
    5620:	67 87       	std	Z+15, r22	; 0x0f
    5622:	70 8b       	std	Z+16, r23	; 0x10
    5624:	81 8b       	std	Z+17, r24	; 0x11
    5626:	92 8b       	std	Z+18, r25	; 0x12
    5628:	85 85       	ldd	r24, Z+13	; 0x0d
//      Serial.print("Pos: "); Serial.print(m_fbPos);

      // 
      // check for stop conditions
      //
      if (m_movingUpWithFeedback == true) {
    562a:	88 23       	and	r24, r24
    562c:	09 f4       	brne	.+2      	; 0x5630 <_ZN21PositionFeedbackClass7readPosEv+0xca>
    562e:	70 c0       	rjmp	.+224    	; 0x5710 <_ZN21PositionFeedbackClass7readPosEv+0x1aa>
    5630:	20 91 a7 06 	lds	r18, 0x06A7
        if (double(m_fbPos) <= moveTarget) { MCtrl.stopMoving(); }
    5634:	30 91 a8 06 	lds	r19, 0x06A8
    5638:	40 91 a9 06 	lds	r20, 0x06A9
    563c:	50 91 aa 06 	lds	r21, 0x06AA
    5640:	60 85       	ldd	r22, Z+8	; 0x08
    5642:	71 85       	ldd	r23, Z+9	; 0x09
    5644:	82 85       	ldd	r24, Z+10	; 0x0a
    5646:	93 85       	ldd	r25, Z+11	; 0x0b
    5648:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    564c:	18 16       	cp	r1, r24
    564e:	1c f0       	brlt	.+6      	; 0x5656 <_ZN21PositionFeedbackClass7readPosEv+0xf0>
    5650:	8e e6       	ldi	r24, 0x6E	; 110
    5652:	97 e0       	ldi	r25, 0x07	; 7
    5654:	cb dc       	rcall	.-1642   	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    5656:	f8 01       	movw	r30, r16
    5658:	47 85       	ldd	r20, Z+15	; 0x0f

        // Check to see that the feedback indicates moving up
        // by differencing observations at least FB_DELTA apart.
        if ((m_posFbTime - m_oldPosFbTime) > (unsigned long)(2 * m_fb_delta)) { // consider this the first observation
    565a:	50 89       	ldd	r21, Z+16	; 0x10
    565c:	61 89       	ldd	r22, Z+17	; 0x11
    565e:	72 89       	ldd	r23, Z+18	; 0x12
    5660:	87 89       	ldd	r24, Z+23	; 0x17
    5662:	90 8d       	ldd	r25, Z+24	; 0x18
    5664:	a1 8d       	ldd	r26, Z+25	; 0x19
    5666:	b2 8d       	ldd	r27, Z+26	; 0x1a
    5668:	5a 01       	movw	r10, r20
    566a:	6b 01       	movw	r12, r22
    566c:	a8 1a       	sub	r10, r24
    566e:	b9 0a       	sbc	r11, r25
    5670:	ca 0a       	sbc	r12, r26
    5672:	db 0a       	sbc	r13, r27
    5674:	d6 01       	movw	r26, r12
    5676:	c5 01       	movw	r24, r10
    5678:	22 81       	ldd	r18, Z+2	; 0x02
    567a:	33 81       	ldd	r19, Z+3	; 0x03
    567c:	49 01       	movw	r8, r18
    567e:	88 0c       	add	r8, r8
    5680:	99 1c       	adc	r9, r9
    5682:	aa 24       	eor	r10, r10
    5684:	97 fc       	sbrc	r9, 7
    5686:	a0 94       	com	r10
    5688:	ba 2c       	mov	r11, r10
    568a:	88 16       	cp	r8, r24
    568c:	99 06       	cpc	r9, r25
    568e:	aa 06       	cpc	r10, r26
    5690:	bb 06       	cpc	r11, r27
    5692:	68 f4       	brcc	.+26     	; 0x56ae <_ZN21PositionFeedbackClass7readPosEv+0x148>
    5694:	80 85       	ldd	r24, Z+8	; 0x08
    5696:	91 85       	ldd	r25, Z+9	; 0x09
          m_oldPosFb = m_fbPos;
    5698:	a2 85       	ldd	r26, Z+10	; 0x0a
    569a:	b3 85       	ldd	r27, Z+11	; 0x0b
    569c:	83 8b       	std	Z+19, r24	; 0x13
    569e:	94 8b       	std	Z+20, r25	; 0x14
    56a0:	a5 8b       	std	Z+21, r26	; 0x15
    56a2:	b6 8b       	std	Z+22, r27	; 0x16
    56a4:	47 8b       	std	Z+23, r20	; 0x17
    56a6:	50 8f       	std	Z+24, r21	; 0x18
          m_oldPosFbTime = m_posFbTime;
    56a8:	61 8f       	std	Z+25, r22	; 0x19
    56aa:	72 8f       	std	Z+26, r23	; 0x1a
    56ac:	31 c0       	rjmp	.+98     	; 0x5710 <_ZN21PositionFeedbackClass7readPosEv+0x1aa>
    56ae:	a9 01       	movw	r20, r18
    56b0:	66 27       	eor	r22, r22
        }
        else {
          if ((m_posFbTime - m_oldPosFbTime) > (unsigned long)m_fb_delta) {  // time to compare
    56b2:	57 fd       	sbrc	r21, 7
    56b4:	60 95       	com	r22
    56b6:	76 2f       	mov	r23, r22
    56b8:	48 17       	cp	r20, r24
    56ba:	59 07       	cpc	r21, r25
    56bc:	6a 07       	cpc	r22, r26
    56be:	7b 07       	cpc	r23, r27
    56c0:	38 f5       	brcc	.+78     	; 0x5710 <_ZN21PositionFeedbackClass7readPosEv+0x1aa>
    56c2:	f8 01       	movw	r30, r16
    56c4:	23 89       	ldd	r18, Z+19	; 0x13
            if (m_fbPos >= m_oldPosFb) {
    56c6:	34 89       	ldd	r19, Z+20	; 0x14
    56c8:	45 89       	ldd	r20, Z+21	; 0x15
    56ca:	56 89       	ldd	r21, Z+22	; 0x16
    56cc:	60 85       	ldd	r22, Z+8	; 0x08
    56ce:	71 85       	ldd	r23, Z+9	; 0x09
    56d0:	82 85       	ldd	r24, Z+10	; 0x0a
    56d2:	93 85       	ldd	r25, Z+11	; 0x0b
    56d4:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    56d8:	87 fd       	sbrc	r24, 7
    56da:	09 c0       	rjmp	.+18     	; 0x56ee <_ZN21PositionFeedbackClass7readPosEv+0x188>
    56dc:	8e e6       	ldi	r24, 0x6E	; 110
    56de:	97 e0       	ldi	r25, 0x07	; 7
              MCtrl.stopMoving();
    56e0:	85 dc       	rcall	.-1782   	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    56e2:	62 ea       	ldi	r22, 0xA2	; 162
    56e4:	7f e0       	ldi	r23, 0x0F	; 15
    56e6:	8a ed       	ldi	r24, 0xDA	; 218
              Ethernet1.getCmdClient().println(F("Stopped due to position feedback value not decreasing during up move."));
    56e8:	97 e0       	ldi	r25, 0x07	; 7
    56ea:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    56ee:	f8 01       	movw	r30, r16
    56f0:	80 85       	ldd	r24, Z+8	; 0x08
    56f2:	91 85       	ldd	r25, Z+9	; 0x09
            }
            m_oldPosFb = m_fbPos;
    56f4:	a2 85       	ldd	r26, Z+10	; 0x0a
    56f6:	b3 85       	ldd	r27, Z+11	; 0x0b
    56f8:	83 8b       	std	Z+19, r24	; 0x13
    56fa:	94 8b       	std	Z+20, r25	; 0x14
    56fc:	a5 8b       	std	Z+21, r26	; 0x15
    56fe:	b6 8b       	std	Z+22, r27	; 0x16
    5700:	87 85       	ldd	r24, Z+15	; 0x0f
    5702:	90 89       	ldd	r25, Z+16	; 0x10
    5704:	a1 89       	ldd	r26, Z+17	; 0x11
            m_oldPosFbTime = m_posFbTime;
    5706:	b2 89       	ldd	r27, Z+18	; 0x12
    5708:	87 8b       	std	Z+23, r24	; 0x17
    570a:	90 8f       	std	Z+24, r25	; 0x18
    570c:	a1 8f       	std	Z+25, r26	; 0x19
    570e:	b2 8f       	std	Z+26, r27	; 0x1a
    5710:	f8 01       	movw	r30, r16
    5712:	86 85       	ldd	r24, Z+14	; 0x0e
    5714:	88 23       	and	r24, r24
          }
        }
      }

      if (m_movingDownWithFeedback == true) {
    5716:	09 f4       	brne	.+2      	; 0x571a <_ZN21PositionFeedbackClass7readPosEv+0x1b4>
    5718:	6c c0       	rjmp	.+216    	; 0x57f2 <_ZN21PositionFeedbackClass7readPosEv+0x28c>
    571a:	20 91 a7 06 	lds	r18, 0x06A7
    571e:	30 91 a8 06 	lds	r19, 0x06A8
        if (double(m_fbPos) >= moveTarget) { MCtrl.stopMoving(); }
    5722:	40 91 a9 06 	lds	r20, 0x06A9
    5726:	50 91 aa 06 	lds	r21, 0x06AA
    572a:	60 85       	ldd	r22, Z+8	; 0x08
    572c:	71 85       	ldd	r23, Z+9	; 0x09
    572e:	82 85       	ldd	r24, Z+10	; 0x0a
    5730:	93 85       	ldd	r25, Z+11	; 0x0b
    5732:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    5736:	87 fd       	sbrc	r24, 7
    5738:	03 c0       	rjmp	.+6      	; 0x5740 <_ZN21PositionFeedbackClass7readPosEv+0x1da>
    573a:	8e e6       	ldi	r24, 0x6E	; 110
    573c:	97 e0       	ldi	r25, 0x07	; 7
    573e:	56 dc       	rcall	.-1876   	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    5740:	f8 01       	movw	r30, r16
    5742:	87 85       	ldd	r24, Z+15	; 0x0f
    5744:	90 89       	ldd	r25, Z+16	; 0x10
    5746:	a1 89       	ldd	r26, Z+17	; 0x11

        // Check to see that the feedback indicates moving down
        // by differencing observations at least FB_DELTA apart.
        if ((m_posFbTime - m_oldPosFbTime) > (unsigned long)(2 * m_fb_delta)) { // consider this the first observation
    5748:	b2 89       	ldd	r27, Z+18	; 0x12
    574a:	47 89       	ldd	r20, Z+23	; 0x17
    574c:	50 8d       	ldd	r21, Z+24	; 0x18
    574e:	61 8d       	ldd	r22, Z+25	; 0x19
    5750:	72 8d       	ldd	r23, Z+26	; 0x1a
    5752:	5c 01       	movw	r10, r24
    5754:	6d 01       	movw	r12, r26
    5756:	a4 1a       	sub	r10, r20
    5758:	b5 0a       	sbc	r11, r21
    575a:	c6 0a       	sbc	r12, r22
    575c:	d7 0a       	sbc	r13, r23
    575e:	b6 01       	movw	r22, r12
    5760:	a5 01       	movw	r20, r10
    5762:	22 81       	ldd	r18, Z+2	; 0x02
    5764:	33 81       	ldd	r19, Z+3	; 0x03
    5766:	49 01       	movw	r8, r18
    5768:	88 0c       	add	r8, r8
    576a:	99 1c       	adc	r9, r9
    576c:	aa 24       	eor	r10, r10
    576e:	97 fc       	sbrc	r9, 7
    5770:	a0 94       	com	r10
    5772:	ba 2c       	mov	r11, r10
    5774:	84 16       	cp	r8, r20
    5776:	95 06       	cpc	r9, r21
    5778:	a6 06       	cpc	r10, r22
    577a:	b7 06       	cpc	r11, r23
    577c:	48 f4       	brcc	.+18     	; 0x5790 <_ZN21PositionFeedbackClass7readPosEv+0x22a>
    577e:	40 85       	ldd	r20, Z+8	; 0x08
    5780:	51 85       	ldd	r21, Z+9	; 0x09
    5782:	62 85       	ldd	r22, Z+10	; 0x0a
    5784:	73 85       	ldd	r23, Z+11	; 0x0b
          m_oldPosFb = m_fbPos;
    5786:	43 8b       	std	Z+19, r20	; 0x13
    5788:	54 8b       	std	Z+20, r21	; 0x14
    578a:	65 8b       	std	Z+21, r22	; 0x15
    578c:	76 8b       	std	Z+22, r23	; 0x16
    578e:	2d c0       	rjmp	.+90     	; 0x57ea <_ZN21PositionFeedbackClass7readPosEv+0x284>
    5790:	c9 01       	movw	r24, r18
    5792:	aa 27       	eor	r26, r26
    5794:	97 fd       	sbrc	r25, 7
    5796:	a0 95       	com	r26
          m_oldPosFbTime = m_posFbTime;
        }
        else {
          if ((m_posFbTime - m_oldPosFbTime) > (unsigned long)m_fb_delta) {  // time to compare
    5798:	ba 2f       	mov	r27, r26
    579a:	84 17       	cp	r24, r20
    579c:	95 07       	cpc	r25, r21
    579e:	a6 07       	cpc	r26, r22
    57a0:	b7 07       	cpc	r27, r23
    57a2:	38 f5       	brcc	.+78     	; 0x57f2 <_ZN21PositionFeedbackClass7readPosEv+0x28c>
    57a4:	f8 01       	movw	r30, r16
    57a6:	23 89       	ldd	r18, Z+19	; 0x13
    57a8:	34 89       	ldd	r19, Z+20	; 0x14
    57aa:	45 89       	ldd	r20, Z+21	; 0x15
            if (m_fbPos <= m_oldPosFb) {
    57ac:	56 89       	ldd	r21, Z+22	; 0x16
    57ae:	60 85       	ldd	r22, Z+8	; 0x08
    57b0:	71 85       	ldd	r23, Z+9	; 0x09
    57b2:	82 85       	ldd	r24, Z+10	; 0x0a
    57b4:	93 85       	ldd	r25, Z+11	; 0x0b
    57b6:	0e 94 a2 55 	call	0xab44	; 0xab44 <__cmpsf2>
    57ba:	18 16       	cp	r1, r24
    57bc:	4c f0       	brlt	.+18     	; 0x57d0 <_ZN21PositionFeedbackClass7readPosEv+0x26a>
    57be:	8e e6       	ldi	r24, 0x6E	; 110
    57c0:	97 e0       	ldi	r25, 0x07	; 7
    57c2:	14 dc       	rcall	.-2008   	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    57c4:	6a e5       	ldi	r22, 0x5A	; 90
              MCtrl.stopMoving();
    57c6:	7f e0       	ldi	r23, 0x0F	; 15
    57c8:	8a ed       	ldi	r24, 0xDA	; 218
    57ca:	97 e0       	ldi	r25, 0x07	; 7
    57cc:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
              Ethernet1.getCmdClient().println(F("Stopped due to position feedback value not increasing during down move."));
    57d0:	f8 01       	movw	r30, r16
    57d2:	80 85       	ldd	r24, Z+8	; 0x08
    57d4:	91 85       	ldd	r25, Z+9	; 0x09
    57d6:	a2 85       	ldd	r26, Z+10	; 0x0a
    57d8:	b3 85       	ldd	r27, Z+11	; 0x0b
            }
            m_oldPosFb = m_fbPos;
    57da:	83 8b       	std	Z+19, r24	; 0x13
    57dc:	94 8b       	std	Z+20, r25	; 0x14
    57de:	a5 8b       	std	Z+21, r26	; 0x15
    57e0:	b6 8b       	std	Z+22, r27	; 0x16
    57e2:	87 85       	ldd	r24, Z+15	; 0x0f
    57e4:	90 89       	ldd	r25, Z+16	; 0x10
    57e6:	a1 89       	ldd	r26, Z+17	; 0x11
    57e8:	b2 89       	ldd	r27, Z+18	; 0x12
    57ea:	87 8b       	std	Z+23, r24	; 0x17
            m_oldPosFbTime = m_posFbTime;
    57ec:	90 8f       	std	Z+24, r25	; 0x18
    57ee:	a1 8f       	std	Z+25, r26	; 0x19
    57f0:	b2 8f       	std	Z+26, r27	; 0x1a
    57f2:	68 e4       	ldi	r22, 0x48	; 72
    57f4:	7f e0       	ldi	r23, 0x0F	; 15
    57f6:	86 ec       	ldi	r24, 0xC6	; 198
    57f8:	98 e0       	ldi	r25, 0x08	; 8
    57fa:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
          }
        }
      }


      Serial.print(F("Latest position: "));
    57fe:	f8 01       	movw	r30, r16
    5800:	40 85       	ldd	r20, Z+8	; 0x08
    5802:	51 85       	ldd	r21, Z+9	; 0x09
    5804:	62 85       	ldd	r22, Z+10	; 0x0a
    5806:	73 85       	ldd	r23, Z+11	; 0x0b
      Serial.println(m_fbPos, 6);
    5808:	26 e0       	ldi	r18, 0x06	; 6
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	86 ec       	ldi	r24, 0xC6	; 198
    580e:	98 e0       	ldi	r25, 0x08	; 8
    5810:	0e 94 c8 51 	call	0xa390	; 0xa390 <_ZN5Print7printlnEdi>
    5814:	80 e2       	ldi	r24, 0x20	; 32
    5816:	f7 01       	movw	r30, r14
    5818:	11 92       	st	Z+, r1
    581a:	8a 95       	dec	r24
    581c:	e9 f7       	brne	.-6      	; 0x5818 <_ZN21PositionFeedbackClass7readPosEv+0x2b2>
    }

    memset(posBuf, 0, POS_BUF_LEN);  // clear the buffer after processing
    581e:	27 96       	adiw	r28, 0x07	; 7
    5820:	0f b6       	in	r0, 0x3f	; 63
    5822:	f8 94       	cli
    5824:	de bf       	out	0x3e, r29	; 62
    5826:	0f be       	out	0x3f, r0	; 63
  }

}
    5828:	cd bf       	out	0x3d, r28	; 61
    582a:	df 91       	pop	r29
    582c:	cf 91       	pop	r28
    582e:	1f 91       	pop	r17
    5830:	0f 91       	pop	r16
    5832:	ff 90       	pop	r15
    5834:	ef 90       	pop	r14
    5836:	df 90       	pop	r13
    5838:	cf 90       	pop	r12
    583a:	bf 90       	pop	r11
    583c:	af 90       	pop	r10
    583e:	9f 90       	pop	r9
    5840:	8f 90       	pop	r8
    5842:	08 95       	ret

00005844 <_GLOBAL__sub_I__ZN21PositionFeedbackClassC2Ev>:
    5844:	0f 93       	push	r16
    5846:	00 e0       	ldi	r16, 0x00	; 0
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	40 e0       	ldi	r20, 0x00	; 0
    584c:	60 e0       	ldi	r22, 0x00	; 0
    584e:	8b e9       	ldi	r24, 0x9B	; 155
    5850:	96 e0       	ldi	r25, 0x06	; 6
    5852:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
    5856:	0f 91       	pop	r16
    5858:	08 95       	ret

0000585a <setup>:
    585a:	8f 92       	push	r8
    585c:	9f 92       	push	r9
    585e:	af 92       	push	r10
    5860:	bf 92       	push	r11
    5862:	cf 92       	push	r12
    5864:	df 92       	push	r13
    5866:	ef 92       	push	r14
    5868:	ff 92       	push	r15
    586a:	0f 93       	push	r16
    586c:	1f 93       	push	r17
    586e:	cf 93       	push	r28
    5870:	df 93       	push	r29
    5872:	cd b7       	in	r28, 0x3d	; 61
    5874:	de b7       	in	r29, 0x3e	; 62
    5876:	2c 97       	sbiw	r28, 0x0c	; 12
    5878:	0f b6       	in	r0, 0x3f	; 63
    587a:	f8 94       	cli
    587c:	de bf       	out	0x3e, r29	; 62
    587e:	0f be       	out	0x3f, r0	; 63
    5880:	cd bf       	out	0x3d, r28	; 61
    5882:	88 ef       	ldi	r24, 0xF8	; 248
    5884:	97 e0       	ldi	r25, 0x07	; 7
    5886:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <_ZN19CApplicationMonitor15DisableWatchdogEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    588a:	26 e0       	ldi	r18, 0x06	; 6
    588c:	40 e8       	ldi	r20, 0x80	; 128
    588e:	55 e2       	ldi	r21, 0x25	; 37
    5890:	60 e0       	ldi	r22, 0x00	; 0
    5892:	70 e0       	ldi	r23, 0x00	; 0
    5894:	86 ec       	ldi	r24, 0xC6	; 198
    5896:	98 e0       	ldi	r25, 0x08	; 8
    5898:	0e 94 c9 4c 	call	0x9992	; 0x9992 <_ZN14HardwareSerial5beginEmh>
    589c:	26 e0       	ldi	r18, 0x06	; 6
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	5b e4       	ldi	r21, 0x4B	; 75
    58a2:	60 e0       	ldi	r22, 0x00	; 0
    58a4:	70 e0       	ldi	r23, 0x00	; 0
    58a6:	83 e6       	ldi	r24, 0x63	; 99
    58a8:	99 e0       	ldi	r25, 0x09	; 9
    58aa:	0e 94 c9 4c 	call	0x9992	; 0x9992 <_ZN14HardwareSerial5beginEmh>
    58ae:	44 ef       	ldi	r20, 0xF4	; 244
    58b0:	51 e0       	ldi	r21, 0x01	; 1
    58b2:	60 e0       	ldi	r22, 0x00	; 0
    58b4:	70 e0       	ldi	r23, 0x00	; 0
    58b6:	86 ec       	ldi	r24, 0xC6	; 198
    58b8:	98 e0       	ldi	r25, 0x08	; 8
    58ba:	0e 94 04 52 	call	0xa408	; 0xa408 <_ZN6Stream10setTimeoutEm>
    58be:	44 ef       	ldi	r20, 0xF4	; 244
    58c0:	51 e0       	ldi	r21, 0x01	; 1
    58c2:	60 e0       	ldi	r22, 0x00	; 0
    58c4:	70 e0       	ldi	r23, 0x00	; 0
    58c6:	83 e6       	ldi	r24, 0x63	; 99
    58c8:	99 e0       	ldi	r25, 0x09	; 9
    58ca:	0e 94 04 52 	call	0xa408	; 0xa408 <_ZN6Stream10setTimeoutEm>
    58ce:	86 ec       	ldi	r24, 0xC6	; 198
    58d0:	98 e0       	ldi	r25, 0x08	; 8
    58d2:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    58d6:	6f e6       	ldi	r22, 0x6F	; 111
    58d8:	74 e1       	ldi	r23, 0x14	; 20
    58da:	86 ec       	ldi	r24, 0xC6	; 198
    58dc:	98 e0       	ldi	r25, 0x08	; 8
    58de:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    58e2:	63 e1       	ldi	r22, 0x13	; 19
    58e4:	75 e0       	ldi	r23, 0x05	; 5
    58e6:	86 ec       	ldi	r24, 0xC6	; 198
    58e8:	98 e0       	ldi	r25, 0x08	; 8
    58ea:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    58ee:	69 e5       	ldi	r22, 0x59	; 89
    58f0:	73 e0       	ldi	r23, 0x03	; 3
    58f2:	86 ec       	ldi	r24, 0xC6	; 198
    58f4:	98 e0       	ldi	r25, 0x08	; 8
    58f6:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    58fa:	86 ec       	ldi	r24, 0xC6	; 198
    58fc:	98 e0       	ldi	r25, 0x08	; 8
    58fe:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    5902:	41 e0       	ldi	r20, 0x01	; 1
    5904:	66 ec       	ldi	r22, 0xC6	; 198
    5906:	78 e0       	ldi	r23, 0x08	; 8
    5908:	88 ef       	ldi	r24, 0xF8	; 248
    590a:	97 e0       	ldi	r25, 0x07	; 7
    590c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZNK19CApplicationMonitor4DumpER5Printb>
    5910:	6f e0       	ldi	r22, 0x0F	; 15
    5912:	72 e0       	ldi	r23, 0x02	; 2
    5914:	86 ec       	ldi	r24, 0xC6	; 198
    5916:	98 e0       	ldi	r25, 0x08	; 8
    5918:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    591c:	62 e0       	ldi	r22, 0x02	; 2
    591e:	86 e0       	ldi	r24, 0x06	; 6
    5920:	0e 94 25 4b 	call	0x964a	; 0x964a <pinMode>
    5924:	62 e0       	ldi	r22, 0x02	; 2
    5926:	85 e0       	ldi	r24, 0x05	; 5
    5928:	0e 94 25 4b 	call	0x964a	; 0x964a <pinMode>
    592c:	86 e0       	ldi	r24, 0x06	; 6
    592e:	0e 94 93 4b 	call	0x9726	; 0x9726 <digitalRead>
    5932:	21 e0       	ldi	r18, 0x01	; 1
    5934:	89 2b       	or	r24, r25
    5936:	09 f0       	breq	.+2      	; 0x593a <setup+0xe0>
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	20 93 b2 06 	sts	0x06B2, r18
    593e:	85 e0       	ldi	r24, 0x05	; 5
    5940:	0e 94 93 4b 	call	0x9726	; 0x9726 <digitalRead>
    5944:	21 e0       	ldi	r18, 0x01	; 1
    5946:	89 2b       	or	r24, r25
    5948:	09 f0       	breq	.+2      	; 0x594c <setup+0xf2>
    594a:	20 e0       	ldi	r18, 0x00	; 0
    594c:	20 93 b1 06 	sts	0x06B1, r18
    5950:	80 91 b2 06 	lds	r24, 0x06B2
    5954:	88 23       	and	r24, r24
    5956:	61 f0       	breq	.+24     	; 0x5970 <setup+0x116>
    5958:	22 23       	and	r18, r18
    595a:	51 f0       	breq	.+20     	; 0x5970 <setup+0x116>
    595c:	67 e4       	ldi	r22, 0x47	; 71
    595e:	74 e1       	ldi	r23, 0x14	; 20
    5960:	86 ec       	ldi	r24, 0xC6	; 198
    5962:	98 e0       	ldi	r25, 0x08	; 8
    5964:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5968:	8d e9       	ldi	r24, 0x9D	; 157
    596a:	97 e0       	ldi	r25, 0x07	; 7
    596c:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <_ZN15EthernetSupport15resetIPDefaultsEv>
    5970:	8d e9       	ldi	r24, 0x9D	; 157
    5972:	97 e0       	ldi	r25, 0x07	; 7
    5974:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <_ZN15EthernetSupport5startEv>
    5978:	81 11       	cpse	r24, r1
    597a:	12 c0       	rjmp	.+36     	; 0x59a0 <setup+0x146>
    597c:	69 e1       	ldi	r22, 0x19	; 25
    597e:	74 e1       	ldi	r23, 0x14	; 20
    5980:	86 ec       	ldi	r24, 0xC6	; 198
    5982:	98 e0       	ldi	r25, 0x08	; 8
    5984:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5988:	6b ee       	ldi	r22, 0xEB	; 235
    598a:	73 e1       	ldi	r23, 0x13	; 19
    598c:	86 ec       	ldi	r24, 0xC6	; 198
    598e:	98 e0       	ldi	r25, 0x08	; 8
    5990:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5994:	6d eb       	ldi	r22, 0xBD	; 189
    5996:	73 e1       	ldi	r23, 0x13	; 19
    5998:	86 ec       	ldi	r24, 0xC6	; 198
    599a:	98 e0       	ldi	r25, 0x08	; 8
    599c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    59a0:	63 ea       	ldi	r22, 0xA3	; 163
    59a2:	73 e1       	ldi	r23, 0x13	; 19
    59a4:	86 ec       	ldi	r24, 0xC6	; 198
    59a6:	98 e0       	ldi	r25, 0x08	; 8
    59a8:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    59ac:	67 e7       	ldi	r22, 0x77	; 119
    59ae:	78 e0       	ldi	r23, 0x08	; 8
    59b0:	ce 01       	movw	r24, r28
    59b2:	01 96       	adiw	r24, 0x01	; 1
    59b4:	0e 94 0f 3e 	call	0x7c1e	; 0x7c1e <_ZN13EthernetClass7localIPEv>
    59b8:	be 01       	movw	r22, r28
    59ba:	6f 5f       	subi	r22, 0xFF	; 255
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	86 ec       	ldi	r24, 0xC6	; 198
    59c0:	98 e0       	ldi	r25, 0x08	; 8
    59c2:	0e 94 ca 4f 	call	0x9f94	; 0x9f94 <_ZN5Print7printlnERK9Printable>
    59c6:	64 e7       	ldi	r22, 0x74	; 116
    59c8:	70 e0       	ldi	r23, 0x00	; 0
    59ca:	87 ef       	ldi	r24, 0xF7	; 247
    59cc:	97 e0       	ldi	r25, 0x07	; 7
    59ce:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <_ZN17EepromAccessClass13readEEPromIntEi>
    59d2:	7c 01       	movw	r14, r24
    59d4:	86 ec       	ldi	r24, 0xC6	; 198
    59d6:	98 e0       	ldi	r25, 0x08	; 8
    59d8:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    59dc:	65 e9       	ldi	r22, 0x95	; 149
    59de:	73 e1       	ldi	r23, 0x13	; 19
    59e0:	86 ec       	ldi	r24, 0xC6	; 198
    59e2:	98 e0       	ldi	r25, 0x08	; 8
    59e4:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    59e8:	4a e0       	ldi	r20, 0x0A	; 10
    59ea:	50 e0       	ldi	r21, 0x00	; 0
    59ec:	b7 01       	movw	r22, r14
    59ee:	86 ec       	ldi	r24, 0xC6	; 198
    59f0:	98 e0       	ldi	r25, 0x08	; 8
    59f2:	0e 94 cc 50 	call	0xa198	; 0xa198 <_ZN5Print7printlnEji>
    59f6:	66 e8       	ldi	r22, 0x86	; 134
    59f8:	73 e1       	ldi	r23, 0x13	; 19
    59fa:	86 ec       	ldi	r24, 0xC6	; 198
    59fc:	98 e0       	ldi	r25, 0x08	; 8
    59fe:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    5a02:	b7 01       	movw	r22, r14
    5a04:	6f 5f       	subi	r22, 0xFF	; 255
    5a06:	7f 4f       	sbci	r23, 0xFF	; 255
    5a08:	4a e0       	ldi	r20, 0x0A	; 10
    5a0a:	50 e0       	ldi	r21, 0x00	; 0
    5a0c:	86 ec       	ldi	r24, 0xC6	; 198
    5a0e:	98 e0       	ldi	r25, 0x08	; 8
    5a10:	0e 94 cc 50 	call	0xa198	; 0xa198 <_ZN5Print7printlnEji>
    5a14:	6d e6       	ldi	r22, 0x6D	; 109
    5a16:	73 e1       	ldi	r23, 0x13	; 19
    5a18:	86 ec       	ldi	r24, 0xC6	; 198
    5a1a:	98 e0       	ldi	r25, 0x08	; 8
    5a1c:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    5a20:	b7 01       	movw	r22, r14
    5a22:	6e 5f       	subi	r22, 0xFE	; 254
    5a24:	7f 4f       	sbci	r23, 0xFF	; 255
    5a26:	4a e0       	ldi	r20, 0x0A	; 10
    5a28:	50 e0       	ldi	r21, 0x00	; 0
    5a2a:	86 ec       	ldi	r24, 0xC6	; 198
    5a2c:	98 e0       	ldi	r25, 0x08	; 8
    5a2e:	0e 94 cc 50 	call	0xa198	; 0xa198 <_ZN5Print7printlnEji>
    5a32:	86 ec       	ldi	r24, 0xC6	; 198
    5a34:	98 e0       	ldi	r25, 0x08	; 8
    5a36:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    5a3a:	61 e4       	ldi	r22, 0x41	; 65
    5a3c:	73 e1       	ldi	r23, 0x13	; 19
    5a3e:	86 ec       	ldi	r24, 0xC6	; 198
    5a40:	98 e0       	ldi	r25, 0x08	; 8
    5a42:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    5a46:	40 91 85 07 	lds	r20, 0x0785
    5a4a:	50 91 86 07 	lds	r21, 0x0786
    5a4e:	60 91 87 07 	lds	r22, 0x0787
    5a52:	70 91 88 07 	lds	r23, 0x0788
    5a56:	2a e0       	ldi	r18, 0x0A	; 10
    5a58:	30 e0       	ldi	r19, 0x00	; 0
    5a5a:	86 ec       	ldi	r24, 0xC6	; 198
    5a5c:	98 e0       	ldi	r25, 0x08	; 8
    5a5e:	0e 94 e0 50 	call	0xa1c0	; 0xa1c0 <_ZN5Print7printlnEmi>
    5a62:	62 e2       	ldi	r22, 0x22	; 34
    5a64:	73 e1       	ldi	r23, 0x13	; 19
    5a66:	86 ec       	ldi	r24, 0xC6	; 198
    5a68:	98 e0       	ldi	r25, 0x08	; 8
    5a6a:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    5a6e:	40 91 89 07 	lds	r20, 0x0789
    5a72:	50 91 8a 07 	lds	r21, 0x078A
    5a76:	60 91 8b 07 	lds	r22, 0x078B
    5a7a:	70 91 8c 07 	lds	r23, 0x078C
    5a7e:	22 e0       	ldi	r18, 0x02	; 2
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	86 ec       	ldi	r24, 0xC6	; 198
    5a84:	98 e0       	ldi	r25, 0x08	; 8
    5a86:	0e 94 c8 51 	call	0xa390	; 0xa390 <_ZN5Print7printlnEdi>
    5a8a:	6d ef       	ldi	r22, 0xFD	; 253
    5a8c:	72 e1       	ldi	r23, 0x12	; 18
    5a8e:	86 ec       	ldi	r24, 0xC6	; 198
    5a90:	98 e0       	ldi	r25, 0x08	; 8
    5a92:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    5a96:	40 91 8d 07 	lds	r20, 0x078D
    5a9a:	50 91 8e 07 	lds	r21, 0x078E
    5a9e:	60 91 8f 07 	lds	r22, 0x078F
    5aa2:	70 91 90 07 	lds	r23, 0x0790
    5aa6:	22 e0       	ldi	r18, 0x02	; 2
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	86 ec       	ldi	r24, 0xC6	; 198
    5aac:	98 e0       	ldi	r25, 0x08	; 8
    5aae:	0e 94 c8 51 	call	0xa390	; 0xa390 <_ZN5Print7printlnEdi>
    5ab2:	63 ed       	ldi	r22, 0xD3	; 211
    5ab4:	72 e1       	ldi	r23, 0x12	; 18
    5ab6:	86 ec       	ldi	r24, 0xC6	; 198
    5ab8:	98 e0       	ldi	r25, 0x08	; 8
    5aba:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
  void setRPM(float f);

  double getMaxRevolutions() { return m_maxRevolutions; }
  void setMaxRevolutions(double m);

  float getMotorTimeDays() { return float(m_motor_time / (60.0*60.0*24.0)); }
    5abe:	60 91 99 07 	lds	r22, 0x0799
    5ac2:	70 91 9a 07 	lds	r23, 0x079A
    5ac6:	80 91 9b 07 	lds	r24, 0x079B
    5aca:	90 91 9c 07 	lds	r25, 0x079C
    5ace:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    5ad2:	20 e0       	ldi	r18, 0x00	; 0
    5ad4:	30 ec       	ldi	r19, 0xC0	; 192
    5ad6:	48 ea       	ldi	r20, 0xA8	; 168
    5ad8:	57 e4       	ldi	r21, 0x47	; 71
    5ada:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    5ade:	ab 01       	movw	r20, r22
    5ae0:	bc 01       	movw	r22, r24
    5ae2:	23 e0       	ldi	r18, 0x03	; 3
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	86 ec       	ldi	r24, 0xC6	; 198
    5ae8:	98 e0       	ldi	r25, 0x08	; 8
    5aea:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    5aee:	65 e2       	ldi	r22, 0x25	; 37
    5af0:	75 e0       	ldi	r23, 0x05	; 5
    5af2:	86 ec       	ldi	r24, 0xC6	; 198
    5af4:	98 e0       	ldi	r25, 0x08	; 8
    5af6:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    5afa:	68 ee       	ldi	r22, 0xE8	; 232
    5afc:	73 e0       	ldi	r23, 0x03	; 3
    5afe:	80 e0       	ldi	r24, 0x00	; 0
    5b00:	90 e0       	ldi	r25, 0x00	; 0
    5b02:	0e 94 4a 4a 	call	0x9494	; 0x9494 <delay>
    5b06:	8e e6       	ldi	r24, 0x6E	; 110
    5b08:	97 e0       	ldi	r25, 0x07	; 7
    5b0a:	9e d8       	rcall	.-3780   	; 0x4c48 <_ZN8MM3Class4initEv>
    5b0c:	60 91 85 07 	lds	r22, 0x0785
    5b10:	70 91 86 07 	lds	r23, 0x0786
    5b14:	80 91 87 07 	lds	r24, 0x0787
    5b18:	90 91 88 07 	lds	r25, 0x0788
    5b1c:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    5b20:	6b 01       	movw	r12, r22
    5b22:	7c 01       	movw	r14, r24
    5b24:	80 91 8d 07 	lds	r24, 0x078D
    5b28:	90 91 8e 07 	lds	r25, 0x078E
    5b2c:	a0 91 8f 07 	lds	r26, 0x078F
    5b30:	b0 91 90 07 	lds	r27, 0x0790
    5b34:	bc 01       	movw	r22, r24
    5b36:	cd 01       	movw	r24, r26
    5b38:	90 58       	subi	r25, 0x80	; 128
    5b3a:	a7 01       	movw	r20, r14
    5b3c:	96 01       	movw	r18, r12
    5b3e:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5b42:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    5b46:	4b 01       	movw	r8, r22
    5b48:	5c 01       	movw	r10, r24
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	40 e8       	ldi	r20, 0x80	; 128
    5b50:	5e e3       	ldi	r21, 0x3E	; 62
    5b52:	c7 01       	movw	r24, r14
    5b54:	b6 01       	movw	r22, r12
    5b56:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5b5a:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    5b5e:	95 01       	movw	r18, r10
    5b60:	84 01       	movw	r16, r8
    5b62:	06 1b       	sub	r16, r22
    5b64:	17 0b       	sbc	r17, r23
    5b66:	28 0b       	sbc	r18, r24
    5b68:	39 0b       	sbc	r19, r25
    5b6a:	b9 01       	movw	r22, r18
    5b6c:	a8 01       	movw	r20, r16
    5b6e:	8e e6       	ldi	r24, 0x6E	; 110
    5b70:	97 e0       	ldi	r25, 0x07	; 7
    5b72:	0e 94 ef 23 	call	0x47de	; 0x47de <_ZN8MM3Class23setVirtualNegativeLimitEl>
    5b76:	60 91 85 07 	lds	r22, 0x0785
    5b7a:	70 91 86 07 	lds	r23, 0x0786
    5b7e:	80 91 87 07 	lds	r24, 0x0787
    5b82:	90 91 88 07 	lds	r25, 0x0788
    5b86:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    5b8a:	6b 01       	movw	r12, r22
    5b8c:	7c 01       	movw	r14, r24
    5b8e:	20 91 8d 07 	lds	r18, 0x078D
    5b92:	30 91 8e 07 	lds	r19, 0x078E
    5b96:	40 91 8f 07 	lds	r20, 0x078F
    5b9a:	50 91 90 07 	lds	r21, 0x0790
    5b9e:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5ba2:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    5ba6:	4b 01       	movw	r8, r22
    5ba8:	5c 01       	movw	r10, r24
    5baa:	20 e0       	ldi	r18, 0x00	; 0
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	40 e8       	ldi	r20, 0x80	; 128
    5bb0:	5e e3       	ldi	r21, 0x3E	; 62
    5bb2:	c7 01       	movw	r24, r14
    5bb4:	b6 01       	movw	r22, r12
    5bb6:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    5bba:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    5bbe:	ab 01       	movw	r20, r22
    5bc0:	bc 01       	movw	r22, r24
    5bc2:	48 0d       	add	r20, r8
    5bc4:	59 1d       	adc	r21, r9
    5bc6:	6a 1d       	adc	r22, r10
    5bc8:	7b 1d       	adc	r23, r11
    5bca:	8e e6       	ldi	r24, 0x6E	; 110
    5bcc:	97 e0       	ldi	r25, 0x07	; 7
    5bce:	0e 94 35 24 	call	0x486a	; 0x486a <_ZN8MM3Class23setVirtualPositiveLimitEl>
    5bd2:	86 ec       	ldi	r24, 0xC6	; 198
    5bd4:	98 e0       	ldi	r25, 0x08	; 8
    5bd6:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    5bda:	68 ea       	ldi	r22, 0xA8	; 168
    5bdc:	72 e1       	ldi	r23, 0x12	; 18
    5bde:	86 ec       	ldi	r24, 0xC6	; 198
    5be0:	98 e0       	ldi	r25, 0x08	; 8
    5be2:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5be6:	62 ef       	ldi	r22, 0xF2	; 242

  void init();

  void readController();

  unsigned int getPTerm() { return readRegister("04"); }
    5be8:	72 e0       	ldi	r23, 0x02	; 2
    5bea:	ce 01       	movw	r24, r28
    5bec:	01 96       	adiw	r24, 0x01	; 1
    5bee:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5bf2:	be 01       	movw	r22, r28
    5bf4:	6f 5f       	subi	r22, 0xFF	; 255
    5bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf8:	8e e6       	ldi	r24, 0x6E	; 110
    5bfa:	97 e0       	ldi	r25, 0x07	; 7
    5bfc:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    5c00:	6b 01       	movw	r12, r22
    5c02:	7c 01       	movw	r14, r24
    5c04:	ce 01       	movw	r24, r28
    5c06:	01 96       	adiw	r24, 0x01	; 1
    5c08:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5c0c:	4a e0       	ldi	r20, 0x0A	; 10
    5c0e:	b6 01       	movw	r22, r12
    5c10:	ce 01       	movw	r24, r28
    5c12:	07 96       	adiw	r24, 0x07	; 7
    5c14:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    5c18:	6b e2       	ldi	r22, 0x2B	; 43
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    5c1a:	75 e0       	ldi	r23, 0x05	; 5
    5c1c:	ce 01       	movw	r24, r28
    5c1e:	01 96       	adiw	r24, 0x01	; 1
    5c20:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5c24:	be 01       	movw	r22, r28
    5c26:	69 5f       	subi	r22, 0xF9	; 249
    5c28:	7f 4f       	sbci	r23, 0xFF	; 255
    5c2a:	ce 01       	movw	r24, r28
    5c2c:	01 96       	adiw	r24, 0x01	; 1
    5c2e:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    5c32:	bc 01       	movw	r22, r24
    5c34:	86 ec       	ldi	r24, 0xC6	; 198
    5c36:	98 e0       	ldi	r25, 0x08	; 8
    5c38:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
    5c3c:	ce 01       	movw	r24, r28
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    5c3e:	01 96       	adiw	r24, 0x01	; 1
    5c40:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5c44:	ce 01       	movw	r24, r28
    5c46:	07 96       	adiw	r24, 0x07	; 7
    5c48:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5c4c:	6b ef       	ldi	r22, 0xFB	; 251
  unsigned int getITerm() { return readRegister("05"); }
    5c4e:	72 e0       	ldi	r23, 0x02	; 2
    5c50:	ce 01       	movw	r24, r28
    5c52:	01 96       	adiw	r24, 0x01	; 1
    5c54:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5c58:	be 01       	movw	r22, r28
    5c5a:	6f 5f       	subi	r22, 0xFF	; 255
    5c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5e:	8e e6       	ldi	r24, 0x6E	; 110
    5c60:	97 e0       	ldi	r25, 0x07	; 7
    5c62:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    5c66:	6b 01       	movw	r12, r22
    5c68:	7c 01       	movw	r14, r24
    5c6a:	ce 01       	movw	r24, r28
    5c6c:	01 96       	adiw	r24, 0x01	; 1
    5c6e:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5c72:	4a e0       	ldi	r20, 0x0A	; 10
    5c74:	b6 01       	movw	r22, r12
    5c76:	ce 01       	movw	r24, r28
    5c78:	07 96       	adiw	r24, 0x07	; 7
    5c7a:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    5c7e:	64 e3       	ldi	r22, 0x34	; 52
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    5c80:	75 e0       	ldi	r23, 0x05	; 5
    5c82:	ce 01       	movw	r24, r28
    5c84:	01 96       	adiw	r24, 0x01	; 1
    5c86:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5c8a:	be 01       	movw	r22, r28
    5c8c:	69 5f       	subi	r22, 0xF9	; 249
    5c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c90:	ce 01       	movw	r24, r28
    5c92:	01 96       	adiw	r24, 0x01	; 1
    5c94:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    5c98:	bc 01       	movw	r22, r24
    5c9a:	86 ec       	ldi	r24, 0xC6	; 198
    5c9c:	98 e0       	ldi	r25, 0x08	; 8
    5c9e:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
    5ca2:	ce 01       	movw	r24, r28
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    5ca4:	01 96       	adiw	r24, 0x01	; 1
    5ca6:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5caa:	ce 01       	movw	r24, r28
    5cac:	07 96       	adiw	r24, 0x07	; 7
    5cae:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5cb2:	64 e0       	ldi	r22, 0x04	; 4
  unsigned int getDTerm() { return readRegister("06"); }
    5cb4:	73 e0       	ldi	r23, 0x03	; 3
    5cb6:	ce 01       	movw	r24, r28
    5cb8:	01 96       	adiw	r24, 0x01	; 1
    5cba:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5cbe:	be 01       	movw	r22, r28
    5cc0:	6f 5f       	subi	r22, 0xFF	; 255
    5cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc4:	8e e6       	ldi	r24, 0x6E	; 110
    5cc6:	97 e0       	ldi	r25, 0x07	; 7
    5cc8:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    5ccc:	6b 01       	movw	r12, r22
    5cce:	7c 01       	movw	r14, r24
    5cd0:	ce 01       	movw	r24, r28
    5cd2:	01 96       	adiw	r24, 0x01	; 1
    5cd4:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5cd8:	4a e0       	ldi	r20, 0x0A	; 10
    5cda:	b6 01       	movw	r22, r12
    5cdc:	ce 01       	movw	r24, r28
    5cde:	07 96       	adiw	r24, 0x07	; 7
    5ce0:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    5ce4:	6d e3       	ldi	r22, 0x3D	; 61
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    5ce6:	75 e0       	ldi	r23, 0x05	; 5
    5ce8:	ce 01       	movw	r24, r28
    5cea:	01 96       	adiw	r24, 0x01	; 1
    5cec:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5cf0:	be 01       	movw	r22, r28
    5cf2:	69 5f       	subi	r22, 0xF9	; 249
    5cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf6:	ce 01       	movw	r24, r28
    5cf8:	01 96       	adiw	r24, 0x01	; 1
    5cfa:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    5cfe:	bc 01       	movw	r22, r24
    5d00:	86 ec       	ldi	r24, 0xC6	; 198
    5d02:	98 e0       	ldi	r25, 0x08	; 8
    5d04:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
    5d08:	ce 01       	movw	r24, r28
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    5d0a:	01 96       	adiw	r24, 0x01	; 1
    5d0c:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5d10:	ce 01       	movw	r24, r28
    5d12:	07 96       	adiw	r24, 0x07	; 7
    5d14:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5d18:	61 e1       	ldi	r22, 0x11	; 17
  unsigned int getPIDScalar() { return readRegister("08"); }
    5d1a:	73 e0       	ldi	r23, 0x03	; 3
    5d1c:	ce 01       	movw	r24, r28
    5d1e:	01 96       	adiw	r24, 0x01	; 1
    5d20:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5d24:	be 01       	movw	r22, r28
    5d26:	6f 5f       	subi	r22, 0xFF	; 255
    5d28:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2a:	8e e6       	ldi	r24, 0x6E	; 110
    5d2c:	97 e0       	ldi	r25, 0x07	; 7
    5d2e:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    5d32:	6b 01       	movw	r12, r22
    5d34:	7c 01       	movw	r14, r24
    5d36:	ce 01       	movw	r24, r28
    5d38:	01 96       	adiw	r24, 0x01	; 1
    5d3a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5d3e:	4a e0       	ldi	r20, 0x0A	; 10
    5d40:	b6 01       	movw	r22, r12
    5d42:	ce 01       	movw	r24, r28
    5d44:	07 96       	adiw	r24, 0x07	; 7
    5d46:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    5d4a:	66 e4       	ldi	r22, 0x46	; 70
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    5d4c:	75 e0       	ldi	r23, 0x05	; 5
    5d4e:	ce 01       	movw	r24, r28
    5d50:	01 96       	adiw	r24, 0x01	; 1
    5d52:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5d56:	be 01       	movw	r22, r28
    5d58:	69 5f       	subi	r22, 0xF9	; 249
    5d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d5c:	ce 01       	movw	r24, r28
    5d5e:	01 96       	adiw	r24, 0x01	; 1
    5d60:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    5d64:	bc 01       	movw	r22, r24
    5d66:	86 ec       	ldi	r24, 0xC6	; 198
    5d68:	98 e0       	ldi	r25, 0x08	; 8
    5d6a:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
    5d6e:	ce 01       	movw	r24, r28
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    5d70:	01 96       	adiw	r24, 0x01	; 1
    5d72:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5d76:	ce 01       	movw	r24, r28
    5d78:	07 96       	adiw	r24, 0x07	; 7
    5d7a:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5d7e:	68 e1       	ldi	r22, 0x18	; 24
  unsigned int getVFF() { return readRegister("02"); }
    5d80:	73 e0       	ldi	r23, 0x03	; 3
    5d82:	ce 01       	movw	r24, r28
    5d84:	01 96       	adiw	r24, 0x01	; 1
    5d86:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5d8a:	be 01       	movw	r22, r28
    5d8c:	6f 5f       	subi	r22, 0xFF	; 255
    5d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d90:	8e e6       	ldi	r24, 0x6E	; 110
    5d92:	97 e0       	ldi	r25, 0x07	; 7
    5d94:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <_ZN8MM3Class12readRegisterE6String>
    5d98:	6b 01       	movw	r12, r22
    5d9a:	7c 01       	movw	r14, r24
    5d9c:	ce 01       	movw	r24, r28
    5d9e:	01 96       	adiw	r24, 0x01	; 1
    5da0:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5da4:	4a e0       	ldi	r20, 0x0A	; 10
    5da6:	b6 01       	movw	r22, r12
    5da8:	ce 01       	movw	r24, r28
    5daa:	07 96       	adiw	r24, 0x07	; 7
    5dac:	0e 94 8f 53 	call	0xa71e	; 0xa71e <_ZN6StringC1Ejh>
    5db0:	62 e5       	ldi	r22, 0x52	; 82
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    5db2:	75 e0       	ldi	r23, 0x05	; 5
    5db4:	ce 01       	movw	r24, r28
    5db6:	01 96       	adiw	r24, 0x01	; 1
    5db8:	0e 94 28 53 	call	0xa650	; 0xa650 <_ZN6StringC1EPKc>
    5dbc:	be 01       	movw	r22, r28
    5dbe:	69 5f       	subi	r22, 0xF9	; 249
    5dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc2:	ce 01       	movw	r24, r28
    5dc4:	01 96       	adiw	r24, 0x01	; 1
    5dc6:	0e 94 0d 54 	call	0xa81a	; 0xa81a <_ZplRK15StringSumHelperRK6String>
    5dca:	bc 01       	movw	r22, r24
    5dcc:	86 ec       	ldi	r24, 0xC6	; 198
    5dce:	98 e0       	ldi	r25, 0x08	; 8
    5dd0:	0e 94 aa 4f 	call	0x9f54	; 0x9f54 <_ZN5Print7printlnERK6String>
    5dd4:	ce 01       	movw	r24, r28
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    5dd6:	01 96       	adiw	r24, 0x01	; 1
    5dd8:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5ddc:	ce 01       	movw	r24, r28
    5dde:	07 96       	adiw	r24, 0x07	; 7
    5de0:	0e 94 c0 52 	call	0xa580	; 0xa580 <_ZN6StringD1Ev>
    5de4:	86 ec       	ldi	r24, 0xC6	; 198
    5de6:	98 e0       	ldi	r25, 0x08	; 8
    5de8:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    5dec:	6a e6       	ldi	r22, 0x6A	; 106
    5dee:	75 e0       	ldi	r23, 0x05	; 5
    5df0:	86 ec       	ldi	r24, 0xC6	; 198
    5df2:	98 e0       	ldi	r25, 0x08	; 8
    5df4:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    5df8:	40 91 6e 07 	lds	r20, 0x076E
    5dfc:	50 91 6f 07 	lds	r21, 0x076F
    5e00:	60 91 70 07 	lds	r22, 0x0770
    5e04:	70 91 71 07 	lds	r23, 0x0771
    5e08:	22 e0       	ldi	r18, 0x02	; 2
    5e0a:	30 e0       	ldi	r19, 0x00	; 0
    5e0c:	86 ec       	ldi	r24, 0xC6	; 198
    5e0e:	98 e0       	ldi	r25, 0x08	; 8
    5e10:	0e 94 c8 51 	call	0xa390	; 0xa390 <_ZN5Print7printlnEdi>
    5e14:	86 ec       	ldi	r24, 0xC6	; 198
    5e16:	98 e0       	ldi	r25, 0x08	; 8
    5e18:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    5e1c:	60 e9       	ldi	r22, 0x90	; 144
    5e1e:	75 e0       	ldi	r23, 0x05	; 5
    5e20:	86 ec       	ldi	r24, 0xC6	; 198
    5e22:	98 e0       	ldi	r25, 0x08	; 8
    5e24:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    5e28:	60 91 b7 06 	lds	r22, 0x06B7
  char posBuf[POS_BUF_LEN];

public:
  PositionFeedbackClass();  // constructor

  float getFeedbackPeriod() { return float(m_fb_period) / 1000.0; }
    5e2c:	70 91 b8 06 	lds	r23, 0x06B8
    5e30:	80 91 b9 06 	lds	r24, 0x06B9
    5e34:	90 91 ba 06 	lds	r25, 0x06BA
    5e38:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>
    5e3c:	20 e0       	ldi	r18, 0x00	; 0
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	4a e7       	ldi	r20, 0x7A	; 122
    5e42:	54 e4       	ldi	r21, 0x44	; 68
    5e44:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    5e48:	ab 01       	movw	r20, r22
    5e4a:	bc 01       	movw	r22, r24
    5e4c:	22 e0       	ldi	r18, 0x02	; 2
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	86 ec       	ldi	r24, 0xC6	; 198
    5e52:	98 e0       	ldi	r25, 0x08	; 8
    5e54:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    5e58:	65 eb       	ldi	r22, 0xB5	; 181
    5e5a:	75 e0       	ldi	r23, 0x05	; 5
    5e5c:	86 ec       	ldi	r24, 0xC6	; 198
    5e5e:	98 e0       	ldi	r25, 0x08	; 8
    5e60:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    5e64:	86 ec       	ldi	r24, 0xC6	; 198
    5e66:	98 e0       	ldi	r25, 0x08	; 8
    5e68:	0e 94 88 4f 	call	0x9f10	; 0x9f10 <_ZN5Print7printlnEv>
    5e6c:	66 e9       	ldi	r22, 0x96	; 150
    5e6e:	72 e1       	ldi	r23, 0x12	; 18
    5e70:	86 ec       	ldi	r24, 0xC6	; 198
    5e72:	98 e0       	ldi	r25, 0x08	; 8
    5e74:	0e 94 43 4f 	call	0x9e86	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    5e78:	60 91 b3 06 	lds	r22, 0x06B3
    5e7c:	70 91 b4 06 	lds	r23, 0x06B4
    5e80:	4a e0       	ldi	r20, 0x0A	; 10
    5e82:	50 e0       	ldi	r21, 0x00	; 0
    5e84:	86 ec       	ldi	r24, 0xC6	; 198
    5e86:	98 e0       	ldi	r25, 0x08	; 8
    5e88:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    5e8c:	63 e7       	ldi	r22, 0x73	; 115
    5e8e:	72 e1       	ldi	r23, 0x12	; 18
    5e90:	86 ec       	ldi	r24, 0xC6	; 198
    5e92:	98 e0       	ldi	r25, 0x08	; 8
    5e94:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5e98:	68 e0       	ldi	r22, 0x08	; 8
    5e9a:	70 e0       	ldi	r23, 0x00	; 0
    5e9c:	88 ef       	ldi	r24, 0xF8	; 248
    5e9e:	97 e0       	ldi	r25, 0x07	; 7
    5ea0:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN19CApplicationMonitor14EnableWatchdogENS_8ETimeoutE>
    5ea4:	2c 96       	adiw	r28, 0x0c	; 12
    5ea6:	0f b6       	in	r0, 0x3f	; 63
    5ea8:	f8 94       	cli
    5eaa:	de bf       	out	0x3e, r29	; 62
    5eac:	0f be       	out	0x3f, r0	; 63
    5eae:	cd bf       	out	0x3d, r28	; 61
    5eb0:	df 91       	pop	r29
    5eb2:	cf 91       	pop	r28
    5eb4:	1f 91       	pop	r17
    5eb6:	0f 91       	pop	r16
    5eb8:	ff 90       	pop	r15
    5eba:	ef 90       	pop	r14
    5ebc:	df 90       	pop	r13
    5ebe:	cf 90       	pop	r12
    5ec0:	bf 90       	pop	r11
    5ec2:	af 90       	pop	r10
    5ec4:	9f 90       	pop	r9
    5ec6:	8f 90       	pop	r8
    5ec8:	08 95       	ret

00005eca <_Z13checkIfMovingv>:
    5eca:	cf 93       	push	r28
    5ecc:	df 93       	push	r29
    5ece:	c0 e0       	ldi	r28, 0x00	; 0
    5ed0:	d0 e0       	ldi	r29, 0x00	; 0
    5ed2:	64 e6       	ldi	r22, 0x64	; 100
    5ed4:	70 e0       	ldi	r23, 0x00	; 0
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	0e 94 4a 4a 	call	0x9494	; 0x9494 <delay>
    5ede:	cc 59       	subi	r28, 0x9C	; 156
    5ee0:	df 4f       	sbci	r29, 0xFF	; 255
    5ee2:	8e e6       	ldi	r24, 0x6E	; 110
    5ee4:	97 e0       	ldi	r25, 0x07	; 7
    5ee6:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8MM3Class14readControllerEv>
    5eea:	4a e0       	ldi	r20, 0x0A	; 10
    5eec:	50 e0       	ldi	r21, 0x00	; 0
    5eee:	be 01       	movw	r22, r28
    5ef0:	86 ec       	ldi	r24, 0xC6	; 198
    5ef2:	98 e0       	ldi	r25, 0x08	; 8
    5ef4:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    5ef8:	6f eb       	ldi	r22, 0xBF	; 191
    5efa:	75 e0       	ldi	r23, 0x05	; 5
    5efc:	86 ec       	ldi	r24, 0xC6	; 198
    5efe:	98 e0       	ldi	r25, 0x08	; 8
    5f00:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    5f04:	66 ec       	ldi	r22, 0xC6	; 198
    5f06:	75 e0       	ldi	r23, 0x05	; 5
    5f08:	86 ec       	ldi	r24, 0xC6	; 198
    5f0a:	98 e0       	ldi	r25, 0x08	; 8
    5f0c:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    5f10:	60 91 72 07 	lds	r22, 0x0772
    5f14:	70 91 73 07 	lds	r23, 0x0773
    5f18:	4a e0       	ldi	r20, 0x0A	; 10
    5f1a:	50 e0       	ldi	r21, 0x00	; 0
    5f1c:	86 ec       	ldi	r24, 0xC6	; 198
    5f1e:	98 e0       	ldi	r25, 0x08	; 8
    5f20:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <_ZN5Print7printlnEii>
    5f24:	80 91 72 07 	lds	r24, 0x0772
    5f28:	90 91 73 07 	lds	r25, 0x0773
    5f2c:	89 2b       	or	r24, r25
    5f2e:	69 f4       	brne	.+26     	; 0x5f4a <_Z13checkIfMovingv+0x80>
    5f30:	c8 32       	cpi	r28, 0x28	; 40
    5f32:	8a e0       	ldi	r24, 0x0A	; 10
    5f34:	d8 07       	cpc	r29, r24
    5f36:	69 f6       	brne	.-102    	; 0x5ed2 <_Z13checkIfMovingv+0x8>
    5f38:	8e e6       	ldi	r24, 0x6E	; 110
    5f3a:	97 e0       	ldi	r25, 0x07	; 7
    5f3c:	57 d8       	rcall	.-3922   	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    5f3e:	68 ee       	ldi	r22, 0xE8	; 232
    5f40:	7f e0       	ldi	r23, 0x0F	; 15
    5f42:	8a ed       	ldi	r24, 0xDA	; 218
    5f44:	97 e0       	ldi	r25, 0x07	; 7
    5f46:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5f4a:	88 ef       	ldi	r24, 0xF8	; 248
    5f4c:	97 e0       	ldi	r25, 0x07	; 7
    5f4e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_ZNK19CApplicationMonitor8IAmAliveEv>
    5f52:	82 e0       	ldi	r24, 0x02	; 2

    void EnableWatchdog(ETimeout Timeout);
    void DisableWatchdog();

    void IAmAlive() const;
    void SetData(uint32_t uData) { m_CrashReport.m_uData = uData; }
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	a0 e0       	ldi	r26, 0x00	; 0
    5f58:	b0 e0       	ldi	r27, 0x00	; 0
    5f5a:	80 93 ff 07 	sts	0x07FF, r24
    5f5e:	90 93 00 08 	sts	0x0800, r25
    5f62:	a0 93 01 08 	sts	0x0801, r26
    5f66:	b0 93 02 08 	sts	0x0802, r27
    5f6a:	df 91       	pop	r29
    5f6c:	cf 91       	pop	r28
    5f6e:	08 95       	ret

00005f70 <_Z13isValidNumber6String>:
    5f70:	cf 92       	push	r12
    5f72:	df 92       	push	r13
    5f74:	ef 92       	push	r14
    5f76:	ff 92       	push	r15
    5f78:	0f 93       	push	r16
    5f7a:	1f 93       	push	r17
    5f7c:	cf 93       	push	r28
    5f7e:	df 93       	push	r29
    5f80:	ec 01       	movw	r28, r24
    5f82:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <_ZN6String4trimEv>
    5f86:	d1 2c       	mov	r13, r1
    5f88:	e1 2c       	mov	r14, r1
    5f8a:	c1 2c       	mov	r12, r1
    5f8c:	f1 2c       	mov	r15, r1
    5f8e:	0d 2d       	mov	r16, r13
    5f90:	10 e0       	ldi	r17, 0x00	; 0
    5f92:	2c 81       	ldd	r18, Y+4	; 0x04
    5f94:	3d 81       	ldd	r19, Y+5	; 0x05
    5f96:	02 17       	cp	r16, r18
    5f98:	13 07       	cpc	r17, r19
    5f9a:	58 f5       	brcc	.+86     	; 0x5ff2 <_Z13isValidNumber6String+0x82>
    5f9c:	f1 10       	cpse	r15, r1
    5f9e:	2e c0       	rjmp	.+92     	; 0x5ffc <_Z13isValidNumber6String+0x8c>
    5fa0:	ee 20       	and	r14, r14
    5fa2:	61 f0       	breq	.+24     	; 0x5fbc <_Z13isValidNumber6String+0x4c>
    5fa4:	b8 01       	movw	r22, r16
    5fa6:	ce 01       	movw	r24, r28
    5fa8:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <_ZNK6String6charAtEj>


// Checks for a digit (0 through 9).
inline boolean isDigit(int c)
{
  return ( isdigit (c) == 0 ? false : true);
    5fac:	99 27       	eor	r25, r25
    5fae:	87 fd       	sbrc	r24, 7
    5fb0:	90 95       	com	r25
    5fb2:	c0 97       	sbiw	r24, 0x30	; 48
    5fb4:	0a 97       	sbiw	r24, 0x0a	; 10
    5fb6:	c8 f0       	brcs	.+50     	; 0x5fea <_Z13isValidNumber6String+0x7a>
    5fb8:	80 e0       	ldi	r24, 0x00	; 0
    5fba:	23 c0       	rjmp	.+70     	; 0x6002 <_Z13isValidNumber6String+0x92>
    5fbc:	c1 10       	cpse	r12, r1
    5fbe:	0c c0       	rjmp	.+24     	; 0x5fd8 <_Z13isValidNumber6String+0x68>
    5fc0:	b8 01       	movw	r22, r16
    5fc2:	ce 01       	movw	r24, r28
    5fc4:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <_ZNK6String6charAtEj>
    5fc8:	8b 32       	cpi	r24, 0x2B	; 43
    5fca:	a9 f0       	breq	.+42     	; 0x5ff6 <_Z13isValidNumber6String+0x86>
    5fcc:	b8 01       	movw	r22, r16
    5fce:	ce 01       	movw	r24, r28
    5fd0:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <_ZNK6String6charAtEj>
    5fd4:	8d 32       	cpi	r24, 0x2D	; 45
    5fd6:	79 f0       	breq	.+30     	; 0x5ff6 <_Z13isValidNumber6String+0x86>
    5fd8:	b8 01       	movw	r22, r16
    5fda:	ce 01       	movw	r24, r28
    5fdc:	0e 94 78 54 	call	0xa8f0	; 0xa8f0 <_ZNK6String6charAtEj>
    5fe0:	8e 32       	cpi	r24, 0x2E	; 46
    5fe2:	01 f7       	brne	.-64     	; 0x5fa4 <_Z13isValidNumber6String+0x34>
    5fe4:	ee 24       	eor	r14, r14
    5fe6:	e3 94       	inc	r14
    5fe8:	02 c0       	rjmp	.+4      	; 0x5fee <_Z13isValidNumber6String+0x7e>
    5fea:	ff 24       	eor	r15, r15
    5fec:	f3 94       	inc	r15
    5fee:	d3 94       	inc	r13
    5ff0:	ce cf       	rjmp	.-100    	; 0x5f8e <_Z13isValidNumber6String+0x1e>
    5ff2:	8f 2d       	mov	r24, r15
    5ff4:	06 c0       	rjmp	.+12     	; 0x6002 <_Z13isValidNumber6String+0x92>
    5ff6:	cc 24       	eor	r12, r12
    5ff8:	c3 94       	inc	r12
    5ffa:	f9 cf       	rjmp	.-14     	; 0x5fee <_Z13isValidNumber6String+0x7e>
    5ffc:	e1 10       	cpse	r14, r1
    5ffe:	d2 cf       	rjmp	.-92     	; 0x5fa4 <_Z13isValidNumber6String+0x34>
    6000:	eb cf       	rjmp	.-42     	; 0x5fd8 <_Z13isValidNumber6String+0x68>
    6002:	df 91       	pop	r29
    6004:	cf 91       	pop	r28
    6006:	1f 91       	pop	r17
    6008:	0f 91       	pop	r16
    600a:	ff 90       	pop	r15
    600c:	ef 90       	pop	r14
    600e:	df 90       	pop	r13
    6010:	cf 90       	pop	r12
    6012:	08 95       	ret

00006014 <_Z9saveStatev>:
    6014:	8e e6       	ldi	r24, 0x6E	; 110
    6016:	97 e0       	ldi	r25, 0x07	; 7
    6018:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8MM3Class14readControllerEv>
    601c:	20 e0       	ldi	r18, 0x00	; 0
    601e:	30 e0       	ldi	r19, 0x00	; 0
    6020:	4a e7       	ldi	r20, 0x7A	; 122
    6022:	54 e4       	ldi	r21, 0x44	; 68
    6024:	60 91 6e 07 	lds	r22, 0x076E
    6028:	70 91 6f 07 	lds	r23, 0x076F
    602c:	80 91 70 07 	lds	r24, 0x0770
    6030:	90 91 71 07 	lds	r25, 0x0771
    6034:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    6038:	0e 94 0e 56 	call	0xac1c	; 0xac1c <__fixsfsi>
    603c:	9b 01       	movw	r18, r22
    603e:	ac 01       	movw	r20, r24
    6040:	64 e8       	ldi	r22, 0x84	; 132
    6042:	70 e0       	ldi	r23, 0x00	; 0
    6044:	87 ef       	ldi	r24, 0xF7	; 247
    6046:	97 e0       	ldi	r25, 0x07	; 7
    6048:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN17EepromAccessClass15writeEEPromLongEil>
    604c:	64 e0       	ldi	r22, 0x04	; 4
    604e:	70 e0       	ldi	r23, 0x00	; 0
    6050:	80 e0       	ldi	r24, 0x00	; 0
    6052:	90 e0       	ldi	r25, 0x00	; 0
    6054:	0e 94 4a 4a 	call	0x9494	; 0x9494 <delay>
  void setMotorTimeDays(float mdays);

  unsigned long getIdleTime() { return m_idle_time; }
  void setIdleTime(unsigned long t) { m_idle_time = t; }
    6058:	10 92 91 07 	sts	0x0791, r1
    605c:	10 92 92 07 	sts	0x0792, r1
    6060:	10 92 93 07 	sts	0x0793, r1
    6064:	10 92 94 07 	sts	0x0794, r1
  void setRPM(float f);

  double getMaxRevolutions() { return m_maxRevolutions; }
  void setMaxRevolutions(double m);

  float getMotorTimeDays() { return float(m_motor_time / (60.0*60.0*24.0)); }
    6068:	60 91 99 07 	lds	r22, 0x0799
    606c:	70 91 9a 07 	lds	r23, 0x079A
    6070:	80 91 9b 07 	lds	r24, 0x079B
    6074:	90 91 9c 07 	lds	r25, 0x079C
    6078:	0e 94 3f 56 	call	0xac7e	; 0xac7e <__floatunsisf>
    607c:	20 e0       	ldi	r18, 0x00	; 0
    607e:	30 ec       	ldi	r19, 0xC0	; 192
    6080:	48 ea       	ldi	r20, 0xA8	; 168
    6082:	57 e4       	ldi	r21, 0x47	; 71
    6084:	0e 94 a6 55 	call	0xab4c	; 0xab4c <__divsf3>
    6088:	ab 01       	movw	r20, r22
    608a:	bc 01       	movw	r22, r24
    608c:	85 e8       	ldi	r24, 0x85	; 133
    608e:	97 e0       	ldi	r25, 0x07	; 7
    6090:	ce c8       	rjmp	.-3684   	; 0x522e <_ZN10MotorClass16setMotorTimeDaysEf>

00006092 <_Z7upHoursv>:
    6092:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    6096:	20 e8       	ldi	r18, 0x80	; 128
    6098:	3e ee       	ldi	r19, 0xEE	; 238
    609a:	46 e3       	ldi	r20, 0x36	; 54
    609c:	50 e0       	ldi	r21, 0x00	; 0
    609e:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    60a2:	c9 01       	movw	r24, r18
    60a4:	08 95       	ret

000060a6 <_Z9upMinutesv>:
    60a6:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    60aa:	20 e6       	ldi	r18, 0x60	; 96
    60ac:	3a ee       	ldi	r19, 0xEA	; 234
    60ae:	40 e0       	ldi	r20, 0x00	; 0
    60b0:	50 e0       	ldi	r21, 0x00	; 0
    60b2:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    60b6:	ca 01       	movw	r24, r20
    60b8:	b9 01       	movw	r22, r18
    60ba:	2c e3       	ldi	r18, 0x3C	; 60
    60bc:	30 e0       	ldi	r19, 0x00	; 0
    60be:	40 e0       	ldi	r20, 0x00	; 0
    60c0:	50 e0       	ldi	r21, 0x00	; 0
    60c2:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    60c6:	cb 01       	movw	r24, r22
    60c8:	08 95       	ret

000060ca <_Z9upSecondsv>:
    60ca:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    60ce:	28 ee       	ldi	r18, 0xE8	; 232
    60d0:	33 e0       	ldi	r19, 0x03	; 3
    60d2:	40 e0       	ldi	r20, 0x00	; 0
    60d4:	50 e0       	ldi	r21, 0x00	; 0
    60d6:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    60da:	ca 01       	movw	r24, r20
    60dc:	b9 01       	movw	r22, r18
    60de:	2c e3       	ldi	r18, 0x3C	; 60
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	40 e0       	ldi	r20, 0x00	; 0
    60e4:	50 e0       	ldi	r21, 0x00	; 0
    60e6:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    60ea:	cb 01       	movw	r24, r22
    60ec:	08 95       	ret

000060ee <loop>:
    60ee:	cf 92       	push	r12
    60f0:	df 92       	push	r13
    60f2:	ef 92       	push	r14
    60f4:	ff 92       	push	r15
    60f6:	88 ef       	ldi	r24, 0xF8	; 248
    60f8:	97 e0       	ldi	r25, 0x07	; 7
    60fa:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_ZNK19CApplicationMonitor8IAmAliveEv>
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	a0 e0       	ldi	r26, 0x00	; 0
    6104:	b0 e0       	ldi	r27, 0x00	; 0
    6106:	80 93 ff 07 	sts	0x07FF, r24
    610a:	90 93 00 08 	sts	0x0800, r25
    610e:	a0 93 01 08 	sts	0x0801, r26
    6112:	b0 93 02 08 	sts	0x0802, r27
    6116:	8d e9       	ldi	r24, 0x9D	; 157
    6118:	97 e0       	ldi	r25, 0x07	; 7
    611a:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_ZN15EthernetSupport18checkCmdConnectionEv>
    611e:	81 30       	cpi	r24, 0x01	; 1
    6120:	91 05       	cpc	r25, r1
    6122:	59 f4       	brne	.+22     	; 0x613a <loop+0x4c>
    6124:	6a e5       	ldi	r22, 0x5A	; 90
    6126:	72 e1       	ldi	r23, 0x12	; 18
    6128:	86 ec       	ldi	r24, 0xC6	; 198
    612a:	98 e0       	ldi	r25, 0x08	; 8
    612c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    6130:	69 e2       	ldi	r22, 0x29	; 41
    6132:	72 e1       	ldi	r23, 0x12	; 18
    6134:	8a ed       	ldi	r24, 0xDA	; 218
    6136:	97 e0       	ldi	r25, 0x07	; 7
    6138:	06 c0       	rjmp	.+12     	; 0x6146 <loop+0x58>
    613a:	02 97       	sbiw	r24, 0x02	; 2
    613c:	31 f4       	brne	.+12     	; 0x614a <loop+0x5c>
    613e:	6c e0       	ldi	r22, 0x0C	; 12
    6140:	72 e1       	ldi	r23, 0x12	; 18
    6142:	86 ec       	ldi	r24, 0xC6	; 198
    6144:	98 e0       	ldi	r25, 0x08	; 8
    6146:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    614a:	80 91 f5 07 	lds	r24, 0x07F5
    614e:	88 23       	and	r24, r24
    6150:	21 f0       	breq	.+8      	; 0x615a <loop+0x6c>
    6152:	8e ee       	ldi	r24, 0xEE	; 238
    6154:	96 e0       	ldi	r25, 0x06	; 6
    6156:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN17cmdProcessorClass11readCommandEv>
    615a:	8d e9       	ldi	r24, 0x9D	; 157
    615c:	97 e0       	ldi	r25, 0x07	; 7
    615e:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <_ZN15EthernetSupport21checkOutputConnectionEv>
    6162:	81 30       	cpi	r24, 0x01	; 1
    6164:	91 05       	cpc	r25, r1
    6166:	19 f4       	brne	.+6      	; 0x616e <loop+0x80>
    6168:	64 ef       	ldi	r22, 0xF4	; 244
    616a:	71 e1       	ldi	r23, 0x11	; 17
    616c:	04 c0       	rjmp	.+8      	; 0x6176 <loop+0x88>
    616e:	02 97       	sbiw	r24, 0x02	; 2
    6170:	31 f4       	brne	.+12     	; 0x617e <loop+0x90>
    6172:	68 ed       	ldi	r22, 0xD8	; 216
    6174:	71 e1       	ldi	r23, 0x11	; 17
    6176:	86 ec       	ldi	r24, 0xC6	; 198
    6178:	98 e0       	ldi	r25, 0x08	; 8
    617a:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    617e:	8d e9       	ldi	r24, 0x9D	; 157
    6180:	97 e0       	ldi	r25, 0x07	; 7
    6182:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_ZN15EthernetSupport18checkPosConnectionEv>
    6186:	81 30       	cpi	r24, 0x01	; 1
    6188:	91 05       	cpc	r25, r1
    618a:	19 f4       	brne	.+6      	; 0x6192 <loop+0xa4>
    618c:	6e eb       	ldi	r22, 0xBE	; 190
    618e:	71 e1       	ldi	r23, 0x11	; 17
    6190:	04 c0       	rjmp	.+8      	; 0x619a <loop+0xac>
    6192:	02 97       	sbiw	r24, 0x02	; 2
    6194:	31 f4       	brne	.+12     	; 0x61a2 <loop+0xb4>
    6196:	60 ea       	ldi	r22, 0xA0	; 160
    6198:	71 e1       	ldi	r23, 0x11	; 17
    619a:	86 ec       	ldi	r24, 0xC6	; 198
    619c:	98 e0       	ldi	r25, 0x08	; 8
    619e:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    61a2:	80 91 f6 07 	lds	r24, 0x07F6
    61a6:	88 23       	and	r24, r24
    61a8:	19 f0       	breq	.+6      	; 0x61b0 <loop+0xc2>
    61aa:	83 eb       	ldi	r24, 0xB3	; 179
    61ac:	96 e0       	ldi	r25, 0x06	; 6
    61ae:	db d9       	rcall	.-3146   	; 0x5566 <_ZN21PositionFeedbackClass7readPosEv>
    61b0:	80 91 c1 06 	lds	r24, 0x06C1
    61b4:	88 23       	and	r24, r24
    61b6:	31 f0       	breq	.+12     	; 0x61c4 <loop+0xd6>
    61b8:	83 eb       	ldi	r24, 0xB3	; 179
    61ba:	96 e0       	ldi	r25, 0x06	; 6
    61bc:	a5 d9       	rcall	.-3254   	; 0x5508 <_ZN21PositionFeedbackClass26haveRecentPositionFeedbackEv>
    61be:	88 23       	and	r24, r24
    61c0:	09 f4       	brne	.+2      	; 0x61c4 <loop+0xd6>
    61c2:	0e c3       	rjmp	.+1564   	; 0x67e0 <loop+0x6f2>
    61c4:	80 91 b2 06 	lds	r24, 0x06B2
    61c8:	88 23       	and	r24, r24
    61ca:	e9 f0       	breq	.+58     	; 0x6206 <loop+0x118>
    61cc:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    61d0:	c0 90 ad 06 	lds	r12, 0x06AD
    61d4:	d0 90 ae 06 	lds	r13, 0x06AE
    61d8:	e0 90 af 06 	lds	r14, 0x06AF
    61dc:	f0 90 b0 06 	lds	r15, 0x06B0
    61e0:	28 eb       	ldi	r18, 0xB8	; 184
    61e2:	c2 0e       	add	r12, r18
    61e4:	2b e0       	ldi	r18, 0x0B	; 11
    61e6:	d2 1e       	adc	r13, r18
    61e8:	e1 1c       	adc	r14, r1
    61ea:	f1 1c       	adc	r15, r1
    61ec:	c6 16       	cp	r12, r22
    61ee:	d7 06       	cpc	r13, r23
    61f0:	e8 06       	cpc	r14, r24
    61f2:	f9 06       	cpc	r15, r25
    61f4:	40 f4       	brcc	.+16     	; 0x6206 <loop+0x118>
    61f6:	20 91 ab 06 	lds	r18, 0x06AB
    61fa:	30 91 ac 06 	lds	r19, 0x06AC
    61fe:	25 30       	cpi	r18, 0x05	; 5
    6200:	31 05       	cpc	r19, r1
    6202:	0c f4       	brge	.+2      	; 0x6206 <loop+0x118>
    6204:	f8 c2       	rjmp	.+1520   	; 0x67f6 <loop+0x708>
    6206:	80 91 b1 06 	lds	r24, 0x06B1
    620a:	88 23       	and	r24, r24
    620c:	e9 f0       	breq	.+58     	; 0x6248 <loop+0x15a>
    620e:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    6212:	c0 90 ad 06 	lds	r12, 0x06AD
    6216:	d0 90 ae 06 	lds	r13, 0x06AE
    621a:	e0 90 af 06 	lds	r14, 0x06AF
    621e:	f0 90 b0 06 	lds	r15, 0x06B0
    6222:	28 eb       	ldi	r18, 0xB8	; 184
    6224:	c2 0e       	add	r12, r18
    6226:	2b e0       	ldi	r18, 0x0B	; 11
    6228:	d2 1e       	adc	r13, r18
    622a:	e1 1c       	adc	r14, r1
    622c:	f1 1c       	adc	r15, r1
    622e:	c6 16       	cp	r12, r22
    6230:	d7 06       	cpc	r13, r23
    6232:	e8 06       	cpc	r14, r24
    6234:	f9 06       	cpc	r15, r25
    6236:	40 f4       	brcc	.+16     	; 0x6248 <loop+0x15a>
    6238:	80 91 ab 06 	lds	r24, 0x06AB
    623c:	90 91 ac 06 	lds	r25, 0x06AC
    6240:	85 30       	cpi	r24, 0x05	; 5
    6242:	91 05       	cpc	r25, r1
    6244:	0c f4       	brge	.+2      	; 0x6248 <loop+0x15a>
    6246:	f2 c2       	rjmp	.+1508   	; 0x682c <loop+0x73e>
    6248:	86 e0       	ldi	r24, 0x06	; 6
    624a:	0e 94 93 4b 	call	0x9726	; 0x9726 <digitalRead>
    624e:	89 2b       	or	r24, r25
    6250:	29 f4       	brne	.+10     	; 0x625c <loop+0x16e>
    6252:	80 91 b2 06 	lds	r24, 0x06B2
    6256:	88 23       	and	r24, r24
    6258:	09 f4       	brne	.+2      	; 0x625c <loop+0x16e>
    625a:	02 c3       	rjmp	.+1540   	; 0x6860 <loop+0x772>
    625c:	86 e0       	ldi	r24, 0x06	; 6
    625e:	0e 94 93 4b 	call	0x9726	; 0x9726 <digitalRead>
    6262:	89 2b       	or	r24, r25
    6264:	21 f0       	breq	.+8      	; 0x626e <loop+0x180>
    6266:	80 91 b2 06 	lds	r24, 0x06B2
    626a:	81 11       	cpse	r24, r1
    626c:	37 c3       	rjmp	.+1646   	; 0x68dc <loop+0x7ee>
    626e:	85 e0       	ldi	r24, 0x05	; 5
    6270:	0e 94 93 4b 	call	0x9726	; 0x9726 <digitalRead>
    6274:	89 2b       	or	r24, r25
    6276:	29 f4       	brne	.+10     	; 0x6282 <loop+0x194>
    6278:	80 91 b1 06 	lds	r24, 0x06B1
    627c:	88 23       	and	r24, r24
    627e:	09 f4       	brne	.+2      	; 0x6282 <loop+0x194>
    6280:	3a c3       	rjmp	.+1652   	; 0x68f6 <loop+0x808>
    6282:	85 e0       	ldi	r24, 0x05	; 5
    6284:	0e 94 93 4b 	call	0x9726	; 0x9726 <digitalRead>
    6288:	89 2b       	or	r24, r25
    628a:	21 f0       	breq	.+8      	; 0x6294 <loop+0x1a6>
    628c:	80 91 b1 06 	lds	r24, 0x06B1
    6290:	81 11       	cpse	r24, r1
    6292:	6f c3       	rjmp	.+1758   	; 0x6972 <loop+0x884>
    6294:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    6298:	c0 90 a3 06 	lds	r12, 0x06A3
    629c:	d0 90 a4 06 	lds	r13, 0x06A4
    62a0:	e0 90 a5 06 	lds	r14, 0x06A5
    62a4:	f0 90 a6 06 	lds	r15, 0x06A6
    62a8:	6c 19       	sub	r22, r12
    62aa:	7d 09       	sbc	r23, r13
    62ac:	8e 09       	sbc	r24, r14
    62ae:	9f 09       	sbc	r25, r15
    62b0:	97 fd       	sbrc	r25, 7
    62b2:	8c c2       	rjmp	.+1304   	; 0x67cc <loop+0x6de>
    62b4:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    62b8:	68 51       	subi	r22, 0x18	; 24
    62ba:	7c 4f       	sbci	r23, 0xFC	; 252
    62bc:	8f 4f       	sbci	r24, 0xFF	; 255
    62be:	9f 4f       	sbci	r25, 0xFF	; 255
    62c0:	60 93 a3 06 	sts	0x06A3, r22
    62c4:	70 93 a4 06 	sts	0x06A4, r23
    62c8:	80 93 a5 06 	sts	0x06A5, r24
    62cc:	90 93 a6 06 	sts	0x06A6, r25
    62d0:	8e e6       	ldi	r24, 0x6E	; 110
    62d2:	97 e0       	ldi	r25, 0x07	; 7
    62d4:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <_ZN8MM3Class14readControllerEv>
    62d8:	80 91 84 07 	lds	r24, 0x0784
    62dc:	81 11       	cpse	r24, r1
    62de:	12 c0       	rjmp	.+36     	; 0x6304 <loop+0x216>
    62e0:	80 91 a1 06 	lds	r24, 0x06A1
    62e4:	90 91 a2 06 	lds	r25, 0x06A2
    62e8:	89 2b       	or	r24, r25
    62ea:	39 f4       	brne	.+14     	; 0x62fa <loop+0x20c>
    62ec:	80 91 72 07 	lds	r24, 0x0772
    62f0:	90 91 73 07 	lds	r25, 0x0773
    62f4:	89 2b       	or	r24, r25
    62f6:	09 f4       	brne	.+2      	; 0x62fa <loop+0x20c>
    62f8:	49 c3       	rjmp	.+1682   	; 0x698c <loop+0x89e>
    62fa:	80 91 72 07 	lds	r24, 0x0772
    62fe:	90 91 73 07 	lds	r25, 0x0773
    6302:	02 c0       	rjmp	.+4      	; 0x6308 <loop+0x21a>
    6304:	8f ef       	ldi	r24, 0xFF	; 255
    6306:	9f ef       	ldi	r25, 0xFF	; 255
    6308:	90 93 a2 06 	sts	0x06A2, r25
    630c:	80 93 a1 06 	sts	0x06A1, r24
    6310:	80 91 76 07 	lds	r24, 0x0776
  int getCurrSpd() { return m_currSpd; }
  int getCurrAmps() { return m_currAmps; }

  bool isStopped() { return m_stopped; }

  bool isNoRaise()     { return m_currStatus & NO_RAISE; }
    6314:	80 ff       	sbrs	r24, 0
    6316:	06 c0       	rjmp	.+12     	; 0x6324 <loop+0x236>
    6318:	80 91 72 07 	lds	r24, 0x0772
    631c:	90 91 73 07 	lds	r25, 0x0773
    6320:	97 fd       	sbrc	r25, 7
    6322:	39 c3       	rjmp	.+1650   	; 0x6996 <loop+0x8a8>
    6324:	80 91 76 07 	lds	r24, 0x0776
  bool isNoLower()     { return m_currStatus & NO_LOWER; }
    6328:	81 ff       	sbrs	r24, 1
    632a:	08 c0       	rjmp	.+16     	; 0x633c <loop+0x24e>
    632c:	80 91 72 07 	lds	r24, 0x0772
    6330:	90 91 73 07 	lds	r25, 0x0773
    6334:	18 16       	cp	r1, r24
    6336:	19 06       	cpc	r1, r25
    6338:	0c f4       	brge	.+2      	; 0x633c <loop+0x24e>
    633a:	38 c3       	rjmp	.+1648   	; 0x69ac <loop+0x8be>
    633c:	80 91 76 07 	lds	r24, 0x0776
  bool isBrake()       { return m_currStatus & BRAKE;    }
    6340:	82 ff       	sbrs	r24, 2
    6342:	07 c0       	rjmp	.+14     	; 0x6352 <loop+0x264>
    6344:	80 91 72 07 	lds	r24, 0x0772
    6348:	90 91 73 07 	lds	r25, 0x0773
    634c:	89 2b       	or	r24, r25
    634e:	09 f0       	breq	.+2      	; 0x6352 <loop+0x264>
    6350:	38 c3       	rjmp	.+1648   	; 0x69c2 <loop+0x8d4>
    6352:	80 91 76 07 	lds	r24, 0x0776
  bool isOverCurrent() { return m_currStatus & OVER_CURRENT; }
    6356:	87 ff       	sbrs	r24, 7
    6358:	0a c0       	rjmp	.+20     	; 0x636e <loop+0x280>
    635a:	8e e6       	ldi	r24, 0x6E	; 110
    635c:	97 e0       	ldi	r25, 0x07	; 7
    635e:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    6362:	61 e9       	ldi	r22, 0x91	; 145
    6364:	70 e1       	ldi	r23, 0x10	; 16
    6366:	8a ed       	ldi	r24, 0xDA	; 218
    6368:	97 e0       	ldi	r25, 0x07	; 7
    636a:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    636e:	80 91 76 07 	lds	r24, 0x0776
  bool isOverTemp()    { return m_currStatus & OVER_TEMP; }
    6372:	90 91 77 07 	lds	r25, 0x0777
    6376:	92 ff       	sbrs	r25, 2
    6378:	0a c0       	rjmp	.+20     	; 0x638e <loop+0x2a0>
    637a:	8e e6       	ldi	r24, 0x6E	; 110
    637c:	97 e0       	ldi	r25, 0x07	; 7
    637e:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    6382:	60 e7       	ldi	r22, 0x70	; 112
    6384:	70 e1       	ldi	r23, 0x10	; 16
    6386:	8a ed       	ldi	r24, 0xDA	; 218
    6388:	97 e0       	ldi	r25, 0x07	; 7
    638a:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    638e:	80 91 72 07 	lds	r24, 0x0772
    6392:	90 91 73 07 	lds	r25, 0x0773
    6396:	89 2b       	or	r24, r25
    6398:	09 f4       	brne	.+2      	; 0x639c <loop+0x2ae>
    639a:	9b c0       	rjmp	.+310    	; 0x64d2 <loop+0x3e4>
    639c:	c0 90 6e 07 	lds	r12, 0x076E
  void setDTerm(unsigned int n);
  void setPIDScalar(unsigned int n);
  void setVFF(unsigned int n);
  void storeTuning();

  double getCurrPos() { return m_currPos; }
    63a0:	d0 90 6f 07 	lds	r13, 0x076F
    63a4:	e0 90 70 07 	lds	r14, 0x0770
    63a8:	f0 90 71 07 	lds	r15, 0x0771
    63ac:	20 e0       	ldi	r18, 0x00	; 0
    63ae:	30 e0       	ldi	r19, 0x00	; 0
    63b0:	a9 01       	movw	r20, r18
    63b2:	c7 01       	movw	r24, r14
    63b4:	b6 01       	movw	r22, r12
    63b6:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    63ba:	18 16       	cp	r1, r24
    63bc:	24 f0       	brlt	.+8      	; 0x63c6 <loop+0x2d8>
    63be:	c7 01       	movw	r24, r14
    63c0:	b6 01       	movw	r22, r12
    63c2:	90 58       	subi	r25, 0x80	; 128
    63c4:	02 c0       	rjmp	.+4      	; 0x63ca <loop+0x2dc>
    63c6:	c7 01       	movw	r24, r14
    63c8:	b6 01       	movw	r22, r12
    63ca:	20 91 8d 07 	lds	r18, 0x078D
    63ce:	30 91 8e 07 	lds	r19, 0x078E
    63d2:	40 91 8f 07 	lds	r20, 0x078F
    63d6:	50 91 90 07 	lds	r21, 0x0790
    63da:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    63de:	18 16       	cp	r1, r24
    63e0:	0c f0       	brlt	.+2      	; 0x63e4 <loop+0x2f6>
    63e2:	77 c0       	rjmp	.+238    	; 0x64d2 <loop+0x3e4>
    63e4:	62 ef       	ldi	r22, 0xF2	; 242
    63e6:	75 e0       	ldi	r23, 0x05	; 5
    63e8:	86 ec       	ldi	r24, 0xC6	; 198
    63ea:	98 e0       	ldi	r25, 0x08	; 8
    63ec:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    63f0:	c0 90 6e 07 	lds	r12, 0x076E
    63f4:	d0 90 6f 07 	lds	r13, 0x076F
    63f8:	e0 90 70 07 	lds	r14, 0x0770
    63fc:	f0 90 71 07 	lds	r15, 0x0771
    6400:	20 e0       	ldi	r18, 0x00	; 0
    6402:	30 e0       	ldi	r19, 0x00	; 0
    6404:	a9 01       	movw	r20, r18
    6406:	c7 01       	movw	r24, r14
    6408:	b6 01       	movw	r22, r12
    640a:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    640e:	18 16       	cp	r1, r24
    6410:	0c f4       	brge	.+2      	; 0x6414 <loop+0x326>
    6412:	e2 c2       	rjmp	.+1476   	; 0x69d8 <loop+0x8ea>
    6414:	b7 01       	movw	r22, r14
    6416:	a6 01       	movw	r20, r12
    6418:	70 58       	subi	r23, 0x80	; 128
    641a:	22 e0       	ldi	r18, 0x02	; 2
    641c:	30 e0       	ldi	r19, 0x00	; 0
    641e:	86 ec       	ldi	r24, 0xC6	; 198
    6420:	98 e0       	ldi	r25, 0x08	; 8
    6422:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    6426:	68 ee       	ldi	r22, 0xE8	; 232
    6428:	75 e0       	ldi	r23, 0x05	; 5
    642a:	86 ec       	ldi	r24, 0xC6	; 198
    642c:	98 e0       	ldi	r25, 0x08	; 8
    642e:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6432:	40 91 8d 07 	lds	r20, 0x078D
    6436:	50 91 8e 07 	lds	r21, 0x078E
    643a:	60 91 8f 07 	lds	r22, 0x078F
    643e:	70 91 90 07 	lds	r23, 0x0790
    6442:	22 e0       	ldi	r18, 0x02	; 2
    6444:	30 e0       	ldi	r19, 0x00	; 0
    6446:	86 ec       	ldi	r24, 0xC6	; 198
    6448:	98 e0       	ldi	r25, 0x08	; 8
    644a:	0e 94 c8 51 	call	0xa390	; 0xa390 <_ZN5Print7printlnEdi>
    644e:	8e e6       	ldi	r24, 0x6E	; 110
    6450:	97 e0       	ldi	r25, 0x07	; 7
    6452:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    6456:	6e e3       	ldi	r22, 0x3E	; 62
    6458:	70 e1       	ldi	r23, 0x10	; 16
    645a:	8a ed       	ldi	r24, 0xDA	; 218
    645c:	97 e0       	ldi	r25, 0x07	; 7
    645e:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    6462:	64 e6       	ldi	r22, 0x64	; 100
    6464:	70 e0       	ldi	r23, 0x00	; 0
    6466:	8e e6       	ldi	r24, 0x6E	; 110
    6468:	97 e0       	ldi	r25, 0x07	; 7
    646a:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
    646e:	20 e0       	ldi	r18, 0x00	; 0
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	a9 01       	movw	r20, r18
    6474:	60 91 6e 07 	lds	r22, 0x076E
    6478:	70 91 6f 07 	lds	r23, 0x076F
    647c:	80 91 70 07 	lds	r24, 0x0770
    6480:	90 91 71 07 	lds	r25, 0x0771
    6484:	0e 94 f1 56 	call	0xade2	; 0xade2 <__gesf2>
    6488:	2a e0       	ldi	r18, 0x0A	; 10
    648a:	37 ed       	ldi	r19, 0xD7	; 215
    648c:	43 e2       	ldi	r20, 0x23	; 35
    648e:	5c e3       	ldi	r21, 0x3C	; 60
    6490:	18 16       	cp	r1, r24
    6492:	0c f0       	brlt	.+2      	; 0x6496 <loop+0x3a8>
    6494:	a4 c2       	rjmp	.+1352   	; 0x69de <loop+0x8f0>
    6496:	60 91 8d 07 	lds	r22, 0x078D
    649a:	70 91 8e 07 	lds	r23, 0x078E
    649e:	80 91 8f 07 	lds	r24, 0x078F
    64a2:	90 91 90 07 	lds	r25, 0x0790
    64a6:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <__subsf3>
    64aa:	60 93 a7 06 	sts	0x06A7, r22
    64ae:	70 93 a8 06 	sts	0x06A8, r23
    64b2:	80 93 a9 06 	sts	0x06A9, r24
    64b6:	90 93 aa 06 	sts	0x06AA, r25
    64ba:	40 91 a7 06 	lds	r20, 0x06A7
    64be:	50 91 a8 06 	lds	r21, 0x06A8
    64c2:	60 91 a9 06 	lds	r22, 0x06A9
    64c6:	70 91 aa 06 	lds	r23, 0x06AA
    64ca:	8e e6       	ldi	r24, 0x6E	; 110
    64cc:	97 e0       	ldi	r25, 0x07	; 7
    64ce:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <_ZN8MM3Class9moveToPosEd>
    64d2:	df dd       	rcall	.-1090   	; 0x6092 <_Z7upHoursv>
    64d4:	4a e0       	ldi	r20, 0x0A	; 10
    64d6:	50 e0       	ldi	r21, 0x00	; 0
    64d8:	bc 01       	movw	r22, r24
    64da:	86 ec       	ldi	r24, 0xC6	; 198
    64dc:	98 e0       	ldi	r25, 0x08	; 8
    64de:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    64e2:	6c ea       	ldi	r22, 0xAC	; 172
    64e4:	73 e0       	ldi	r23, 0x03	; 3
    64e6:	86 ec       	ldi	r24, 0xC6	; 198
    64e8:	98 e0       	ldi	r25, 0x08	; 8
    64ea:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    64ee:	db dd       	rcall	.-1098   	; 0x60a6 <_Z9upMinutesv>
    64f0:	4a e0       	ldi	r20, 0x0A	; 10
    64f2:	50 e0       	ldi	r21, 0x00	; 0
    64f4:	bc 01       	movw	r22, r24
    64f6:	86 ec       	ldi	r24, 0xC6	; 198
    64f8:	98 e0       	ldi	r25, 0x08	; 8
    64fa:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    64fe:	6c ea       	ldi	r22, 0xAC	; 172
    6500:	73 e0       	ldi	r23, 0x03	; 3
    6502:	86 ec       	ldi	r24, 0xC6	; 198
    6504:	98 e0       	ldi	r25, 0x08	; 8
    6506:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    650a:	df dd       	rcall	.-1090   	; 0x60ca <_Z9upSecondsv>
    650c:	4a e0       	ldi	r20, 0x0A	; 10
    650e:	50 e0       	ldi	r21, 0x00	; 0
    6510:	bc 01       	movw	r22, r24
    6512:	86 ec       	ldi	r24, 0xC6	; 198
    6514:	98 e0       	ldi	r25, 0x08	; 8
    6516:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    651a:	6c ea       	ldi	r22, 0xAC	; 172
    651c:	73 e0       	ldi	r23, 0x03	; 3
    651e:	86 ec       	ldi	r24, 0xC6	; 198
    6520:	98 e0       	ldi	r25, 0x08	; 8
    6522:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6526:	40 91 6e 07 	lds	r20, 0x076E
    652a:	50 91 6f 07 	lds	r21, 0x076F
    652e:	60 91 70 07 	lds	r22, 0x0770
    6532:	70 91 71 07 	lds	r23, 0x0771
    6536:	22 e0       	ldi	r18, 0x02	; 2
    6538:	30 e0       	ldi	r19, 0x00	; 0
    653a:	86 ec       	ldi	r24, 0xC6	; 198
    653c:	98 e0       	ldi	r25, 0x08	; 8
    653e:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    6542:	6c ea       	ldi	r22, 0xAC	; 172
    6544:	73 e0       	ldi	r23, 0x03	; 3
    6546:	86 ec       	ldi	r24, 0xC6	; 198
    6548:	98 e0       	ldi	r25, 0x08	; 8
    654a:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    654e:	60 91 72 07 	lds	r22, 0x0772
    6552:	70 91 73 07 	lds	r23, 0x0773
    6556:	4a e0       	ldi	r20, 0x0A	; 10
    6558:	50 e0       	ldi	r21, 0x00	; 0
    655a:	86 ec       	ldi	r24, 0xC6	; 198
    655c:	98 e0       	ldi	r25, 0x08	; 8
    655e:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    6562:	6c ea       	ldi	r22, 0xAC	; 172
    6564:	73 e0       	ldi	r23, 0x03	; 3
    6566:	86 ec       	ldi	r24, 0xC6	; 198
    6568:	98 e0       	ldi	r25, 0x08	; 8
    656a:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    656e:	60 91 74 07 	lds	r22, 0x0774
    6572:	70 91 75 07 	lds	r23, 0x0775
    6576:	88 27       	eor	r24, r24
    6578:	77 fd       	sbrc	r23, 7
    657a:	80 95       	com	r24
    657c:	98 2f       	mov	r25, r24
    657e:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>
    6582:	2a e0       	ldi	r18, 0x0A	; 10
    6584:	37 ed       	ldi	r19, 0xD7	; 215
    6586:	43 ea       	ldi	r20, 0xA3	; 163
    6588:	5c e3       	ldi	r21, 0x3C	; 60
    658a:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    658e:	ab 01       	movw	r20, r22
    6590:	bc 01       	movw	r22, r24
    6592:	22 e0       	ldi	r18, 0x02	; 2
    6594:	30 e0       	ldi	r19, 0x00	; 0
    6596:	86 ec       	ldi	r24, 0xC6	; 198
    6598:	98 e0       	ldi	r25, 0x08	; 8
    659a:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    659e:	6c ea       	ldi	r22, 0xAC	; 172
    65a0:	73 e0       	ldi	r23, 0x03	; 3
    65a2:	86 ec       	ldi	r24, 0xC6	; 198
    65a4:	98 e0       	ldi	r25, 0x08	; 8
    65a6:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    65aa:	60 91 76 07 	lds	r22, 0x0776
    65ae:	70 91 77 07 	lds	r23, 0x0777
    65b2:	61 70       	andi	r22, 0x01	; 1
  int getCurrSpd() { return m_currSpd; }
  int getCurrAmps() { return m_currAmps; }

  bool isStopped() { return m_stopped; }

  bool isNoRaise()     { return m_currStatus & NO_RAISE; }
    65b4:	77 27       	eor	r23, r23
    65b6:	4a e0       	ldi	r20, 0x0A	; 10
    65b8:	50 e0       	ldi	r21, 0x00	; 0
    65ba:	86 ec       	ldi	r24, 0xC6	; 198
    65bc:	98 e0       	ldi	r25, 0x08	; 8
    65be:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    65c2:	6c ea       	ldi	r22, 0xAC	; 172
    65c4:	73 e0       	ldi	r23, 0x03	; 3
    65c6:	86 ec       	ldi	r24, 0xC6	; 198
    65c8:	98 e0       	ldi	r25, 0x08	; 8
    65ca:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    65ce:	60 91 76 07 	lds	r22, 0x0776
    65d2:	66 95       	lsr	r22
    65d4:	61 70       	andi	r22, 0x01	; 1
    65d6:	4a e0       	ldi	r20, 0x0A	; 10
  bool isNoLower()     { return m_currStatus & NO_LOWER; }
    65d8:	50 e0       	ldi	r21, 0x00	; 0
    65da:	70 e0       	ldi	r23, 0x00	; 0
    65dc:	86 ec       	ldi	r24, 0xC6	; 198
    65de:	98 e0       	ldi	r25, 0x08	; 8
    65e0:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    65e4:	6c ea       	ldi	r22, 0xAC	; 172
    65e6:	73 e0       	ldi	r23, 0x03	; 3
    65e8:	86 ec       	ldi	r24, 0xC6	; 198
    65ea:	98 e0       	ldi	r25, 0x08	; 8
    65ec:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    65f0:	60 91 76 07 	lds	r22, 0x0776
    65f4:	62 fb       	bst	r22, 2
    65f6:	66 27       	eor	r22, r22
    65f8:	60 f9       	bld	r22, 0
  bool isBrake()       { return m_currStatus & BRAKE;    }
    65fa:	4a e0       	ldi	r20, 0x0A	; 10
    65fc:	50 e0       	ldi	r21, 0x00	; 0
    65fe:	70 e0       	ldi	r23, 0x00	; 0
    6600:	86 ec       	ldi	r24, 0xC6	; 198
    6602:	98 e0       	ldi	r25, 0x08	; 8
    6604:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    6608:	6c ea       	ldi	r22, 0xAC	; 172
    660a:	73 e0       	ldi	r23, 0x03	; 3
    660c:	86 ec       	ldi	r24, 0xC6	; 198
    660e:	98 e0       	ldi	r25, 0x08	; 8
    6610:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6614:	60 91 76 07 	lds	r22, 0x0776
    6618:	67 fb       	bst	r22, 7
    661a:	66 27       	eor	r22, r22
    661c:	60 f9       	bld	r22, 0
  bool isOverCurrent() { return m_currStatus & OVER_CURRENT; }
    661e:	4a e0       	ldi	r20, 0x0A	; 10
    6620:	50 e0       	ldi	r21, 0x00	; 0
    6622:	70 e0       	ldi	r23, 0x00	; 0
    6624:	86 ec       	ldi	r24, 0xC6	; 198
    6626:	98 e0       	ldi	r25, 0x08	; 8
    6628:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    662c:	6c ea       	ldi	r22, 0xAC	; 172
    662e:	73 e0       	ldi	r23, 0x03	; 3
    6630:	86 ec       	ldi	r24, 0xC6	; 198
    6632:	98 e0       	ldi	r25, 0x08	; 8
    6634:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6638:	80 91 77 07 	lds	r24, 0x0777
    663c:	68 2f       	mov	r22, r24
    663e:	66 95       	lsr	r22
    6640:	66 95       	lsr	r22
  bool isOverTemp()    { return m_currStatus & OVER_TEMP; }
    6642:	70 e0       	ldi	r23, 0x00	; 0
    6644:	61 70       	andi	r22, 0x01	; 1
    6646:	77 27       	eor	r23, r23
    6648:	4a e0       	ldi	r20, 0x0A	; 10
    664a:	50 e0       	ldi	r21, 0x00	; 0
    664c:	86 ec       	ldi	r24, 0xC6	; 198
    664e:	98 e0       	ldi	r25, 0x08	; 8
    6650:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <_ZN5Print7printlnEii>
    6654:	80 91 f4 07 	lds	r24, 0x07F4
    6658:	88 23       	and	r24, r24
    665a:	09 f4       	brne	.+2      	; 0x665e <loop+0x570>
    665c:	97 c0       	rjmp	.+302    	; 0x678c <loop+0x69e>
    665e:	40 91 6e 07 	lds	r20, 0x076E
    6662:	50 91 6f 07 	lds	r21, 0x076F
    6666:	60 91 70 07 	lds	r22, 0x0770
    666a:	70 91 71 07 	lds	r23, 0x0771
    666e:	22 e0       	ldi	r18, 0x02	; 2
    6670:	30 e0       	ldi	r19, 0x00	; 0
    6672:	8d ec       	ldi	r24, 0xCD	; 205
    6674:	97 e0       	ldi	r25, 0x07	; 7
    6676:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    667a:	60 ef       	ldi	r22, 0xF0	; 240
    667c:	75 e0       	ldi	r23, 0x05	; 5
    667e:	8d ec       	ldi	r24, 0xCD	; 205
    6680:	97 e0       	ldi	r25, 0x07	; 7
    6682:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6686:	60 91 72 07 	lds	r22, 0x0772
    668a:	70 91 73 07 	lds	r23, 0x0773
    668e:	4a e0       	ldi	r20, 0x0A	; 10
    6690:	50 e0       	ldi	r21, 0x00	; 0
    6692:	8d ec       	ldi	r24, 0xCD	; 205
    6694:	97 e0       	ldi	r25, 0x07	; 7
    6696:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    669a:	60 ef       	ldi	r22, 0xF0	; 240
    669c:	75 e0       	ldi	r23, 0x05	; 5
    669e:	8d ec       	ldi	r24, 0xCD	; 205
    66a0:	97 e0       	ldi	r25, 0x07	; 7
    66a2:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    66a6:	60 91 74 07 	lds	r22, 0x0774
    66aa:	70 91 75 07 	lds	r23, 0x0775
    66ae:	88 27       	eor	r24, r24
    66b0:	77 fd       	sbrc	r23, 7
    66b2:	80 95       	com	r24
    66b4:	98 2f       	mov	r25, r24
    66b6:	0e 94 41 56 	call	0xac82	; 0xac82 <__floatsisf>
    66ba:	2a e0       	ldi	r18, 0x0A	; 10
    66bc:	37 ed       	ldi	r19, 0xD7	; 215
    66be:	43 ea       	ldi	r20, 0xA3	; 163
    66c0:	5c e3       	ldi	r21, 0x3C	; 60
    66c2:	0e 94 f5 56 	call	0xadea	; 0xadea <__mulsf3>
    66c6:	ab 01       	movw	r20, r22
    66c8:	bc 01       	movw	r22, r24
    66ca:	22 e0       	ldi	r18, 0x02	; 2
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	8d ec       	ldi	r24, 0xCD	; 205
    66d0:	97 e0       	ldi	r25, 0x07	; 7
    66d2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <_ZN5Print5printEdi>
    66d6:	60 ef       	ldi	r22, 0xF0	; 240
    66d8:	75 e0       	ldi	r23, 0x05	; 5
    66da:	8d ec       	ldi	r24, 0xCD	; 205
    66dc:	97 e0       	ldi	r25, 0x07	; 7
    66de:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    66e2:	60 91 76 07 	lds	r22, 0x0776
    66e6:	70 91 77 07 	lds	r23, 0x0777
    66ea:	61 70       	andi	r22, 0x01	; 1
  int getCurrSpd() { return m_currSpd; }
  int getCurrAmps() { return m_currAmps; }

  bool isStopped() { return m_stopped; }

  bool isNoRaise()     { return m_currStatus & NO_RAISE; }
    66ec:	77 27       	eor	r23, r23
    66ee:	4a e0       	ldi	r20, 0x0A	; 10
    66f0:	50 e0       	ldi	r21, 0x00	; 0
    66f2:	8d ec       	ldi	r24, 0xCD	; 205
    66f4:	97 e0       	ldi	r25, 0x07	; 7
    66f6:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    66fa:	60 ef       	ldi	r22, 0xF0	; 240
    66fc:	75 e0       	ldi	r23, 0x05	; 5
    66fe:	8d ec       	ldi	r24, 0xCD	; 205
    6700:	97 e0       	ldi	r25, 0x07	; 7
    6702:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6706:	60 91 76 07 	lds	r22, 0x0776
    670a:	66 95       	lsr	r22
    670c:	61 70       	andi	r22, 0x01	; 1
    670e:	4a e0       	ldi	r20, 0x0A	; 10
  bool isNoLower()     { return m_currStatus & NO_LOWER; }
    6710:	50 e0       	ldi	r21, 0x00	; 0
    6712:	70 e0       	ldi	r23, 0x00	; 0
    6714:	8d ec       	ldi	r24, 0xCD	; 205
    6716:	97 e0       	ldi	r25, 0x07	; 7
    6718:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    671c:	60 ef       	ldi	r22, 0xF0	; 240
    671e:	75 e0       	ldi	r23, 0x05	; 5
    6720:	8d ec       	ldi	r24, 0xCD	; 205
    6722:	97 e0       	ldi	r25, 0x07	; 7
    6724:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6728:	60 91 76 07 	lds	r22, 0x0776
    672c:	62 fb       	bst	r22, 2
    672e:	66 27       	eor	r22, r22
    6730:	60 f9       	bld	r22, 0
  bool isBrake()       { return m_currStatus & BRAKE;    }
    6732:	4a e0       	ldi	r20, 0x0A	; 10
    6734:	50 e0       	ldi	r21, 0x00	; 0
    6736:	70 e0       	ldi	r23, 0x00	; 0
    6738:	8d ec       	ldi	r24, 0xCD	; 205
    673a:	97 e0       	ldi	r25, 0x07	; 7
    673c:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    6740:	60 ef       	ldi	r22, 0xF0	; 240
    6742:	75 e0       	ldi	r23, 0x05	; 5
    6744:	8d ec       	ldi	r24, 0xCD	; 205
    6746:	97 e0       	ldi	r25, 0x07	; 7
    6748:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    674c:	60 91 76 07 	lds	r22, 0x0776
    6750:	67 fb       	bst	r22, 7
    6752:	66 27       	eor	r22, r22
    6754:	60 f9       	bld	r22, 0
  bool isOverCurrent() { return m_currStatus & OVER_CURRENT; }
    6756:	4a e0       	ldi	r20, 0x0A	; 10
    6758:	50 e0       	ldi	r21, 0x00	; 0
    675a:	70 e0       	ldi	r23, 0x00	; 0
    675c:	8d ec       	ldi	r24, 0xCD	; 205
    675e:	97 e0       	ldi	r25, 0x07	; 7
    6760:	0e 94 78 50 	call	0xa0f0	; 0xa0f0 <_ZN5Print5printEii>
    6764:	60 ef       	ldi	r22, 0xF0	; 240
    6766:	75 e0       	ldi	r23, 0x05	; 5
    6768:	8d ec       	ldi	r24, 0xCD	; 205
    676a:	97 e0       	ldi	r25, 0x07	; 7
    676c:	0e 94 76 4f 	call	0x9eec	; 0x9eec <_ZN5Print5printEPKc>
    6770:	80 91 77 07 	lds	r24, 0x0777
    6774:	68 2f       	mov	r22, r24
    6776:	66 95       	lsr	r22
    6778:	66 95       	lsr	r22
  bool isOverTemp()    { return m_currStatus & OVER_TEMP; }
    677a:	70 e0       	ldi	r23, 0x00	; 0
    677c:	61 70       	andi	r22, 0x01	; 1
    677e:	77 27       	eor	r23, r23
    6780:	4a e0       	ldi	r20, 0x0A	; 10
    6782:	50 e0       	ldi	r21, 0x00	; 0
    6784:	8d ec       	ldi	r24, 0xCD	; 205
    6786:	97 e0       	ldi	r25, 0x07	; 7
    6788:	0e 94 7f 50 	call	0xa0fe	; 0xa0fe <_ZN5Print7printlnEii>
    678c:	80 91 91 07 	lds	r24, 0x0791
    6790:	90 91 92 07 	lds	r25, 0x0792
    6794:	a0 91 93 07 	lds	r26, 0x0793
    6798:	b0 91 94 07 	lds	r27, 0x0794
    679c:	89 2b       	or	r24, r25
    679e:	8a 2b       	or	r24, r26
    67a0:	8b 2b       	or	r24, r27
    67a2:	a1 f0       	breq	.+40     	; 0x67cc <loop+0x6de>
    67a4:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    67a8:	c0 90 91 07 	lds	r12, 0x0791
    67ac:	d0 90 92 07 	lds	r13, 0x0792
    67b0:	e0 90 93 07 	lds	r14, 0x0793
    67b4:	f0 90 94 07 	lds	r15, 0x0794
    67b8:	6c 19       	sub	r22, r12
    67ba:	7d 09       	sbc	r23, r13
    67bc:	8e 09       	sbc	r24, r14
    67be:	9f 09       	sbc	r25, r15
    67c0:	61 3c       	cpi	r22, 0xC1	; 193
    67c2:	77 42       	sbci	r23, 0x27	; 39
    67c4:	89 40       	sbci	r24, 0x09	; 9
    67c6:	91 05       	cpc	r25, r1
    67c8:	0c f0       	brlt	.+2      	; 0x67cc <loop+0x6de>
    67ca:	1f c1       	rjmp	.+574    	; 0x6a0a <loop+0x91c>
    67cc:	61 e0       	ldi	r22, 0x01	; 1
    67ce:	70 e0       	ldi	r23, 0x00	; 0
    67d0:	80 e0       	ldi	r24, 0x00	; 0
    67d2:	90 e0       	ldi	r25, 0x00	; 0
    67d4:	ff 90       	pop	r15
    67d6:	ef 90       	pop	r14
    67d8:	df 90       	pop	r13
    67da:	cf 90       	pop	r12
    67dc:	0c 94 4a 4a 	jmp	0x9494	; 0x9494 <delay>
    67e0:	8e e6       	ldi	r24, 0x6E	; 110
    67e2:	97 e0       	ldi	r25, 0x07	; 7
    67e4:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    67e8:	64 e7       	ldi	r22, 0x74	; 116
    67ea:	71 e1       	ldi	r23, 0x11	; 17
    67ec:	8a ed       	ldi	r24, 0xDA	; 218
    67ee:	97 e0       	ldi	r25, 0x07	; 7
    67f0:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    67f4:	e7 cc       	rjmp	.-1586   	; 0x61c4 <loop+0xd6>
    67f6:	2f 5f       	subi	r18, 0xFF	; 255
    67f8:	3f 4f       	sbci	r19, 0xFF	; 255
    67fa:	30 93 ac 06 	sts	0x06AC, r19
    67fe:	20 93 ab 06 	sts	0x06AB, r18
    6802:	4c ee       	ldi	r20, 0xEC	; 236
    6804:	42 03       	mulsu	r20, r18
    6806:	b0 01       	movw	r22, r0
    6808:	43 9f       	mul	r20, r19
    680a:	70 0d       	add	r23, r0
    680c:	11 24       	eor	r1, r1
    680e:	8e e6       	ldi	r24, 0x6E	; 110
    6810:	97 e0       	ldi	r25, 0x07	; 7
    6812:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
    6816:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    681a:	60 93 ad 06 	sts	0x06AD, r22
    681e:	70 93 ae 06 	sts	0x06AE, r23
    6822:	80 93 af 06 	sts	0x06AF, r24
    6826:	90 93 b0 06 	sts	0x06B0, r25
    682a:	ed cc       	rjmp	.-1574   	; 0x6206 <loop+0x118>
    682c:	01 96       	adiw	r24, 0x01	; 1
    682e:	90 93 ac 06 	sts	0x06AC, r25
    6832:	80 93 ab 06 	sts	0x06AB, r24
    6836:	24 e1       	ldi	r18, 0x14	; 20
    6838:	28 9f       	mul	r18, r24
    683a:	b0 01       	movw	r22, r0
    683c:	29 9f       	mul	r18, r25
    683e:	70 0d       	add	r23, r0
    6840:	11 24       	eor	r1, r1
    6842:	8e e6       	ldi	r24, 0x6E	; 110
    6844:	97 e0       	ldi	r25, 0x07	; 7
    6846:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
    684a:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    684e:	60 93 ad 06 	sts	0x06AD, r22
    6852:	70 93 ae 06 	sts	0x06AE, r23
    6856:	80 93 af 06 	sts	0x06AF, r24
    685a:	90 93 b0 06 	sts	0x06B0, r25
    685e:	f4 cc       	rjmp	.-1560   	; 0x6248 <loop+0x15a>
    6860:	81 e0       	ldi	r24, 0x01	; 1
    6862:	80 93 b2 06 	sts	0x06B2, r24
    6866:	8e e6       	ldi	r24, 0x6E	; 110
    6868:	97 e0       	ldi	r25, 0x07	; 7
    686a:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    686e:	61 e6       	ldi	r22, 0x61	; 97
    6870:	71 e1       	ldi	r23, 0x11	; 17
    6872:	86 ec       	ldi	r24, 0xC6	; 198
    6874:	98 e0       	ldi	r25, 0x08	; 8
    6876:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    687a:	40 91 0f 05 	lds	r20, 0x050F
    687e:	50 91 10 05 	lds	r21, 0x0510
    6882:	60 91 11 05 	lds	r22, 0x0511
    6886:	70 91 12 05 	lds	r23, 0x0512
    688a:	8e e6       	ldi	r24, 0x6E	; 110
    688c:	97 e0       	ldi	r25, 0x07	; 7
    688e:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <_ZN8MM3Class12setAmpsLimitEf>
    6892:	81 e0       	ldi	r24, 0x01	; 1
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	90 93 ac 06 	sts	0x06AC, r25
    689a:	80 93 ab 06 	sts	0x06AB, r24
    689e:	64 e6       	ldi	r22, 0x64	; 100
    68a0:	70 e0       	ldi	r23, 0x00	; 0
    68a2:	8e e6       	ldi	r24, 0x6E	; 110
    68a4:	97 e0       	ldi	r25, 0x07	; 7
    68a6:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
    68aa:	20 91 ab 06 	lds	r18, 0x06AB
    68ae:	30 91 ac 06 	lds	r19, 0x06AC
    68b2:	4c ee       	ldi	r20, 0xEC	; 236
    68b4:	42 03       	mulsu	r20, r18
    68b6:	b0 01       	movw	r22, r0
    68b8:	43 9f       	mul	r20, r19
    68ba:	70 0d       	add	r23, r0
    68bc:	11 24       	eor	r1, r1
    68be:	8e e6       	ldi	r24, 0x6E	; 110
    68c0:	97 e0       	ldi	r25, 0x07	; 7
    68c2:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
    68c6:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    68ca:	60 93 ad 06 	sts	0x06AD, r22
    68ce:	70 93 ae 06 	sts	0x06AE, r23
    68d2:	80 93 af 06 	sts	0x06AF, r24
    68d6:	90 93 b0 06 	sts	0x06B0, r25
    68da:	c0 cc       	rjmp	.-1664   	; 0x625c <loop+0x16e>
    68dc:	10 92 b2 06 	sts	0x06B2, r1
    68e0:	6d e4       	ldi	r22, 0x4D	; 77
    68e2:	71 e1       	ldi	r23, 0x11	; 17
    68e4:	86 ec       	ldi	r24, 0xC6	; 198
    68e6:	98 e0       	ldi	r25, 0x08	; 8
    68e8:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    68ec:	8e e6       	ldi	r24, 0x6E	; 110
    68ee:	97 e0       	ldi	r25, 0x07	; 7
    68f0:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    68f4:	bc cc       	rjmp	.-1672   	; 0x626e <loop+0x180>
    68f6:	81 e0       	ldi	r24, 0x01	; 1
    68f8:	80 93 b1 06 	sts	0x06B1, r24
    68fc:	8e e6       	ldi	r24, 0x6E	; 110
    68fe:	97 e0       	ldi	r25, 0x07	; 7
    6900:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    6904:	68 e3       	ldi	r22, 0x38	; 56
    6906:	71 e1       	ldi	r23, 0x11	; 17
    6908:	86 ec       	ldi	r24, 0xC6	; 198
    690a:	98 e0       	ldi	r25, 0x08	; 8
    690c:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    6910:	40 91 0f 05 	lds	r20, 0x050F
    6914:	50 91 10 05 	lds	r21, 0x0510
    6918:	60 91 11 05 	lds	r22, 0x0511
    691c:	70 91 12 05 	lds	r23, 0x0512
    6920:	8e e6       	ldi	r24, 0x6E	; 110
    6922:	97 e0       	ldi	r25, 0x07	; 7
    6924:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <_ZN8MM3Class12setAmpsLimitEf>
    6928:	81 e0       	ldi	r24, 0x01	; 1
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	90 93 ac 06 	sts	0x06AC, r25
    6930:	80 93 ab 06 	sts	0x06AB, r24
    6934:	64 e6       	ldi	r22, 0x64	; 100
    6936:	70 e0       	ldi	r23, 0x00	; 0
    6938:	8e e6       	ldi	r24, 0x6E	; 110
    693a:	97 e0       	ldi	r25, 0x07	; 7
    693c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <_ZN8MM3Class9moveSetupEi>
    6940:	80 91 ab 06 	lds	r24, 0x06AB
    6944:	90 91 ac 06 	lds	r25, 0x06AC
    6948:	24 e1       	ldi	r18, 0x14	; 20
    694a:	28 9f       	mul	r18, r24
    694c:	b0 01       	movw	r22, r0
    694e:	29 9f       	mul	r18, r25
    6950:	70 0d       	add	r23, r0
    6952:	11 24       	eor	r1, r1
    6954:	8e e6       	ldi	r24, 0x6E	; 110
    6956:	97 e0       	ldi	r25, 0x07	; 7
    6958:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <_ZN8MM3Class11moveAtSpeedEi>
    695c:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    6960:	60 93 ad 06 	sts	0x06AD, r22
    6964:	70 93 ae 06 	sts	0x06AE, r23
    6968:	80 93 af 06 	sts	0x06AF, r24
    696c:	90 93 b0 06 	sts	0x06B0, r25
    6970:	88 cc       	rjmp	.-1776   	; 0x6282 <loop+0x194>
    6972:	10 92 b1 06 	sts	0x06B1, r1
    6976:	62 e2       	ldi	r22, 0x22	; 34
    6978:	71 e1       	ldi	r23, 0x11	; 17
    697a:	86 ec       	ldi	r24, 0xC6	; 198
    697c:	98 e0       	ldi	r25, 0x08	; 8
    697e:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    6982:	8e e6       	ldi	r24, 0x6E	; 110
    6984:	97 e0       	ldi	r25, 0x07	; 7
    6986:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    698a:	84 cc       	rjmp	.-1784   	; 0x6294 <loop+0x1a6>
    698c:	8e e6       	ldi	r24, 0x6E	; 110
    698e:	97 e0       	ldi	r25, 0x07	; 7
    6990:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    6994:	b2 cc       	rjmp	.-1692   	; 0x62fa <loop+0x20c>
    6996:	8e e6       	ldi	r24, 0x6E	; 110
    6998:	97 e0       	ldi	r25, 0x07	; 7
    699a:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    699e:	63 e0       	ldi	r22, 0x03	; 3
    69a0:	71 e1       	ldi	r23, 0x11	; 17
    69a2:	8a ed       	ldi	r24, 0xDA	; 218
    69a4:	97 e0       	ldi	r25, 0x07	; 7
    69a6:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    69aa:	bc cc       	rjmp	.-1672   	; 0x6324 <loop+0x236>
    69ac:	8e e6       	ldi	r24, 0x6E	; 110
    69ae:	97 e0       	ldi	r25, 0x07	; 7
    69b0:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    69b4:	64 ee       	ldi	r22, 0xE4	; 228
    69b6:	70 e1       	ldi	r23, 0x10	; 16
    69b8:	8a ed       	ldi	r24, 0xDA	; 218
    69ba:	97 e0       	ldi	r25, 0x07	; 7
    69bc:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    69c0:	bd cc       	rjmp	.-1670   	; 0x633c <loop+0x24e>
    69c2:	8e e6       	ldi	r24, 0x6E	; 110
    69c4:	97 e0       	ldi	r25, 0x07	; 7
    69c6:	0e 94 f6 27 	call	0x4fec	; 0x4fec <_ZN8MM3Class10stopMovingEv>
    69ca:	6f eb       	ldi	r22, 0xBF	; 191
    69cc:	70 e1       	ldi	r23, 0x10	; 16
    69ce:	8a ed       	ldi	r24, 0xDA	; 218
    69d0:	97 e0       	ldi	r25, 0x07	; 7
    69d2:	0e 94 9a 4f 	call	0x9f34	; 0x9f34 <_ZN5Print7printlnEPK19__FlashStringHelper>
    69d6:	bd cc       	rjmp	.-1670   	; 0x6352 <loop+0x264>
    69d8:	b7 01       	movw	r22, r14
    69da:	a6 01       	movw	r20, r12
    69dc:	1e cd       	rjmp	.-1476   	; 0x641a <loop+0x32c>
    69de:	60 91 8d 07 	lds	r22, 0x078D
    69e2:	70 91 8e 07 	lds	r23, 0x078E
    69e6:	80 91 8f 07 	lds	r24, 0x078F
    69ea:	90 91 90 07 	lds	r25, 0x0790
    69ee:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <__subsf3>
    69f2:	dc 01       	movw	r26, r24
    69f4:	cb 01       	movw	r24, r22
    69f6:	b0 58       	subi	r27, 0x80	; 128
    69f8:	80 93 a7 06 	sts	0x06A7, r24
    69fc:	90 93 a8 06 	sts	0x06A8, r25
    6a00:	a0 93 a9 06 	sts	0x06A9, r26
    6a04:	b0 93 aa 06 	sts	0x06AA, r27
    6a08:	58 cd       	rjmp	.-1360   	; 0x64ba <loop+0x3cc>
    6a0a:	68 ef       	ldi	r22, 0xF8	; 248
    6a0c:	75 e0       	ldi	r23, 0x05	; 5
    6a0e:	86 ec       	ldi	r24, 0xC6	; 198
    6a10:	98 e0       	ldi	r25, 0x08	; 8
    6a12:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <_ZN5Print7printlnEPKc>
    6a16:	fe da       	rcall	.-2564   	; 0x6014 <_Z9saveStatev>
    6a18:	d9 ce       	rjmp	.-590    	; 0x67cc <loop+0x6de>

00006a1a <_Z15software_Rebootv>:
    6a1a:	ff cf       	rjmp	.-2      	; 0x6a1a <_Z15software_Rebootv>

00006a1c <_GLOBAL__sub_I_ApplicationMonitor>:
    6a1c:	0f 93       	push	r16
    6a1e:	00 e0       	ldi	r16, 0x00	; 0
    6a20:	20 e0       	ldi	r18, 0x00	; 0
    6a22:	40 e0       	ldi	r20, 0x00	; 0
    6a24:	60 e0       	ldi	r22, 0x00	; 0
    6a26:	83 e0       	ldi	r24, 0x03	; 3
    6a28:	98 e0       	ldi	r25, 0x08	; 8
    6a2a:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
    6a2e:	4a e0       	ldi	r20, 0x0A	; 10
    6a30:	50 e0       	ldi	r21, 0x00	; 0
    6a32:	64 ef       	ldi	r22, 0xF4	; 244
    6a34:	71 e0       	ldi	r23, 0x01	; 1
    6a36:	88 ef       	ldi	r24, 0xF8	; 248
    6a38:	97 e0       	ldi	r25, 0x07	; 7
    6a3a:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZN19CApplicationMonitorC1Eii>
    6a3e:	8d e9       	ldi	r24, 0x9D	; 157
    6a40:	97 e0       	ldi	r25, 0x07	; 7
    6a42:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN15EthernetSupportC1Ev>
    6a46:	85 e8       	ldi	r24, 0x85	; 133
    6a48:	97 e0       	ldi	r25, 0x07	; 7
    6a4a:	0e 94 9d 28 	call	0x513a	; 0x513a <_ZN10MotorClassC1Ev>
    6a4e:	8e ee       	ldi	r24, 0xEE	; 238
    6a50:	96 e0       	ldi	r25, 0x06	; 6
    6a52:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN17cmdProcessorClassC1Ev>
    6a56:	83 eb       	ldi	r24, 0xB3	; 179
    6a58:	96 e0       	ldi	r25, 0x06	; 6
    6a5a:	0f 91       	pop	r16
    6a5c:	0c 94 32 2a 	jmp	0x5464	; 0x5464 <_ZN21PositionFeedbackClassC1Ev>

00006a60 <_ZN9DhcpClass16reset_DHCP_leaseEv>:
    return request_DHCP_lease();
}

void DhcpClass::reset_DHCP_lease(){
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
    6a60:	0e 96       	adiw	r24, 0x0e	; 14
    6a62:	24 e1       	ldi	r18, 0x14	; 20
    6a64:	fc 01       	movw	r30, r24
    6a66:	11 92       	st	Z+, r1
    6a68:	2a 95       	dec	r18
    6a6a:	e9 f7       	brne	.-6      	; 0x6a66 <_ZN9DhcpClass16reset_DHCP_leaseEv+0x6>
    6a6c:	08 95       	ret

00006a6e <_ZN9DhcpClass10getLocalIpEv>:
    _lastCheck = now;
    return rc;
}

IPAddress DhcpClass::getLocalIp()
{
    6a6e:	cf 93       	push	r28
    6a70:	df 93       	push	r29
    6a72:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpLocalIp);
    6a74:	62 5f       	subi	r22, 0xF2	; 242
    6a76:	7f 4f       	sbci	r23, 0xFF	; 255
    6a78:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <_ZN9IPAddressC1EPKh>
}
    6a7c:	ce 01       	movw	r24, r28
    6a7e:	df 91       	pop	r29
    6a80:	cf 91       	pop	r28
    6a82:	08 95       	ret

00006a84 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
    6a84:	cf 93       	push	r28
    6a86:	df 93       	push	r29
    6a88:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpSubnetMask);
    6a8a:	6e 5e       	subi	r22, 0xEE	; 238
    6a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    6a8e:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <_ZN9IPAddressC1EPKh>
}
    6a92:	ce 01       	movw	r24, r28
    6a94:	df 91       	pop	r29
    6a96:	cf 91       	pop	r28
    6a98:	08 95       	ret

00006a9a <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
    6a9a:	cf 93       	push	r28
    6a9c:	df 93       	push	r29
    6a9e:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpGatewayIp);
    6aa0:	6a 5e       	subi	r22, 0xEA	; 234
    6aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    6aa4:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <_ZN9IPAddressC1EPKh>
}
    6aa8:	ce 01       	movw	r24, r28
    6aaa:	df 91       	pop	r29
    6aac:	cf 91       	pop	r28
    6aae:	08 95       	ret

00006ab0 <_ZN9DhcpClass14getDnsServerIpEv>:
{
    return IPAddress(_dhcpDhcpServerIp);
}

IPAddress DhcpClass::getDnsServerIp()
{
    6ab0:	cf 93       	push	r28
    6ab2:	df 93       	push	r29
    6ab4:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDnsServerIp);
    6ab6:	62 5e       	subi	r22, 0xE2	; 226
    6ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    6aba:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <_ZN9IPAddressC1EPKh>
}
    6abe:	ce 01       	movw	r24, r28
    6ac0:	df 91       	pop	r29
    6ac2:	cf 91       	pop	r28
    6ac4:	08 95       	ret

00006ac6 <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
    6ac6:	80 e3       	ldi	r24, 0x30	; 48
    6ac8:	fb 01       	movw	r30, r22
    6aca:	80 83       	st	Z, r24
    6acc:	32 96       	adiw	r30, 0x02	; 2
  do {
    unsigned long m = n;
    n /= 16;
    6ace:	84 2f       	mov	r24, r20
    6ad0:	82 95       	swap	r24
    6ad2:	8f 70       	andi	r24, 0x0F	; 15
    char c = m - 16 * n;
    6ad4:	90 e1       	ldi	r25, 0x10	; 16
    6ad6:	89 9f       	mul	r24, r25
    6ad8:	40 19       	sub	r20, r0
    6ada:	11 24       	eor	r1, r1
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
    6adc:	4a 30       	cpi	r20, 0x0A	; 10
    6ade:	14 f4       	brge	.+4      	; 0x6ae4 <_ZN9DhcpClass9printByteEPch+0x1e>
    6ae0:	40 5d       	subi	r20, 0xD0	; 208
    6ae2:	01 c0       	rjmp	.+2      	; 0x6ae6 <_ZN9DhcpClass9printByteEPch+0x20>
    6ae4:	49 5c       	subi	r20, 0xC9	; 201
    6ae6:	42 93       	st	-Z, r20
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
  do {
    6ae8:	88 23       	and	r24, r24
    6aea:	11 f0       	breq	.+4      	; 0x6af0 <_ZN9DhcpClass9printByteEPch+0x2a>
    unsigned long m = n;
    n /= 16;
    6aec:	48 2f       	mov	r20, r24
    6aee:	ef cf       	rjmp	.-34     	; 0x6ace <_ZN9DhcpClass9printByteEPch+0x8>
    6af0:	08 95       	ret

00006af2 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    6af2:	0f 93       	push	r16
    6af4:	00 e0       	ldi	r16, 0x00	; 0
    6af6:	20 e0       	ldi	r18, 0x00	; 0
    6af8:	40 e0       	ldi	r20, 0x00	; 0
    6afa:	60 e0       	ldi	r22, 0x00	; 0
    6afc:	89 e0       	ldi	r24, 0x09	; 9
    6afe:	98 e0       	ldi	r25, 0x08	; 8
    6b00:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
    6b04:	0f 91       	pop	r16
    6b06:	08 95       	ret

00006b08 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>:
void DhcpClass::presend_DHCP()
{
}

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
    6b08:	6f 92       	push	r6
    6b0a:	7f 92       	push	r7
    6b0c:	8f 92       	push	r8
    6b0e:	9f 92       	push	r9
    6b10:	af 92       	push	r10
    6b12:	bf 92       	push	r11
    6b14:	cf 92       	push	r12
    6b16:	df 92       	push	r13
    6b18:	ef 92       	push	r14
    6b1a:	ff 92       	push	r15
    6b1c:	0f 93       	push	r16
    6b1e:	1f 93       	push	r17
    6b20:	cf 93       	push	r28
    6b22:	df 93       	push	r29
    6b24:	cd b7       	in	r28, 0x3d	; 61
    6b26:	de b7       	in	r29, 0x3e	; 62
    6b28:	ac 97       	sbiw	r28, 0x2c	; 44
    6b2a:	0f b6       	in	r0, 0x3f	; 63
    6b2c:	f8 94       	cli
    6b2e:	de bf       	out	0x3e, r29	; 62
    6b30:	0f be       	out	0x3f, r0	; 63
    6b32:	cd bf       	out	0x3d, r28	; 61
    6b34:	7c 01       	movw	r14, r24
    6b36:	86 2e       	mov	r8, r22
    6b38:	b4 2e       	mov	r11, r20
    6b3a:	a5 2e       	mov	r10, r21
    uint8_t buffer[32];
    memset(buffer, 0, 32);
    6b3c:	20 e2       	ldi	r18, 0x20	; 32
    6b3e:	92 2e       	mov	r9, r18
    6b40:	ce 01       	movw	r24, r28
    6b42:	01 96       	adiw	r24, 0x01	; 1
    6b44:	6c 01       	movw	r12, r24
    6b46:	fc 01       	movw	r30, r24
    6b48:	29 2d       	mov	r18, r9
    6b4a:	11 92       	st	Z+, r1
    6b4c:	2a 95       	dec	r18
    6b4e:	e9 f7       	brne	.-6      	; 0x6b4a <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x42>
    IPAddress dest_addr( 255, 255, 255, 255 ); // Broadcast address
    6b50:	0f ef       	ldi	r16, 0xFF	; 255
    6b52:	2f ef       	ldi	r18, 0xFF	; 255
    6b54:	4f ef       	ldi	r20, 0xFF	; 255
    6b56:	6f ef       	ldi	r22, 0xFF	; 255
    6b58:	86 96       	adiw	r24, 0x26	; 38
    6b5a:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
#include <stdint.h>
#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    6b5e:	88 e7       	ldi	r24, 0x78	; 120
    6b60:	96 e0       	ldi	r25, 0x06	; 6
    6b62:	9a a3       	std	Y+34, r25	; 0x22
    6b64:	89 a3       	std	Y+33, r24	; 0x21
    6b66:	89 a5       	ldd	r24, Y+41	; 0x29
    6b68:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b6a:	ab a5       	ldd	r26, Y+43	; 0x2b
    6b6c:	bc a5       	ldd	r27, Y+44	; 0x2c
    6b6e:	8b a3       	std	Y+35, r24	; 0x23
    6b70:	9c a3       	std	Y+36, r25	; 0x24
    6b72:	ad a3       	std	Y+37, r26	; 0x25
    6b74:	be a3       	std	Y+38, r27	; 0x26

    if (-1 == _dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT))
    6b76:	87 01       	movw	r16, r14
    6b78:	09 5b       	subi	r16, 0xB9	; 185
    6b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b7c:	43 e4       	ldi	r20, 0x43	; 67
    6b7e:	50 e0       	ldi	r21, 0x00	; 0
    6b80:	be 01       	movw	r22, r28
    6b82:	6f 5d       	subi	r22, 0xDF	; 223
    6b84:	7f 4f       	sbci	r23, 0xFF	; 255
    6b86:	c8 01       	movw	r24, r16
    6b88:	0e 94 07 42 	call	0x840e	; 0x840e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    6b8c:	01 96       	adiw	r24, 0x01	; 1
    6b8e:	09 f4       	brne	.+2      	; 0x6b92 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x8a>
    6b90:	bc c0       	rjmp	.+376    	; 0x6d0a <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x202>
    {
        // FIXME Need to return errors
        return;
    }

    buffer[0] = DHCP_BOOTREQUEST;   // op
    6b92:	81 e0       	ldi	r24, 0x01	; 1
    6b94:	89 83       	std	Y+1, r24	; 0x01
    buffer[1] = DHCP_HTYPE10MB;     // htype
    6b96:	8a 83       	std	Y+2, r24	; 0x02
    buffer[2] = DHCP_HLENETHERNET;  // hlen
    6b98:	86 e0       	ldi	r24, 0x06	; 6
    6b9a:	78 2e       	mov	r7, r24
    6b9c:	7b 82       	std	Y+3, r7	; 0x03
    buffer[3] = DHCP_HOPS;          // hops
    6b9e:	1c 82       	std	Y+4, r1	; 0x04
    6ba0:	f7 01       	movw	r30, r14
    6ba2:	64 81       	ldd	r22, Z+4	; 0x04
    6ba4:	75 81       	ldd	r23, Z+5	; 0x05
    6ba6:	86 81       	ldd	r24, Z+6	; 0x06
    6ba8:	97 81       	ldd	r25, Z+7	; 0x07
    6baa:	0e 94 af 57 	call	0xaf5e	; 0xaf5e <__bswapsi2>

    // xid
    unsigned long xid = htonl(_dhcpTransactionId);
    memcpy(buffer + 4, &(xid), 4);
    6bae:	6d 83       	std	Y+5, r22	; 0x05
    6bb0:	7e 83       	std	Y+6, r23	; 0x06
    6bb2:	8f 83       	std	Y+7, r24	; 0x07
    6bb4:	98 87       	std	Y+8, r25	; 0x08

    // 8, 9 - seconds elapsed
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
    6bb6:	a9 86       	std	Y+9, r10	; 0x09
    buffer[9] = (secondsElapsed & 0x00ff);
    6bb8:	ba 86       	std	Y+10, r11	; 0x0a

    // flags
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
    memcpy(buffer + 10, &(flags), 2);
    6bba:	80 e8       	ldi	r24, 0x80	; 128
    6bbc:	90 e0       	ldi	r25, 0x00	; 0
    6bbe:	9c 87       	std	Y+12, r25	; 0x0c
    6bc0:	8b 87       	std	Y+11, r24	; 0x0b
    // yiaddr: already zeroed
    // siaddr: already zeroed
    // giaddr: already zeroed

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 28);
    6bc2:	4c e1       	ldi	r20, 0x1C	; 28
    6bc4:	50 e0       	ldi	r21, 0x00	; 0
    6bc6:	b6 01       	movw	r22, r12
    6bc8:	c8 01       	movw	r24, r16
    6bca:	0e 94 11 42 	call	0x8422	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    6bce:	f6 01       	movw	r30, r12
    6bd0:	29 2d       	mov	r18, r9
    6bd2:	11 92       	st	Z+, r1
    6bd4:	2a 95       	dec	r18
    6bd6:	e9 f7       	brne	.-6      	; 0x6bd2 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0xca>

    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
    6bd8:	57 01       	movw	r10, r14
    6bda:	88 e0       	ldi	r24, 0x08	; 8
    6bdc:	a8 0e       	add	r10, r24
    6bde:	b1 1c       	adc	r11, r1
    6be0:	f5 01       	movw	r30, r10
    6be2:	d6 01       	movw	r26, r12
    6be4:	01 90       	ld	r0, Z+
    6be6:	0d 92       	st	X+, r0
    6be8:	7a 94       	dec	r7
    6bea:	e1 f7       	brne	.-8      	; 0x6be4 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0xdc>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 16);
    6bec:	40 e1       	ldi	r20, 0x10	; 16
    6bee:	50 e0       	ldi	r21, 0x00	; 0
    6bf0:	b6 01       	movw	r22, r12
    6bf2:	c8 01       	movw	r24, r16
    6bf4:	0e 94 11 42 	call	0x8422	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    6bf8:	f6 01       	movw	r30, r12
    6bfa:	11 92       	st	Z+, r1
    6bfc:	9a 94       	dec	r9
    6bfe:	e9 f7       	brne	.-6      	; 0x6bfa <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0xf2>
    6c00:	96 e0       	ldi	r25, 0x06	; 6
    6c02:	69 2e       	mov	r6, r25
    6c04:	71 2c       	mov	r7, r1

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
        _dhcpUdpSocket.write(buffer, 32);
    6c06:	40 e2       	ldi	r20, 0x20	; 32
    6c08:	50 e0       	ldi	r21, 0x00	; 0
    6c0a:	b6 01       	movw	r22, r12
    6c0c:	c8 01       	movw	r24, r16
    6c0e:	0e 94 11 42 	call	0x8422	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    6c12:	f1 e0       	ldi	r31, 0x01	; 1
    6c14:	6f 1a       	sub	r6, r31
    6c16:	71 08       	sbc	r7, r1
    memset(buffer, 0, 32); // clear local buffer

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
    6c18:	b1 f7       	brne	.-20     	; 0x6c06 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0xfe>
        _dhcpUdpSocket.write(buffer, 32);
    }
  
    // OPT - Magic Cookie
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
    6c1a:	83 e6       	ldi	r24, 0x63	; 99
    6c1c:	89 83       	std	Y+1, r24	; 0x01
    buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
    6c1e:	92 e8       	ldi	r25, 0x82	; 130
    6c20:	9a 83       	std	Y+2, r25	; 0x02
    buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
    6c22:	93 e5       	ldi	r25, 0x53	; 83
    6c24:	9b 83       	std	Y+3, r25	; 0x03
    buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
    6c26:	8c 83       	std	Y+4, r24	; 0x04

    // OPT - message type
    buffer[4] = dhcpMessageType;
    6c28:	85 e3       	ldi	r24, 0x35	; 53
    6c2a:	8d 83       	std	Y+5, r24	; 0x05
    buffer[5] = 0x01;
    6c2c:	81 e0       	ldi	r24, 0x01	; 1
    6c2e:	8e 83       	std	Y+6, r24	; 0x06
    buffer[6] = messageType; //DHCP_REQUEST;
    6c30:	8f 82       	std	Y+7, r8	; 0x07

    // OPT - client identifier
    buffer[7] = dhcpClientIdentifier;
    6c32:	9d e3       	ldi	r25, 0x3D	; 61
    6c34:	98 87       	std	Y+8, r25	; 0x08
    buffer[8] = 0x07;
    6c36:	97 e0       	ldi	r25, 0x07	; 7
    6c38:	99 87       	std	Y+9, r25	; 0x09
    buffer[9] = 0x01;
    6c3a:	8a 87       	std	Y+10, r24	; 0x0a
    memcpy(buffer + 10, _dhcpMacAddr, 6);
    6c3c:	86 e0       	ldi	r24, 0x06	; 6
    6c3e:	f5 01       	movw	r30, r10
    6c40:	de 01       	movw	r26, r28
    6c42:	1b 96       	adiw	r26, 0x0b	; 11
    6c44:	01 90       	ld	r0, Z+
    6c46:	0d 92       	st	X+, r0
    6c48:	8a 95       	dec	r24
    6c4a:	e1 f7       	brne	.-8      	; 0x6c44 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x13c>

    // OPT - host name
    buffer[16] = hostName;
    6c4c:	8c e0       	ldi	r24, 0x0C	; 12
    6c4e:	89 8b       	std	Y+17, r24	; 0x11
    buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
    6c50:	8a 8b       	std	Y+18, r24	; 0x12
    strcpy((char*)&(buffer[18]), HOST_NAME);
    6c52:	6b e0       	ldi	r22, 0x0B	; 11
    6c54:	76 e0       	ldi	r23, 0x06	; 6
    6c56:	ce 01       	movw	r24, r28
    6c58:	43 96       	adiw	r24, 0x13	; 19
    6c5a:	0e 94 47 5c 	call	0xb88e	; 0xb88e <strcpy>

    printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
    6c5e:	f7 01       	movw	r30, r14
    6c60:	43 85       	ldd	r20, Z+11	; 0x0b
    6c62:	be 01       	movw	r22, r28
    6c64:	67 5e       	subi	r22, 0xE7	; 231
    6c66:	7f 4f       	sbci	r23, 0xFF	; 255
    6c68:	c7 01       	movw	r24, r14
    6c6a:	2d df       	rcall	.-422    	; 0x6ac6 <_ZN9DhcpClass9printByteEPch>
    6c6c:	f7 01       	movw	r30, r14
    printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
    6c6e:	44 85       	ldd	r20, Z+12	; 0x0c
    6c70:	be 01       	movw	r22, r28
    6c72:	65 5e       	subi	r22, 0xE5	; 229
    6c74:	7f 4f       	sbci	r23, 0xFF	; 255
    6c76:	c7 01       	movw	r24, r14
    6c78:	26 df       	rcall	.-436    	; 0x6ac6 <_ZN9DhcpClass9printByteEPch>
    6c7a:	f7 01       	movw	r30, r14
    6c7c:	45 85       	ldd	r20, Z+13	; 0x0d
    printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
    6c7e:	be 01       	movw	r22, r28
    6c80:	63 5e       	subi	r22, 0xE3	; 227
    6c82:	7f 4f       	sbci	r23, 0xFF	; 255
    6c84:	c7 01       	movw	r24, r14
    6c86:	1f df       	rcall	.-450    	; 0x6ac6 <_ZN9DhcpClass9printByteEPch>
    6c88:	4e e1       	ldi	r20, 0x1E	; 30
    6c8a:	50 e0       	ldi	r21, 0x00	; 0
    6c8c:	b6 01       	movw	r22, r12

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 30);
    6c8e:	c8 01       	movw	r24, r16
    6c90:	0e 94 11 42 	call	0x8422	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    6c94:	f3 e0       	ldi	r31, 0x03	; 3
    6c96:	8f 12       	cpse	r8, r31
    6c98:	1e c0       	rjmp	.+60     	; 0x6cd6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x1ce>

    if(messageType == DHCP_REQUEST)
    6c9a:	82 e3       	ldi	r24, 0x32	; 50
    6c9c:	89 83       	std	Y+1, r24	; 0x01
    6c9e:	84 e0       	ldi	r24, 0x04	; 4
    {
        buffer[0] = dhcpRequestedIPaddr;
    6ca0:	8a 83       	std	Y+2, r24	; 0x02
    6ca2:	f7 01       	movw	r30, r14
        buffer[1] = 0x04;
    6ca4:	96 85       	ldd	r25, Z+14	; 0x0e
    6ca6:	9b 83       	std	Y+3, r25	; 0x03
        buffer[2] = _dhcpLocalIp[0];
    6ca8:	97 85       	ldd	r25, Z+15	; 0x0f
    6caa:	9c 83       	std	Y+4, r25	; 0x04
    6cac:	90 89       	ldd	r25, Z+16	; 0x10
        buffer[3] = _dhcpLocalIp[1];
    6cae:	9d 83       	std	Y+5, r25	; 0x05
    6cb0:	91 89       	ldd	r25, Z+17	; 0x11
        buffer[4] = _dhcpLocalIp[2];
    6cb2:	9e 83       	std	Y+6, r25	; 0x06
    6cb4:	96 e3       	ldi	r25, 0x36	; 54
        buffer[5] = _dhcpLocalIp[3];
    6cb6:	9f 83       	std	Y+7, r25	; 0x07
    6cb8:	88 87       	std	Y+8, r24	; 0x08

        buffer[6] = dhcpServerIdentifier;
    6cba:	82 8d       	ldd	r24, Z+26	; 0x1a
    6cbc:	89 87       	std	Y+9, r24	; 0x09
        buffer[7] = 0x04;
    6cbe:	83 8d       	ldd	r24, Z+27	; 0x1b
        buffer[8] = _dhcpDhcpServerIp[0];
    6cc0:	8a 87       	std	Y+10, r24	; 0x0a
    6cc2:	84 8d       	ldd	r24, Z+28	; 0x1c
        buffer[9] = _dhcpDhcpServerIp[1];
    6cc4:	8b 87       	std	Y+11, r24	; 0x0b
    6cc6:	85 8d       	ldd	r24, Z+29	; 0x1d
        buffer[10] = _dhcpDhcpServerIp[2];
    6cc8:	8c 87       	std	Y+12, r24	; 0x0c
    6cca:	4c e0       	ldi	r20, 0x0C	; 12
        buffer[11] = _dhcpDhcpServerIp[3];
    6ccc:	50 e0       	ldi	r21, 0x00	; 0
    6cce:	b6 01       	movw	r22, r12

        //put data in W5100 transmit buffer
        _dhcpUdpSocket.write(buffer, 12);
    6cd0:	c8 01       	movw	r24, r16
    6cd2:	0e 94 11 42 	call	0x8422	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    6cd6:	87 e3       	ldi	r24, 0x37	; 55
    6cd8:	89 83       	std	Y+1, r24	; 0x01
    6cda:	86 e0       	ldi	r24, 0x06	; 6
    }
    
    buffer[0] = dhcpParamRequest;
    6cdc:	8a 83       	std	Y+2, r24	; 0x02
    6cde:	91 e0       	ldi	r25, 0x01	; 1
    buffer[1] = 0x06;
    6ce0:	9b 83       	std	Y+3, r25	; 0x03
    6ce2:	93 e0       	ldi	r25, 0x03	; 3
    buffer[2] = subnetMask;
    6ce4:	9c 83       	std	Y+4, r25	; 0x04
    6ce6:	8d 83       	std	Y+5, r24	; 0x05
    buffer[3] = routersOnSubnet;
    6ce8:	8f e0       	ldi	r24, 0x0F	; 15
    6cea:	8e 83       	std	Y+6, r24	; 0x06
    buffer[4] = dns;
    6cec:	8a e3       	ldi	r24, 0x3A	; 58
    buffer[5] = domainName;
    6cee:	8f 83       	std	Y+7, r24	; 0x07
    6cf0:	8b e3       	ldi	r24, 0x3B	; 59
    buffer[6] = dhcpT1value;
    6cf2:	88 87       	std	Y+8, r24	; 0x08
    6cf4:	8f ef       	ldi	r24, 0xFF	; 255
    buffer[7] = dhcpT2value;
    6cf6:	89 87       	std	Y+9, r24	; 0x09
    6cf8:	49 e0       	ldi	r20, 0x09	; 9
    buffer[8] = endOption;
    6cfa:	50 e0       	ldi	r21, 0x00	; 0
    6cfc:	b6 01       	movw	r22, r12
    
    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 9);
    6cfe:	c8 01       	movw	r24, r16
    6d00:	0e 94 11 42 	call	0x8422	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    6d04:	c8 01       	movw	r24, r16
    6d06:	0e 94 0e 42 	call	0x841c	; 0x841c <_ZN11EthernetUDP9endPacketEv>

    _dhcpUdpSocket.endPacket();
    6d0a:	ac 96       	adiw	r28, 0x2c	; 44
    6d0c:	0f b6       	in	r0, 0x3f	; 63
    6d0e:	f8 94       	cli
}
    6d10:	de bf       	out	0x3e, r29	; 62
    6d12:	0f be       	out	0x3f, r0	; 63
    6d14:	cd bf       	out	0x3d, r28	; 61
    6d16:	df 91       	pop	r29
    6d18:	cf 91       	pop	r28
    6d1a:	1f 91       	pop	r17
    6d1c:	0f 91       	pop	r16
    6d1e:	ff 90       	pop	r15
    6d20:	ef 90       	pop	r14
    6d22:	df 90       	pop	r13
    6d24:	cf 90       	pop	r12
    6d26:	bf 90       	pop	r11
    6d28:	af 90       	pop	r10
    6d2a:	9f 90       	pop	r9
    6d2c:	8f 90       	pop	r8
    6d2e:	7f 90       	pop	r7
    6d30:	6f 90       	pop	r6
    6d32:	08 95       	ret

00006d34 <_ZN9DhcpClass17parseDHCPResponseEmRm>:
    6d34:	2f 92       	push	r2
    6d36:	3f 92       	push	r3
    6d38:	4f 92       	push	r4

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    6d3a:	5f 92       	push	r5
    6d3c:	6f 92       	push	r6
    6d3e:	7f 92       	push	r7
    6d40:	8f 92       	push	r8
    6d42:	9f 92       	push	r9
    6d44:	af 92       	push	r10
    6d46:	bf 92       	push	r11
    6d48:	cf 92       	push	r12
    6d4a:	df 92       	push	r13
    6d4c:	ef 92       	push	r14
    6d4e:	ff 92       	push	r15
    6d50:	0f 93       	push	r16
    6d52:	1f 93       	push	r17
    6d54:	cf 93       	push	r28
    6d56:	df 93       	push	r29
    6d58:	cd b7       	in	r28, 0x3d	; 61
    6d5a:	de b7       	in	r29, 0x3e	; 62
    6d5c:	e3 97       	sbiw	r28, 0x33	; 51
    6d5e:	0f b6       	in	r0, 0x3f	; 63
    6d60:	f8 94       	cli
    6d62:	de bf       	out	0x3e, r29	; 62
    6d64:	0f be       	out	0x3f, r0	; 63
    6d66:	cd bf       	out	0x3d, r28	; 61
    6d68:	7c 01       	movw	r14, r24
    6d6a:	2a 01       	movw	r4, r20
    6d6c:	3b 01       	movw	r6, r22
    6d6e:	69 01       	movw	r12, r18
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();
    6d70:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    6d74:	4b 01       	movw	r8, r22
    6d76:	5c 01       	movw	r10, r24

    while(_dhcpUdpSocket.parsePacket() <= 0)
    6d78:	87 01       	movw	r16, r14
    6d7a:	09 5b       	subi	r16, 0xB9	; 185
    6d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    6d7e:	c8 01       	movw	r24, r16
    6d80:	0e 94 ab 42 	call	0x8556	; 0x8556 <_ZN11EthernetUDP11parsePacketEv>
    6d84:	18 16       	cp	r1, r24
    6d86:	19 06       	cpc	r1, r25
    6d88:	94 f0       	brlt	.+36     	; 0x6dae <_ZN9DhcpClass17parseDHCPResponseEmRm+0x7a>
    {
        if((millis() - startTime) > responseTimeout)
    6d8a:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    6d8e:	68 19       	sub	r22, r8
    6d90:	79 09       	sbc	r23, r9
    6d92:	8a 09       	sbc	r24, r10
    6d94:	9b 09       	sbc	r25, r11
    6d96:	46 16       	cp	r4, r22
    6d98:	57 06       	cpc	r5, r23
    6d9a:	68 06       	cpc	r6, r24
    6d9c:	79 06       	cpc	r7, r25
    6d9e:	f0 f0       	brcs	.+60     	; 0x6ddc <_ZN9DhcpClass17parseDHCPResponseEmRm+0xa8>
        {
            return 255;
        }
        delay(50);
    6da0:	62 e3       	ldi	r22, 0x32	; 50
    6da2:	70 e0       	ldi	r23, 0x00	; 0
    6da4:	80 e0       	ldi	r24, 0x00	; 0
    6da6:	90 e0       	ldi	r25, 0x00	; 0
    6da8:	0e 94 4a 4a 	call	0x9494	; 0x9494 <delay>
    6dac:	e8 cf       	rjmp	.-48     	; 0x6d7e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4a>
    }
    // start reading in the packet
    RIP_MSG_FIXED fixedMsg;
    _dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
    6dae:	42 e2       	ldi	r20, 0x22	; 34
    6db0:	50 e0       	ldi	r21, 0x00	; 0
    6db2:	be 01       	movw	r22, r28
    6db4:	6f 5f       	subi	r22, 0xFF	; 255
    6db6:	7f 4f       	sbci	r23, 0xFF	; 255
    6db8:	c8 01       	movw	r24, r16
    6dba:	0e 94 4c 42 	call	0x8498	; 0x8498 <_ZN11EthernetUDP4readEPhj>
  
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
    6dbe:	89 81       	ldd	r24, Y+1	; 0x01
    6dc0:	82 30       	cpi	r24, 0x02	; 2
    6dc2:	31 f4       	brne	.+12     	; 0x6dd0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x9c>
    6dc4:	f8 01       	movw	r30, r16
    6dc6:	85 89       	ldd	r24, Z+21	; 0x15
    6dc8:	96 89       	ldd	r25, Z+22	; 0x16
    6dca:	83 34       	cpi	r24, 0x43	; 67
    6dcc:	91 05       	cpc	r25, r1
    6dce:	41 f0       	breq	.+16     	; 0x6de0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xac>
    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    uint8_t type = 0;
    6dd0:	19 a6       	std	Y+41, r1	; 0x29
            }
        }
    }

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();
    6dd2:	c8 01       	movw	r24, r16
    6dd4:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <_ZN11EthernetUDP5flushEv>

    return type;
    6dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    6dda:	66 c1       	rjmp	.+716    	; 0x70a8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x374>

    while(_dhcpUdpSocket.parsePacket() <= 0)
    {
        if((millis() - startTime) > responseTimeout)
        {
            return 255;
    6ddc:	8f ef       	ldi	r24, 0xFF	; 255
    6dde:	64 c1       	rjmp	.+712    	; 0x70a8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x374>
    6de0:	6d 81       	ldd	r22, Y+5	; 0x05
    6de2:	7e 81       	ldd	r23, Y+6	; 0x06
    6de4:	8f 81       	ldd	r24, Y+7	; 0x07
    6de6:	98 85       	ldd	r25, Y+8	; 0x08
    6de8:	0e 94 af 57 	call	0xaf5e	; 0xaf5e <__bswapsi2>
    6dec:	4b 01       	movw	r8, r22
    6dee:	5c 01       	movw	r10, r24
    RIP_MSG_FIXED fixedMsg;
    _dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
  
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
    {
        transactionId = ntohl(fixedMsg.xid);
    6df0:	f6 01       	movw	r30, r12
    6df2:	60 83       	st	Z, r22
    6df4:	71 83       	std	Z+1, r23	; 0x01
    6df6:	82 83       	std	Z+2, r24	; 0x02
    6df8:	93 83       	std	Z+3, r25	; 0x03
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
    6dfa:	46 e0       	ldi	r20, 0x06	; 6
    6dfc:	50 e0       	ldi	r21, 0x00	; 0
    6dfe:	b7 01       	movw	r22, r14
    6e00:	68 5f       	subi	r22, 0xF8	; 248
    6e02:	7f 4f       	sbci	r23, 0xFF	; 255
    6e04:	ce 01       	movw	r24, r28
    6e06:	4d 96       	adiw	r24, 0x1d	; 29
    6e08:	0e 94 1d 5c 	call	0xb83a	; 0xb83a <memcmp>
    6e0c:	89 2b       	or	r24, r25
    6e0e:	99 f4       	brne	.+38     	; 0x6e36 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x102>
    6e10:	f7 01       	movw	r30, r14
    6e12:	80 81       	ld	r24, Z
    6e14:	91 81       	ldd	r25, Z+1	; 0x01
    6e16:	a2 81       	ldd	r26, Z+2	; 0x02
    6e18:	b3 81       	ldd	r27, Z+3	; 0x03
    6e1a:	88 16       	cp	r8, r24
    6e1c:	99 06       	cpc	r9, r25
    6e1e:	aa 06       	cpc	r10, r26
    6e20:	bb 06       	cpc	r11, r27
    6e22:	48 f0       	brcs	.+18     	; 0x6e36 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x102>
    6e24:	84 81       	ldd	r24, Z+4	; 0x04
    6e26:	95 81       	ldd	r25, Z+5	; 0x05
    6e28:	a6 81       	ldd	r26, Z+6	; 0x06
    6e2a:	b7 81       	ldd	r27, Z+7	; 0x07
    6e2c:	88 15       	cp	r24, r8
    6e2e:	99 05       	cpc	r25, r9
    6e30:	aa 05       	cpc	r26, r10
    6e32:	bb 05       	cpc	r27, r11
    6e34:	28 f4       	brcc	.+10     	; 0x6e40 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x10c>
        {
            // Need to read the rest of the packet here regardless
            _dhcpUdpSocket.flush();
    6e36:	c8 01       	movw	r24, r16
    6e38:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <_ZN11EthernetUDP5flushEv>
            return 0;
    6e3c:	80 e0       	ldi	r24, 0x00	; 0
    6e3e:	34 c1       	rjmp	.+616    	; 0x70a8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x374>
        }

        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
    6e40:	89 89       	ldd	r24, Y+17	; 0x11
    6e42:	9a 89       	ldd	r25, Y+18	; 0x12
    6e44:	ab 89       	ldd	r26, Y+19	; 0x13
    6e46:	bc 89       	ldd	r27, Y+20	; 0x14
    6e48:	f7 01       	movw	r30, r14
    6e4a:	86 87       	std	Z+14, r24	; 0x0e
    6e4c:	97 87       	std	Z+15, r25	; 0x0f
    6e4e:	a0 8b       	std	Z+16, r26	; 0x10
    6e50:	b1 8b       	std	Z+17, r27	; 0x11
    6e52:	3e ec       	ldi	r19, 0xCE	; 206
    6e54:	c3 2e       	mov	r12, r19
    6e56:	d1 2c       	mov	r13, r1
        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
    6e58:	c8 01       	movw	r24, r16
    6e5a:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    6e5e:	f1 e0       	ldi	r31, 0x01	; 1
    6e60:	cf 1a       	sub	r12, r31
    6e62:	d1 08       	sbc	r13, r1
        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
    6e64:	c9 f7       	brne	.-14     	; 0x6e58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x124>
    6e66:	19 a6       	std	Y+41, r1	; 0x29
                    _dhcpT2 = ntohl(_dhcpT2);
                    break;

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    6e68:	c7 01       	movw	r24, r14
    6e6a:	82 96       	adiw	r24, 0x22	; 34
    6e6c:	9b a7       	std	Y+43, r25	; 0x2b
    6e6e:	8a a7       	std	Y+42, r24	; 0x2a
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    6e70:	f7 01       	movw	r30, r14
    6e72:	b6 96       	adiw	r30, 0x26	; 38
    6e74:	fd a7       	std	Y+45, r31	; 0x2d
    6e76:	ec a7       	std	Y+44, r30	; 0x2c
                    _dhcpT1 = ntohl(_dhcpT1);
                    break;

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    6e78:	08 96       	adiw	r24, 0x08	; 8
    6e7a:	9f a7       	std	Y+47, r25	; 0x2f
    6e7c:	8e a7       	std	Y+46, r24	; 0x2e
    6e7e:	3c 97       	sbiw	r30, 0x0c	; 12
    6e80:	6f 01       	movw	r12, r30
    6e82:	8e 96       	adiw	r24, 0x2e	; 46
    6e84:	99 ab       	std	Y+49, r25	; 0x31
    6e86:	88 ab       	std	Y+48, r24	; 0x30
                    type = _dhcpUdpSocket.read();
                    break;
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    6e88:	38 97       	sbiw	r30, 0x08	; 8
    6e8a:	fb ab       	std	Y+51, r31	; 0x33
    6e8c:	ea ab       	std	Y+50, r30	; 0x32
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    6e8e:	57 01       	movw	r10, r14
    6e90:	f6 e1       	ldi	r31, 0x16	; 22
    6e92:	af 0e       	add	r10, r31
    6e94:	b1 1c       	adc	r11, r1
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    6e96:	47 01       	movw	r8, r14
    6e98:	8e e1       	ldi	r24, 0x1E	; 30
    6e9a:	88 0e       	add	r8, r24
    6e9c:	91 1c       	adc	r9, r1
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
    6e9e:	c8 01       	movw	r24, r16
    6ea0:	0e 94 c7 41 	call	0x838e	; 0x838e <_ZN11EthernetUDP9availableEv>
    6ea4:	18 16       	cp	r1, r24
    6ea6:	19 06       	cpc	r1, r25
    6ea8:	0c f0       	brlt	.+2      	; 0x6eac <_ZN9DhcpClass17parseDHCPResponseEmRm+0x178>
    6eaa:	93 cf       	rjmp	.-218    	; 0x6dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x9e>
        {
            switch (_dhcpUdpSocket.read()) 
    6eac:	c8 01       	movw	r24, r16
    6eae:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    6eb2:	83 33       	cpi	r24, 0x33	; 51
    6eb4:	91 05       	cpc	r25, r1
    6eb6:	09 f4       	brne	.+2      	; 0x6eba <_ZN9DhcpClass17parseDHCPResponseEmRm+0x186>
    6eb8:	cd c0       	rjmp	.+410    	; 0x7054 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x320>
    6eba:	f4 f4       	brge	.+60     	; 0x6ef8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1c4>
    6ebc:	81 30       	cpi	r24, 0x01	; 1
    6ebe:	91 05       	cpc	r25, r1
    6ec0:	b9 f1       	breq	.+110    	; 0x6f30 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fc>
    6ec2:	1c f4       	brge	.+6      	; 0x6eca <_ZN9DhcpClass17parseDHCPResponseEmRm+0x196>
    6ec4:	89 2b       	or	r24, r25
    6ec6:	59 f3       	breq	.-42     	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
    6ec8:	df c0       	rjmp	.+446    	; 0x7088 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x354>
    6eca:	83 30       	cpi	r24, 0x03	; 3
    6ecc:	91 05       	cpc	r25, r1
    6ece:	c1 f1       	breq	.+112    	; 0x6f40 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20c>
    6ed0:	06 97       	sbiw	r24, 0x06	; 6
    6ed2:	09 f0       	breq	.+2      	; 0x6ed6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1a2>
    6ed4:	d9 c0       	rjmp	.+434    	; 0x7088 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x354>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
    6ed6:	c8 01       	movw	r24, r16
    6ed8:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    6edc:	3c 01       	movw	r6, r24
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    6ede:	44 e0       	ldi	r20, 0x04	; 4
    6ee0:	50 e0       	ldi	r21, 0x00	; 0
    6ee2:	b4 01       	movw	r22, r8
    6ee4:	c8 01       	movw	r24, r16
    6ee6:	0e 94 4c 42 	call	0x8498	; 0x8498 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    6eea:	21 2c       	mov	r2, r1
    6eec:	31 2c       	mov	r3, r1
    6eee:	77 24       	eor	r7, r7
    6ef0:	f4 e0       	ldi	r31, 0x04	; 4
    6ef2:	6f 1a       	sub	r6, r31
    6ef4:	71 08       	sbc	r7, r1
    6ef6:	3f c0       	rjmp	.+126    	; 0x6f76 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x242>
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
        {
            switch (_dhcpUdpSocket.read()) 
    6ef8:	8a 33       	cpi	r24, 0x3A	; 58
    6efa:	91 05       	cpc	r25, r1
    6efc:	09 f4       	brne	.+2      	; 0x6f00 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1cc>
    6efe:	7e c0       	rjmp	.+252    	; 0x6ffc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2c8>
    6f00:	3c f4       	brge	.+14     	; 0x6f10 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1dc>
    6f02:	85 33       	cpi	r24, 0x35	; 53
    6f04:	91 05       	cpc	r25, r1
    6f06:	61 f0       	breq	.+24     	; 0x6f20 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1ec>
    6f08:	c6 97       	sbiw	r24, 0x36	; 54
    6f0a:	09 f4       	brne	.+2      	; 0x6f0e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1da>
    6f0c:	3f c0       	rjmp	.+126    	; 0x6f8c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x258>
    6f0e:	bc c0       	rjmp	.+376    	; 0x7088 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x354>
    6f10:	8b 33       	cpi	r24, 0x3B	; 59
    6f12:	91 05       	cpc	r25, r1
    6f14:	09 f4       	brne	.+2      	; 0x6f18 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1e4>
    6f16:	88 c0       	rjmp	.+272    	; 0x7028 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2f4>
    6f18:	8f 3f       	cpi	r24, 0xFF	; 255
    6f1a:	91 05       	cpc	r25, r1
    6f1c:	01 f2       	breq	.-128    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
    6f1e:	b4 c0       	rjmp	.+360    	; 0x7088 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x354>
                    
                case padOption :
                    break;
                
                case dhcpMessageType :
                    opt_len = _dhcpUdpSocket.read();
    6f20:	c8 01       	movw	r24, r16
    6f22:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
                    type = _dhcpUdpSocket.read();
    6f26:	c8 01       	movw	r24, r16
    6f28:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    6f2c:	89 a7       	std	Y+41, r24	; 0x29
                    break;
    6f2e:	b7 cf       	rjmp	.-146    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
    6f30:	c8 01       	movw	r24, r16
    6f32:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    6f36:	44 e0       	ldi	r20, 0x04	; 4
    6f38:	50 e0       	ldi	r21, 0x00	; 0
    6f3a:	6a a9       	ldd	r22, Y+50	; 0x32
    6f3c:	7b a9       	ldd	r23, Y+51	; 0x33
    6f3e:	3a c0       	rjmp	.+116    	; 0x6fb4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x280>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
    6f40:	c8 01       	movw	r24, r16
    6f42:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    6f46:	3c 01       	movw	r6, r24
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    6f48:	44 e0       	ldi	r20, 0x04	; 4
    6f4a:	50 e0       	ldi	r21, 0x00	; 0
    6f4c:	b5 01       	movw	r22, r10
    6f4e:	c8 01       	movw	r24, r16
    6f50:	0e 94 4c 42 	call	0x8498	; 0x8498 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    6f54:	21 2c       	mov	r2, r1
    6f56:	31 2c       	mov	r3, r1
    6f58:	77 24       	eor	r7, r7
    6f5a:	94 e0       	ldi	r25, 0x04	; 4
    6f5c:	69 1a       	sub	r6, r25
    6f5e:	71 08       	sbc	r7, r1
    6f60:	26 14       	cp	r2, r6
    6f62:	37 04       	cpc	r3, r7
    6f64:	0c f0       	brlt	.+2      	; 0x6f68 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x234>
    6f66:	9b cf       	rjmp	.-202    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
                    {
                        _dhcpUdpSocket.read();
    6f68:	c8 01       	movw	r24, r16
    6f6a:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    6f6e:	ef ef       	ldi	r30, 0xFF	; 255
    6f70:	2e 1a       	sub	r2, r30
    6f72:	3e 0a       	sbc	r3, r30
    6f74:	f5 cf       	rjmp	.-22     	; 0x6f60 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22c>
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    6f76:	26 14       	cp	r2, r6
    6f78:	37 04       	cpc	r3, r7
    6f7a:	0c f0       	brlt	.+2      	; 0x6f7e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x24a>
    6f7c:	90 cf       	rjmp	.-224    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
                    {
                        _dhcpUdpSocket.read();
    6f7e:	c8 01       	movw	r24, r16
    6f80:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    6f84:	8f ef       	ldi	r24, 0xFF	; 255
    6f86:	28 1a       	sub	r2, r24
    6f88:	38 0a       	sbc	r3, r24
    6f8a:	f5 cf       	rjmp	.-22     	; 0x6f76 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x242>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
    6f8c:	c8 01       	movw	r24, r16
    6f8e:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    6f92:	78 2e       	mov	r7, r24
                    if ((_dhcpDhcpServerIp[0] == 0 && _dhcpDhcpServerIp[1] == 0 &&
                         _dhcpDhcpServerIp[2] == 0 && _dhcpDhcpServerIp[3] == 0) ||
    6f94:	f7 01       	movw	r30, r14
    6f96:	82 8d       	ldd	r24, Z+26	; 0x1a
    6f98:	81 11       	cpse	r24, r1
    6f9a:	10 c0       	rjmp	.+32     	; 0x6fbc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x288>
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if ((_dhcpDhcpServerIp[0] == 0 && _dhcpDhcpServerIp[1] == 0 &&
    6f9c:	83 8d       	ldd	r24, Z+27	; 0x1b
    6f9e:	81 11       	cpse	r24, r1
    6fa0:	0d c0       	rjmp	.+26     	; 0x6fbc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x288>
    6fa2:	84 8d       	ldd	r24, Z+28	; 0x1c
    6fa4:	81 11       	cpse	r24, r1
    6fa6:	0a c0       	rjmp	.+20     	; 0x6fbc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x288>
                         _dhcpDhcpServerIp[2] == 0 && _dhcpDhcpServerIp[3] == 0) ||
    6fa8:	85 8d       	ldd	r24, Z+29	; 0x1d
    6faa:	81 11       	cpse	r24, r1
    6fac:	07 c0       	rjmp	.+14     	; 0x6fbc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x288>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP())
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    6fae:	44 e0       	ldi	r20, 0x04	; 4
    6fb0:	50 e0       	ldi	r21, 0x00	; 0
    6fb2:	b6 01       	movw	r22, r12
    6fb4:	c8 01       	movw	r24, r16
    6fb6:	0e 94 4c 42 	call	0x8498	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    6fba:	71 cf       	rjmp	.-286    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
    6fbc:	e8 a9       	ldd	r30, Y+48	; 0x30
    6fbe:	f9 a9       	ldd	r31, Y+49	; 0x31
    6fc0:	20 80       	ld	r2, Z
    6fc2:	31 80       	ldd	r3, Z+1	; 0x01
    6fc4:	42 80       	ldd	r4, Z+2	; 0x02
    6fc6:	53 80       	ldd	r5, Z+3	; 0x03
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if ((_dhcpDhcpServerIp[0] == 0 && _dhcpDhcpServerIp[1] == 0 &&
                         _dhcpDhcpServerIp[2] == 0 && _dhcpDhcpServerIp[3] == 0) ||
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP())
    6fc8:	b6 01       	movw	r22, r12
    6fca:	ce 01       	movw	r24, r28
    6fcc:	83 96       	adiw	r24, 0x23	; 35
    6fce:	0e 94 ce 4e 	call	0x9d9c	; 0x9d9c <_ZN9IPAddressC1EPKh>
    IPAddress(const uint8_t *address);

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() const { return _address.dword; };
    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };
    6fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    6fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    6fd6:	af a1       	ldd	r26, Y+39	; 0x27
    6fd8:	b8 a5       	ldd	r27, Y+40	; 0x28
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if ((_dhcpDhcpServerIp[0] == 0 && _dhcpDhcpServerIp[1] == 0 &&
    6fda:	82 15       	cp	r24, r2
    6fdc:	93 05       	cpc	r25, r3
    6fde:	a4 05       	cpc	r26, r4
    6fe0:	b5 05       	cpc	r27, r5
    6fe2:	29 f3       	breq	.-54     	; 0x6fae <_ZN9DhcpClass17parseDHCPResponseEmRm+0x27a>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
    6fe4:	21 2c       	mov	r2, r1
    6fe6:	31 2c       	mov	r3, r1
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    6fe8:	72 14       	cp	r7, r2
    6fea:	09 f4       	brne	.+2      	; 0x6fee <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ba>
    6fec:	58 cf       	rjmp	.-336    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
                        {
                            _dhcpUdpSocket.read();
    6fee:	c8 01       	movw	r24, r16
    6ff0:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    6ff4:	ff ef       	ldi	r31, 0xFF	; 255
    6ff6:	2f 1a       	sub	r2, r31
    6ff8:	3f 0a       	sbc	r3, r31
    6ffa:	f6 cf       	rjmp	.-20     	; 0x6fe8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2b4>
                        }
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
    6ffc:	c8 01       	movw	r24, r16
    6ffe:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    7002:	44 e0       	ldi	r20, 0x04	; 4
    7004:	50 e0       	ldi	r21, 0x00	; 0
    7006:	6c a5       	ldd	r22, Y+44	; 0x2c
    7008:	7d a5       	ldd	r23, Y+45	; 0x2d
    700a:	c8 01       	movw	r24, r16
    700c:	0e 94 4c 42 	call	0x8498	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    7010:	f7 01       	movw	r30, r14
    7012:	66 a1       	ldd	r22, Z+38	; 0x26
    7014:	77 a1       	ldd	r23, Z+39	; 0x27
    7016:	80 a5       	ldd	r24, Z+40	; 0x28
    7018:	91 a5       	ldd	r25, Z+41	; 0x29
    701a:	0e 94 af 57 	call	0xaf5e	; 0xaf5e <__bswapsi2>
                    _dhcpT1 = ntohl(_dhcpT1);
    701e:	66 a3       	std	Z+38, r22	; 0x26
    7020:	77 a3       	std	Z+39, r23	; 0x27
    7022:	80 a7       	std	Z+40, r24	; 0x28
    7024:	91 a7       	std	Z+41, r25	; 0x29
                    break;
    7026:	3b cf       	rjmp	.-394    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
    7028:	c8 01       	movw	r24, r16
    702a:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    702e:	44 e0       	ldi	r20, 0x04	; 4
    7030:	50 e0       	ldi	r21, 0x00	; 0
    7032:	6e a5       	ldd	r22, Y+46	; 0x2e
    7034:	7f a5       	ldd	r23, Y+47	; 0x2f
    7036:	c8 01       	movw	r24, r16
    7038:	0e 94 4c 42 	call	0x8498	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    703c:	f7 01       	movw	r30, r14
    703e:	62 a5       	ldd	r22, Z+42	; 0x2a
    7040:	73 a5       	ldd	r23, Z+43	; 0x2b
    7042:	84 a5       	ldd	r24, Z+44	; 0x2c
    7044:	95 a5       	ldd	r25, Z+45	; 0x2d
    7046:	0e 94 af 57 	call	0xaf5e	; 0xaf5e <__bswapsi2>
                    _dhcpT2 = ntohl(_dhcpT2);
    704a:	62 a7       	std	Z+42, r22	; 0x2a
    704c:	73 a7       	std	Z+43, r23	; 0x2b
    704e:	84 a7       	std	Z+44, r24	; 0x2c
    7050:	95 a7       	std	Z+45, r25	; 0x2d
                    break;
    7052:	25 cf       	rjmp	.-438    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
    7054:	c8 01       	movw	r24, r16
    7056:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    705a:	44 e0       	ldi	r20, 0x04	; 4
    705c:	50 e0       	ldi	r21, 0x00	; 0
    705e:	6a a5       	ldd	r22, Y+42	; 0x2a
    7060:	7b a5       	ldd	r23, Y+43	; 0x2b
    7062:	c8 01       	movw	r24, r16
    7064:	0e 94 4c 42 	call	0x8498	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    7068:	f7 01       	movw	r30, r14
    706a:	62 a1       	ldd	r22, Z+34	; 0x22
    706c:	73 a1       	ldd	r23, Z+35	; 0x23
    706e:	84 a1       	ldd	r24, Z+36	; 0x24
    7070:	95 a1       	ldd	r25, Z+37	; 0x25
    7072:	0e 94 af 57 	call	0xaf5e	; 0xaf5e <__bswapsi2>
                    _dhcpLeaseTime = ntohl(_dhcpLeaseTime);
    7076:	62 a3       	std	Z+34, r22	; 0x22
    7078:	73 a3       	std	Z+35, r23	; 0x23
    707a:	84 a3       	std	Z+36, r24	; 0x24
    707c:	95 a3       	std	Z+37, r25	; 0x25
                    _renewInSec = _dhcpLeaseTime;
    707e:	66 a7       	std	Z+46, r22	; 0x2e
    7080:	77 a7       	std	Z+47, r23	; 0x2f
    7082:	80 ab       	std	Z+48, r24	; 0x30
    7084:	91 ab       	std	Z+49, r25	; 0x31
                    break;
    7086:	0b cf       	rjmp	.-490    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>

                default :
                    opt_len = _dhcpUdpSocket.read();
    7088:	c8 01       	movw	r24, r16
    708a:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    708e:	38 2e       	mov	r3, r24
                    // Skip over the rest of this option
                    while (opt_len--)
    7090:	61 2c       	mov	r6, r1
    7092:	71 2c       	mov	r7, r1
    7094:	36 14       	cp	r3, r6
    7096:	09 f4       	brne	.+2      	; 0x709a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x366>
    7098:	02 cf       	rjmp	.-508    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16a>
                    {
                        _dhcpUdpSocket.read();
    709a:	c8 01       	movw	r24, r16
    709c:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN11EthernetUDP4readEv>
    70a0:	ff ef       	ldi	r31, 0xFF	; 255
    70a2:	6f 1a       	sub	r6, r31
    70a4:	7f 0a       	sbc	r7, r31
    70a6:	f6 cf       	rjmp	.-20     	; 0x7094 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x360>

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();

    return type;
}
    70a8:	e3 96       	adiw	r28, 0x33	; 51
    70aa:	0f b6       	in	r0, 0x3f	; 63
    70ac:	f8 94       	cli
    70ae:	de bf       	out	0x3e, r29	; 62
    70b0:	0f be       	out	0x3f, r0	; 63
    70b2:	cd bf       	out	0x3d, r28	; 61
    70b4:	df 91       	pop	r29
    70b6:	cf 91       	pop	r28
    70b8:	1f 91       	pop	r17
    70ba:	0f 91       	pop	r16
    70bc:	ff 90       	pop	r15
    70be:	ef 90       	pop	r14
    70c0:	df 90       	pop	r13
    70c2:	cf 90       	pop	r12
    70c4:	bf 90       	pop	r11
    70c6:	af 90       	pop	r10
    70c8:	9f 90       	pop	r9
    70ca:	8f 90       	pop	r8
    70cc:	7f 90       	pop	r7
    70ce:	6f 90       	pop	r6
    70d0:	5f 90       	pop	r5
    70d2:	4f 90       	pop	r4
    70d4:	3f 90       	pop	r3
    70d6:	2f 90       	pop	r2
    70d8:	08 95       	ret

000070da <_ZN9DhcpClass18request_DHCP_leaseEv>:
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    70da:	2f 92       	push	r2
    70dc:	3f 92       	push	r3
    70de:	4f 92       	push	r4
    70e0:	5f 92       	push	r5
    70e2:	6f 92       	push	r6
    70e4:	7f 92       	push	r7
    70e6:	8f 92       	push	r8
    70e8:	9f 92       	push	r9
    70ea:	af 92       	push	r10
    70ec:	bf 92       	push	r11
    70ee:	cf 92       	push	r12
    70f0:	df 92       	push	r13
    70f2:	ef 92       	push	r14
    70f4:	ff 92       	push	r15
    70f6:	0f 93       	push	r16
    70f8:	1f 93       	push	r17
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	cd b7       	in	r28, 0x3d	; 61
    7100:	de b7       	in	r29, 0x3e	; 62
    7102:	27 97       	sbiw	r28, 0x07	; 7
    7104:	0f b6       	in	r0, 0x3f	; 63
    7106:	f8 94       	cli
    7108:	de bf       	out	0x3e, r29	; 62
    710a:	0f be       	out	0x3f, r0	; 63
    710c:	cd bf       	out	0x3d, r28	; 61
    710e:	8c 01       	movw	r16, r24
    uint8_t messageType = 0;
  
    
  
    // Pick an initial transaction ID
    _dhcpTransactionId = random(1UL, 2000UL);
    7110:	20 ed       	ldi	r18, 0xD0	; 208
    7112:	37 e0       	ldi	r19, 0x07	; 7
    7114:	40 e0       	ldi	r20, 0x00	; 0
    7116:	50 e0       	ldi	r21, 0x00	; 0
    7118:	61 e0       	ldi	r22, 0x01	; 1
    711a:	70 e0       	ldi	r23, 0x00	; 0
    711c:	80 e0       	ldi	r24, 0x00	; 0
    711e:	90 e0       	ldi	r25, 0x00	; 0
    7120:	0e 94 60 52 	call	0xa4c0	; 0xa4c0 <_Z6randomll>
    7124:	d8 01       	movw	r26, r16
    7126:	14 96       	adiw	r26, 0x04	; 4
    7128:	6d 93       	st	X+, r22
    712a:	7d 93       	st	X+, r23
    712c:	8d 93       	st	X+, r24
    712e:	9c 93       	st	X, r25
    7130:	17 97       	sbiw	r26, 0x07	; 7
    _dhcpInitialTransactionId = _dhcpTransactionId;
    7132:	f8 01       	movw	r30, r16
    7134:	60 83       	st	Z, r22
    7136:	71 83       	std	Z+1, r23	; 0x01
    7138:	82 83       	std	Z+2, r24	; 0x02
    713a:	93 83       	std	Z+3, r25	; 0x03

    _dhcpUdpSocket.stop();
    713c:	48 01       	movw	r8, r16
    713e:	f7 e4       	ldi	r31, 0x47	; 71
    7140:	8f 0e       	add	r8, r31
    7142:	91 1c       	adc	r9, r1
    7144:	c4 01       	movw	r24, r8
    7146:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <_ZN11EthernetUDP4stopEv>
    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    714a:	64 e4       	ldi	r22, 0x44	; 68
    714c:	70 e0       	ldi	r23, 0x00	; 0
    714e:	c4 01       	movw	r24, r8
    7150:	0e 94 80 42 	call	0x8500	; 0x8500 <_ZN11EthernetUDP5beginEj>
    7154:	88 23       	and	r24, r24
    7156:	09 f4       	brne	.+2      	; 0x715a <_ZN9DhcpClass18request_DHCP_leaseEv+0x80>
    7158:	23 c1       	rjmp	.+582    	; 0x73a0 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2c6>
    
    presend_DHCP();
    
    int result = 0;
    
    unsigned long startTime = millis();
    715a:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    715e:	6b 01       	movw	r12, r22
    7160:	7c 01       	movw	r14, r24
      return 0;
    }
    
    presend_DHCP();
    
    int result = 0;
    7162:	a1 2c       	mov	r10, r1
    7164:	b1 2c       	mov	r11, r1
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    
    uint8_t messageType = 0;
    7166:	1d 82       	std	Y+5, r1	; 0x05
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    7168:	18 01       	movw	r2, r16
    716a:	86 e4       	ldi	r24, 0x46	; 70
    716c:	28 0e       	add	r2, r24
    716e:	31 1c       	adc	r3, r1
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    7170:	d8 01       	movw	r26, r16
    7172:	de 96       	adiw	r26, 0x3e	; 62
    7174:	bf 83       	std	Y+7, r27	; 0x07
    7176:	ae 83       	std	Y+6, r26	; 0x06
            if(messageType == DHCP_OFFER)
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    7178:	38 ee       	ldi	r19, 0xE8	; 232
    717a:	43 2e       	mov	r4, r19
    717c:	33 e0       	ldi	r19, 0x03	; 3
    717e:	53 2e       	mov	r5, r19
    7180:	61 2c       	mov	r6, r1
    7182:	71 2c       	mov	r7, r1
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    7184:	f1 01       	movw	r30, r2
    7186:	80 81       	ld	r24, Z
    7188:	83 30       	cpi	r24, 0x03	; 3
    718a:	09 f4       	brne	.+2      	; 0x718e <_ZN9DhcpClass18request_DHCP_leaseEv+0xb4>
    718c:	f8 c0       	rjmp	.+496    	; 0x737e <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a4>
    {
        if(_dhcp_state == STATE_DHCP_START)
    718e:	81 11       	cpse	r24, r1
    7190:	1e c0       	rjmp	.+60     	; 0x71ce <_ZN9DhcpClass18request_DHCP_leaseEv+0xf4>
        {
            _dhcpTransactionId++;
    7192:	f8 01       	movw	r30, r16
    7194:	84 81       	ldd	r24, Z+4	; 0x04
    7196:	95 81       	ldd	r25, Z+5	; 0x05
    7198:	a6 81       	ldd	r26, Z+6	; 0x06
    719a:	b7 81       	ldd	r27, Z+7	; 0x07
    719c:	01 96       	adiw	r24, 0x01	; 1
    719e:	a1 1d       	adc	r26, r1
    71a0:	b1 1d       	adc	r27, r1
    71a2:	84 83       	std	Z+4, r24	; 0x04
    71a4:	95 83       	std	Z+5, r25	; 0x05
    71a6:	a6 83       	std	Z+6, r26	; 0x06
    71a8:	b7 83       	std	Z+7, r27	; 0x07
            
            send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
    71aa:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    71ae:	6c 19       	sub	r22, r12
    71b0:	7d 09       	sbc	r23, r13
    71b2:	8e 09       	sbc	r24, r14
    71b4:	9f 09       	sbc	r25, r15
    71b6:	a3 01       	movw	r20, r6
    71b8:	92 01       	movw	r18, r4
    71ba:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    71be:	a9 01       	movw	r20, r18
    71c0:	61 e0       	ldi	r22, 0x01	; 1
    71c2:	c8 01       	movw	r24, r16
    71c4:	a1 dc       	rcall	.-1726   	; 0x6b08 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
    71c6:	81 e0       	ldi	r24, 0x01	; 1
            _dhcp_state = STATE_DHCP_DISCOVER;
    71c8:	d1 01       	movw	r26, r2
    71ca:	8c 93       	st	X, r24
    71cc:	ba c0       	rjmp	.+372    	; 0x7342 <_ZN9DhcpClass18request_DHCP_leaseEv+0x268>
    71ce:	84 30       	cpi	r24, 0x04	; 4
        }
        else if(_dhcp_state == STATE_DHCP_REREQUEST){
    71d0:	f1 f4       	brne	.+60     	; 0x720e <_ZN9DhcpClass18request_DHCP_leaseEv+0x134>
    71d2:	f8 01       	movw	r30, r16
            _dhcpTransactionId++;
    71d4:	84 81       	ldd	r24, Z+4	; 0x04
    71d6:	95 81       	ldd	r25, Z+5	; 0x05
    71d8:	a6 81       	ldd	r26, Z+6	; 0x06
    71da:	b7 81       	ldd	r27, Z+7	; 0x07
    71dc:	01 96       	adiw	r24, 0x01	; 1
    71de:	a1 1d       	adc	r26, r1
    71e0:	b1 1d       	adc	r27, r1
    71e2:	84 83       	std	Z+4, r24	; 0x04
    71e4:	95 83       	std	Z+5, r25	; 0x05
    71e6:	a6 83       	std	Z+6, r26	; 0x06
    71e8:	b7 83       	std	Z+7, r27	; 0x07
    71ea:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
            send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime)/1000));
    71ee:	6c 19       	sub	r22, r12
    71f0:	7d 09       	sbc	r23, r13
    71f2:	8e 09       	sbc	r24, r14
    71f4:	9f 09       	sbc	r25, r15
    71f6:	a3 01       	movw	r20, r6
    71f8:	92 01       	movw	r18, r4
    71fa:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    71fe:	a9 01       	movw	r20, r18
    7200:	63 e0       	ldi	r22, 0x03	; 3
    7202:	c8 01       	movw	r24, r16
    7204:	81 dc       	rcall	.-1790   	; 0x6b08 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
    7206:	e2 e0       	ldi	r30, 0x02	; 2
    7208:	d1 01       	movw	r26, r2
            _dhcp_state = STATE_DHCP_REQUEST;
    720a:	ec 93       	st	X, r30
    720c:	9a c0       	rjmp	.+308    	; 0x7342 <_ZN9DhcpClass18request_DHCP_leaseEv+0x268>
    720e:	81 30       	cpi	r24, 0x01	; 1
    7210:	51 f5       	brne	.+84     	; 0x7266 <_ZN9DhcpClass18request_DHCP_leaseEv+0x18c>
        }
        else if(_dhcp_state == STATE_DHCP_DISCOVER)
    7212:	ae 81       	ldd	r26, Y+6	; 0x06
    7214:	bf 81       	ldd	r27, Y+7	; 0x07
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    7216:	4d 91       	ld	r20, X+
    7218:	5d 91       	ld	r21, X+
    721a:	6d 91       	ld	r22, X+
    721c:	7c 91       	ld	r23, X
    721e:	9e 01       	movw	r18, r28
    7220:	2f 5f       	subi	r18, 0xFF	; 255
    7222:	3f 4f       	sbci	r19, 0xFF	; 255
    7224:	c8 01       	movw	r24, r16
    7226:	86 dd       	rcall	.-1268   	; 0x6d34 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    7228:	8d 83       	std	Y+5, r24	; 0x05
    722a:	82 30       	cpi	r24, 0x02	; 2
    722c:	09 f0       	breq	.+2      	; 0x7230 <_ZN9DhcpClass18request_DHCP_leaseEv+0x156>
    722e:	89 c0       	rjmp	.+274    	; 0x7342 <_ZN9DhcpClass18request_DHCP_leaseEv+0x268>
            if(messageType == DHCP_OFFER)
    7230:	89 81       	ldd	r24, Y+1	; 0x01
    7232:	9a 81       	ldd	r25, Y+2	; 0x02
    7234:	ab 81       	ldd	r26, Y+3	; 0x03
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
    7236:	bc 81       	ldd	r27, Y+4	; 0x04
    7238:	f8 01       	movw	r30, r16
    723a:	84 83       	std	Z+4, r24	; 0x04
    723c:	95 83       	std	Z+5, r25	; 0x05
    723e:	a6 83       	std	Z+6, r26	; 0x06
    7240:	b7 83       	std	Z+7, r27	; 0x07
    7242:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    7246:	6c 19       	sub	r22, r12
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    7248:	7d 09       	sbc	r23, r13
    724a:	8e 09       	sbc	r24, r14
    724c:	9f 09       	sbc	r25, r15
    724e:	a3 01       	movw	r20, r6
    7250:	92 01       	movw	r18, r4
    7252:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    7256:	a9 01       	movw	r20, r18
    7258:	63 e0       	ldi	r22, 0x03	; 3
    725a:	c8 01       	movw	r24, r16
    725c:	55 dc       	rcall	.-1878   	; 0x6b08 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
    725e:	ed 81       	ldd	r30, Y+5	; 0x05
    7260:	d1 01       	movw	r26, r2
    7262:	ec 93       	st	X, r30
    7264:	74 c0       	rjmp	.+232    	; 0x734e <_ZN9DhcpClass18request_DHCP_leaseEv+0x274>
                _dhcp_state = STATE_DHCP_REQUEST;
    7266:	82 30       	cpi	r24, 0x02	; 2
    7268:	09 f0       	breq	.+2      	; 0x726c <_ZN9DhcpClass18request_DHCP_leaseEv+0x192>
    726a:	6b c0       	rjmp	.+214    	; 0x7342 <_ZN9DhcpClass18request_DHCP_leaseEv+0x268>
    726c:	ae 81       	ldd	r26, Y+6	; 0x06
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
    726e:	bf 81       	ldd	r27, Y+7	; 0x07
    7270:	4d 91       	ld	r20, X+
    7272:	5d 91       	ld	r21, X+
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    7274:	6d 91       	ld	r22, X+
    7276:	7c 91       	ld	r23, X
    7278:	9e 01       	movw	r18, r28
    727a:	2f 5f       	subi	r18, 0xFF	; 255
    727c:	3f 4f       	sbci	r19, 0xFF	; 255
    727e:	c8 01       	movw	r24, r16
    7280:	59 dd       	rcall	.-1358   	; 0x6d34 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    7282:	8d 83       	std	Y+5, r24	; 0x05
    7284:	85 30       	cpi	r24, 0x05	; 5
    7286:	09 f0       	breq	.+2      	; 0x728a <_ZN9DhcpClass18request_DHCP_leaseEv+0x1b0>
    7288:	56 c0       	rjmp	.+172    	; 0x7336 <_ZN9DhcpClass18request_DHCP_leaseEv+0x25c>
    728a:	83 e0       	ldi	r24, 0x03	; 3
    728c:	f1 01       	movw	r30, r2
            if(messageType == DHCP_ACK)
    728e:	80 83       	st	Z, r24
    7290:	f8 01       	movw	r30, r16
    7292:	82 a1       	ldd	r24, Z+34	; 0x22
            {
                _dhcp_state = STATE_DHCP_LEASED;
    7294:	93 a1       	ldd	r25, Z+35	; 0x23
    7296:	a4 a1       	ldd	r26, Z+36	; 0x24
    7298:	b5 a1       	ldd	r27, Z+37	; 0x25
                result = 1;
                //use default lease time if we didn't get it
                if(_dhcpLeaseTime == 0){
    729a:	89 2b       	or	r24, r25
    729c:	8a 2b       	or	r24, r26
    729e:	8b 2b       	or	r24, r27
    72a0:	41 f4       	brne	.+16     	; 0x72b2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d8>
    72a2:	84 e8       	ldi	r24, 0x84	; 132
    72a4:	93 e0       	ldi	r25, 0x03	; 3
    72a6:	a0 e0       	ldi	r26, 0x00	; 0
    72a8:	b0 e0       	ldi	r27, 0x00	; 0
    72aa:	82 a3       	std	Z+34, r24	; 0x22
                    _dhcpLeaseTime = DEFAULT_LEASE;
    72ac:	93 a3       	std	Z+35, r25	; 0x23
    72ae:	a4 a3       	std	Z+36, r26	; 0x24
    72b0:	b5 a3       	std	Z+37, r27	; 0x25
    72b2:	f8 01       	movw	r30, r16
    72b4:	86 a1       	ldd	r24, Z+38	; 0x26
    72b6:	97 a1       	ldd	r25, Z+39	; 0x27
    72b8:	a0 a5       	ldd	r26, Z+40	; 0x28
    72ba:	b1 a5       	ldd	r27, Z+41	; 0x29
                }
                //calculate T1 & T2 if we didn't get it
                if(_dhcpT1 == 0){
    72bc:	89 2b       	or	r24, r25
    72be:	8a 2b       	or	r24, r26
    72c0:	8b 2b       	or	r24, r27
    72c2:	61 f4       	brne	.+24     	; 0x72dc <_ZN9DhcpClass18request_DHCP_leaseEv+0x202>
    72c4:	82 a1       	ldd	r24, Z+34	; 0x22
    72c6:	93 a1       	ldd	r25, Z+35	; 0x23
    72c8:	a4 a1       	ldd	r26, Z+36	; 0x24
    72ca:	b5 a1       	ldd	r27, Z+37	; 0x25
    72cc:	b6 95       	lsr	r27
                    //T1 should be 50% of _dhcpLeaseTime
                    _dhcpT1 = _dhcpLeaseTime >> 1;
    72ce:	a7 95       	ror	r26
    72d0:	97 95       	ror	r25
    72d2:	87 95       	ror	r24
    72d4:	86 a3       	std	Z+38, r24	; 0x26
    72d6:	97 a3       	std	Z+39, r25	; 0x27
    72d8:	a0 a7       	std	Z+40, r26	; 0x28
    72da:	b1 a7       	std	Z+41, r27	; 0x29
    72dc:	d8 01       	movw	r26, r16
    72de:	9a 96       	adiw	r26, 0x2a	; 42
    72e0:	4d 91       	ld	r20, X+
    72e2:	5d 91       	ld	r21, X+
    72e4:	6d 91       	ld	r22, X+
                }
                if(_dhcpT2 == 0){
    72e6:	7c 91       	ld	r23, X
    72e8:	9d 97       	sbiw	r26, 0x2d	; 45
    72ea:	96 96       	adiw	r26, 0x26	; 38
    72ec:	8d 91       	ld	r24, X+
    72ee:	9d 91       	ld	r25, X+
    72f0:	0d 90       	ld	r0, X+
    72f2:	bc 91       	ld	r27, X
    72f4:	a0 2d       	mov	r26, r0
    72f6:	45 2b       	or	r20, r21
    72f8:	46 2b       	or	r20, r22
    72fa:	47 2b       	or	r20, r23
    72fc:	59 f4       	brne	.+22     	; 0x7314 <_ZN9DhcpClass18request_DHCP_leaseEv+0x23a>
    72fe:	ac 01       	movw	r20, r24
    7300:	bd 01       	movw	r22, r26
    7302:	44 0f       	add	r20, r20
    7304:	55 1f       	adc	r21, r21
    7306:	66 1f       	adc	r22, r22
                    //T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
                    _dhcpT2 = _dhcpT1 << 1;
    7308:	77 1f       	adc	r23, r23
    730a:	f8 01       	movw	r30, r16
    730c:	42 a7       	std	Z+42, r20	; 0x2a
    730e:	53 a7       	std	Z+43, r21	; 0x2b
    7310:	64 a7       	std	Z+44, r22	; 0x2c
    7312:	75 a7       	std	Z+45, r23	; 0x2d
    7314:	f8 01       	movw	r30, r16
    7316:	86 a7       	std	Z+46, r24	; 0x2e
    7318:	97 a7       	std	Z+47, r25	; 0x2f
    731a:	a0 ab       	std	Z+48, r26	; 0x30
    731c:	b1 ab       	std	Z+49, r27	; 0x31
                }
                _renewInSec = _dhcpT1;
    731e:	82 a5       	ldd	r24, Z+42	; 0x2a
    7320:	93 a5       	ldd	r25, Z+43	; 0x2b
    7322:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7324:	b5 a5       	ldd	r27, Z+45	; 0x2d
    7326:	82 ab       	std	Z+50, r24	; 0x32
                _rebindInSec = _dhcpT2;
    7328:	93 ab       	std	Z+51, r25	; 0x33
    732a:	a4 ab       	std	Z+52, r26	; 0x34
    732c:	b5 ab       	std	Z+53, r27	; 0x35
    732e:	aa 24       	eor	r10, r10
    7330:	a3 94       	inc	r10
    7332:	b1 2c       	mov	r11, r1
    7334:	0c c0       	rjmp	.+24     	; 0x734e <_ZN9DhcpClass18request_DHCP_leaseEv+0x274>
    7336:	fd 81       	ldd	r31, Y+5	; 0x05
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
            if(messageType == DHCP_ACK)
            {
                _dhcp_state = STATE_DHCP_LEASED;
                result = 1;
    7338:	f6 30       	cpi	r31, 0x06	; 6
    733a:	19 f4       	brne	.+6      	; 0x7342 <_ZN9DhcpClass18request_DHCP_leaseEv+0x268>
    733c:	d1 01       	movw	r26, r2
    733e:	1c 92       	st	X, r1
                    _dhcpT2 = _dhcpT1 << 1;
                }
                _renewInSec = _dhcpT1;
                _rebindInSec = _dhcpT2;
            }
            else if(messageType == DHCP_NAK)
    7340:	06 c0       	rjmp	.+12     	; 0x734e <_ZN9DhcpClass18request_DHCP_leaseEv+0x274>
    7342:	bd 81       	ldd	r27, Y+5	; 0x05
    7344:	bf 3f       	cpi	r27, 0xFF	; 255
                _dhcp_state = STATE_DHCP_START;
    7346:	19 f4       	brne	.+6      	; 0x734e <_ZN9DhcpClass18request_DHCP_leaseEv+0x274>
    7348:	f1 01       	movw	r30, r2
    734a:	10 82       	st	Z, r1
        }
        
        if(messageType == 255)
    734c:	1d 82       	std	Y+5, r1	; 0x05
    734e:	f1 e0       	ldi	r31, 0x01	; 1
    7350:	af 16       	cp	r10, r31
        {
            messageType = 0;
            _dhcp_state = STATE_DHCP_START;
    7352:	b1 04       	cpc	r11, r1
    7354:	09 f4       	brne	.+2      	; 0x7358 <_ZN9DhcpClass18request_DHCP_leaseEv+0x27e>
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    7356:	16 cf       	rjmp	.-468    	; 0x7184 <_ZN9DhcpClass18request_DHCP_leaseEv+0xaa>
            _dhcp_state = STATE_DHCP_START;
        }
        
        if(result != 1 && ((millis() - startTime) > _timeout))
    7358:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    735c:	6c 19       	sub	r22, r12
    735e:	7d 09       	sbc	r23, r13
    7360:	8e 09       	sbc	r24, r14
    7362:	9f 09       	sbc	r25, r15
    7364:	d8 01       	movw	r26, r16
    7366:	da 96       	adiw	r26, 0x3a	; 58
    7368:	2d 91       	ld	r18, X+
    736a:	3d 91       	ld	r19, X+
    736c:	4d 91       	ld	r20, X+
    736e:	5c 91       	ld	r21, X
    7370:	dd 97       	sbiw	r26, 0x3d	; 61
    7372:	26 17       	cp	r18, r22
    7374:	37 07       	cpc	r19, r23
    7376:	48 07       	cpc	r20, r24
    7378:	59 07       	cpc	r21, r25
    737a:	08 f0       	brcs	.+2      	; 0x737e <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a4>
    737c:	03 cf       	rjmp	.-506    	; 0x7184 <_ZN9DhcpClass18request_DHCP_leaseEv+0xaa>
    737e:	c4 01       	movw	r24, r8
    7380:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <_ZN11EthernetUDP4stopEv>
    7384:	f8 01       	movw	r30, r16
    7386:	84 81       	ldd	r24, Z+4	; 0x04
            break;
    }
    
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    7388:	95 81       	ldd	r25, Z+5	; 0x05
    738a:	a6 81       	ldd	r26, Z+6	; 0x06
    738c:	b7 81       	ldd	r27, Z+7	; 0x07
    _dhcpTransactionId++;
    738e:	01 96       	adiw	r24, 0x01	; 1
    7390:	a1 1d       	adc	r26, r1
    7392:	b1 1d       	adc	r27, r1
    7394:	84 83       	std	Z+4, r24	; 0x04
    7396:	95 83       	std	Z+5, r25	; 0x05
    7398:	a6 83       	std	Z+6, r26	; 0x06
    739a:	b7 83       	std	Z+7, r27	; 0x07
    739c:	c5 01       	movw	r24, r10
    739e:	02 c0       	rjmp	.+4      	; 0x73a4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ca>
    73a0:	80 e0       	ldi	r24, 0x00	; 0
    73a2:	90 e0       	ldi	r25, 0x00	; 0
    73a4:	27 96       	adiw	r28, 0x07	; 7

    return result;
    73a6:	0f b6       	in	r0, 0x3f	; 63
    73a8:	f8 94       	cli

    _dhcpUdpSocket.stop();
    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    {
      // Couldn't get a socket
      return 0;
    73aa:	de bf       	out	0x3e, r29	; 62
    73ac:	0f be       	out	0x3f, r0	; 63
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    _dhcpTransactionId++;

    return result;
}
    73ae:	cd bf       	out	0x3d, r28	; 61
    73b0:	df 91       	pop	r29
    73b2:	cf 91       	pop	r28
    73b4:	1f 91       	pop	r17
    73b6:	0f 91       	pop	r16
    73b8:	ff 90       	pop	r15
    73ba:	ef 90       	pop	r14
    73bc:	df 90       	pop	r13
    73be:	cf 90       	pop	r12
    73c0:	bf 90       	pop	r11
    73c2:	af 90       	pop	r10
    73c4:	9f 90       	pop	r9
    73c6:	8f 90       	pop	r8
    73c8:	7f 90       	pop	r7
    73ca:	6f 90       	pop	r6
    73cc:	5f 90       	pop	r5
    73ce:	4f 90       	pop	r4
    73d0:	3f 90       	pop	r3
    73d2:	2f 90       	pop	r2
    73d4:	08 95       	ret

000073d6 <_ZN9DhcpClass13beginWithDHCPEPhmm>:
    73d6:	cf 92       	push	r12
    73d8:	df 92       	push	r13
    73da:	ef 92       	push	r14
    73dc:	ff 92       	push	r15
    73de:	0f 93       	push	r16
#include "Dhcp.h"
#include "Arduino.h"
#include "utility/util.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
    73e0:	1f 93       	push	r17
    73e2:	cf 93       	push	r28
    73e4:	df 93       	push	r29
    73e6:	ec 01       	movw	r28, r24
    73e8:	6b 01       	movw	r12, r22
    _dhcpLeaseTime=0;
    73ea:	1a a2       	std	Y+34, r1	; 0x22
    73ec:	1b a2       	std	Y+35, r1	; 0x23
    73ee:	1c a2       	std	Y+36, r1	; 0x24
    73f0:	1d a2       	std	Y+37, r1	; 0x25
    _dhcpT1=0;
    73f2:	1e a2       	std	Y+38, r1	; 0x26
    73f4:	1f a2       	std	Y+39, r1	; 0x27
    73f6:	18 a6       	std	Y+40, r1	; 0x28
    73f8:	19 a6       	std	Y+41, r1	; 0x29
    _dhcpT2=0;
    73fa:	1a a6       	std	Y+42, r1	; 0x2a
    73fc:	1b a6       	std	Y+43, r1	; 0x2b
    73fe:	1c a6       	std	Y+44, r1	; 0x2c
    7400:	1d a6       	std	Y+45, r1	; 0x2d
    _lastCheck=0;
    7402:	1e aa       	std	Y+54, r1	; 0x36
    7404:	1f aa       	std	Y+55, r1	; 0x37
    7406:	18 ae       	std	Y+56, r1	; 0x38
    7408:	19 ae       	std	Y+57, r1	; 0x39
    _timeout = timeout;
    740a:	2a af       	std	Y+58, r18	; 0x3a
    740c:	3b af       	std	Y+59, r19	; 0x3b
    740e:	4c af       	std	Y+60, r20	; 0x3c
    7410:	5d af       	std	Y+61, r21	; 0x3d
    _responseTimeout = responseTimeout;
    7412:	fc 01       	movw	r30, r24
    7414:	fe 96       	adiw	r30, 0x3e	; 62
    7416:	e0 82       	st	Z, r14
    7418:	f1 82       	std	Z+1, r15	; 0x01
    741a:	02 83       	std	Z+2, r16	; 0x02
    741c:	13 83       	std	Z+3, r17	; 0x03

    // zero out _dhcpMacAddr
    memset(_dhcpMacAddr, 0, 6); 
    741e:	8c 01       	movw	r16, r24
    7420:	08 5f       	subi	r16, 0xF8	; 248
    7422:	1f 4f       	sbci	r17, 0xFF	; 255
    7424:	86 e0       	ldi	r24, 0x06	; 6
    7426:	f8 01       	movw	r30, r16
    7428:	11 92       	st	Z+, r1
    742a:	8a 95       	dec	r24
    742c:	e9 f7       	brne	.-6      	; 0x7428 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x52>
    reset_DHCP_lease();
    742e:	ce 01       	movw	r24, r28
    7430:	17 db       	rcall	.-2514   	; 0x6a60 <_ZN9DhcpClass16reset_DHCP_leaseEv>
    7432:	86 e0       	ldi	r24, 0x06	; 6

    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
    7434:	f6 01       	movw	r30, r12
    7436:	d8 01       	movw	r26, r16
    7438:	01 90       	ld	r0, Z+
    743a:	0d 92       	st	X+, r0
    743c:	8a 95       	dec	r24
    743e:	e1 f7       	brne	.-8      	; 0x7438 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x62>
    7440:	fe 01       	movw	r30, r28
    _dhcp_state = STATE_DHCP_START;
    7442:	ea 5b       	subi	r30, 0xBA	; 186
    7444:	ff 4f       	sbci	r31, 0xFF	; 255
    7446:	10 82       	st	Z, r1
    7448:	ce 01       	movw	r24, r28
    return request_DHCP_lease();
    744a:	df 91       	pop	r29
}
    744c:	cf 91       	pop	r28
    744e:	1f 91       	pop	r17
    7450:	0f 91       	pop	r16
    7452:	ff 90       	pop	r15
    7454:	ef 90       	pop	r14
    7456:	df 90       	pop	r13
    7458:	cf 90       	pop	r12
    745a:	3f ce       	rjmp	.-898    	; 0x70da <_ZN9DhcpClass18request_DHCP_leaseEv>

0000745c <_ZN9DNSClient5beginERK9IPAddress>:
#include <stdint.h>
#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    745c:	fb 01       	movw	r30, r22
    745e:	42 81       	ldd	r20, Z+2	; 0x02
    7460:	53 81       	ldd	r21, Z+3	; 0x03
    7462:	64 81       	ldd	r22, Z+4	; 0x04
    7464:	75 81       	ldd	r23, Z+5	; 0x05
    7466:	fc 01       	movw	r30, r24
    7468:	42 83       	std	Z+2, r20	; 0x02
    746a:	53 83       	std	Z+3, r21	; 0x03
    746c:	64 83       	std	Z+4, r22	; 0x04
    746e:	75 83       	std	Z+5, r23	; 0x05
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    7470:	17 82       	std	Z+7, r1	; 0x07
    7472:	16 82       	std	Z+6, r1	; 0x06
    7474:	08 95       	ret

00007476 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    7476:	cf 93       	push	r28
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    7478:	fb 01       	movw	r30, r22
    747a:	81 91       	ld	r24, Z+
    747c:	81 11       	cpse	r24, r1
    747e:	fd cf       	rjmp	.-6      	; 0x747a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x4>
    7480:	fb 01       	movw	r30, r22
    7482:	80 e0       	ldi	r24, 0x00	; 0
    7484:	90 e0       	ldi	r25, 0x00	; 0
    7486:	20 e0       	ldi	r18, 0x00	; 0
    7488:	30 e0       	ldi	r19, 0x00	; 0
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    748a:	ca e0       	ldi	r28, 0x0A	; 10
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    748c:	61 91       	ld	r22, Z+
    748e:	66 23       	and	r22, r22
    7490:	09 f1       	breq	.+66     	; 0x74d4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x5e>
    7492:	24 30       	cpi	r18, 0x04	; 4
    7494:	31 05       	cpc	r19, r1
    7496:	64 f5       	brge	.+88     	; 0x74f0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
        {
            if (*p == '.')
    7498:	6e 32       	cpi	r22, 0x2E	; 46
    749a:	71 f4       	brne	.+28     	; 0x74b8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x42>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    749c:	8f 3f       	cpi	r24, 0xFF	; 255
    749e:	91 05       	cpc	r25, r1
    74a0:	09 f0       	breq	.+2      	; 0x74a4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x2e>
    74a2:	34 f5       	brge	.+76     	; 0x74f0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    74a4:	da 01       	movw	r26, r20
    74a6:	a2 0f       	add	r26, r18
    74a8:	b3 1f       	adc	r27, r19
    74aa:	12 96       	adiw	r26, 0x02	; 2
    74ac:	8c 93       	st	X, r24
                    segment++;
    74ae:	2f 5f       	subi	r18, 0xFF	; 255
    74b0:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    74b2:	80 e0       	ldi	r24, 0x00	; 0
    74b4:	90 e0       	ldi	r25, 0x00	; 0
    74b6:	ea cf       	rjmp	.-44     	; 0x748c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    74b8:	dc 01       	movw	r26, r24
    74ba:	ca 9f       	mul	r28, r26
    74bc:	c0 01       	movw	r24, r0
    74be:	cb 9f       	mul	r28, r27
    74c0:	90 0d       	add	r25, r0
    74c2:	11 24       	eor	r1, r1
    74c4:	77 27       	eor	r23, r23
    74c6:	67 fd       	sbrc	r22, 7
    74c8:	70 95       	com	r23
    74ca:	60 53       	subi	r22, 0x30	; 48
    74cc:	71 09       	sbc	r23, r1
    74ce:	86 0f       	add	r24, r22
    74d0:	97 1f       	adc	r25, r23
    74d2:	dc cf       	rjmp	.-72     	; 0x748c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    74d4:	8f 3f       	cpi	r24, 0xFF	; 255
    74d6:	91 05       	cpc	r25, r1
    74d8:	09 f0       	breq	.+2      	; 0x74dc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x66>
    74da:	54 f4       	brge	.+20     	; 0x74f0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
    74dc:	24 30       	cpi	r18, 0x04	; 4
    74de:	31 05       	cpc	r19, r1
    74e0:	3c f4       	brge	.+14     	; 0x74f0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7a>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    74e2:	fa 01       	movw	r30, r20
    74e4:	e2 0f       	add	r30, r18
    74e6:	f3 1f       	adc	r31, r19
    74e8:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    74ea:	81 e0       	ldi	r24, 0x01	; 1
    74ec:	90 e0       	ldi	r25, 0x00	; 0
    74ee:	02 c0       	rjmp	.+4      	; 0x74f4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x7e>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
                {
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
    74f0:	80 e0       	ldi	r24, 0x00	; 0
    74f2:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    74f4:	cf 91       	pop	r28
    74f6:	08 95       	ret

000074f8 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    74f8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    74fa:	00 e0       	ldi	r16, 0x00	; 0
    74fc:	20 e0       	ldi	r18, 0x00	; 0
    74fe:	40 e0       	ldi	r20, 0x00	; 0
    7500:	60 e0       	ldi	r22, 0x00	; 0
    7502:	8f e0       	ldi	r24, 0x0F	; 15
    7504:	98 e0       	ldi	r25, 0x08	; 8
    7506:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
    750a:	0f 91       	pop	r16
    750c:	08 95       	ret

0000750e <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    750e:	af 92       	push	r10
    7510:	bf 92       	push	r11
    7512:	cf 92       	push	r12
    7514:	df 92       	push	r13
    7516:	ef 92       	push	r14
    7518:	ff 92       	push	r15
    751a:	0f 93       	push	r16
    751c:	1f 93       	push	r17
    751e:	cf 93       	push	r28
    7520:	df 93       	push	r29
    7522:	00 d0       	rcall	.+0      	; 0x7524 <_ZN9DNSClient12BuildRequestEPKc+0x16>
    7524:	cd b7       	in	r28, 0x3d	; 61
    7526:	de b7       	in	r29, 0x3e	; 62
    7528:	6c 01       	movw	r12, r24
    752a:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    752c:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    7530:	f6 01       	movw	r30, r12
    7532:	77 83       	std	Z+7, r23	; 0x07
    7534:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    7536:	86 01       	movw	r16, r12
    7538:	08 5f       	subi	r16, 0xF8	; 248
    753a:	1f 4f       	sbci	r17, 0xFF	; 255
    753c:	b6 01       	movw	r22, r12
    753e:	6a 5f       	subi	r22, 0xFA	; 250
    7540:	7f 4f       	sbci	r23, 0xFF	; 255
    7542:	42 e0       	ldi	r20, 0x02	; 2
    7544:	50 e0       	ldi	r21, 0x00	; 0
    7546:	c8 01       	movw	r24, r16
    7548:	6c d7       	rcall	.+3800   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    754a:	81 e0       	ldi	r24, 0x01	; 1

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    754c:	90 e0       	ldi	r25, 0x00	; 0
    754e:	9a 83       	std	Y+2, r25	; 0x02
    7550:	89 83       	std	Y+1, r24	; 0x01
    7552:	42 e0       	ldi	r20, 0x02	; 2
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7554:	50 e0       	ldi	r21, 0x00	; 0
    7556:	be 01       	movw	r22, r28
    7558:	6f 5f       	subi	r22, 0xFF	; 255
    755a:	7f 4f       	sbci	r23, 0xFF	; 255
    755c:	c8 01       	movw	r24, r16
    755e:	61 d7       	rcall	.+3778   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    7560:	80 e0       	ldi	r24, 0x00	; 0
    7562:	91 e0       	ldi	r25, 0x01	; 1

    twoByteBuffer = htons(1);  // One question record
    7564:	9a 83       	std	Y+2, r25	; 0x02
    7566:	89 83       	std	Y+1, r24	; 0x01
    7568:	42 e0       	ldi	r20, 0x02	; 2
    756a:	50 e0       	ldi	r21, 0x00	; 0
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    756c:	be 01       	movw	r22, r28
    756e:	6f 5f       	subi	r22, 0xFF	; 255
    7570:	7f 4f       	sbci	r23, 0xFF	; 255
    7572:	c8 01       	movw	r24, r16
    7574:	56 d7       	rcall	.+3756   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    7576:	1a 82       	std	Y+2, r1	; 0x02
    7578:	19 82       	std	Y+1, r1	; 0x01
    757a:	42 e0       	ldi	r20, 0x02	; 2

    twoByteBuffer = 0;  // Zero answer records
    757c:	50 e0       	ldi	r21, 0x00	; 0
    757e:	be 01       	movw	r22, r28
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7580:	6f 5f       	subi	r22, 0xFF	; 255
    7582:	7f 4f       	sbci	r23, 0xFF	; 255
    7584:	c8 01       	movw	r24, r16
    7586:	4d d7       	rcall	.+3738   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    7588:	42 e0       	ldi	r20, 0x02	; 2
    758a:	50 e0       	ldi	r21, 0x00	; 0
    758c:	be 01       	movw	r22, r28
    758e:	6f 5f       	subi	r22, 0xFF	; 255

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7590:	7f 4f       	sbci	r23, 0xFF	; 255
    7592:	c8 01       	movw	r24, r16
    7594:	46 d7       	rcall	.+3724   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    7596:	42 e0       	ldi	r20, 0x02	; 2
    7598:	50 e0       	ldi	r21, 0x00	; 0
    759a:	be 01       	movw	r22, r28
    759c:	6f 5f       	subi	r22, 0xFF	; 255
    759e:	7f 4f       	sbci	r23, 0xFF	; 255
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    75a0:	c8 01       	movw	r24, r16
    75a2:	3f d7       	rcall	.+3710   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    75a4:	67 01       	movw	r12, r14
    75a6:	f6 01       	movw	r30, r12
    75a8:	80 81       	ld	r24, Z
    75aa:	88 23       	and	r24, r24
    75ac:	01 f1       	breq	.+64     	; 0x75ee <_ZN9DNSClient12BuildRequestEPKc+0xe0>
    75ae:	f7 01       	movw	r30, r14

    // Build question
    const char* start =aName;
    const char* end =start;
    75b0:	6f 01       	movw	r12, r30
    uint8_t len;
    // Run through the name being requested
    while (*end)
    75b2:	81 91       	ld	r24, Z+
    75b4:	81 11       	cpse	r24, r1
    75b6:	13 c0       	rjmp	.+38     	; 0x75de <_ZN9DNSClient12BuildRequestEPKc+0xd0>
    75b8:	56 01       	movw	r10, r12
    75ba:	ae 18       	sub	r10, r14
    75bc:	bf 08       	sbc	r11, r15
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    75be:	1a 14       	cp	r1, r10
    75c0:	1b 04       	cpc	r1, r11
    75c2:	84 f4       	brge	.+32     	; 0x75e4 <_ZN9DNSClient12BuildRequestEPKc+0xd6>
        {
            end++;
        }

        if (end-start > 0)
    75c4:	ab 82       	std	Y+3, r10	; 0x03
    75c6:	41 e0       	ldi	r20, 0x01	; 1
    75c8:	50 e0       	ldi	r21, 0x00	; 0
    75ca:	be 01       	movw	r22, r28
    75cc:	6d 5f       	subi	r22, 0xFD	; 253
    75ce:	7f 4f       	sbci	r23, 0xFF	; 255
        {
            // Write out the size of this section
            len = end-start;
    75d0:	c8 01       	movw	r24, r16
            iUdp.write(&len, sizeof(len));
    75d2:	27 d7       	rcall	.+3662   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    75d4:	a5 01       	movw	r20, r10
    75d6:	b7 01       	movw	r22, r14
    75d8:	c8 01       	movw	r24, r16
    75da:	23 d7       	rcall	.+3654   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    75dc:	03 c0       	rjmp	.+6      	; 0x75e4 <_ZN9DNSClient12BuildRequestEPKc+0xd6>
    75de:	8e 32       	cpi	r24, 0x2E	; 46
    75e0:	39 f7       	brne	.-50     	; 0x75b0 <_ZN9DNSClient12BuildRequestEPKc+0xa2>
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    75e2:	ea cf       	rjmp	.-44     	; 0x75b8 <_ZN9DNSClient12BuildRequestEPKc+0xaa>
    75e4:	76 01       	movw	r14, r12
    75e6:	ff ef       	ldi	r31, 0xFF	; 255
    75e8:	ef 1a       	sub	r14, r31
    75ea:	ff 0a       	sbc	r15, r31
    75ec:	dc cf       	rjmp	.-72     	; 0x75a6 <_ZN9DNSClient12BuildRequestEPKc+0x98>
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    75ee:	1b 82       	std	Y+3, r1	; 0x03
    75f0:	41 e0       	ldi	r20, 0x01	; 1
    75f2:	50 e0       	ldi	r21, 0x00	; 0
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    75f4:	be 01       	movw	r22, r28
    75f6:	6d 5f       	subi	r22, 0xFD	; 253
    75f8:	7f 4f       	sbci	r23, 0xFF	; 255
    75fa:	c8 01       	movw	r24, r16
    75fc:	12 d7       	rcall	.+3620   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    75fe:	e1 2c       	mov	r14, r1
    iUdp.write(&len, sizeof(len));
    7600:	ff 24       	eor	r15, r15
    7602:	f3 94       	inc	r15
    7604:	fa 82       	std	Y+2, r15	; 0x02
    7606:	e9 82       	std	Y+1, r14	; 0x01
    7608:	42 e0       	ldi	r20, 0x02	; 2
    760a:	50 e0       	ldi	r21, 0x00	; 0
    760c:	be 01       	movw	r22, r28
    760e:	6f 5f       	subi	r22, 0xFF	; 255
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    7610:	7f 4f       	sbci	r23, 0xFF	; 255
    7612:	c8 01       	movw	r24, r16
    7614:	06 d7       	rcall	.+3596   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    7616:	fa 82       	std	Y+2, r15	; 0x02
    7618:	e9 82       	std	Y+1, r14	; 0x01
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    761a:	42 e0       	ldi	r20, 0x02	; 2
    761c:	50 e0       	ldi	r21, 0x00	; 0
    761e:	be 01       	movw	r22, r28
    7620:	6f 5f       	subi	r22, 0xFF	; 255
    7622:	7f 4f       	sbci	r23, 0xFF	; 255
    7624:	c8 01       	movw	r24, r16
    7626:	fd d6       	rcall	.+3578   	; 0x8422 <_ZN11EthernetUDP5writeEPKhj>
    7628:	81 e0       	ldi	r24, 0x01	; 1

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    762a:	90 e0       	ldi	r25, 0x00	; 0
    762c:	0f 90       	pop	r0
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    762e:	0f 90       	pop	r0
    7630:	0f 90       	pop	r0
    7632:	df 91       	pop	r29
    7634:	cf 91       	pop	r28
    7636:	1f 91       	pop	r17
    7638:	0f 91       	pop	r16
    763a:	ff 90       	pop	r15
    763c:	ef 90       	pop	r14
    // Success!  Everything buffered okay
    return 1;
}
    763e:	df 90       	pop	r13
    7640:	cf 90       	pop	r12
    7642:	bf 90       	pop	r11
    7644:	af 90       	pop	r10
    7646:	08 95       	ret

00007648 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:
    7648:	4f 92       	push	r4
    764a:	5f 92       	push	r5
    764c:	6f 92       	push	r6
    764e:	7f 92       	push	r7
    7650:	8f 92       	push	r8
    7652:	9f 92       	push	r9
    7654:	af 92       	push	r10
    7656:	bf 92       	push	r11
    7658:	cf 92       	push	r12
    765a:	df 92       	push	r13
    765c:	ef 92       	push	r14


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    765e:	ff 92       	push	r15
    7660:	0f 93       	push	r16
    7662:	1f 93       	push	r17
    7664:	cf 93       	push	r28
    7666:	df 93       	push	r29
    7668:	cd b7       	in	r28, 0x3d	; 61
    766a:	de b7       	in	r29, 0x3e	; 62
    766c:	63 97       	sbiw	r28, 0x13	; 19
    766e:	0f b6       	in	r0, 0x3f	; 63
    7670:	f8 94       	cli
    7672:	de bf       	out	0x3e, r29	; 62
    7674:	0f be       	out	0x3f, r0	; 63
    7676:	cd bf       	out	0x3d, r28	; 61
    7678:	7c 01       	movw	r14, r24
    767a:	5b 01       	movw	r10, r22
    767c:	6a 01       	movw	r12, r20
    uint32_t startTime = millis();
    767e:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    7682:	2b 01       	movw	r4, r22
    7684:	3c 01       	movw	r6, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    7686:	87 01       	movw	r16, r14
    7688:	08 5f       	subi	r16, 0xF8	; 248
    768a:	1f 4f       	sbci	r17, 0xFF	; 255
    {
        if((millis() - startTime) > aTimeout)
    768c:	45 01       	movw	r8, r10
    768e:	a1 2c       	mov	r10, r1
    7690:	b1 2c       	mov	r11, r1
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    7692:	c8 01       	movw	r24, r16
    7694:	60 d7       	rcall	.+3776   	; 0x8556 <_ZN11EthernetUDP11parsePacketEv>
    7696:	18 16       	cp	r1, r24
    7698:	19 06       	cpc	r1, r25
    769a:	94 f0       	brlt	.+36     	; 0x76c0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x78>
    769c:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    {
        if((millis() - startTime) > aTimeout)
    76a0:	64 19       	sub	r22, r4
    76a2:	75 09       	sbc	r23, r5
    76a4:	86 09       	sbc	r24, r6
    76a6:	97 09       	sbc	r25, r7
    76a8:	86 16       	cp	r8, r22
    76aa:	97 06       	cpc	r9, r23
    76ac:	a8 06       	cpc	r10, r24
    76ae:	b9 06       	cpc	r11, r25
    76b0:	d0 f0       	brcs	.+52     	; 0x76e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x9e>
    76b2:	62 e3       	ldi	r22, 0x32	; 50
            return TIMED_OUT;
        delay(50);
    76b4:	70 e0       	ldi	r23, 0x00	; 0
    76b6:	80 e0       	ldi	r24, 0x00	; 0
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	0e 94 4a 4a 	call	0x9494	; 0x9494 <delay>
    76be:	e9 cf       	rjmp	.-46     	; 0x7692 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x4a>
    76c0:	f7 01       	movw	r30, r14

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    76c2:	42 81       	ldd	r20, Z+2	; 0x02
    76c4:	53 81       	ldd	r21, Z+3	; 0x03
    76c6:	64 81       	ldd	r22, Z+4	; 0x04
    76c8:	75 81       	ldd	r23, Z+5	; 0x05
    76ca:	81 8d       	ldd	r24, Z+25	; 0x19
    76cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    76ce:	a3 8d       	ldd	r26, Z+27	; 0x1b
    76d0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    76d2:	48 17       	cp	r20, r24
    76d4:	59 07       	cpc	r21, r25
    76d6:	6a 07       	cpc	r22, r26
    76d8:	7b 07       	cpc	r23, r27
    76da:	41 f4       	brne	.+16     	; 0x76ec <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa4>
    76dc:	85 8d       	ldd	r24, Z+29	; 0x1d
    76de:	96 8d       	ldd	r25, Z+30	; 0x1e
    76e0:	c5 97       	sbiw	r24, 0x35	; 53
    76e2:	21 f4       	brne	.+8      	; 0x76ec <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xa4>
    76e4:	06 c0       	rjmp	.+12     	; 0x76f2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xaa>
    76e6:	8f ef       	ldi	r24, 0xFF	; 255

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    76e8:	9f ef       	ldi	r25, 0xFF	; 255
    76ea:	e0 c0       	rjmp	.+448    	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    76ec:	8e ef       	ldi	r24, 0xFE	; 254
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    76ee:	9f ef       	ldi	r25, 0xFF	; 255
    76f0:	dd c0       	rjmp	.+442    	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    76f2:	c8 01       	movw	r24, r16
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    76f4:	4c d6       	rcall	.+3224   	; 0x838e <_ZN11EthernetUDP9availableEv>
    76f6:	0c 97       	sbiw	r24, 0x0c	; 12
    76f8:	0c f4       	brge	.+2      	; 0x76fc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb4>
    76fa:	d6 c0       	rjmp	.+428    	; 0x78a8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x260>
    76fc:	4c e0       	ldi	r20, 0x0C	; 12
    76fe:	50 e0       	ldi	r21, 0x00	; 0
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    7700:	be 01       	movw	r22, r28
    7702:	6f 5f       	subi	r22, 0xFF	; 255
    7704:	7f 4f       	sbci	r23, 0xFF	; 255
    7706:	c8 01       	movw	r24, r16
    7708:	c7 d6       	rcall	.+3470   	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    770a:	8b 81       	ldd	r24, Y+3	; 0x03
    770c:	9c 81       	ldd	r25, Y+4	; 0x04
    770e:	98 27       	eor	r25, r24

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    7710:	89 27       	eor	r24, r25
    7712:	98 27       	eor	r25, r24
    7714:	9a 8b       	std	Y+18, r25	; 0x12
    7716:	89 8b       	std	Y+17, r24	; 0x11
    7718:	f7 01       	movw	r30, r14
    771a:	46 81       	ldd	r20, Z+6	; 0x06
    771c:	57 81       	ldd	r21, Z+7	; 0x07
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    771e:	29 81       	ldd	r18, Y+1	; 0x01
    7720:	3a 81       	ldd	r19, Y+2	; 0x02
    7722:	42 17       	cp	r20, r18
    7724:	53 07       	cpc	r21, r19
    7726:	11 f4       	brne	.+4      	; 0x772c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xe4>
    7728:	97 fd       	sbrc	r25, 7
    772a:	05 c0       	rjmp	.+10     	; 0x7736 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xee>
    772c:	c8 01       	movw	r24, r16
    772e:	49 d6       	rcall	.+3218   	; 0x83c2 <_ZN11EthernetUDP5flushEv>
    7730:	8c ef       	ldi	r24, 0xFC	; 252
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    7732:	9f ef       	ldi	r25, 0xFF	; 255
    7734:	bb c0       	rjmp	.+374    	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    7736:	8f 70       	andi	r24, 0x0F	; 15
        return INVALID_RESPONSE;
    7738:	92 70       	andi	r25, 0x02	; 2
    773a:	89 2b       	or	r24, r25
    773c:	29 f0       	breq	.+10     	; 0x7748 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x100>
    773e:	c8 01       	movw	r24, r16
    7740:	40 d6       	rcall	.+3200   	; 0x83c2 <_ZN11EthernetUDP5flushEv>
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    7742:	8b ef       	ldi	r24, 0xFB	; 251
    7744:	9f ef       	ldi	r25, 0xFF	; 255
    {
        // Mark the entire packet as read
        iUdp.flush();
    7746:	b2 c0       	rjmp	.+356    	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    7748:	af 80       	ldd	r10, Y+7	; 0x07
    774a:	b8 84       	ldd	r11, Y+8	; 0x08
        return -5; //INVALID_RESPONSE;
    774c:	ba 24       	eor	r11, r10
    774e:	ab 24       	eor	r10, r11
    7750:	ba 24       	eor	r11, r10
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    7752:	a1 14       	cp	r10, r1
    7754:	b1 04       	cpc	r11, r1
    7756:	19 f0       	breq	.+6      	; 0x775e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x116>
    7758:	e1 2c       	mov	r14, r1
    775a:	f1 2c       	mov	r15, r1
    if (answerCount == 0 )
    775c:	1d c0       	rjmp	.+58     	; 0x7798 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x150>
    775e:	c8 01       	movw	r24, r16
    7760:	30 d6       	rcall	.+3168   	; 0x83c2 <_ZN11EthernetUDP5flushEv>
    7762:	8a ef       	ldi	r24, 0xFA	; 250
    7764:	9f ef       	ldi	r25, 0xFF	; 255
    7766:	a2 c0       	rjmp	.+324    	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    {
        // Mark the entire packet as read
        iUdp.flush();
    7768:	41 e0       	ldi	r20, 0x01	; 1
    776a:	50 e0       	ldi	r21, 0x00	; 0
    776c:	be 01       	movw	r22, r28
        return -6; //INVALID_RESPONSE;
    776e:	63 5f       	subi	r22, 0xF3	; 243
    7770:	7f 4f       	sbci	r23, 0xFF	; 255
    7772:	c8 01       	movw	r24, r16
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    7774:	91 d6       	rcall	.+3362   	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    7776:	8d 85       	ldd	r24, Y+13	; 0x0d
    7778:	81 11       	cpse	r24, r1
    777a:	17 c0       	rjmp	.+46     	; 0x77aa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x162>
    777c:	8d 85       	ldd	r24, Y+13	; 0x0d
    777e:	81 11       	cpse	r24, r1
    7780:	f3 cf       	rjmp	.-26     	; 0x7768 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x120>
    7782:	c8 01       	movw	r24, r16
            if (len > 0)
    7784:	61 d6       	rcall	.+3266   	; 0x8448 <_ZN11EthernetUDP4readEv>
    7786:	c8 01       	movw	r24, r16
    7788:	5f d6       	rcall	.+3262   	; 0x8448 <_ZN11EthernetUDP4readEv>
    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    {
        // Skip over the name
        uint8_t len;
        do
    778a:	c8 01       	movw	r24, r16
    778c:	5d d6       	rcall	.+3258   	; 0x8448 <_ZN11EthernetUDP4readEv>
    778e:	c8 01       	movw	r24, r16
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    7790:	5b d6       	rcall	.+3254   	; 0x8448 <_ZN11EthernetUDP4readEv>
    7792:	ff ef       	ldi	r31, 0xFF	; 255
    7794:	ef 1a       	sub	r14, r31
    7796:	ff 0a       	sbc	r15, r31
    7798:	8d 81       	ldd	r24, Y+5	; 0x05
    779a:	9e 81       	ldd	r25, Y+6	; 0x06
    779c:	98 27       	eor	r25, r24
    779e:	89 27       	eor	r24, r25
    77a0:	98 27       	eor	r25, r24
    77a2:	e8 16       	cp	r14, r24
    77a4:	f9 06       	cpc	r15, r25
    77a6:	00 f3       	brcs	.-64     	; 0x7768 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x120>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    77a8:	09 c0       	rjmp	.+18     	; 0x77bc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x174>
    77aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    77ac:	9f ef       	ldi	r25, 0xFF	; 255
    77ae:	98 0f       	add	r25, r24
    77b0:	9d 87       	std	Y+13, r25	; 0x0d
    77b2:	88 23       	and	r24, r24
    77b4:	19 f3       	breq	.-58     	; 0x777c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x134>
    77b6:	c8 01       	movw	r24, r16
    77b8:	47 d6       	rcall	.+3214   	; 0x8448 <_ZN11EthernetUDP4readEv>
    77ba:	f7 cf       	rjmp	.-18     	; 0x77aa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x162>
    77bc:	e1 2c       	mov	r14, r1
    77be:	f1 2c       	mov	r15, r1
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    77c0:	41 e0       	ldi	r20, 0x01	; 1
    77c2:	50 e0       	ldi	r21, 0x00	; 0
    77c4:	be 01       	movw	r22, r28
    77c6:	6d 5e       	subi	r22, 0xED	; 237
    77c8:	7f 4f       	sbci	r23, 0xFF	; 255
    77ca:	c8 01       	movw	r24, r16
                {
                    iUdp.read(); // we don't care about the returned byte
    77cc:	65 d6       	rcall	.+3274   	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    77ce:	8b 89       	ldd	r24, Y+19	; 0x13
    77d0:	98 2f       	mov	r25, r24
    77d2:	90 7c       	andi	r25, 0xC0	; 192
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    77d4:	59 f4       	brne	.+22     	; 0x77ec <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1a4>
    77d6:	88 23       	and	r24, r24
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    77d8:	61 f0       	breq	.+24     	; 0x77f2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1aa>
    77da:	8b 89       	ldd	r24, Y+19	; 0x13
    77dc:	9f ef       	ldi	r25, 0xFF	; 255
    77de:	98 0f       	add	r25, r24
    77e0:	9b 8b       	std	Y+19, r25	; 0x13
    77e2:	88 23       	and	r24, r24
    77e4:	31 f0       	breq	.+12     	; 0x77f2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1aa>
    77e6:	c8 01       	movw	r24, r16
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    77e8:	2f d6       	rcall	.+3166   	; 0x8448 <_ZN11EthernetUDP4readEv>
    77ea:	f7 cf       	rjmp	.-18     	; 0x77da <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x192>
    77ec:	c8 01       	movw	r24, r16
    77ee:	2c d6       	rcall	.+3160   	; 0x8448 <_ZN11EthernetUDP4readEv>
            {
                // It's just a normal label
                if (len > 0)
    77f0:	1b 8a       	std	Y+19, r1	; 0x13
    77f2:	8b 89       	ldd	r24, Y+19	; 0x13
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    77f4:	81 11       	cpse	r24, r1
    77f6:	e4 cf       	rjmp	.-56     	; 0x77c0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x178>
    77f8:	42 e0       	ldi	r20, 0x02	; 2
    77fa:	50 e0       	ldi	r21, 0x00	; 0
    77fc:	be 01       	movw	r22, r28
    77fe:	61 5f       	subi	r22, 0xF1	; 241
                    {
                        iUdp.read(); // we don't care about the returned byte
    7800:	7f 4f       	sbci	r23, 0xFF	; 255
    7802:	c8 01       	movw	r24, r16
    7804:	49 d6       	rcall	.+3218   	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    7806:	42 e0       	ldi	r20, 0x02	; 2
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    7808:	50 e0       	ldi	r21, 0x00	; 0
    780a:	be 01       	movw	r22, r28
    780c:	63 5f       	subi	r22, 0xF3	; 243
                // And set len so that we drop out of the name loop
                len = 0;
    780e:	7f 4f       	sbci	r23, 0xFF	; 255

    for (uint16_t i =0; i < answerCount; i++)
    {
        // Skip the name
        uint8_t len;
        do
    7810:	c8 01       	movw	r24, r16
    7812:	42 d6       	rcall	.+3204   	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    7814:	c8 01       	movw	r24, r16
        } while (len != 0);

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    7816:	18 d6       	rcall	.+3120   	; 0x8448 <_ZN11EthernetUDP4readEv>
    7818:	c8 01       	movw	r24, r16
    781a:	16 d6       	rcall	.+3116   	; 0x8448 <_ZN11EthernetUDP4readEv>
    781c:	c8 01       	movw	r24, r16
    781e:	14 d6       	rcall	.+3112   	; 0x8448 <_ZN11EthernetUDP4readEv>
    7820:	c8 01       	movw	r24, r16
    7822:	12 d6       	rcall	.+3108   	; 0x8448 <_ZN11EthernetUDP4readEv>
    7824:	42 e0       	ldi	r20, 0x02	; 2
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    7826:	50 e0       	ldi	r21, 0x00	; 0
    7828:	be 01       	movw	r22, r28
    782a:	6f 5e       	subi	r22, 0xEF	; 239
    782c:	7f 4f       	sbci	r23, 0xFF	; 255
    782e:	c8 01       	movw	r24, r16
    7830:	33 d6       	rcall	.+3174   	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    7832:	8f 85       	ldd	r24, Y+15	; 0x0f
    7834:	98 89       	ldd	r25, Y+16	; 0x10

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    7836:	81 15       	cp	r24, r1
    7838:	91 40       	sbci	r25, 0x01	; 1
    783a:	29 f4       	brne	.+10     	; 0x7846 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1fe>
    783c:	8d 85       	ldd	r24, Y+13	; 0x0d
    783e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7840:	81 15       	cp	r24, r1
    7842:	91 40       	sbci	r25, 0x01	; 1
    7844:	19 f0       	breq	.+6      	; 0x784c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x204>
    7846:	81 2c       	mov	r8, r1
    7848:	91 2c       	mov	r9, r1
    784a:	14 c0       	rjmp	.+40     	; 0x7874 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x22c>
    784c:	89 89       	ldd	r24, Y+17	; 0x11
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    784e:	9a 89       	ldd	r25, Y+18	; 0x12
    7850:	81 15       	cp	r24, r1
    7852:	94 40       	sbci	r25, 0x04	; 4
    7854:	29 f0       	breq	.+10     	; 0x7860 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x218>
    7856:	c8 01       	movw	r24, r16
    7858:	b4 d5       	rcall	.+2920   	; 0x83c2 <_ZN11EthernetUDP5flushEv>
    785a:	87 ef       	ldi	r24, 0xF7	; 247
    785c:	9f ef       	ldi	r25, 0xFF	; 255

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    785e:	26 c0       	rjmp	.+76     	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    7860:	b6 01       	movw	r22, r12
    7862:	6e 5f       	subi	r22, 0xFE	; 254
    7864:	7f 4f       	sbci	r23, 0xFF	; 255
    7866:	44 e0       	ldi	r20, 0x04	; 4
    7868:	50 e0       	ldi	r21, 0x00	; 0
    786a:	c8 01       	movw	r24, r16
    786c:	15 d6       	rcall	.+3114   	; 0x8498 <_ZN11EthernetUDP4readEPhj>
    786e:	81 e0       	ldi	r24, 0x01	; 1
    7870:	90 e0       	ldi	r25, 0x00	; 0
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    7872:	1c c0       	rjmp	.+56     	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    7874:	89 89       	ldd	r24, Y+17	; 0x11
    7876:	9a 89       	ldd	r25, Y+18	; 0x12
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
        {
            if (htons(header_flags) != 4)
    7878:	98 27       	eor	r25, r24
    787a:	89 27       	eor	r24, r25
    787c:	98 27       	eor	r25, r24
    787e:	88 16       	cp	r8, r24
    7880:	99 06       	cpc	r9, r25
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    7882:	30 f4       	brcc	.+12     	; 0x7890 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x248>
    7884:	c8 01       	movw	r24, r16
    7886:	e0 d5       	rcall	.+3008   	; 0x8448 <_ZN11EthernetUDP4readEv>
                return -9;//INVALID_RESPONSE;
    7888:	2f ef       	ldi	r18, 0xFF	; 255
    788a:	82 1a       	sub	r8, r18
    788c:	92 0a       	sbc	r9, r18
            }
            iUdp.read(aAddress.raw_address(), 4);
    788e:	f2 cf       	rjmp	.-28     	; 0x7874 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x22c>
    7890:	8f ef       	ldi	r24, 0xFF	; 255
    7892:	e8 1a       	sub	r14, r24
    7894:	f8 0a       	sbc	r15, r24
    7896:	ea 14       	cp	r14, r10
    7898:	fb 04       	cpc	r15, r11
    789a:	09 f0       	breq	.+2      	; 0x789e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x256>
    789c:	91 cf       	rjmp	.-222    	; 0x77c0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x178>
            return SUCCESS;
    789e:	c8 01       	movw	r24, r16
    78a0:	90 d5       	rcall	.+2848   	; 0x83c2 <_ZN11EthernetUDP5flushEv>
    78a2:	86 ef       	ldi	r24, 0xF6	; 246
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    78a4:	9f ef       	ldi	r25, 0xFF	; 255
    78a6:	02 c0       	rjmp	.+4      	; 0x78ac <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x264>
    78a8:	8d ef       	ldi	r24, 0xFD	; 253
    78aa:	9f ef       	ldi	r25, 0xFF	; 255
    78ac:	63 96       	adiw	r28, 0x13	; 19
    78ae:	0f b6       	in	r0, 0x3f	; 63
    78b0:	f8 94       	cli
    78b2:	de bf       	out	0x3e, r29	; 62
            {
                iUdp.read(); // we don't care about the returned byte
    78b4:	0f be       	out	0x3f, r0	; 63
    78b6:	cd bf       	out	0x3d, r28	; 61
    78b8:	df 91       	pop	r29
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    78ba:	cf 91       	pop	r28
    78bc:	1f 91       	pop	r17
    78be:	0f 91       	pop	r16
    78c0:	ff 90       	pop	r15
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    78c2:	ef 90       	pop	r14
    78c4:	df 90       	pop	r13
    78c6:	cf 90       	pop	r12
    78c8:	bf 90       	pop	r11
    78ca:	af 90       	pop	r10
    78cc:	9f 90       	pop	r9
    78ce:	8f 90       	pop	r8
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    78d0:	7f 90       	pop	r7
    78d2:	6f 90       	pop	r6
    78d4:	5f 90       	pop	r5

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    78d6:	4f 90       	pop	r4
    78d8:	08 95       	ret

000078da <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
    78da:	8f 92       	push	r8
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    78dc:	9f 92       	push	r9
    78de:	af 92       	push	r10
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    78e0:	bf 92       	push	r11
    78e2:	cf 92       	push	r12
    78e4:	df 92       	push	r13
    78e6:	ef 92       	push	r14
    78e8:	ff 92       	push	r15
    78ea:	0f 93       	push	r16
    78ec:	1f 93       	push	r17
    78ee:	cf 93       	push	r28
    78f0:	df 93       	push	r29
    78f2:	00 d0       	rcall	.+0      	; 0x78f4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    78f4:	00 d0       	rcall	.+0      	; 0x78f6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    78f6:	cd b7       	in	r28, 0x3d	; 61
    78f8:	de b7       	in	r29, 0x3e	; 62
    78fa:	8c 01       	movw	r16, r24
    78fc:	5b 01       	movw	r10, r22
    78fe:	6a 01       	movw	r12, r20
    7900:	ba dd       	rcall	.-1164   	; 0x7476 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    7902:	4c 01       	movw	r8, r24
    7904:	00 97       	sbiw	r24, 0x00	; 0
    7906:	09 f0       	breq	.+2      	; 0x790a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x30>
    7908:	57 c0       	rjmp	.+174    	; 0x79b8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xde>
    790a:	f8 01       	movw	r30, r16
    790c:	42 81       	ldd	r20, Z+2	; 0x02
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    790e:	53 81       	ldd	r21, Z+3	; 0x03
    7910:	64 81       	ldd	r22, Z+4	; 0x04
    7912:	75 81       	ldd	r23, Z+5	; 0x05
    7914:	80 91 11 08 	lds	r24, 0x0811
    7918:	90 91 12 08 	lds	r25, 0x0812
    791c:	a0 91 13 08 	lds	r26, 0x0813
    7920:	b0 91 14 08 	lds	r27, 0x0814
    7924:	48 17       	cp	r20, r24
    7926:	59 07       	cpc	r21, r25
    7928:	6a 07       	cpc	r22, r26
    792a:	7b 07       	cpc	r23, r27
    792c:	09 f4       	brne	.+2      	; 0x7930 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x56>
    792e:	48 c0       	rjmp	.+144    	; 0x79c0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe6>
    7930:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    7934:	78 01       	movw	r14, r16
    7936:	f8 e0       	ldi	r31, 0x08	; 8
    7938:	ef 0e       	add	r14, r31
    793a:	f1 1c       	adc	r15, r1
    793c:	6f 70       	andi	r22, 0x0F	; 15
    793e:	77 27       	eor	r23, r23
    7940:	7c 5f       	subi	r23, 0xFC	; 252
    7942:	c7 01       	movw	r24, r14
    7944:	dd d5       	rcall	.+3002   	; 0x8500 <_ZN11EthernetUDP5beginEj>
    7946:	81 30       	cpi	r24, 0x01	; 1
    7948:	09 f0       	breq	.+2      	; 0x794c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x72>
    794a:	3e c0       	rjmp	.+124    	; 0x79c8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xee>
    794c:	88 e7       	ldi	r24, 0x78	; 120
    794e:	96 e0       	ldi	r25, 0x06	; 6
#include <stdint.h>
#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    7950:	9a 83       	std	Y+2, r25	; 0x02
    7952:	89 83       	std	Y+1, r24	; 0x01
    7954:	f8 01       	movw	r30, r16
    7956:	82 81       	ldd	r24, Z+2	; 0x02
    7958:	93 81       	ldd	r25, Z+3	; 0x03
    795a:	a4 81       	ldd	r26, Z+4	; 0x04
    795c:	b5 81       	ldd	r27, Z+5	; 0x05
    795e:	8b 83       	std	Y+3, r24	; 0x03
    7960:	9c 83       	std	Y+4, r25	; 0x04
    7962:	ad 83       	std	Y+5, r26	; 0x05
    7964:	be 83       	std	Y+6, r27	; 0x06
    7966:	45 e3       	ldi	r20, 0x35	; 53
    7968:	50 e0       	ldi	r21, 0x00	; 0
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    796a:	be 01       	movw	r22, r28
    796c:	6f 5f       	subi	r22, 0xFF	; 255
    796e:	7f 4f       	sbci	r23, 0xFF	; 255
    7970:	c7 01       	movw	r24, r14
    7972:	4d d5       	rcall	.+2714   	; 0x840e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    7974:	89 2b       	or	r24, r25
    7976:	19 f4       	brne	.+6      	; 0x797e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xa4>
    7978:	81 2c       	mov	r8, r1
            if (ret != 0)
    797a:	91 2c       	mov	r9, r1
    797c:	1a c0       	rjmp	.+52     	; 0x79b2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd8>
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
                    if (ret != 0)
    797e:	b5 01       	movw	r22, r10
    7980:	c8 01       	movw	r24, r16
    7982:	c5 dd       	rcall	.-1142   	; 0x750e <_ZN9DNSClient12BuildRequestEPKc>
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
            if (ret != 0)
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    7984:	89 2b       	or	r24, r25
    7986:	c1 f3       	breq	.-16     	; 0x7978 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x9e>
    7988:	c7 01       	movw	r24, r14
    798a:	48 d5       	rcall	.+2704   	; 0x841c <_ZN11EthernetUDP9endPacketEv>
                if (ret != 0)
    798c:	89 2b       	or	r24, r25
    798e:	a1 f3       	breq	.-24     	; 0x7978 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x9e>
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    7990:	33 e0       	ldi	r19, 0x03	; 3
    7992:	a3 2e       	mov	r10, r19
    7994:	b1 2c       	mov	r11, r1
                    if (ret != 0)
    7996:	a6 01       	movw	r20, r12
    7998:	68 e8       	ldi	r22, 0x88	; 136
    799a:	73 e1       	ldi	r23, 0x13	; 19
    799c:	c8 01       	movw	r24, r16
    799e:	54 de       	rcall	.-856    	; 0x7648 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    79a0:	4c 01       	movw	r8, r24
    79a2:	f1 e0       	ldi	r31, 0x01	; 1
    79a4:	af 1a       	sub	r10, r31
    79a6:	b1 08       	sbc	r11, r1
    79a8:	21 f0       	breq	.+8      	; 0x79b2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd8>
    79aa:	8f 3f       	cpi	r24, 0xFF	; 255
    79ac:	2f ef       	ldi	r18, 0xFF	; 255
    79ae:	92 07       	cpc	r25, r18
    79b0:	91 f3       	breq	.-28     	; 0x7996 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xbc>
    79b2:	c7 01       	movw	r24, r14
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    79b4:	18 d5       	rcall	.+2608   	; 0x83e6 <_ZN11EthernetUDP4stopEv>
    79b6:	08 c0       	rjmp	.+16     	; 0x79c8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xee>
    79b8:	88 24       	eor	r8, r8
    79ba:	83 94       	inc	r8
    79bc:	91 2c       	mov	r9, r1
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    79be:	04 c0       	rjmp	.+8      	; 0x79c8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xee>
    79c0:	9e ef       	ldi	r25, 0xFE	; 254
    79c2:	89 2e       	mov	r8, r25
    79c4:	99 24       	eor	r9, r9

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    79c6:	9a 94       	dec	r9
    79c8:	c4 01       	movw	r24, r8
    79ca:	26 96       	adiw	r28, 0x06	; 6
    79cc:	0f b6       	in	r0, 0x3f	; 63
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    79ce:	f8 94       	cli
    79d0:	de bf       	out	0x3e, r29	; 62
    79d2:	0f be       	out	0x3f, r0	; 63
    79d4:	cd bf       	out	0x3d, r28	; 61
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    79d6:	df 91       	pop	r29
    79d8:	cf 91       	pop	r28
    79da:	1f 91       	pop	r17
    79dc:	0f 91       	pop	r16
    79de:	ff 90       	pop	r15
    79e0:	ef 90       	pop	r14
    79e2:	df 90       	pop	r13
    79e4:	cf 90       	pop	r12
    79e6:	bf 90       	pop	r11
    79e8:	af 90       	pop	r10
    79ea:	9f 90       	pop	r9
    79ec:	8f 90       	pop	r8
    79ee:	08 95       	ret

000079f0 <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    79f0:	20 91 bb 08 	lds	r18, 0x08BB
    79f4:	22 23       	and	r18, r18
    79f6:	99 f0       	breq	.+38     	; 0x7a1e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    79f8:	3f b7       	in	r19, 0x3f	; 63
      noInterrupts();
    79fa:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    79fc:	20 91 bb 08 	lds	r18, 0x08BB
    7a00:	21 30       	cpi	r18, 0x01	; 1
    7a02:	59 f4       	brne	.+22     	; 0x7a1a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    7a04:	2d b3       	in	r18, 0x1d	; 29
    7a06:	20 93 b9 08 	sts	0x08B9, r18
        SPI_AVR_EIMSK &= ~interruptMask;
    7a0a:	4d b3       	in	r20, 0x1d	; 29
    7a0c:	20 91 ba 08 	lds	r18, 0x08BA
    7a10:	20 95       	com	r18
    7a12:	24 23       	and	r18, r20
    7a14:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    7a16:	3f bf       	out	0x3f, r19	; 63
    7a18:	02 c0       	rjmp	.+4      	; 0x7a1e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    7a1a:	30 93 b9 08 	sts	0x08B9, r19
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    7a1e:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    7a20:	9d bd       	out	0x2d, r25	; 45
    7a22:	08 95       	ret

00007a24 <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    7a24:	80 91 bb 08 	lds	r24, 0x08BB
    7a28:	88 23       	and	r24, r24
    7a2a:	61 f0       	breq	.+24     	; 0x7a44 <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    7a2c:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    7a2e:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    7a30:	20 91 bb 08 	lds	r18, 0x08BB
    7a34:	80 91 b9 08 	lds	r24, 0x08B9
    7a38:	21 30       	cpi	r18, 0x01	; 1
    7a3a:	19 f4       	brne	.+6      	; 0x7a42 <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    7a3c:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    7a3e:	9f bf       	out	0x3f, r25	; 63
    7a40:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    7a42:	8f bf       	out	0x3f, r24	; 63
    7a44:	08 95       	ret

00007a46 <_ZN10W5100Class8writeGAREPh>:
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    7a46:	44 e0       	ldi	r20, 0x04	; 4
    7a48:	50 e0       	ldi	r21, 0x00	; 0
    7a4a:	bc 01       	movw	r22, r24
    7a4c:	81 e0       	ldi	r24, 0x01	; 1
    7a4e:	90 e0       	ldi	r25, 0x00	; 0
    7a50:	0c 94 be 47 	jmp	0x8f7c	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>

00007a54 <_ZN10W5100Class9writeSUBREPh>:
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    7a54:	44 e0       	ldi	r20, 0x04	; 4
    7a56:	50 e0       	ldi	r21, 0x00	; 0
    7a58:	bc 01       	movw	r22, r24
    7a5a:	85 e0       	ldi	r24, 0x05	; 5
    7a5c:	90 e0       	ldi	r25, 0x00	; 0
    7a5e:	0c 94 be 47 	jmp	0x8f7c	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>

00007a62 <_ZN10W5100Class9writeSIPREPh>:
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    7a62:	44 e0       	ldi	r20, 0x04	; 4
    7a64:	50 e0       	ldi	r21, 0x00	; 0
    7a66:	bc 01       	movw	r22, r24
    7a68:	8f e0       	ldi	r24, 0x0F	; 15
    7a6a:	90 e0       	ldi	r25, 0x00	; 0
    7a6c:	0c 94 be 47 	jmp	0x8f7c	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>

00007a70 <_ZN13EthernetClass5beginEPh>:
  0, 0, 0, 0 };
uint16_t EthernetClass::_server_port[MAX_SOCK_NUM] = { 
  0, 0, 0, 0 };

int EthernetClass::begin(uint8_t *mac_address)
{
    7a70:	af 92       	push	r10
    7a72:	bf 92       	push	r11
    7a74:	cf 92       	push	r12
    7a76:	df 92       	push	r13
    7a78:	ef 92       	push	r14
    7a7a:	ff 92       	push	r15
    7a7c:	0f 93       	push	r16
    7a7e:	1f 93       	push	r17
    7a80:	cf 93       	push	r28
    7a82:	df 93       	push	r29
    7a84:	00 d0       	rcall	.+0      	; 0x7a86 <_ZN13EthernetClass5beginEPh+0x16>
    7a86:	00 d0       	rcall	.+0      	; 0x7a88 <_ZN13EthernetClass5beginEPh+0x18>
    7a88:	cd b7       	in	r28, 0x3d	; 61
    7a8a:	de b7       	in	r29, 0x3e	; 62
    7a8c:	6c 01       	movw	r12, r24
    7a8e:	5b 01       	movw	r10, r22
  static DhcpClass s_dhcp;
    7a90:	80 91 7f 08 	lds	r24, 0x087F
    7a94:	81 11       	cpse	r24, r1
    7a96:	06 c0       	rjmp	.+12     	; 0x7aa4 <_ZN13EthernetClass5beginEPh+0x34>
	uint8_t  siaddr[4];
	uint8_t  giaddr[4];
	uint8_t  chaddr[6];
}RIP_MSG_FIXED;

class DhcpClass {
    7a98:	8c e5       	ldi	r24, 0x5C	; 92
    7a9a:	98 e0       	ldi	r25, 0x08	; 8
    7a9c:	aa d5       	rcall	.+2900   	; 0x85f2 <_ZN11EthernetUDPC1Ev>
    7a9e:	81 e0       	ldi	r24, 0x01	; 1
    7aa0:	80 93 7f 08 	sts	0x087F, r24
    7aa4:	85 e1       	ldi	r24, 0x15	; 21
  _dhcp = &s_dhcp;
    7aa6:	98 e0       	ldi	r25, 0x08	; 8
    7aa8:	f6 01       	movw	r30, r12
    7aaa:	97 83       	std	Z+7, r25	; 0x07
    7aac:	86 83       	std	Z+6, r24	; 0x06
    7aae:	89 ea       	ldi	r24, 0xA9	; 169


  // Initialise the basic info
  W5100.init();
    7ab0:	98 e0       	ldi	r25, 0x08	; 8
    7ab2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <_ZN10W5100Class4initEv>
    7ab6:	80 e5       	ldi	r24, 0x50	; 80
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    7ab8:	90 e0       	ldi	r25, 0x00	; 0
    7aba:	9a df       	rcall	.-204    	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    7abc:	46 e0       	ldi	r20, 0x06	; 6
    7abe:	50 e0       	ldi	r21, 0x00	; 0

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    7ac0:	b5 01       	movw	r22, r10
    7ac2:	89 e0       	ldi	r24, 0x09	; 9
    7ac4:	90 e0       	ldi	r25, 0x00	; 0
    7ac6:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>
    7aca:	00 e0       	ldi	r16, 0x00	; 0
    7acc:	20 e0       	ldi	r18, 0x00	; 0
  W5100.setMACAddress(mac_address);
  W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
    7ace:	40 e0       	ldi	r20, 0x00	; 0
    7ad0:	60 e0       	ldi	r22, 0x00	; 0
    7ad2:	ce 01       	movw	r24, r28
    7ad4:	01 96       	adiw	r24, 0x01	; 1
    7ad6:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
    7ada:	ce 01       	movw	r24, r28
    7adc:	03 96       	adiw	r24, 0x03	; 3
void W5100Class::getIPAddress(uint8_t *_addr) {
  readSIPR(_addr);
}

void W5100Class::setIPAddress(uint8_t *_addr) {
  writeSIPR(_addr);
    7ade:	c1 df       	rcall	.-126    	; 0x7a62 <_ZN10W5100Class9writeSIPREPh>
    7ae0:	a1 df       	rcall	.-190    	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    7ae2:	10 ea       	ldi	r17, 0xA0	; 160
    7ae4:	e1 2e       	mov	r14, r17
  SPI.endTransaction();
    7ae6:	1f e0       	ldi	r17, 0x0F	; 15
    7ae8:	f1 2e       	mov	r15, r17

  // Now try to get our config info from a DHCP server
  int ret = _dhcp->beginWithDHCP(mac_address);
    7aea:	00 e0       	ldi	r16, 0x00	; 0
    7aec:	10 e0       	ldi	r17, 0x00	; 0
    7aee:	20 e6       	ldi	r18, 0x60	; 96
    7af0:	3a ee       	ldi	r19, 0xEA	; 234
    7af2:	40 e0       	ldi	r20, 0x00	; 0
    7af4:	50 e0       	ldi	r21, 0x00	; 0
    7af6:	b5 01       	movw	r22, r10
    7af8:	f6 01       	movw	r30, r12
    7afa:	86 81       	ldd	r24, Z+6	; 0x06
    7afc:	97 81       	ldd	r25, Z+7	; 0x07
    7afe:	6b dc       	rcall	.-1834   	; 0x73d6 <_ZN9DhcpClass13beginWithDHCPEPhmm>
    7b00:	5c 01       	movw	r10, r24
    7b02:	81 30       	cpi	r24, 0x01	; 1
    7b04:	91 05       	cpc	r25, r1
    7b06:	91 f5       	brne	.+100    	; 0x7b6c <_ZN13EthernetClass5beginEPh+0xfc>
    7b08:	80 e5       	ldi	r24, 0x50	; 80
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
  if(ret == 1)
    7b0c:	71 df       	rcall	.-286    	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    7b0e:	f6 01       	movw	r30, r12
    7b10:	66 81       	ldd	r22, Z+6	; 0x06
  {
    // We've successfully found a DHCP server and got our configuration info, so set things
    // accordingly
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    7b12:	77 81       	ldd	r23, Z+7	; 0x07
    7b14:	ce 01       	movw	r24, r28
    7b16:	01 96       	adiw	r24, 0x01	; 1
    7b18:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <_ZN9DhcpClass10getLocalIpEv>
    W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
    7b1c:	ce 01       	movw	r24, r28
    7b1e:	03 96       	adiw	r24, 0x03	; 3
    7b20:	a0 df       	rcall	.-192    	; 0x7a62 <_ZN10W5100Class9writeSIPREPh>
    7b22:	f6 01       	movw	r30, r12
    7b24:	66 81       	ldd	r22, Z+6	; 0x06
    7b26:	77 81       	ldd	r23, Z+7	; 0x07
    7b28:	ce 01       	movw	r24, r28
    7b2a:	01 96       	adiw	r24, 0x01	; 1
    7b2c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <_ZN9DhcpClass12getGatewayIpEv>
    W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
    7b30:	ce 01       	movw	r24, r28
    7b32:	03 96       	adiw	r24, 0x03	; 3
    7b34:	88 df       	rcall	.-240    	; 0x7a46 <_ZN10W5100Class8writeGAREPh>
    7b36:	f6 01       	movw	r30, r12
    7b38:	66 81       	ldd	r22, Z+6	; 0x06
    7b3a:	77 81       	ldd	r23, Z+7	; 0x07
    7b3c:	ce 01       	movw	r24, r28
void W5100Class::getGatewayIp(uint8_t *_addr) {
  readGAR(_addr);
}

void W5100Class::setGatewayIp(uint8_t *_addr) {
  writeGAR(_addr);
    7b3e:	01 96       	adiw	r24, 0x01	; 1
    7b40:	0e 94 42 35 	call	0x6a84	; 0x6a84 <_ZN9DhcpClass13getSubnetMaskEv>
    7b44:	ce 01       	movw	r24, r28
    W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
    7b46:	03 96       	adiw	r24, 0x03	; 3
    7b48:	85 df       	rcall	.-246    	; 0x7a54 <_ZN10W5100Class9writeSUBREPh>
    7b4a:	6c df       	rcall	.-296    	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    7b4c:	f6 01       	movw	r30, r12
    7b4e:	66 81       	ldd	r22, Z+6	; 0x06
    7b50:	77 81       	ldd	r23, Z+7	; 0x07
    7b52:	ce 01       	movw	r24, r28
void W5100Class::getSubnetMask(uint8_t *_addr) {
  readSUBR(_addr);
}

void W5100Class::setSubnetMask(uint8_t *_addr) {
  writeSUBR(_addr);
    7b54:	01 96       	adiw	r24, 0x01	; 1
    7b56:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <_ZN9DhcpClass14getDnsServerIpEv>
    7b5a:	4b 81       	ldd	r20, Y+3	; 0x03
    SPI.endTransaction();
    7b5c:	5c 81       	ldd	r21, Y+4	; 0x04
    7b5e:	6d 81       	ldd	r22, Y+5	; 0x05
    _dnsServerAddress = _dhcp->getDnsServerIp();
    7b60:	7e 81       	ldd	r23, Y+6	; 0x06
    7b62:	f6 01       	movw	r30, r12
    7b64:	42 83       	std	Z+2, r20	; 0x02
    7b66:	53 83       	std	Z+3, r21	; 0x03
    7b68:	64 83       	std	Z+4, r22	; 0x04
    7b6a:	75 83       	std	Z+5, r23	; 0x05
    7b6c:	c5 01       	movw	r24, r10
    7b6e:	26 96       	adiw	r28, 0x06	; 6
    7b70:	0f b6       	in	r0, 0x3f	; 63
    7b72:	f8 94       	cli
    7b74:	de bf       	out	0x3e, r29	; 62
    7b76:	0f be       	out	0x3f, r0	; 63
    7b78:	cd bf       	out	0x3d, r28	; 61
    7b7a:	df 91       	pop	r29
    7b7c:	cf 91       	pop	r28
    7b7e:	1f 91       	pop	r17
  }

  return ret;
}
    7b80:	0f 91       	pop	r16
    7b82:	ff 90       	pop	r15
    7b84:	ef 90       	pop	r14
    7b86:	df 90       	pop	r13
    7b88:	cf 90       	pop	r12
    7b8a:	bf 90       	pop	r11
    7b8c:	af 90       	pop	r10
    7b8e:	08 95       	ret

00007b90 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
    7b90:	8f 92       	push	r8
    7b92:	9f 92       	push	r9
    7b94:	af 92       	push	r10
    7b96:	bf 92       	push	r11
    7b98:	cf 92       	push	r12
    7b9a:	df 92       	push	r13
    7b9c:	ef 92       	push	r14
    7b9e:	ff 92       	push	r15
    7ba0:	0f 93       	push	r16
    7ba2:	1f 93       	push	r17
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
{
    7ba4:	cf 93       	push	r28
    7ba6:	df 93       	push	r29
    7ba8:	1f 92       	push	r1
    7baa:	1f 92       	push	r1
    7bac:	cd b7       	in	r28, 0x3d	; 61
    7bae:	de b7       	in	r29, 0x3e	; 62
    7bb0:	4c 01       	movw	r8, r24
    7bb2:	6a 01       	movw	r12, r20
    7bb4:	59 01       	movw	r10, r18
  W5100.init();
    7bb6:	89 ea       	ldi	r24, 0xA9	; 169
    7bb8:	98 e0       	ldi	r25, 0x08	; 8
    7bba:	69 83       	std	Y+1, r22	; 0x01
    7bbc:	7a 83       	std	Y+2, r23	; 0x02
    7bbe:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <_ZN10W5100Class4initEv>
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    7bc2:	80 e5       	ldi	r24, 0x50	; 80
    7bc4:	90 e0       	ldi	r25, 0x00	; 0
    7bc6:	14 df       	rcall	.-472    	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    7bc8:	46 e0       	ldi	r20, 0x06	; 6

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    7bca:	50 e0       	ldi	r21, 0x00	; 0
    7bcc:	69 81       	ldd	r22, Y+1	; 0x01
    7bce:	7a 81       	ldd	r23, Y+2	; 0x02
    7bd0:	89 e0       	ldi	r24, 0x09	; 9
    7bd2:	90 e0       	ldi	r25, 0x00	; 0
    7bd4:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>
    7bd8:	c6 01       	movw	r24, r12
void W5100Class::getIPAddress(uint8_t *_addr) {
  readSIPR(_addr);
}

void W5100Class::setIPAddress(uint8_t *_addr) {
  writeSIPR(_addr);
    7bda:	02 96       	adiw	r24, 0x02	; 2
    7bdc:	42 df       	rcall	.-380    	; 0x7a62 <_ZN10W5100Class9writeSIPREPh>
    7bde:	c8 01       	movw	r24, r16
    7be0:	02 96       	adiw	r24, 0x02	; 2
void W5100Class::getGatewayIp(uint8_t *_addr) {
  readGAR(_addr);
}

void W5100Class::setGatewayIp(uint8_t *_addr) {
  writeGAR(_addr);
    7be2:	31 df       	rcall	.-414    	; 0x7a46 <_ZN10W5100Class8writeGAREPh>
    7be4:	c7 01       	movw	r24, r14
    7be6:	02 96       	adiw	r24, 0x02	; 2
    7be8:	35 df       	rcall	.-406    	; 0x7a54 <_ZN10W5100Class9writeSUBREPh>
void W5100Class::getSubnetMask(uint8_t *_addr) {
  readSUBR(_addr);
}

void W5100Class::setSubnetMask(uint8_t *_addr) {
  writeSUBR(_addr);
    7bea:	1c df       	rcall	.-456    	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    7bec:	f5 01       	movw	r30, r10
    7bee:	42 81       	ldd	r20, Z+2	; 0x02
    7bf0:	53 81       	ldd	r21, Z+3	; 0x03
  W5100.setMACAddress(mac);
  W5100.setIPAddress(local_ip.raw_address());
  W5100.setGatewayIp(gateway.raw_address());
  W5100.setSubnetMask(subnet.raw_address());
  SPI.endTransaction();
    7bf2:	64 81       	ldd	r22, Z+4	; 0x04
    7bf4:	75 81       	ldd	r23, Z+5	; 0x05
    7bf6:	f4 01       	movw	r30, r8
    7bf8:	42 83       	std	Z+2, r20	; 0x02
    7bfa:	53 83       	std	Z+3, r21	; 0x03
    7bfc:	64 83       	std	Z+4, r22	; 0x04
    7bfe:	75 83       	std	Z+5, r23	; 0x05
    7c00:	0f 90       	pop	r0
    7c02:	0f 90       	pop	r0
    7c04:	df 91       	pop	r29
    7c06:	cf 91       	pop	r28
    7c08:	1f 91       	pop	r17
  _dnsServerAddress = dns_server;
}
    7c0a:	0f 91       	pop	r16
    7c0c:	ff 90       	pop	r15
    7c0e:	ef 90       	pop	r14
    7c10:	df 90       	pop	r13
    7c12:	cf 90       	pop	r12
    7c14:	bf 90       	pop	r11
    7c16:	af 90       	pop	r10
    7c18:	9f 90       	pop	r9
    7c1a:	8f 90       	pop	r8
    7c1c:	08 95       	ret

00007c1e <_ZN13EthernetClass7localIPEv>:
    7c1e:	cf 93       	push	r28
    7c20:	df 93       	push	r29
    7c22:	ec 01       	movw	r28, r24
    7c24:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
}

IPAddress EthernetClass::localIP()
{
  IPAddress ret;
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    7c28:	80 e5       	ldi	r24, 0x50	; 80
    7c2a:	90 e0       	ldi	r25, 0x00	; 0
    7c2c:	e1 de       	rcall	.-574    	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    7c2e:	be 01       	movw	r22, r28
  W5100.getIPAddress(ret.raw_address());
    7c30:	6e 5f       	subi	r22, 0xFE	; 254
    7c32:	7f 4f       	sbci	r23, 0xFF	; 255
    7c34:	44 e0       	ldi	r20, 0x04	; 4
public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    7c36:	50 e0       	ldi	r21, 0x00	; 0
    7c38:	8f e0       	ldi	r24, 0x0F	; 15
    7c3a:	90 e0       	ldi	r25, 0x00	; 0
    7c3c:	0e 94 d4 48 	call	0x91a8	; 0x91a8 <_ZN10W5100Class4readEjPhj>
    7c40:	f1 de       	rcall	.-542    	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
  SPI.endTransaction();
    7c42:	ce 01       	movw	r24, r28
    7c44:	df 91       	pop	r29
  return ret;
}
    7c46:	cf 91       	pop	r28
    7c48:	08 95       	ret

00007c4a <_ZN13EthernetClass11dnsServerIPEv>:
    7c4a:	28 e7       	ldi	r18, 0x78	; 120
    7c4c:	36 e0       	ldi	r19, 0x06	; 6
    7c4e:	fc 01       	movw	r30, r24
    7c50:	31 83       	std	Z+1, r19	; 0x01
    7c52:	20 83       	st	Z, r18
    7c54:	fb 01       	movw	r30, r22
    7c56:	42 81       	ldd	r20, Z+2	; 0x02
    7c58:	53 81       	ldd	r21, Z+3	; 0x03
    7c5a:	64 81       	ldd	r22, Z+4	; 0x04
    7c5c:	75 81       	ldd	r23, Z+5	; 0x05
    7c5e:	fc 01       	movw	r30, r24
    7c60:	42 83       	std	Z+2, r20	; 0x02
    7c62:	53 83       	std	Z+3, r21	; 0x03
    7c64:	64 83       	std	Z+4, r22	; 0x04
    7c66:	75 83       	std	Z+5, r23	; 0x05
}

IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}
    7c68:	08 95       	ret

00007c6a <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    7c6a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    7c6c:	00 e0       	ldi	r16, 0x00	; 0
    7c6e:	20 e0       	ldi	r18, 0x00	; 0
    7c70:	40 e0       	ldi	r20, 0x00	; 0
    7c72:	60 e0       	ldi	r22, 0x00	; 0
    7c74:	8f e8       	ldi	r24, 0x8F	; 143
    7c76:	98 e0       	ldi	r25, 0x08	; 8
    7c78:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
#include "EthernetServer.h"
#include "Dhcp.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
    7c7c:	87 e7       	ldi	r24, 0x77	; 119
    7c7e:	98 e0       	ldi	r25, 0x08	; 8
    7c80:	0f 91       	pop	r16
    7c82:	0c 94 b8 4e 	jmp	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>

00007c86 <_ZN14EthernetClienteqEb>:
  virtual int peek();
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const bool value) { return bool() == value; }
    7c86:	81 e0       	ldi	r24, 0x01	; 1
    7c88:	86 27       	eor	r24, r22
    7c8a:	08 95       	ret

00007c8c <_ZN14EthernetClientneEb>:
  virtual bool operator!=(const bool value) { return bool() != value; }
    7c8c:	86 2f       	mov	r24, r22
    7c8e:	08 95       	ret

00007c90 <_ZN14EthernetClientneERKS_>:
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    7c90:	dc 01       	movw	r26, r24
    7c92:	ed 91       	ld	r30, X+
    7c94:	fc 91       	ld	r31, X
    7c96:	04 8c       	ldd	r0, Z+28	; 0x1c
    7c98:	f5 8d       	ldd	r31, Z+29	; 0x1d
    7c9a:	e0 2d       	mov	r30, r0
    7c9c:	19 95       	eicall
    7c9e:	91 e0       	ldi	r25, 0x01	; 1
    7ca0:	89 27       	eor	r24, r25
    7ca2:	08 95       	ret

00007ca4 <_ZN14EthernetClient5writeEh>:
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    7ca4:	cf 93       	push	r28
    7ca6:	df 93       	push	r29
    7ca8:	1f 92       	push	r1
    7caa:	cd b7       	in	r28, 0x3d	; 61
    7cac:	de b7       	in	r29, 0x3e	; 62
    7cae:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    7cb0:	dc 01       	movw	r26, r24
    7cb2:	ed 91       	ld	r30, X+
    7cb4:	fc 91       	ld	r31, X
    7cb6:	02 80       	ldd	r0, Z+2	; 0x02
    7cb8:	f3 81       	ldd	r31, Z+3	; 0x03
    7cba:	e0 2d       	mov	r30, r0
    7cbc:	41 e0       	ldi	r20, 0x01	; 1
    7cbe:	50 e0       	ldi	r21, 0x00	; 0
    7cc0:	be 01       	movw	r22, r28
    7cc2:	6f 5f       	subi	r22, 0xFF	; 255
    7cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    7cc6:	19 95       	eicall
}
    7cc8:	0f 90       	pop	r0
    7cca:	df 91       	pop	r29
    7ccc:	cf 91       	pop	r28
    7cce:	08 95       	ret

00007cd0 <_ZN14EthernetClientcvbEv>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    7cd0:	21 e0       	ldi	r18, 0x01	; 1
    7cd2:	fc 01       	movw	r30, r24
    7cd4:	84 85       	ldd	r24, Z+12	; 0x0c
    7cd6:	84 30       	cpi	r24, 0x04	; 4
    7cd8:	09 f4       	brne	.+2      	; 0x7cdc <_ZN14EthernetClientcvbEv+0xc>
    7cda:	20 e0       	ldi	r18, 0x00	; 0
}
    7cdc:	82 2f       	mov	r24, r18
    7cde:	08 95       	ret

00007ce0 <_ZN14EthernetClienteqERKS_>:

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    7ce0:	fc 01       	movw	r30, r24
    7ce2:	94 85       	ldd	r25, Z+12	; 0x0c
    7ce4:	fb 01       	movw	r30, r22
    7ce6:	84 85       	ldd	r24, Z+12	; 0x0c
    7ce8:	98 13       	cpse	r25, r24
    7cea:	03 c0       	rjmp	.+6      	; 0x7cf2 <_ZN14EthernetClienteqERKS_+0x12>
    7cec:	81 e0       	ldi	r24, 0x01	; 1
    7cee:	94 30       	cpi	r25, 0x04	; 4
    7cf0:	09 f4       	brne	.+2      	; 0x7cf4 <_ZN14EthernetClienteqERKS_+0x14>
    7cf2:	80 e0       	ldi	r24, 0x00	; 0
}
    7cf4:	08 95       	ret

00007cf6 <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    7cf6:	0f 93       	push	r16
    7cf8:	1f 93       	push	r17
    7cfa:	cf 93       	push	r28
    7cfc:	df 93       	push	r29
    7cfe:	ec 01       	movw	r28, r24
    7d00:	8a 01       	movw	r16, r20
  if (_sock == MAX_SOCK_NUM) {
    7d02:	8c 85       	ldd	r24, Y+12	; 0x0c
    7d04:	84 30       	cpi	r24, 0x04	; 4
    7d06:	19 f0       	breq	.+6      	; 0x7d0e <_ZN14EthernetClient5writeEPKhj+0x18>
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    7d08:	9e d6       	rcall	.+3388   	; 0x8a46 <_Z4sendhPKhj>
    7d0a:	89 2b       	or	r24, r25
    7d0c:	39 f4       	brne	.+14     	; 0x7d1c <_ZN14EthernetClient5writeEPKhj+0x26>
    7d0e:	81 e0       	ldi	r24, 0x01	; 1
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    7d10:	90 e0       	ldi	r25, 0x00	; 0
    7d12:	9b 83       	std	Y+3, r25	; 0x03
    7d14:	8a 83       	std	Y+2, r24	; 0x02
    7d16:	80 e0       	ldi	r24, 0x00	; 0
    setWriteError();
    return 0;
    7d18:	90 e0       	ldi	r25, 0x00	; 0
    7d1a:	01 c0       	rjmp	.+2      	; 0x7d1e <_ZN14EthernetClient5writeEPKhj+0x28>
    7d1c:	c8 01       	movw	r24, r16
  }
  return size;
    7d1e:	df 91       	pop	r29
}
    7d20:	cf 91       	pop	r28
    7d22:	1f 91       	pop	r17
    7d24:	0f 91       	pop	r16
    7d26:	08 95       	ret

00007d28 <_ZN14EthernetClient9availableEv>:
    7d28:	fc 01       	movw	r30, r24

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    7d2a:	84 85       	ldd	r24, Z+12	; 0x0c
    7d2c:	84 30       	cpi	r24, 0x04	; 4
    7d2e:	09 f0       	breq	.+2      	; 0x7d32 <_ZN14EthernetClient9availableEv+0xa>
    return recvAvailable(_sock);
    7d30:	6f c7       	rjmp	.+3806   	; 0x8c10 <_Z13recvAvailableh>
    7d32:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
    7d34:	90 e0       	ldi	r25, 0x00	; 0
    7d36:	08 95       	ret

00007d38 <_ZN14EthernetClient4readEv>:
    7d38:	cf 93       	push	r28

int EthernetClient::read() {
    7d3a:	df 93       	push	r29
    7d3c:	1f 92       	push	r1
    7d3e:	cd b7       	in	r28, 0x3d	; 61
    7d40:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    7d42:	41 e0       	ldi	r20, 0x01	; 1
    7d44:	50 e0       	ldi	r21, 0x00	; 0
    7d46:	be 01       	movw	r22, r28
    7d48:	6f 5f       	subi	r22, 0xFF	; 255
    7d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    7d4c:	fc 01       	movw	r30, r24
    7d4e:	84 85       	ldd	r24, Z+12	; 0x0c
    7d50:	03 d7       	rcall	.+3590   	; 0x8b58 <_Z4recvhPhi>
    7d52:	18 16       	cp	r1, r24
    7d54:	19 06       	cpc	r1, r25
    7d56:	1c f4       	brge	.+6      	; 0x7d5e <_ZN14EthernetClient4readEv+0x26>
    7d58:	89 81       	ldd	r24, Y+1	; 0x01
  {
    // recv worked
    return b;
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	02 c0       	rjmp	.+4      	; 0x7d62 <_ZN14EthernetClient4readEv+0x2a>
    7d5e:	8f ef       	ldi	r24, 0xFF	; 255
  }
  else
  {
    // No data available
    return -1;
    7d60:	9f ef       	ldi	r25, 0xFF	; 255
    7d62:	0f 90       	pop	r0
  }
}
    7d64:	df 91       	pop	r29
    7d66:	cf 91       	pop	r28
    7d68:	08 95       	ret

00007d6a <_ZN14EthernetClient4readEPhj>:
    7d6a:	fc 01       	movw	r30, r24

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    7d6c:	84 85       	ldd	r24, Z+12	; 0x0c
    7d6e:	f4 c6       	rjmp	.+3560   	; 0x8b58 <_Z4recvhPhi>

00007d70 <_ZN14EthernetClient4peekEv>:
    7d70:	0f 93       	push	r16
}

int EthernetClient::peek() {
    7d72:	1f 93       	push	r17
    7d74:	cf 93       	push	r28
    7d76:	df 93       	push	r29
    7d78:	1f 92       	push	r1
    7d7a:	cd b7       	in	r28, 0x3d	; 61
    7d7c:	de b7       	in	r29, 0x3e	; 62
    7d7e:	8c 01       	movw	r16, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    7d80:	dc 01       	movw	r26, r24
    7d82:	ed 91       	ld	r30, X+
    7d84:	fc 91       	ld	r31, X
    7d86:	04 80       	ldd	r0, Z+4	; 0x04
    7d88:	f5 81       	ldd	r31, Z+5	; 0x05
    7d8a:	e0 2d       	mov	r30, r0
    7d8c:	19 95       	eicall
    7d8e:	89 2b       	or	r24, r25
    7d90:	49 f0       	breq	.+18     	; 0x7da4 <_ZN14EthernetClient4peekEv+0x34>
    return -1;
  ::peek(_sock, &b);
    7d92:	be 01       	movw	r22, r28
    7d94:	6f 5f       	subi	r22, 0xFF	; 255
    7d96:	7f 4f       	sbci	r23, 0xFF	; 255
    7d98:	f8 01       	movw	r30, r16
    7d9a:	84 85       	ldd	r24, Z+12	; 0x0c
    7d9c:	62 d7       	rcall	.+3780   	; 0x8c62 <_Z4peekhPh>
    7d9e:	89 81       	ldd	r24, Y+1	; 0x01
  return b;
    7da0:	90 e0       	ldi	r25, 0x00	; 0
    7da2:	02 c0       	rjmp	.+4      	; 0x7da8 <_ZN14EthernetClient4peekEv+0x38>
    7da4:	8f ef       	ldi	r24, 0xFF	; 255

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    7da6:	9f ef       	ldi	r25, 0xFF	; 255
    7da8:	0f 90       	pop	r0
  ::peek(_sock, &b);
  return b;
}
    7daa:	df 91       	pop	r29
    7dac:	cf 91       	pop	r28
    7dae:	1f 91       	pop	r17
    7db0:	0f 91       	pop	r16
    7db2:	08 95       	ret

00007db4 <_ZN14EthernetClient5flushEv>:
    7db4:	fc 01       	movw	r30, r24

void EthernetClient::flush() {
  ::flush(_sock);
    7db6:	84 85       	ldd	r24, Z+12	; 0x0c
    7db8:	82 c7       	rjmp	.+3844   	; 0x8cbe <_Z5flushh>

00007dba <_ZN14EthernetClient7connectEPKcj>:
    7dba:	cf 92       	push	r12
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    7dbc:	df 92       	push	r13
    7dbe:	ef 92       	push	r14
    7dc0:	ff 92       	push	r15
    7dc2:	0f 93       	push	r16
    7dc4:	1f 93       	push	r17
    7dc6:	cf 93       	push	r28
    7dc8:	df 93       	push	r29
    7dca:	cd b7       	in	r28, 0x3d	; 61
    7dcc:	de b7       	in	r29, 0x3e	; 62
    7dce:	af 97       	sbiw	r28, 0x2f	; 47
    7dd0:	0f b6       	in	r0, 0x3f	; 63
    7dd2:	f8 94       	cli
    7dd4:	de bf       	out	0x3e, r29	; 62
    7dd6:	0f be       	out	0x3f, r0	; 63
    7dd8:	cd bf       	out	0x3d, r28	; 61
    7dda:	7c 01       	movw	r14, r24
    7ddc:	8b 01       	movw	r16, r22
    7dde:	6a 01       	movw	r12, r20
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp.h>

class DNSClient
    7de0:	ce 01       	movw	r24, r28
    7de2:	01 96       	adiw	r24, 0x01	; 1
    7de4:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    7de8:	ce 01       	movw	r24, r28
    7dea:	09 96       	adiw	r24, 0x09	; 9
    7dec:	02 d4       	rcall	.+2052   	; 0x85f2 <_ZN11EthernetUDPC1Ev>
    7dee:	ce 01       	movw	r24, r28
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    7df0:	8a 96       	adiw	r24, 0x2a	; 42
    7df2:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    7df6:	67 e7       	ldi	r22, 0x77	; 119

  dns.begin(Ethernet.dnsServerIP());
    7df8:	78 e0       	ldi	r23, 0x08	; 8
    7dfa:	ce 01       	movw	r24, r28
    7dfc:	84 96       	adiw	r24, 0x24	; 36
    7dfe:	25 df       	rcall	.-438    	; 0x7c4a <_ZN13EthernetClass11dnsServerIPEv>
    7e00:	be 01       	movw	r22, r28
    7e02:	6c 5d       	subi	r22, 0xDC	; 220
    7e04:	7f 4f       	sbci	r23, 0xFF	; 255
    7e06:	ce 01       	movw	r24, r28
    7e08:	01 96       	adiw	r24, 0x01	; 1
    7e0a:	28 db       	rcall	.-2480   	; 0x745c <_ZN9DNSClient5beginERK9IPAddress>
    7e0c:	ae 01       	movw	r20, r28
    7e0e:	46 5d       	subi	r20, 0xD6	; 214
    7e10:	5f 4f       	sbci	r21, 0xFF	; 255
  ret = dns.getHostByName(host, remote_addr);
    7e12:	b8 01       	movw	r22, r16
    7e14:	ce 01       	movw	r24, r28
    7e16:	01 96       	adiw	r24, 0x01	; 1
    7e18:	60 dd       	rcall	.-1344   	; 0x78da <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    7e1a:	81 30       	cpi	r24, 0x01	; 1
    7e1c:	91 05       	cpc	r25, r1
    7e1e:	c1 f4       	brne	.+48     	; 0x7e50 <_ZN14EthernetClient7connectEPKcj+0x96>
    7e20:	d7 01       	movw	r26, r14
  if (ret == 1) {
    7e22:	ed 91       	ld	r30, X+
    7e24:	fc 91       	ld	r31, X
    7e26:	04 84       	ldd	r0, Z+12	; 0x0c
    return connect(remote_addr, port);
    7e28:	f5 85       	ldd	r31, Z+13	; 0x0d
    7e2a:	e0 2d       	mov	r30, r0
    7e2c:	88 e7       	ldi	r24, 0x78	; 120
    7e2e:	96 e0       	ldi	r25, 0x06	; 6
    7e30:	9d a3       	std	Y+37, r25	; 0x25
    7e32:	8c a3       	std	Y+36, r24	; 0x24
#include <stdint.h>
#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    7e34:	0c a5       	ldd	r16, Y+44	; 0x2c
    7e36:	1d a5       	ldd	r17, Y+45	; 0x2d
    7e38:	2e a5       	ldd	r18, Y+46	; 0x2e
    7e3a:	3f a5       	ldd	r19, Y+47	; 0x2f
    7e3c:	0e a3       	std	Y+38, r16	; 0x26
    7e3e:	1f a3       	std	Y+39, r17	; 0x27
    7e40:	28 a7       	std	Y+40, r18	; 0x28
    7e42:	39 a7       	std	Y+41, r19	; 0x29
    7e44:	a6 01       	movw	r20, r12
    7e46:	be 01       	movw	r22, r28
    7e48:	6c 5d       	subi	r22, 0xDC	; 220
    7e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e4c:	c7 01       	movw	r24, r14
    7e4e:	19 95       	eicall
    7e50:	af 96       	adiw	r28, 0x2f	; 47
    7e52:	0f b6       	in	r0, 0x3f	; 63
    7e54:	f8 94       	cli
    7e56:	de bf       	out	0x3e, r29	; 62
  } else {
    return ret;
  }
}
    7e58:	0f be       	out	0x3f, r0	; 63
    7e5a:	cd bf       	out	0x3d, r28	; 61
    7e5c:	df 91       	pop	r29
    7e5e:	cf 91       	pop	r28
    7e60:	1f 91       	pop	r17
    7e62:	0f 91       	pop	r16
    7e64:	ff 90       	pop	r15
    7e66:	ef 90       	pop	r14
    7e68:	df 90       	pop	r13
    7e6a:	cf 90       	pop	r12
    7e6c:	08 95       	ret

00007e6e <_ZN14EthernetClientC1Ev>:
    7e6e:	fc 01       	movw	r30, r24
    7e70:	13 82       	std	Z+3, r1	; 0x03
    7e72:	12 82       	std	Z+2, r1	; 0x02
    7e74:	48 ee       	ldi	r20, 0xE8	; 232
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    7e76:	53 e0       	ldi	r21, 0x03	; 3
    7e78:	60 e0       	ldi	r22, 0x00	; 0
    7e7a:	70 e0       	ldi	r23, 0x00	; 0
    7e7c:	44 83       	std	Z+4, r20	; 0x04
    7e7e:	55 83       	std	Z+5, r21	; 0x05
    7e80:	66 83       	std	Z+6, r22	; 0x06
    7e82:	77 83       	std	Z+7, r23	; 0x07
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 49152;      //Use IANA recommended ephemeral port range 49152-65535

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
    7e84:	86 e1       	ldi	r24, 0x16	; 22
    7e86:	96 e0       	ldi	r25, 0x06	; 6
    7e88:	91 83       	std	Z+1, r25	; 0x01
    7e8a:	80 83       	st	Z, r24
    7e8c:	84 e0       	ldi	r24, 0x04	; 4
    7e8e:	84 87       	std	Z+12, r24	; 0x0c
    7e90:	08 95       	ret

00007e92 <_ZN14EthernetClientC1Eh>:
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    7e92:	fc 01       	movw	r30, r24
    7e94:	26 2f       	mov	r18, r22
  public:
    Print() : write_error(0) {}
    7e96:	13 82       	std	Z+3, r1	; 0x03
    7e98:	12 82       	std	Z+2, r1	; 0x02
    7e9a:	48 ee       	ldi	r20, 0xE8	; 232
    7e9c:	53 e0       	ldi	r21, 0x03	; 3
    7e9e:	60 e0       	ldi	r22, 0x00	; 0
    7ea0:	70 e0       	ldi	r23, 0x00	; 0
    7ea2:	44 83       	std	Z+4, r20	; 0x04
    7ea4:	55 83       	std	Z+5, r21	; 0x05
    7ea6:	66 83       	std	Z+6, r22	; 0x06
    7ea8:	77 83       	std	Z+7, r23	; 0x07
    7eaa:	86 e1       	ldi	r24, 0x16	; 22
    7eac:	96 e0       	ldi	r25, 0x06	; 6
    7eae:	91 83       	std	Z+1, r25	; 0x01
    7eb0:	80 83       	st	Z, r24
    7eb2:	24 87       	std	Z+12, r18	; 0x0c
    7eb4:	08 95       	ret

00007eb6 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    7eb6:	fc 01       	movw	r30, r24
    7eb8:	84 85       	ldd	r24, Z+12	; 0x0c
    7eba:	84 30       	cpi	r24, 0x04	; 4
    7ebc:	09 f0       	breq	.+2      	; 0x7ec0 <_ZN14EthernetClient6statusEv+0xa>
  return socketStatus(_sock);
    7ebe:	87 c4       	rjmp	.+2318   	; 0x87ce <_Z12socketStatush>
    7ec0:	80 e0       	ldi	r24, 0x00	; 0
}
    7ec2:	08 95       	ret

00007ec4 <_ZN14EthernetClient7connectE9IPAddressj>:
    7ec4:	df 92       	push	r13
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    7ec6:	ef 92       	push	r14
    7ec8:	ff 92       	push	r15
    7eca:	0f 93       	push	r16
    7ecc:	1f 93       	push	r17
    7ece:	cf 93       	push	r28
    7ed0:	df 93       	push	r29
    7ed2:	ec 01       	movw	r28, r24
    7ed4:	7b 01       	movw	r14, r22
    7ed6:	8a 01       	movw	r16, r20
  if (_sock != MAX_SOCK_NUM)
    7ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
    7eda:	84 30       	cpi	r24, 0x04	; 4
    7edc:	09 f0       	breq	.+2      	; 0x7ee0 <_ZN14EthernetClient7connectE9IPAddressj+0x1c>
    7ede:	40 c0       	rjmp	.+128    	; 0x7f60 <_ZN14EthernetClient7connectE9IPAddressj+0x9c>
    7ee0:	d1 2c       	mov	r13, r1
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = socketStatus(i);
    7ee2:	8d 2d       	mov	r24, r13
    7ee4:	74 d4       	rcall	.+2280   	; 0x87ce <_Z12socketStatush>
    7ee6:	81 11       	cpse	r24, r1
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    7ee8:	02 c0       	rjmp	.+4      	; 0x7eee <_ZN14EthernetClient7connectE9IPAddressj+0x2a>
    7eea:	dc 86       	std	Y+12, r13	; 0x0c
      _sock = i;
    7eec:	07 c0       	rjmp	.+14     	; 0x7efc <_ZN14EthernetClient7connectE9IPAddressj+0x38>
    7eee:	8b 7f       	andi	r24, 0xFB	; 251
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = socketStatus(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    7ef0:	88 31       	cpi	r24, 0x18	; 24
    7ef2:	d9 f3       	breq	.-10     	; 0x7eea <_ZN14EthernetClient7connectE9IPAddressj+0x26>
    7ef4:	d3 94       	inc	r13
    7ef6:	84 e0       	ldi	r24, 0x04	; 4

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    7ef8:	d8 12       	cpse	r13, r24
    7efa:	f3 cf       	rjmp	.-26     	; 0x7ee2 <_ZN14EthernetClient7connectE9IPAddressj+0x1e>
    7efc:	8c 85       	ldd	r24, Y+12	; 0x0c
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    7efe:	84 30       	cpi	r24, 0x04	; 4
    7f00:	79 f1       	breq	.+94     	; 0x7f60 <_ZN14EthernetClient7connectE9IPAddressj+0x9c>
    7f02:	20 91 0a 02 	lds	r18, 0x020A
    return 0;

  _srcport++;
    7f06:	30 91 0b 02 	lds	r19, 0x020B
    7f0a:	2f 5f       	subi	r18, 0xFF	; 255
    7f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    7f0e:	11 f4       	brne	.+4      	; 0x7f14 <_ZN14EthernetClient7connectE9IPAddressj+0x50>
  if (_srcport == 0) _srcport = 49152;          //Use IANA recommended ephemeral port range 49152-65535
    7f10:	20 e0       	ldi	r18, 0x00	; 0
    7f12:	30 ec       	ldi	r19, 0xC0	; 192
    7f14:	30 93 0b 02 	sts	0x020B, r19
    7f18:	20 93 0a 02 	sts	0x020A, r18
    7f1c:	40 91 0a 02 	lds	r20, 0x020A
  socket(_sock, SnMR::TCP, _srcport, 0);
    7f20:	50 91 0b 02 	lds	r21, 0x020B
    7f24:	20 e0       	ldi	r18, 0x00	; 0
    7f26:	61 e0       	ldi	r22, 0x01	; 1
    7f28:	9b d4       	rcall	.+2358   	; 0x8860 <_Z6sockethhjh>
    7f2a:	b7 01       	movw	r22, r14
    7f2c:	6e 5f       	subi	r22, 0xFE	; 254

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    7f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    7f30:	a8 01       	movw	r20, r16
    7f32:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f34:	10 d5       	rcall	.+2592   	; 0x8956 <_Z7connecthPhj>
    7f36:	81 11       	cpse	r24, r1
    7f38:	03 c0       	rjmp	.+6      	; 0x7f40 <_ZN14EthernetClient7connectE9IPAddressj+0x7c>
    7f3a:	84 e0       	ldi	r24, 0x04	; 4
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    delay(1);
    if (status() == SnSR::CLOSED) {
    7f3c:	8c 87       	std	Y+12, r24	; 0x0c
    7f3e:	10 c0       	rjmp	.+32     	; 0x7f60 <_ZN14EthernetClient7connectE9IPAddressj+0x9c>
      _sock = MAX_SOCK_NUM;
    7f40:	ce 01       	movw	r24, r28
    7f42:	b9 df       	rcall	.-142    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    7f44:	87 31       	cpi	r24, 0x17	; 23
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    7f46:	49 f0       	breq	.+18     	; 0x7f5a <_ZN14EthernetClient7connectE9IPAddressj+0x96>
    7f48:	61 e0       	ldi	r22, 0x01	; 1
    7f4a:	70 e0       	ldi	r23, 0x00	; 0
    7f4c:	80 e0       	ldi	r24, 0x00	; 0
    7f4e:	90 e0       	ldi	r25, 0x00	; 0
    delay(1);
    7f50:	0e 94 4a 4a 	call	0x9494	; 0x9494 <delay>
    7f54:	ce 01       	movw	r24, r28
    7f56:	af df       	rcall	.-162    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    7f58:	ee cf       	rjmp	.-36     	; 0x7f36 <_ZN14EthernetClient7connectE9IPAddressj+0x72>
    7f5a:	81 e0       	ldi	r24, 0x01	; 1
    if (status() == SnSR::CLOSED) {
    7f5c:	90 e0       	ldi	r25, 0x00	; 0
    7f5e:	02 c0       	rjmp	.+4      	; 0x7f64 <_ZN14EthernetClient7connectE9IPAddressj+0xa0>
    7f60:	80 e0       	ldi	r24, 0x00	; 0
    7f62:	90 e0       	ldi	r25, 0x00	; 0
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    7f64:	df 91       	pop	r29
    7f66:	cf 91       	pop	r28
    7f68:	1f 91       	pop	r17
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;
    7f6a:	0f 91       	pop	r16
    7f6c:	ff 90       	pop	r15
      return 0;
    }
  }

  return 1;
}
    7f6e:	ef 90       	pop	r14
    7f70:	df 90       	pop	r13
    7f72:	08 95       	ret

00007f74 <_ZN14EthernetClient4stopEv>:
    7f74:	cf 92       	push	r12
    7f76:	df 92       	push	r13
    7f78:	ef 92       	push	r14
    7f7a:	ff 92       	push	r15
    7f7c:	cf 93       	push	r28

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    7f7e:	df 93       	push	r29
    7f80:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    7f82:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f84:	84 30       	cpi	r24, 0x04	; 4
    7f86:	61 f1       	breq	.+88     	; 0x7fe0 <_ZN14EthernetClient4stopEv+0x6c>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    7f88:	39 d5       	rcall	.+2674   	; 0x89fc <_Z10disconnecth>
    7f8a:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
  unsigned long start = millis();
    7f8e:	6b 01       	movw	r12, r22
    7f90:	7c 01       	movw	r14, r24
    7f92:	ce 01       	movw	r24, r28

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    7f94:	90 df       	rcall	.-224    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    7f96:	88 23       	and	r24, r24
    7f98:	59 f0       	breq	.+22     	; 0x7fb0 <_ZN14EthernetClient4stopEv+0x3c>
    7f9a:	0e 94 1b 4a 	call	0x9436	; 0x9436 <millis>
    7f9e:	6c 19       	sub	r22, r12
    7fa0:	7d 09       	sbc	r23, r13
    7fa2:	8e 09       	sbc	r24, r14
    7fa4:	9f 09       	sbc	r25, r15
    7fa6:	68 3e       	cpi	r22, 0xE8	; 232
    7fa8:	73 40       	sbci	r23, 0x03	; 3
    7faa:	81 05       	cpc	r24, r1
    7fac:	91 05       	cpc	r25, r1
    7fae:	88 f0       	brcs	.+34     	; 0x7fd2 <_ZN14EthernetClient4stopEv+0x5e>
    7fb0:	ce 01       	movw	r24, r28
    7fb2:	81 df       	rcall	.-254    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    7fb4:	88 23       	and	r24, r24
    7fb6:	11 f0       	breq	.+4      	; 0x7fbc <_ZN14EthernetClient4stopEv+0x48>
    7fb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    7fba:	2c d4       	rcall	.+2136   	; 0x8814 <_Z5closeh>
    7fbc:	ec 85       	ldd	r30, Y+12	; 0x0c
    close(_sock);
    7fbe:	f0 e0       	ldi	r31, 0x00	; 0
    7fc0:	ee 0f       	add	r30, r30
    7fc2:	ff 1f       	adc	r31, r31

  EthernetClass::_server_port[_sock] = 0;
    7fc4:	e9 57       	subi	r30, 0x79	; 121
    7fc6:	f7 4f       	sbci	r31, 0xF7	; 247
    7fc8:	11 82       	std	Z+1, r1	; 0x01
    7fca:	10 82       	st	Z, r1
    7fcc:	84 e0       	ldi	r24, 0x04	; 4
    7fce:	8c 87       	std	Y+12, r24	; 0x0c
    7fd0:	07 c0       	rjmp	.+14     	; 0x7fe0 <_ZN14EthernetClient4stopEv+0x6c>
    7fd2:	61 e0       	ldi	r22, 0x01	; 1
  _sock = MAX_SOCK_NUM;
    7fd4:	70 e0       	ldi	r23, 0x00	; 0
    7fd6:	80 e0       	ldi	r24, 0x00	; 0
    7fd8:	90 e0       	ldi	r25, 0x00	; 0
  disconnect(_sock);
  unsigned long start = millis();

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    delay(1);
    7fda:	0e 94 4a 4a 	call	0x9494	; 0x9494 <delay>
    7fde:	d9 cf       	rjmp	.-78     	; 0x7f92 <_ZN14EthernetClient4stopEv+0x1e>
    7fe0:	df 91       	pop	r29
    7fe2:	cf 91       	pop	r28
    7fe4:	ff 90       	pop	r15
    7fe6:	ef 90       	pop	r14
  if (status() != SnSR::CLOSED)
    close(_sock);

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}
    7fe8:	df 90       	pop	r13
    7fea:	cf 90       	pop	r12
    7fec:	08 95       	ret

00007fee <_ZN14EthernetClient9connectedEv>:
    7fee:	cf 93       	push	r28
    7ff0:	df 93       	push	r29
    7ff2:	ec 01       	movw	r28, r24
    7ff4:	8c 85       	ldd	r24, Y+12	; 0x0c

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    7ff6:	84 30       	cpi	r24, 0x04	; 4
    7ff8:	c9 f0       	breq	.+50     	; 0x802c <_ZN14EthernetClient9connectedEv+0x3e>
  
  uint8_t s = status();
    7ffa:	ce 01       	movw	r24, r28
    7ffc:	5c df       	rcall	.-328    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    7ffe:	84 31       	cpi	r24, 0x14	; 20
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    8000:	a9 f0       	breq	.+42     	; 0x802c <_ZN14EthernetClient9connectedEv+0x3e>
    8002:	88 23       	and	r24, r24

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    8004:	99 f0       	breq	.+38     	; 0x802c <_ZN14EthernetClient9connectedEv+0x3e>
    8006:	88 31       	cpi	r24, 0x18	; 24
    8008:	89 f0       	breq	.+34     	; 0x802c <_ZN14EthernetClient9connectedEv+0x3e>
    800a:	8c 31       	cpi	r24, 0x1C	; 28
    (s == SnSR::CLOSE_WAIT && !available()));
    800c:	69 f4       	brne	.+26     	; 0x8028 <_ZN14EthernetClient9connectedEv+0x3a>
    800e:	e8 81       	ld	r30, Y
    8010:	f9 81       	ldd	r31, Y+1	; 0x01
    8012:	04 80       	ldd	r0, Z+4	; 0x04
    8014:	f5 81       	ldd	r31, Z+5	; 0x05
    8016:	e0 2d       	mov	r30, r0
    8018:	ce 01       	movw	r24, r28
    801a:	19 95       	eicall
    801c:	21 e0       	ldi	r18, 0x01	; 1
    801e:	89 2b       	or	r24, r25
    8020:	09 f4       	brne	.+2      	; 0x8024 <_ZN14EthernetClient9connectedEv+0x36>
    8022:	20 e0       	ldi	r18, 0x00	; 0
    8024:	82 2f       	mov	r24, r18
    8026:	03 c0       	rjmp	.+6      	; 0x802e <_ZN14EthernetClient9connectedEv+0x40>
    8028:	81 e0       	ldi	r24, 0x01	; 1
    802a:	01 c0       	rjmp	.+2      	; 0x802e <_ZN14EthernetClient9connectedEv+0x40>
    802c:	80 e0       	ldi	r24, 0x00	; 0
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    802e:	df 91       	pop	r29
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    8030:	cf 91       	pop	r28
    8032:	08 95       	ret

00008034 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
    8034:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    8036:	00 e0       	ldi	r16, 0x00	; 0
    8038:	20 e0       	ldi	r18, 0x00	; 0
    803a:	40 e0       	ldi	r20, 0x00	; 0
    803c:	60 e0       	ldi	r22, 0x00	; 0
    803e:	85 e9       	ldi	r24, 0x95	; 149
    8040:	98 e0       	ldi	r25, 0x08	; 8
    8042:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
    8046:	0f 91       	pop	r16
    8048:	08 95       	ret

0000804a <_ZN14EthernetServer5writeEh>:

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
    804a:	cf 93       	push	r28
    804c:	df 93       	push	r29
    804e:	1f 92       	push	r1
    8050:	cd b7       	in	r28, 0x3d	; 61
    8052:	de b7       	in	r29, 0x3e	; 62
    8054:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    8056:	dc 01       	movw	r26, r24
    8058:	ed 91       	ld	r30, X+
    805a:	fc 91       	ld	r31, X
    805c:	02 80       	ldd	r0, Z+2	; 0x02
    805e:	f3 81       	ldd	r31, Z+3	; 0x03
    8060:	e0 2d       	mov	r30, r0
    8062:	41 e0       	ldi	r20, 0x01	; 1
    8064:	50 e0       	ldi	r21, 0x00	; 0
    8066:	be 01       	movw	r22, r28
    8068:	6f 5f       	subi	r22, 0xFF	; 255
    806a:	7f 4f       	sbci	r23, 0xFF	; 255
    806c:	19 95       	eicall
}
    806e:	0f 90       	pop	r0
    8070:	df 91       	pop	r29
    8072:	cf 91       	pop	r28
    8074:	08 95       	ret

00008076 <_ZN14EthernetServer5beginEv>:
{
  _port = port;
}

void EthernetServer::begin()
{
    8076:	ef 92       	push	r14
    8078:	ff 92       	push	r15
    807a:	0f 93       	push	r16
    807c:	1f 93       	push	r17
    807e:	cf 93       	push	r28
    8080:	df 93       	push	r29
    8082:	cd b7       	in	r28, 0x3d	; 61
    8084:	de b7       	in	r29, 0x3e	; 62
    8086:	2d 97       	sbiw	r28, 0x0d	; 13
    8088:	0f b6       	in	r0, 0x3f	; 63
    808a:	f8 94       	cli
    808c:	de bf       	out	0x3e, r29	; 62
    808e:	0f be       	out	0x3f, r0	; 63
    8090:	cd bf       	out	0x3d, r28	; 61
    8092:	7c 01       	movw	r14, r24
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    8094:	00 e0       	ldi	r16, 0x00	; 0
    8096:	10 e0       	ldi	r17, 0x00	; 0
    EthernetClient client(sock);
    8098:	60 2f       	mov	r22, r16
    809a:	ce 01       	movw	r24, r28
    809c:	01 96       	adiw	r24, 0x01	; 1
    809e:	f9 de       	rcall	.-526    	; 0x7e92 <_ZN14EthernetClientC1Eh>
    80a0:	ce 01       	movw	r24, r28
    if (client.status() == SnSR::CLOSED) {
    80a2:	01 96       	adiw	r24, 0x01	; 1
    80a4:	08 df       	rcall	.-496    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    80a6:	81 11       	cpse	r24, r1
    80a8:	14 c0       	rjmp	.+40     	; 0x80d2 <_ZN14EthernetServer5beginEv+0x5c>
    80aa:	f7 01       	movw	r30, r14
    80ac:	44 81       	ldd	r20, Z+4	; 0x04
      socket(sock, SnMR::TCP, _port, 0);
    80ae:	55 81       	ldd	r21, Z+5	; 0x05
    80b0:	20 e0       	ldi	r18, 0x00	; 0
    80b2:	61 e0       	ldi	r22, 0x01	; 1
    80b4:	80 2f       	mov	r24, r16
    80b6:	d4 d3       	rcall	.+1960   	; 0x8860 <_Z6sockethhjh>
    80b8:	80 2f       	mov	r24, r16
    80ba:	20 d4       	rcall	.+2112   	; 0x88fc <_Z6listenh>
    80bc:	f7 01       	movw	r30, r14
      listen(sock);
    80be:	84 81       	ldd	r24, Z+4	; 0x04
    80c0:	95 81       	ldd	r25, Z+5	; 0x05
    80c2:	f8 01       	movw	r30, r16
      EthernetClass::_server_port[sock] = _port;
    80c4:	ee 0f       	add	r30, r30
    80c6:	ff 1f       	adc	r31, r31
    80c8:	e9 57       	subi	r30, 0x79	; 121
    80ca:	f7 4f       	sbci	r31, 0xF7	; 247
    80cc:	91 83       	std	Z+1, r25	; 0x01
    80ce:	80 83       	st	Z, r24
    80d0:	05 c0       	rjmp	.+10     	; 0x80dc <_ZN14EthernetServer5beginEv+0x66>
    80d2:	0f 5f       	subi	r16, 0xFF	; 255
    80d4:	1f 4f       	sbci	r17, 0xFF	; 255
    80d6:	04 30       	cpi	r16, 0x04	; 4
    80d8:	11 05       	cpc	r17, r1
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    80da:	f1 f6       	brne	.-68     	; 0x8098 <_ZN14EthernetServer5beginEv+0x22>
    80dc:	2d 96       	adiw	r28, 0x0d	; 13
    80de:	0f b6       	in	r0, 0x3f	; 63
    80e0:	f8 94       	cli
    80e2:	de bf       	out	0x3e, r29	; 62
      listen(sock);
      EthernetClass::_server_port[sock] = _port;
      break;
    }
  }  
}
    80e4:	0f be       	out	0x3f, r0	; 63
    80e6:	cd bf       	out	0x3d, r28	; 61
    80e8:	df 91       	pop	r29
    80ea:	cf 91       	pop	r28
    80ec:	1f 91       	pop	r17
    80ee:	0f 91       	pop	r16
    80f0:	ff 90       	pop	r15
    80f2:	ef 90       	pop	r14
    80f4:	08 95       	ret

000080f6 <_ZN14EthernetServerC1Ej>:
    80f6:	fc 01       	movw	r30, r24
    80f8:	13 82       	std	Z+3, r1	; 0x03
    80fa:	12 82       	std	Z+2, r1	; 0x02
    80fc:	8a e3       	ldi	r24, 0x3A	; 58

#include "Ethernet.h"
#include "EthernetClient.h"
#include "EthernetServer.h"

EthernetServer::EthernetServer(uint16_t port)
    80fe:	96 e0       	ldi	r25, 0x06	; 6
    8100:	91 83       	std	Z+1, r25	; 0x01
    8102:	80 83       	st	Z, r24
{
  _port = port;
    8104:	75 83       	std	Z+5, r23	; 0x05
    8106:	64 83       	std	Z+4, r22	; 0x04
    8108:	08 95       	ret

0000810a <_ZN14EthernetServer6acceptEv>:
    }
  }  
}

void EthernetServer::accept()
{
    810a:	bf 92       	push	r11
    810c:	cf 92       	push	r12
    810e:	df 92       	push	r13
    8110:	ef 92       	push	r14
    8112:	ff 92       	push	r15
    8114:	0f 93       	push	r16
    8116:	1f 93       	push	r17
    8118:	cf 93       	push	r28
    811a:	df 93       	push	r29
    811c:	cd b7       	in	r28, 0x3d	; 61
    811e:	de b7       	in	r29, 0x3e	; 62
    8120:	2d 97       	sbiw	r28, 0x0d	; 13
    8122:	0f b6       	in	r0, 0x3f	; 63
    8124:	f8 94       	cli
    8126:	de bf       	out	0x3e, r29	; 62
    8128:	0f be       	out	0x3f, r0	; 63
    812a:	cd bf       	out	0x3d, r28	; 61
    812c:	8c 01       	movw	r16, r24
    812e:	47 e8       	ldi	r20, 0x87	; 135
    8130:	c4 2e       	mov	r12, r20
    8132:	48 e0       	ldi	r20, 0x08	; 8
    8134:	d4 2e       	mov	r13, r20
    8136:	b1 2c       	mov	r11, r1
  int listening = 0;
    8138:	e1 2c       	mov	r14, r1
    813a:	f1 2c       	mov	r15, r1

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    813c:	6b 2d       	mov	r22, r11
    813e:	ce 01       	movw	r24, r28
    8140:	01 96       	adiw	r24, 0x01	; 1
    8142:	a7 de       	rcall	.-690    	; 0x7e92 <_ZN14EthernetClientC1Eh>
    8144:	d6 01       	movw	r26, r12

    if (EthernetClass::_server_port[sock] == _port) {
    8146:	2d 91       	ld	r18, X+
    8148:	3d 91       	ld	r19, X+
    814a:	6d 01       	movw	r12, r26
    814c:	f8 01       	movw	r30, r16
    814e:	84 81       	ldd	r24, Z+4	; 0x04
    8150:	95 81       	ldd	r25, Z+5	; 0x05
    8152:	28 17       	cp	r18, r24
    8154:	39 07       	cpc	r19, r25
    8156:	99 f4       	brne	.+38     	; 0x817e <_ZN14EthernetServer6acceptEv+0x74>
    8158:	ce 01       	movw	r24, r28
      if (client.status() == SnSR::LISTEN) {
    815a:	01 96       	adiw	r24, 0x01	; 1
    815c:	ac de       	rcall	.-680    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    815e:	84 31       	cpi	r24, 0x14	; 20
    8160:	59 f0       	breq	.+22     	; 0x8178 <_ZN14EthernetServer6acceptEv+0x6e>
    8162:	ce 01       	movw	r24, r28
    8164:	01 96       	adiw	r24, 0x01	; 1
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
    8166:	a7 de       	rcall	.-690    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    8168:	8c 31       	cpi	r24, 0x1C	; 28
    816a:	49 f4       	brne	.+18     	; 0x817e <_ZN14EthernetServer6acceptEv+0x74>
    816c:	ce 01       	movw	r24, r28
    816e:	01 96       	adiw	r24, 0x01	; 1
    8170:	db dd       	rcall	.-1098   	; 0x7d28 <_ZN14EthernetClient9availableEv>
    8172:	89 2b       	or	r24, r25
    8174:	99 f0       	breq	.+38     	; 0x819c <_ZN14EthernetServer6acceptEv+0x92>
    8176:	03 c0       	rjmp	.+6      	; 0x817e <_ZN14EthernetServer6acceptEv+0x74>
    8178:	ee 24       	eor	r14, r14
    817a:	e3 94       	inc	r14
    817c:	f1 2c       	mov	r15, r1
    817e:	b3 94       	inc	r11
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
    8180:	f4 e0       	ldi	r31, 0x04	; 4
    8182:	bf 12       	cpse	r11, r31
    8184:	db cf       	rjmp	.-74     	; 0x813c <_ZN14EthernetServer6acceptEv+0x32>
    8186:	ef 28       	or	r14, r15

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    8188:	69 f4       	brne	.+26     	; 0x81a4 <_ZN14EthernetServer6acceptEv+0x9a>
    818a:	d8 01       	movw	r26, r16
    818c:	ed 91       	ld	r30, X+
        client.stop();
      }
    } 
  }

  if (!listening) {
    818e:	fc 91       	ld	r31, X
    8190:	04 80       	ldd	r0, Z+4	; 0x04
    begin();
    8192:	f5 81       	ldd	r31, Z+5	; 0x05
    8194:	e0 2d       	mov	r30, r0
    8196:	c8 01       	movw	r24, r16
    8198:	19 95       	eicall
    819a:	04 c0       	rjmp	.+8      	; 0x81a4 <_ZN14EthernetServer6acceptEv+0x9a>
    819c:	ce 01       	movw	r24, r28
    819e:	01 96       	adiw	r24, 0x01	; 1
    81a0:	e9 de       	rcall	.-558    	; 0x7f74 <_ZN14EthernetClient4stopEv>
    81a2:	ed cf       	rjmp	.-38     	; 0x817e <_ZN14EthernetServer6acceptEv+0x74>
    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
        client.stop();
    81a4:	2d 96       	adiw	r28, 0x0d	; 13
    81a6:	0f b6       	in	r0, 0x3f	; 63
    81a8:	f8 94       	cli
    81aa:	de bf       	out	0x3e, r29	; 62
    81ac:	0f be       	out	0x3f, r0	; 63
  }

  if (!listening) {
    begin();
  }
}
    81ae:	cd bf       	out	0x3d, r28	; 61
    81b0:	df 91       	pop	r29
    81b2:	cf 91       	pop	r28
    81b4:	1f 91       	pop	r17
    81b6:	0f 91       	pop	r16
    81b8:	ff 90       	pop	r15
    81ba:	ef 90       	pop	r14
    81bc:	df 90       	pop	r13
    81be:	cf 90       	pop	r12
    81c0:	bf 90       	pop	r11
    81c2:	08 95       	ret

000081c4 <_ZN14EthernetServer5writeEPKhj>:
    81c4:	7f 92       	push	r7
    81c6:	8f 92       	push	r8
    81c8:	9f 92       	push	r9
    81ca:	af 92       	push	r10
    81cc:	bf 92       	push	r11
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
    81ce:	cf 92       	push	r12
    81d0:	df 92       	push	r13
    81d2:	ef 92       	push	r14
    81d4:	ff 92       	push	r15
    81d6:	0f 93       	push	r16
    81d8:	1f 93       	push	r17
    81da:	cf 93       	push	r28
    81dc:	df 93       	push	r29
    81de:	cd b7       	in	r28, 0x3d	; 61
    81e0:	de b7       	in	r29, 0x3e	; 62
    81e2:	2d 97       	sbiw	r28, 0x0d	; 13
    81e4:	0f b6       	in	r0, 0x3f	; 63
    81e6:	f8 94       	cli
    81e8:	de bf       	out	0x3e, r29	; 62
    81ea:	0f be       	out	0x3f, r0	; 63
    81ec:	cd bf       	out	0x3d, r28	; 61
    81ee:	6c 01       	movw	r12, r24
    81f0:	5b 01       	movw	r10, r22
    81f2:	4a 01       	movw	r8, r20
  size_t n = 0;
  
  accept();
    81f4:	8a df       	rcall	.-236    	; 0x810a <_ZN14EthernetServer6acceptEv>
    81f6:	57 e8       	ldi	r21, 0x87	; 135
    81f8:	e5 2e       	mov	r14, r21
    81fa:	58 e0       	ldi	r21, 0x08	; 8
    81fc:	f5 2e       	mov	r15, r21
    81fe:	71 2c       	mov	r7, r1
    8200:	00 e0       	ldi	r16, 0x00	; 0
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
    8202:	10 e0       	ldi	r17, 0x00	; 0
    8204:	67 2d       	mov	r22, r7
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    8206:	ce 01       	movw	r24, r28
    8208:	01 96       	adiw	r24, 0x01	; 1
    820a:	43 de       	rcall	.-890    	; 0x7e92 <_ZN14EthernetClientC1Eh>
    820c:	f7 01       	movw	r30, r14
    820e:	21 91       	ld	r18, Z+

    if (EthernetClass::_server_port[sock] == _port &&
    8210:	31 91       	ld	r19, Z+
    8212:	7f 01       	movw	r14, r30
    8214:	f6 01       	movw	r30, r12
    8216:	84 81       	ldd	r24, Z+4	; 0x04
    8218:	95 81       	ldd	r25, Z+5	; 0x05
    821a:	28 17       	cp	r18, r24
    821c:	39 07       	cpc	r19, r25
    821e:	29 f4       	brne	.+10     	; 0x822a <_ZN14EthernetServer5writeEPKhj+0x66>
    8220:	ce 01       	movw	r24, r28
    8222:	01 96       	adiw	r24, 0x01	; 1
      client.status() == SnSR::ESTABLISHED) {
    8224:	48 de       	rcall	.-880    	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    8226:	87 31       	cpi	r24, 0x17	; 23
    8228:	c9 f0       	breq	.+50     	; 0x825c <_ZN14EthernetServer5writeEPKhj+0x98>
    822a:	73 94       	inc	r7
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
    822c:	f4 e0       	ldi	r31, 0x04	; 4
    822e:	7f 12       	cpse	r7, r31
    8230:	e9 cf       	rjmp	.-46     	; 0x8204 <_ZN14EthernetServer5writeEPKhj+0x40>
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    8232:	c8 01       	movw	r24, r16
    8234:	2d 96       	adiw	r28, 0x0d	; 13
    8236:	0f b6       	in	r0, 0x3f	; 63
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    8238:	f8 94       	cli
    823a:	de bf       	out	0x3e, r29	; 62
    823c:	0f be       	out	0x3f, r0	; 63
    823e:	cd bf       	out	0x3d, r28	; 61
    8240:	df 91       	pop	r29
    8242:	cf 91       	pop	r28
    8244:	1f 91       	pop	r17
    8246:	0f 91       	pop	r16
    8248:	ff 90       	pop	r15
    824a:	ef 90       	pop	r14
    824c:	df 90       	pop	r13
    824e:	cf 90       	pop	r12
    8250:	bf 90       	pop	r11
    8252:	af 90       	pop	r10
    8254:	9f 90       	pop	r9
    8256:	8f 90       	pop	r8
    8258:	7f 90       	pop	r7
    825a:	08 95       	ret
    825c:	a4 01       	movw	r20, r8
    825e:	b5 01       	movw	r22, r10
    8260:	ce 01       	movw	r24, r28
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
    8262:	01 96       	adiw	r24, 0x01	; 1
    8264:	48 dd       	rcall	.-1392   	; 0x7cf6 <_ZN14EthernetClient5writeEPKhj>
    8266:	08 0f       	add	r16, r24
    8268:	19 1f       	adc	r17, r25
    826a:	df cf       	rjmp	.-66     	; 0x822a <_ZN14EthernetServer5writeEPKhj+0x66>

0000826c <_ZN14EthernetServer9availableEv>:
    826c:	bf 92       	push	r11
    826e:	cf 92       	push	r12
    8270:	df 92       	push	r13
    8272:	ef 92       	push	r14
    begin();
  }
}

EthernetClient EthernetServer::available()
{
    8274:	ff 92       	push	r15
    8276:	0f 93       	push	r16
    8278:	1f 93       	push	r17
    827a:	cf 93       	push	r28
    827c:	df 93       	push	r29
    827e:	cd b7       	in	r28, 0x3d	; 61
    8280:	de b7       	in	r29, 0x3e	; 62
    8282:	2d 97       	sbiw	r28, 0x0d	; 13
    8284:	0f b6       	in	r0, 0x3f	; 63
    8286:	f8 94       	cli
    8288:	de bf       	out	0x3e, r29	; 62
    828a:	0f be       	out	0x3f, r0	; 63
    828c:	cd bf       	out	0x3d, r28	; 61
    828e:	8c 01       	movw	r16, r24
    8290:	6b 01       	movw	r12, r22
  accept();
    8292:	cb 01       	movw	r24, r22
    8294:	3a df       	rcall	.-396    	; 0x810a <_ZN14EthernetServer6acceptEv>
    8296:	67 e8       	ldi	r22, 0x87	; 135
    8298:	e6 2e       	mov	r14, r22
    829a:	68 e0       	ldi	r22, 0x08	; 8
    829c:	f6 2e       	mov	r15, r22
    829e:	b1 2c       	mov	r11, r1
    82a0:	6b 2d       	mov	r22, r11

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    82a2:	ce 01       	movw	r24, r28
    82a4:	01 96       	adiw	r24, 0x01	; 1
    82a6:	f5 dd       	rcall	.-1046   	; 0x7e92 <_ZN14EthernetClientC1Eh>
    82a8:	f7 01       	movw	r30, r14
    82aa:	21 91       	ld	r18, Z+
    if (EthernetClass::_server_port[sock] == _port &&
    82ac:	31 91       	ld	r19, Z+
    82ae:	7f 01       	movw	r14, r30
    82b0:	f6 01       	movw	r30, r12
    82b2:	84 81       	ldd	r24, Z+4	; 0x04
    82b4:	95 81       	ldd	r25, Z+5	; 0x05
    82b6:	28 17       	cp	r18, r24
    82b8:	39 07       	cpc	r19, r25
    82ba:	51 f4       	brne	.+20     	; 0x82d0 <_ZN14EthernetServer9availableEv+0x64>
    82bc:	ce 01       	movw	r24, r28
    82be:	01 96       	adiw	r24, 0x01	; 1
        (client.status() == SnSR::ESTABLISHED ||
    82c0:	fa dd       	rcall	.-1036   	; 0x7eb6 <_ZN14EthernetClient6statusEv>
    82c2:	87 31       	cpi	r24, 0x17	; 23
    82c4:	69 f0       	breq	.+26     	; 0x82e0 <_ZN14EthernetServer9availableEv+0x74>
    82c6:	ce 01       	movw	r24, r28
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
    82c8:	01 96       	adiw	r24, 0x01	; 1
    82ca:	f5 dd       	rcall	.-1046   	; 0x7eb6 <_ZN14EthernetClient6statusEv>
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
    82cc:	8c 31       	cpi	r24, 0x1C	; 28
    82ce:	41 f0       	breq	.+16     	; 0x82e0 <_ZN14EthernetServer9availableEv+0x74>
    82d0:	b3 94       	inc	r11
    82d2:	f4 e0       	ldi	r31, 0x04	; 4
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
    82d4:	bf 12       	cpse	r11, r31
    82d6:	e4 cf       	rjmp	.-56     	; 0x82a0 <_ZN14EthernetServer9availableEv+0x34>
    82d8:	64 e0       	ldi	r22, 0x04	; 4

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    82da:	c8 01       	movw	r24, r16
    82dc:	da dd       	rcall	.-1100   	; 0x7e92 <_ZN14EthernetClientC1Eh>
    82de:	20 c0       	rjmp	.+64     	; 0x8320 <_ZN14EthernetServer9availableEv+0xb4>
        return client;
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
    82e0:	ce 01       	movw	r24, r28
    82e2:	01 96       	adiw	r24, 0x01	; 1
    82e4:	21 dd       	rcall	.-1470   	; 0x7d28 <_ZN14EthernetClient9availableEv>
    82e6:	89 2b       	or	r24, r25
    82e8:	99 f3       	breq	.-26     	; 0x82d0 <_ZN14EthernetServer9availableEv+0x64>
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
    82ea:	8b 81       	ldd	r24, Y+3	; 0x03
    82ec:	9c 81       	ldd	r25, Y+4	; 0x04
    82ee:	f8 01       	movw	r30, r16
    82f0:	93 83       	std	Z+3, r25	; 0x03
    82f2:	82 83       	std	Z+2, r24	; 0x02
    82f4:	8d 81       	ldd	r24, Y+5	; 0x05
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    82f6:	9e 81       	ldd	r25, Y+6	; 0x06
    82f8:	af 81       	ldd	r26, Y+7	; 0x07
    82fa:	b8 85       	ldd	r27, Y+8	; 0x08
    82fc:	84 83       	std	Z+4, r24	; 0x04
    82fe:	95 83       	std	Z+5, r25	; 0x05
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
    8300:	a6 83       	std	Z+6, r26	; 0x06
    8302:	b7 83       	std	Z+7, r27	; 0x07
    8304:	49 85       	ldd	r20, Y+9	; 0x09
    8306:	5a 85       	ldd	r21, Y+10	; 0x0a
    8308:	6b 85       	ldd	r22, Y+11	; 0x0b
    830a:	7c 85       	ldd	r23, Y+12	; 0x0c
    830c:	40 87       	std	Z+8, r20	; 0x08
    830e:	51 87       	std	Z+9, r21	; 0x09
    8310:	62 87       	std	Z+10, r22	; 0x0a
    8312:	73 87       	std	Z+11, r23	; 0x0b
    8314:	86 e1       	ldi	r24, 0x16	; 22
    8316:	96 e0       	ldi	r25, 0x06	; 6
    8318:	91 83       	std	Z+1, r25	; 0x01
    831a:	80 83       	st	Z, r24
    831c:	8d 85       	ldd	r24, Y+13	; 0x0d
    831e:	84 87       	std	Z+12, r24	; 0x0c
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
    8320:	c8 01       	movw	r24, r16
    8322:	2d 96       	adiw	r28, 0x0d	; 13
    8324:	0f b6       	in	r0, 0x3f	; 63
    8326:	f8 94       	cli
    8328:	de bf       	out	0x3e, r29	; 62
    832a:	0f be       	out	0x3f, r0	; 63
      }
    }
  }

  return EthernetClient(MAX_SOCK_NUM);
}
    832c:	cd bf       	out	0x3d, r28	; 61
    832e:	df 91       	pop	r29
    8330:	cf 91       	pop	r28
    8332:	1f 91       	pop	r17
    8334:	0f 91       	pop	r16
    8336:	ff 90       	pop	r15
    8338:	ef 90       	pop	r14
    833a:	df 90       	pop	r13
    833c:	cf 90       	pop	r12
    833e:	bf 90       	pop	r11
    8340:	08 95       	ret

00008342 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
    8342:	0f 93       	push	r16
    8344:	00 e0       	ldi	r16, 0x00	; 0
    8346:	20 e0       	ldi	r18, 0x00	; 0
    8348:	40 e0       	ldi	r20, 0x00	; 0
    834a:	60 e0       	ldi	r22, 0x00	; 0
    834c:	8b e9       	ldi	r24, 0x9B	; 155
    834e:	98 e0       	ldi	r25, 0x08	; 8
    8350:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    8354:	0f 91       	pop	r16
    8356:	08 95       	ret

00008358 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    8358:	dc 01       	movw	r26, r24
    835a:	ed 91       	ld	r30, X+
    835c:	fc 91       	ld	r31, X
    835e:	00 8c       	ldd	r0, Z+24	; 0x18
    8360:	f1 8d       	ldd	r31, Z+25	; 0x19
    8362:	e0 2d       	mov	r30, r0
    8364:	19 94       	eijmp

00008366 <_ZN11EthernetUDP8remoteIPEv>:
#include <stdint.h>
#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    8366:	28 e7       	ldi	r18, 0x78	; 120
    8368:	36 e0       	ldi	r19, 0x06	; 6
    836a:	fc 01       	movw	r30, r24
    836c:	31 83       	std	Z+1, r19	; 0x01
    836e:	20 83       	st	Z, r18
    8370:	fb 01       	movw	r30, r22
    8372:	41 89       	ldd	r20, Z+17	; 0x11
    8374:	52 89       	ldd	r21, Z+18	; 0x12
    8376:	63 89       	ldd	r22, Z+19	; 0x13
    8378:	74 89       	ldd	r23, Z+20	; 0x14
    837a:	fc 01       	movw	r30, r24
    837c:	42 83       	std	Z+2, r20	; 0x02
    837e:	53 83       	std	Z+3, r21	; 0x03
    8380:	64 83       	std	Z+4, r22	; 0x04
    8382:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    8384:	08 95       	ret

00008386 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    8386:	fc 01       	movw	r30, r24
    8388:	85 89       	ldd	r24, Z+21	; 0x15
    838a:	96 89       	ldd	r25, Z+22	; 0x16
    838c:	08 95       	ret

0000838e <_ZN11EthernetUDP9availableEv>:

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    838e:	fc 01       	movw	r30, r24
    8390:	81 8d       	ldd	r24, Z+25	; 0x19
    8392:	92 8d       	ldd	r25, Z+26	; 0x1a
    8394:	08 95       	ret

00008396 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    8396:	cf 93       	push	r28
    8398:	df 93       	push	r29
    839a:	1f 92       	push	r1
    839c:	cd b7       	in	r28, 0x3d	; 61
    839e:	de b7       	in	r29, 0x3e	; 62
    83a0:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    83a2:	dc 01       	movw	r26, r24
    83a4:	ed 91       	ld	r30, X+
    83a6:	fc 91       	ld	r31, X
    83a8:	02 80       	ldd	r0, Z+2	; 0x02
    83aa:	f3 81       	ldd	r31, Z+3	; 0x03
    83ac:	e0 2d       	mov	r30, r0
    83ae:	41 e0       	ldi	r20, 0x01	; 1
    83b0:	50 e0       	ldi	r21, 0x00	; 0
    83b2:	be 01       	movw	r22, r28
    83b4:	6f 5f       	subi	r22, 0xFF	; 255
    83b6:	7f 4f       	sbci	r23, 0xFF	; 255
    83b8:	19 95       	eicall
}
    83ba:	0f 90       	pop	r0
    83bc:	df 91       	pop	r29
    83be:	cf 91       	pop	r28
    83c0:	08 95       	ret

000083c2 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    83c2:	cf 93       	push	r28
    83c4:	df 93       	push	r29
    83c6:	ec 01       	movw	r28, r24
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
    83c8:	89 8d       	ldd	r24, Y+25	; 0x19
    83ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    83cc:	89 2b       	or	r24, r25
    83ce:	41 f0       	breq	.+16     	; 0x83e0 <_ZN11EthernetUDP5flushEv+0x1e>
  {
    read();
    83d0:	e8 81       	ld	r30, Y
    83d2:	f9 81       	ldd	r31, Y+1	; 0x01
    83d4:	06 80       	ldd	r0, Z+6	; 0x06
    83d6:	f7 81       	ldd	r31, Z+7	; 0x07
    83d8:	e0 2d       	mov	r30, r0
    83da:	ce 01       	movw	r24, r28
    83dc:	19 95       	eicall
    83de:	f4 cf       	rjmp	.-24     	; 0x83c8 <_ZN11EthernetUDP5flushEv+0x6>
  }
}
    83e0:	df 91       	pop	r29
    83e2:	cf 91       	pop	r28
    83e4:	08 95       	ret

000083e6 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    83e6:	cf 93       	push	r28
    83e8:	df 93       	push	r29
    83ea:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    83ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    83ee:	84 30       	cpi	r24, 0x04	; 4
    83f0:	59 f0       	breq	.+22     	; 0x8408 <_ZN11EthernetUDP4stopEv+0x22>
    return;

  close(_sock);
    83f2:	10 d2       	rcall	.+1056   	; 0x8814 <_Z5closeh>
    83f4:	ec 85       	ldd	r30, Y+12	; 0x0c

  EthernetClass::_server_port[_sock] = 0;
    83f6:	f0 e0       	ldi	r31, 0x00	; 0
    83f8:	ee 0f       	add	r30, r30
    83fa:	ff 1f       	adc	r31, r31
    83fc:	e9 57       	subi	r30, 0x79	; 121
    83fe:	f7 4f       	sbci	r31, 0xF7	; 247
    8400:	11 82       	std	Z+1, r1	; 0x01
    8402:	10 82       	st	Z, r1
    8404:	84 e0       	ldi	r24, 0x04	; 4
  _sock = MAX_SOCK_NUM;
    8406:	8c 87       	std	Y+12, r24	; 0x0c
    8408:	df 91       	pop	r29
}
    840a:	cf 91       	pop	r28
    840c:	08 95       	ret

0000840e <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
    840e:	fc 01       	movw	r30, r24
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
    8410:	10 8e       	std	Z+24, r1	; 0x18
    8412:	17 8a       	std	Z+23, r1	; 0x17
  return startUDP(_sock, rawIPAddress(ip), port);
    8414:	6e 5f       	subi	r22, 0xFE	; 254
    8416:	7f 4f       	sbci	r23, 0xFF	; 255
    8418:	84 85       	ldd	r24, Z+12	; 0x0c
    841a:	96 c4       	rjmp	.+2348   	; 0x8d48 <_Z8startUDPhPhj>

0000841c <_ZN11EthernetUDP9endPacketEv>:
    841c:	fc 01       	movw	r30, r24
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    841e:	84 85       	ldd	r24, Z+12	; 0x0c
    8420:	d7 c4       	rjmp	.+2478   	; 0x8dd0 <_Z7sendUDPh>

00008422 <_ZN11EthernetUDP5writeEPKhj>:
    8422:	cf 93       	push	r28
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    8424:	df 93       	push	r29
    8426:	ec 01       	movw	r28, r24
    8428:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    842a:	8f 89       	ldd	r24, Y+23	; 0x17
    842c:	98 8d       	ldd	r25, Y+24	; 0x18
    842e:	ab 01       	movw	r20, r22
    8430:	bc 01       	movw	r22, r24
    8432:	8c 85       	ldd	r24, Y+12	; 0x0c
    8434:	45 d4       	rcall	.+2186   	; 0x8cc0 <_Z10bufferDatahjPKhj>
    8436:	2f 89       	ldd	r18, Y+23	; 0x17
  _offset += bytes_written;
    8438:	38 8d       	ldd	r19, Y+24	; 0x18
    843a:	28 0f       	add	r18, r24
    843c:	39 1f       	adc	r19, r25
    843e:	38 8f       	std	Y+24, r19	; 0x18
    8440:	2f 8b       	std	Y+23, r18	; 0x17
    8442:	df 91       	pop	r29
  return bytes_written;
}
    8444:	cf 91       	pop	r28
    8446:	08 95       	ret

00008448 <_ZN11EthernetUDP4readEv>:
    8448:	0f 93       	push	r16
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    844a:	1f 93       	push	r17
    844c:	cf 93       	push	r28
    844e:	df 93       	push	r29
    8450:	1f 92       	push	r1
    8452:	cd b7       	in	r28, 0x3d	; 61
    8454:	de b7       	in	r29, 0x3e	; 62
    8456:	8c 01       	movw	r16, r24
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    8458:	fc 01       	movw	r30, r24
    845a:	81 8d       	ldd	r24, Z+25	; 0x19
    845c:	92 8d       	ldd	r25, Z+26	; 0x1a
    845e:	89 2b       	or	r24, r25
    8460:	51 f0       	breq	.+20     	; 0x8476 <_ZN11EthernetUDP4readEv+0x2e>
    8462:	41 e0       	ldi	r20, 0x01	; 1
    8464:	50 e0       	ldi	r21, 0x00	; 0
    8466:	be 01       	movw	r22, r28
    8468:	6f 5f       	subi	r22, 0xFF	; 255
    846a:	7f 4f       	sbci	r23, 0xFF	; 255
    846c:	84 85       	ldd	r24, Z+12	; 0x0c
    846e:	74 d3       	rcall	.+1768   	; 0x8b58 <_Z4recvhPhi>
    8470:	18 16       	cp	r1, r24
    8472:	19 06       	cpc	r1, r25
    8474:	1c f0       	brlt	.+6      	; 0x847c <_ZN11EthernetUDP4readEv+0x34>
    8476:	8f ef       	ldi	r24, 0xFF	; 255
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    8478:	9f ef       	ldi	r25, 0xFF	; 255
    847a:	08 c0       	rjmp	.+16     	; 0x848c <_ZN11EthernetUDP4readEv+0x44>
    847c:	f8 01       	movw	r30, r16
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
  {
    // We read things without any problems
    _remaining--;
    847e:	81 8d       	ldd	r24, Z+25	; 0x19
    8480:	92 8d       	ldd	r25, Z+26	; 0x1a
    8482:	01 97       	sbiw	r24, 0x01	; 1
    8484:	92 8f       	std	Z+26, r25	; 0x1a
    8486:	81 8f       	std	Z+25, r24	; 0x19
    8488:	89 81       	ldd	r24, Y+1	; 0x01
    return byte;
    848a:	90 e0       	ldi	r25, 0x00	; 0
    848c:	0f 90       	pop	r0
  }

  // If we get here, there's no data available
  return -1;
}
    848e:	df 91       	pop	r29
    8490:	cf 91       	pop	r28
    8492:	1f 91       	pop	r17
    8494:	0f 91       	pop	r16
    8496:	08 95       	ret

00008498 <_ZN11EthernetUDP4readEPhj>:
    8498:	cf 93       	push	r28

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    849a:	df 93       	push	r29
    849c:	ec 01       	movw	r28, r24

  if (_remaining > 0)
    849e:	89 8d       	ldd	r24, Y+25	; 0x19
    84a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    84a2:	00 97       	sbiw	r24, 0x00	; 0
    84a4:	19 f4       	brne	.+6      	; 0x84ac <_ZN11EthernetUDP4readEPhj+0x14>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    84a6:	8f ef       	ldi	r24, 0xFF	; 255
    84a8:	9f ef       	ldi	r25, 0xFF	; 255
    84aa:	0f c0       	rjmp	.+30     	; 0x84ca <_ZN11EthernetUDP4readEPhj+0x32>
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    84ac:	48 17       	cp	r20, r24
    84ae:	59 07       	cpc	r21, r25
    84b0:	08 f0       	brcs	.+2      	; 0x84b4 <_ZN11EthernetUDP4readEPhj+0x1c>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    84b2:	ac 01       	movw	r20, r24
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    84b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    84b6:	50 d3       	rcall	.+1696   	; 0x8b58 <_Z4recvhPhi>
    84b8:	18 16       	cp	r1, r24
    }

    if (got > 0)
    84ba:	19 06       	cpc	r1, r25
    84bc:	a4 f7       	brge	.-24     	; 0x84a6 <_ZN11EthernetUDP4readEPhj+0xe>
    84be:	29 8d       	ldd	r18, Y+25	; 0x19
    {
      _remaining -= got;
    84c0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    84c2:	28 1b       	sub	r18, r24
    84c4:	39 0b       	sbc	r19, r25
    84c6:	3a 8f       	std	Y+26, r19	; 0x1a
    84c8:	29 8f       	std	Y+25, r18	; 0x19
    84ca:	df 91       	pop	r29
  }

  // If we get here, there's no data available or recv failed
  return -1;

}
    84cc:	cf 91       	pop	r28
    84ce:	08 95       	ret

000084d0 <_ZN11EthernetUDP4peekEv>:
    84d0:	cf 93       	push	r28

int EthernetUDP::peek()
{
    84d2:	df 93       	push	r29
    84d4:	1f 92       	push	r1
    84d6:	cd b7       	in	r28, 0x3d	; 61
    84d8:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    84da:	fc 01       	movw	r30, r24
    84dc:	21 8d       	ldd	r18, Z+25	; 0x19
    84de:	32 8d       	ldd	r19, Z+26	; 0x1a
    84e0:	23 2b       	or	r18, r19
    84e2:	41 f0       	breq	.+16     	; 0x84f4 <_ZN11EthernetUDP4peekEv+0x24>
    return -1;
  ::peek(_sock, &b);
    84e4:	be 01       	movw	r22, r28
    84e6:	6f 5f       	subi	r22, 0xFF	; 255
    84e8:	7f 4f       	sbci	r23, 0xFF	; 255
    84ea:	84 85       	ldd	r24, Z+12	; 0x0c
    84ec:	ba d3       	rcall	.+1908   	; 0x8c62 <_Z4peekhPh>
    84ee:	89 81       	ldd	r24, Y+1	; 0x01
  return b;
    84f0:	90 e0       	ldi	r25, 0x00	; 0
    84f2:	02 c0       	rjmp	.+4      	; 0x84f8 <_ZN11EthernetUDP4peekEv+0x28>
    84f4:	8f ef       	ldi	r24, 0xFF	; 255
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    84f6:	9f ef       	ldi	r25, 0xFF	; 255
    84f8:	0f 90       	pop	r0
  ::peek(_sock, &b);
  return b;
}
    84fa:	df 91       	pop	r29
    84fc:	cf 91       	pop	r28
    84fe:	08 95       	ret

00008500 <_ZN11EthernetUDP5beginEj>:
    8500:	ff 92       	push	r15

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    8502:	0f 93       	push	r16
    8504:	1f 93       	push	r17
    8506:	cf 93       	push	r28
    8508:	df 93       	push	r29
    850a:	ec 01       	movw	r28, r24
    850c:	8b 01       	movw	r16, r22
  if (_sock != MAX_SOCK_NUM)
    850e:	8c 85       	ldd	r24, Y+12	; 0x0c
    8510:	84 30       	cpi	r24, 0x04	; 4
    8512:	d1 f4       	brne	.+52     	; 0x8548 <_ZN11EthernetUDP5beginEj+0x48>
    8514:	f1 2c       	mov	r15, r1
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = socketStatus(i);
    8516:	8f 2d       	mov	r24, r15
    8518:	5a d1       	rcall	.+692    	; 0x87ce <_Z12socketStatush>
    851a:	81 11       	cpse	r24, r1
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    851c:	02 c0       	rjmp	.+4      	; 0x8522 <_ZN11EthernetUDP5beginEj+0x22>
    851e:	fc 86       	std	Y+12, r15	; 0x0c
      _sock = i;
    8520:	06 c0       	rjmp	.+12     	; 0x852e <_ZN11EthernetUDP5beginEj+0x2e>
    8522:	88 31       	cpi	r24, 0x18	; 24
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = socketStatus(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    8524:	e1 f3       	breq	.-8      	; 0x851e <_ZN11EthernetUDP5beginEj+0x1e>
    8526:	f3 94       	inc	r15
    8528:	84 e0       	ldi	r24, 0x04	; 4
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    852a:	f8 12       	cpse	r15, r24
    852c:	f4 cf       	rjmp	.-24     	; 0x8516 <_ZN11EthernetUDP5beginEj+0x16>
    852e:	8c 85       	ldd	r24, Y+12	; 0x0c
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    8530:	84 30       	cpi	r24, 0x04	; 4
    8532:	51 f0       	breq	.+20     	; 0x8548 <_ZN11EthernetUDP5beginEj+0x48>
    8534:	1e 87       	std	Y+14, r17	; 0x0e
    return 0;

  _port = port;
    8536:	0d 87       	std	Y+13, r16	; 0x0d
    8538:	1a 8e       	std	Y+26, r1	; 0x1a
  _remaining = 0;
    853a:	19 8e       	std	Y+25, r1	; 0x19
    853c:	20 e0       	ldi	r18, 0x00	; 0
  socket(_sock, SnMR::UDP, _port, 0);
    853e:	a8 01       	movw	r20, r16
    8540:	62 e0       	ldi	r22, 0x02	; 2
    8542:	8e d1       	rcall	.+796    	; 0x8860 <_Z6sockethhjh>
    8544:	81 e0       	ldi	r24, 0x01	; 1
    8546:	01 c0       	rjmp	.+2      	; 0x854a <_ZN11EthernetUDP5beginEj+0x4a>

  return 1;
    8548:	80 e0       	ldi	r24, 0x00	; 0
    854a:	df 91       	pop	r29
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;
    854c:	cf 91       	pop	r28
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    854e:	1f 91       	pop	r17
    8550:	0f 91       	pop	r16
    8552:	ff 90       	pop	r15
    8554:	08 95       	ret

00008556 <_ZN11EthernetUDP11parsePacketEv>:
    8556:	0f 93       	push	r16
    8558:	1f 93       	push	r17
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    855a:	cf 93       	push	r28
    855c:	df 93       	push	r29
    855e:	cd b7       	in	r28, 0x3d	; 61
    8560:	de b7       	in	r29, 0x3e	; 62
    8562:	28 97       	sbiw	r28, 0x08	; 8
    8564:	0f b6       	in	r0, 0x3f	; 63
    8566:	f8 94       	cli
    8568:	de bf       	out	0x3e, r29	; 62
    856a:	0f be       	out	0x3f, r0	; 63
    856c:	cd bf       	out	0x3d, r28	; 61
    856e:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    8570:	dc 01       	movw	r26, r24
    8572:	ed 91       	ld	r30, X+
    8574:	fc 91       	ld	r31, X
    8576:	02 84       	ldd	r0, Z+10	; 0x0a
    8578:	f3 85       	ldd	r31, Z+11	; 0x0b
    857a:	e0 2d       	mov	r30, r0
    857c:	19 95       	eicall

  if (recvAvailable(_sock) > 0)
    857e:	f8 01       	movw	r30, r16
    8580:	84 85       	ldd	r24, Z+12	; 0x0c
    8582:	46 d3       	rcall	.+1676   	; 0x8c10 <_Z13recvAvailableh>
    8584:	18 16       	cp	r1, r24
    8586:	19 06       	cpc	r1, r25
    8588:	3c f5       	brge	.+78     	; 0x85d8 <_ZN11EthernetUDP11parsePacketEv+0x82>
    858a:	48 e0       	ldi	r20, 0x08	; 8
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    858c:	50 e0       	ldi	r21, 0x00	; 0
    858e:	be 01       	movw	r22, r28
    8590:	6f 5f       	subi	r22, 0xFF	; 255
    8592:	7f 4f       	sbci	r23, 0xFF	; 255
    8594:	d8 01       	movw	r26, r16
    8596:	1c 96       	adiw	r26, 0x0c	; 12
    8598:	8c 91       	ld	r24, X
    859a:	de d2       	rcall	.+1468   	; 0x8b58 <_Z4recvhPhi>
    859c:	18 16       	cp	r1, r24
    859e:	19 06       	cpc	r1, r25
    if (ret > 0)
    85a0:	ec f4       	brge	.+58     	; 0x85dc <_ZN11EthernetUDP11parsePacketEv+0x86>
    85a2:	be 01       	movw	r22, r28
    85a4:	6f 5f       	subi	r22, 0xFF	; 255
    {
      _remoteIP = tmpBuf;
    85a6:	7f 4f       	sbci	r23, 0xFF	; 255
    85a8:	c8 01       	movw	r24, r16
    85aa:	0f 96       	adiw	r24, 0x0f	; 15
    85ac:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <_ZN9IPAddressaSEPKh>
    85b0:	8d 81       	ldd	r24, Y+5	; 0x05
    85b2:	90 e0       	ldi	r25, 0x00	; 0
      _remotePort = tmpBuf[4];
    85b4:	98 2f       	mov	r25, r24
    85b6:	88 27       	eor	r24, r24
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    85b8:	2e 81       	ldd	r18, Y+6	; 0x06
    85ba:	82 0f       	add	r24, r18
    85bc:	91 1d       	adc	r25, r1
    85be:	f8 01       	movw	r30, r16
    85c0:	96 8b       	std	Z+22, r25	; 0x16
    85c2:	85 8b       	std	Z+21, r24	; 0x15
    85c4:	8f 81       	ldd	r24, Y+7	; 0x07
    85c6:	90 e0       	ldi	r25, 0x00	; 0
      _remaining = tmpBuf[6];
    85c8:	98 2f       	mov	r25, r24
    85ca:	88 27       	eor	r24, r24
      _remaining = (_remaining << 8) + tmpBuf[7];
    85cc:	28 85       	ldd	r18, Y+8	; 0x08
    85ce:	82 0f       	add	r24, r18
    85d0:	91 1d       	adc	r25, r1
    85d2:	92 8f       	std	Z+26, r25	; 0x1a
    85d4:	81 8f       	std	Z+25, r24	; 0x19
    85d6:	02 c0       	rjmp	.+4      	; 0x85dc <_ZN11EthernetUDP11parsePacketEv+0x86>
    85d8:	80 e0       	ldi	r24, 0x00	; 0
    85da:	90 e0       	ldi	r25, 0x00	; 0
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    85dc:	28 96       	adiw	r28, 0x08	; 8
    85de:	0f b6       	in	r0, 0x3f	; 63
}
    85e0:	f8 94       	cli
    85e2:	de bf       	out	0x3e, r29	; 62
    85e4:	0f be       	out	0x3f, r0	; 63
    85e6:	cd bf       	out	0x3d, r28	; 61
    85e8:	df 91       	pop	r29
    85ea:	cf 91       	pop	r28
    85ec:	1f 91       	pop	r17
    85ee:	0f 91       	pop	r16
    85f0:	08 95       	ret

000085f2 <_ZN11EthernetUDPC1Ev>:
    85f2:	fc 01       	movw	r30, r24
    85f4:	13 82       	std	Z+3, r1	; 0x03
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    85f6:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    85f8:	48 ee       	ldi	r20, 0xE8	; 232
    85fa:	53 e0       	ldi	r21, 0x03	; 3
    85fc:	60 e0       	ldi	r22, 0x00	; 0
    85fe:	70 e0       	ldi	r23, 0x00	; 0
    8600:	44 83       	std	Z+4, r20	; 0x04
    8602:	55 83       	std	Z+5, r21	; 0x05
    8604:	66 83       	std	Z+6, r22	; 0x06
    8606:	77 83       	std	Z+7, r23	; 0x07
#include "Ethernet.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    8608:	84 e4       	ldi	r24, 0x44	; 68
    860a:	96 e0       	ldi	r25, 0x06	; 6
    860c:	91 83       	std	Z+1, r25	; 0x01
    860e:	80 83       	st	Z, r24
    8610:	84 e0       	ldi	r24, 0x04	; 4
    8612:	84 87       	std	Z+12, r24	; 0x0c
    8614:	cf 01       	movw	r24, r30
    8616:	0f 96       	adiw	r24, 0x0f	; 15
    8618:	0c 94 b8 4e 	jmp	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>

0000861c <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    861c:	cf 92       	push	r12
    861e:	df 92       	push	r13
    8620:	ef 92       	push	r14
    8622:	ff 92       	push	r15
    8624:	0f 93       	push	r16
    8626:	1f 93       	push	r17
    8628:	cf 93       	push	r28
    862a:	df 93       	push	r29
    862c:	cd b7       	in	r28, 0x3d	; 61
    862e:	de b7       	in	r29, 0x3e	; 62
    8630:	af 97       	sbiw	r28, 0x2f	; 47
    8632:	0f b6       	in	r0, 0x3f	; 63
    8634:	f8 94       	cli
    8636:	de bf       	out	0x3e, r29	; 62
    8638:	0f be       	out	0x3f, r0	; 63
    863a:	cd bf       	out	0x3d, r28	; 61
    863c:	7c 01       	movw	r14, r24
    863e:	8b 01       	movw	r16, r22
    8640:	6a 01       	movw	r12, r20
    8642:	ce 01       	movw	r24, r28
    8644:	01 96       	adiw	r24, 0x01	; 1
    8646:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    864a:	ce 01       	movw	r24, r28
    864c:	09 96       	adiw	r24, 0x09	; 9
    864e:	d1 df       	rcall	.-94     	; 0x85f2 <_ZN11EthernetUDPC1Ev>
    8650:	ce 01       	movw	r24, r28
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    8652:	8a 96       	adiw	r24, 0x2a	; 42
    8654:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <_ZN9IPAddressC1Ev>
    8658:	67 e7       	ldi	r22, 0x77	; 119

  dns.begin(Ethernet.dnsServerIP());
    865a:	78 e0       	ldi	r23, 0x08	; 8
    865c:	ce 01       	movw	r24, r28
    865e:	84 96       	adiw	r24, 0x24	; 36
    8660:	f4 da       	rcall	.-2584   	; 0x7c4a <_ZN13EthernetClass11dnsServerIPEv>
    8662:	be 01       	movw	r22, r28
    8664:	6c 5d       	subi	r22, 0xDC	; 220
    8666:	7f 4f       	sbci	r23, 0xFF	; 255
    8668:	ce 01       	movw	r24, r28
    866a:	01 96       	adiw	r24, 0x01	; 1
    866c:	0e 94 2e 3a 	call	0x745c	; 0x745c <_ZN9DNSClient5beginERK9IPAddress>
    8670:	ae 01       	movw	r20, r28
    8672:	46 5d       	subi	r20, 0xD6	; 214
  ret = dns.getHostByName(host, remote_addr);
    8674:	5f 4f       	sbci	r21, 0xFF	; 255
    8676:	b8 01       	movw	r22, r16
    8678:	ce 01       	movw	r24, r28
    867a:	01 96       	adiw	r24, 0x01	; 1
    867c:	2e d9       	rcall	.-3492   	; 0x78da <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    867e:	81 30       	cpi	r24, 0x01	; 1
    8680:	91 05       	cpc	r25, r1
    8682:	c1 f4       	brne	.+48     	; 0x86b4 <_ZN11EthernetUDP11beginPacketEPKcj+0x98>
  if (ret == 1) {
    8684:	d7 01       	movw	r26, r14
    8686:	ed 91       	ld	r30, X+
    8688:	fc 91       	ld	r31, X
    return beginPacket(remote_addr, port);
    868a:	00 88       	ldd	r0, Z+16	; 0x10
    868c:	f1 89       	ldd	r31, Z+17	; 0x11
    868e:	e0 2d       	mov	r30, r0
    8690:	88 e7       	ldi	r24, 0x78	; 120
    8692:	96 e0       	ldi	r25, 0x06	; 6
    8694:	9d a3       	std	Y+37, r25	; 0x25
    8696:	8c a3       	std	Y+36, r24	; 0x24
    8698:	0c a5       	ldd	r16, Y+44	; 0x2c
    869a:	1d a5       	ldd	r17, Y+45	; 0x2d
    869c:	2e a5       	ldd	r18, Y+46	; 0x2e
    869e:	3f a5       	ldd	r19, Y+47	; 0x2f
    86a0:	0e a3       	std	Y+38, r16	; 0x26
    86a2:	1f a3       	std	Y+39, r17	; 0x27
    86a4:	28 a7       	std	Y+40, r18	; 0x28
    86a6:	39 a7       	std	Y+41, r19	; 0x29
    86a8:	a6 01       	movw	r20, r12
    86aa:	be 01       	movw	r22, r28
    86ac:	6c 5d       	subi	r22, 0xDC	; 220
    86ae:	7f 4f       	sbci	r23, 0xFF	; 255
    86b0:	c7 01       	movw	r24, r14
    86b2:	19 95       	eicall
    86b4:	af 96       	adiw	r28, 0x2f	; 47
    86b6:	0f b6       	in	r0, 0x3f	; 63
    86b8:	f8 94       	cli
  } else {
    return ret;
  }
}
    86ba:	de bf       	out	0x3e, r29	; 62
    86bc:	0f be       	out	0x3f, r0	; 63
    86be:	cd bf       	out	0x3d, r28	; 61
    86c0:	df 91       	pop	r29
    86c2:	cf 91       	pop	r28
    86c4:	1f 91       	pop	r17
    86c6:	0f 91       	pop	r16
    86c8:	ff 90       	pop	r15
    86ca:	ef 90       	pop	r14
    86cc:	df 90       	pop	r13
    86ce:	cf 90       	pop	r12
    86d0:	08 95       	ret

000086d2 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
    86d2:	0f 93       	push	r16
    86d4:	00 e0       	ldi	r16, 0x00	; 0
    86d6:	20 e0       	ldi	r18, 0x00	; 0
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    86d8:	40 e0       	ldi	r20, 0x00	; 0
    86da:	60 e0       	ldi	r22, 0x00	; 0
    86dc:	81 ea       	ldi	r24, 0xA1	; 161
    86de:	98 e0       	ldi	r25, 0x08	; 8
    86e0:	0e 94 c2 4e 	call	0x9d84	; 0x9d84 <_ZN9IPAddressC1Ehhhh>

  while (_remaining)
  {
    read();
  }
}
    86e4:	0f 91       	pop	r16
    86e6:	08 95       	ret

000086e8 <_ZN11SPISettingsC1Emhh>:
  #define SPI_AVR_EIMSK  GIMSK
#endif

class SPISettings {
public:
  SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    86e8:	cf 92       	push	r12
    86ea:	df 92       	push	r13
    86ec:	ef 92       	push	r14
    86ee:	ff 92       	push	r15
    86f0:	0f 93       	push	r16
    86f2:	30 e0       	ldi	r19, 0x00	; 0
    86f4:	c1 2c       	mov	r12, r1
    86f6:	f2 e1       	ldi	r31, 0x12	; 18
    86f8:	df 2e       	mov	r13, r31
    86fa:	fa e7       	ldi	r31, 0x7A	; 122
    86fc:	ef 2e       	mov	r14, r31
    86fe:	f1 2c       	mov	r15, r1
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    8700:	4c 15       	cp	r20, r12
    8702:	5d 05       	cpc	r21, r13
    8704:	6e 05       	cpc	r22, r14
    8706:	7f 05       	cpc	r23, r15
    8708:	40 f4       	brcc	.+16     	; 0x871a <_ZN11SPISettingsC1Emhh+0x32>
        clockSetting /= 2;
    870a:	f6 94       	lsr	r15
    870c:	e7 94       	ror	r14
    870e:	d7 94       	ror	r13
    8710:	c7 94       	ror	r12
        clockDiv++;
    8712:	3f 5f       	subi	r19, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    8714:	36 30       	cpi	r19, 0x06	; 6
    8716:	a1 f7       	brne	.-24     	; 0x8700 <_ZN11SPISettingsC1Emhh+0x18>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    8718:	37 e0       	ldi	r19, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    871a:	41 e0       	ldi	r20, 0x01	; 1
    871c:	43 27       	eor	r20, r19

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    871e:	21 11       	cpse	r18, r1
    8720:	02 c0       	rjmp	.+4      	; 0x8726 <_ZN11SPISettingsC1Emhh+0x3e>
    8722:	50 e7       	ldi	r21, 0x70	; 112
    8724:	01 c0       	rjmp	.+2      	; 0x8728 <_ZN11SPISettingsC1Emhh+0x40>
    8726:	50 e5       	ldi	r21, 0x50	; 80
    8728:	24 2f       	mov	r18, r20
    872a:	30 e0       	ldi	r19, 0x00	; 0
    872c:	35 95       	asr	r19
    872e:	27 95       	ror	r18
    8730:	23 70       	andi	r18, 0x03	; 3
    8732:	0c 70       	andi	r16, 0x0C	; 12
    8734:	20 2b       	or	r18, r16
    8736:	25 2b       	or	r18, r21
    8738:	fc 01       	movw	r30, r24
    873a:	20 83       	st	Z, r18
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    873c:	41 70       	andi	r20, 0x01	; 1
    873e:	41 83       	std	Z+1, r20	; 0x01
    if (__builtin_constant_p(clock)) {
      init_AlwaysInline(clock, bitOrder, dataMode);
    } else {
      init_MightInline(clock, bitOrder, dataMode);
    }
  }
    8740:	0f 91       	pop	r16
    8742:	ff 90       	pop	r15
    8744:	ef 90       	pop	r14
    8746:	df 90       	pop	r13
    8748:	cf 90       	pop	r12
    874a:	08 95       	ret

0000874c <_ZN10W5100Class11writeSnDIPREhPh>:
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    874c:	90 e0       	ldi	r25, 0x00	; 0
    874e:	98 2f       	mov	r25, r24
    8750:	88 27       	eor	r24, r24
    8752:	44 e0       	ldi	r20, 0x04	; 4
    8754:	50 e0       	ldi	r21, 0x00	; 0
    8756:	84 5f       	subi	r24, 0xF4	; 244
    8758:	9b 4f       	sbci	r25, 0xFB	; 251
    875a:	10 c4       	rjmp	.+2080   	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>

0000875c <_ZN10W5100Class6readSnEhj>:
    875c:	28 2f       	mov	r18, r24
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    875e:	30 e0       	ldi	r19, 0x00	; 0
    8760:	2c 5f       	subi	r18, 0xFC	; 252
    8762:	3f 4f       	sbci	r19, 0xFF	; 255
    8764:	92 2f       	mov	r25, r18
    8766:	88 27       	eor	r24, r24
    8768:	86 0f       	add	r24, r22
    876a:	97 1f       	adc	r25, r23
    876c:	30 c4       	rjmp	.+2144   	; 0x8fce <_ZN10W5100Class4readEj>

0000876e <_ZN10W5100Class8readSnIREh>:
    876e:	62 e0       	ldi	r22, 0x02	; 2
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    8770:	70 e0       	ldi	r23, 0x00	; 0
    8772:	f4 cf       	rjmp	.-24     	; 0x875c <_ZN10W5100Class6readSnEhj>

00008774 <_ZN10W5100Class7writeSnEhjh>:
    8774:	fb 01       	movw	r30, r22
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    8776:	28 2f       	mov	r18, r24
    8778:	30 e0       	ldi	r19, 0x00	; 0
    877a:	2c 5f       	subi	r18, 0xFC	; 252
    877c:	3f 4f       	sbci	r19, 0xFF	; 255
    877e:	92 2f       	mov	r25, r18
    8780:	88 27       	eor	r24, r24
    8782:	64 2f       	mov	r22, r20
    8784:	8e 0f       	add	r24, r30
    8786:	9f 1f       	adc	r25, r31
    8788:	79 c3       	rjmp	.+1778   	; 0x8e7c <_ZN10W5100Class5writeEjh>

0000878a <_ZN10W5100Class11writeSnPORTEhj>:
    878a:	cf 93       	push	r28
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
    878c:	df 93       	push	r29
    878e:	c8 2f       	mov	r28, r24
    8790:	d6 2f       	mov	r29, r22
    8792:	47 2f       	mov	r20, r23
    8794:	64 e0       	ldi	r22, 0x04	; 4
    8796:	70 e0       	ldi	r23, 0x00	; 0
    8798:	ed df       	rcall	.-38     	; 0x8774 <_ZN10W5100Class7writeSnEhjh>
    879a:	4d 2f       	mov	r20, r29
    879c:	65 e0       	ldi	r22, 0x05	; 5
    879e:	70 e0       	ldi	r23, 0x00	; 0
    87a0:	8c 2f       	mov	r24, r28
    87a2:	df 91       	pop	r29
    87a4:	cf 91       	pop	r28
    87a6:	e6 cf       	rjmp	.-52     	; 0x8774 <_ZN10W5100Class7writeSnEhjh>

000087a8 <_ZN10W5100Class9writeSnIREhh>:
    87a8:	46 2f       	mov	r20, r22
    87aa:	62 e0       	ldi	r22, 0x02	; 2
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    87ac:	70 e0       	ldi	r23, 0x00	; 0
    87ae:	e2 cf       	rjmp	.-60     	; 0x8774 <_ZN10W5100Class7writeSnEhjh>

000087b0 <_ZN10W5100Class12writeSnDPORTEhj>:
    87b0:	cf 93       	push	r28
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    87b2:	df 93       	push	r29
    87b4:	c8 2f       	mov	r28, r24
    87b6:	d6 2f       	mov	r29, r22
    87b8:	47 2f       	mov	r20, r23
    87ba:	60 e1       	ldi	r22, 0x10	; 16
    87bc:	70 e0       	ldi	r23, 0x00	; 0
    87be:	da df       	rcall	.-76     	; 0x8774 <_ZN10W5100Class7writeSnEhjh>
    87c0:	4d 2f       	mov	r20, r29
    87c2:	61 e1       	ldi	r22, 0x11	; 17
    87c4:	70 e0       	ldi	r23, 0x00	; 0
    87c6:	8c 2f       	mov	r24, r28
    87c8:	df 91       	pop	r29
    87ca:	cf 91       	pop	r28
    87cc:	d3 cf       	rjmp	.-90     	; 0x8774 <_ZN10W5100Class7writeSnEhjh>

000087ce <_Z12socketStatush>:
    87ce:	0f 93       	push	r16
    87d0:	1f 93       	push	r17
  return 0;
}


uint8_t socketStatus(SOCKET s)
{
    87d2:	cf 93       	push	r28
    87d4:	df 93       	push	r29
    87d6:	00 d0       	rcall	.+0      	; 0x87d8 <_Z12socketStatush+0xa>
    87d8:	cd b7       	in	r28, 0x3d	; 61
    87da:	de b7       	in	r29, 0x3e	; 62
    87dc:	18 2f       	mov	r17, r24
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    87de:	00 e0       	ldi	r16, 0x00	; 0
    87e0:	21 e0       	ldi	r18, 0x01	; 1
    87e2:	40 e0       	ldi	r20, 0x00	; 0
    87e4:	59 e0       	ldi	r21, 0x09	; 9
    87e6:	6d e3       	ldi	r22, 0x3D	; 61
    87e8:	70 e0       	ldi	r23, 0x00	; 0
    87ea:	ce 01       	movw	r24, r28
    87ec:	01 96       	adiw	r24, 0x01	; 1
    87ee:	7c df       	rcall	.-264    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    87f0:	89 81       	ldd	r24, Y+1	; 0x01
    87f2:	9a 81       	ldd	r25, Y+2	; 0x02
    87f4:	fd d8       	rcall	.-3590   	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    87f6:	63 e0       	ldi	r22, 0x03	; 3
    87f8:	70 e0       	ldi	r23, 0x00	; 0
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    87fa:	81 2f       	mov	r24, r17
    87fc:	af df       	rcall	.-162    	; 0x875c <_ZN10W5100Class6readSnEhj>
    87fe:	8b 83       	std	Y+3, r24	; 0x03
    8800:	11 d9       	rcall	.-3550   	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8802:	8b 81       	ldd	r24, Y+3	; 0x03
  uint8_t status = W5100.readSnSR(s);
  SPI.endTransaction();
    8804:	0f 90       	pop	r0
    8806:	0f 90       	pop	r0
    8808:	0f 90       	pop	r0
  return status;
}
    880a:	df 91       	pop	r29
    880c:	cf 91       	pop	r28
    880e:	1f 91       	pop	r17
    8810:	0f 91       	pop	r16
    8812:	08 95       	ret

00008814 <_Z5closeh>:
    8814:	0f 93       	push	r16
    8816:	1f 93       	push	r17
    8818:	cf 93       	push	r28
    881a:	df 93       	push	r29

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
    881c:	1f 92       	push	r1
    881e:	1f 92       	push	r1
    8820:	cd b7       	in	r28, 0x3d	; 61
    8822:	de b7       	in	r29, 0x3e	; 62
    8824:	18 2f       	mov	r17, r24
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8826:	00 e0       	ldi	r16, 0x00	; 0
    8828:	21 e0       	ldi	r18, 0x01	; 1
    882a:	40 e0       	ldi	r20, 0x00	; 0
    882c:	59 e0       	ldi	r21, 0x09	; 9
    882e:	6d e3       	ldi	r22, 0x3D	; 61
    8830:	70 e0       	ldi	r23, 0x00	; 0
    8832:	ce 01       	movw	r24, r28
    8834:	01 96       	adiw	r24, 0x01	; 1
    8836:	58 df       	rcall	.-336    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8838:	89 81       	ldd	r24, Y+1	; 0x01
    883a:	9a 81       	ldd	r25, Y+2	; 0x02
    883c:	d9 d8       	rcall	.-3662   	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    883e:	40 e1       	ldi	r20, 0x10	; 16
    8840:	50 e0       	ldi	r21, 0x00	; 0
  W5100.execCmdSn(s, Sock_CLOSE);
    8842:	61 2f       	mov	r22, r17
    8844:	89 ea       	ldi	r24, 0xA9	; 169
    8846:	98 e0       	ldi	r25, 0x08	; 8
    8848:	6b d5       	rcall	.+2774   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    884a:	6f ef       	ldi	r22, 0xFF	; 255
    884c:	81 2f       	mov	r24, r17
    884e:	ac df       	rcall	.-168    	; 0x87a8 <_ZN10W5100Class9writeSnIREhh>
  W5100.writeSnIR(s, 0xFF);
    8850:	e9 d8       	rcall	.-3630   	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8852:	0f 90       	pop	r0
    8854:	0f 90       	pop	r0
    8856:	df 91       	pop	r29
  SPI.endTransaction();
    8858:	cf 91       	pop	r28
    885a:	1f 91       	pop	r17
}
    885c:	0f 91       	pop	r16
    885e:	08 95       	ret

00008860 <_Z6sockethhjh>:
    8860:	cf 92       	push	r12
    8862:	df 92       	push	r13
    8864:	ef 92       	push	r14
    8866:	ff 92       	push	r15
    8868:	0f 93       	push	r16
/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for W5100 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
{
    886a:	1f 93       	push	r17
    886c:	cf 93       	push	r28
    886e:	df 93       	push	r29
    8870:	1f 92       	push	r1
    8872:	1f 92       	push	r1
    8874:	cd b7       	in	r28, 0x3d	; 61
    8876:	de b7       	in	r29, 0x3e	; 62
    8878:	18 2f       	mov	r17, r24
    887a:	d6 2e       	mov	r13, r22
    887c:	7a 01       	movw	r14, r20
    887e:	c2 2e       	mov	r12, r18
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
    8880:	8f ef       	ldi	r24, 0xFF	; 255
    8882:	86 0f       	add	r24, r22
    8884:	85 30       	cpi	r24, 0x05	; 5
    8886:	70 f5       	brcc	.+92     	; 0x88e4 <_Z6sockethhjh+0x84>
  {
    close(s);
    8888:	81 2f       	mov	r24, r17
    888a:	c4 df       	rcall	.-120    	; 0x8814 <_Z5closeh>
    888c:	00 e0       	ldi	r16, 0x00	; 0
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    888e:	21 e0       	ldi	r18, 0x01	; 1
    8890:	40 e0       	ldi	r20, 0x00	; 0
    8892:	59 e0       	ldi	r21, 0x09	; 9
    8894:	6d e3       	ldi	r22, 0x3D	; 61
    8896:	70 e0       	ldi	r23, 0x00	; 0
    8898:	ce 01       	movw	r24, r28
    889a:	01 96       	adiw	r24, 0x01	; 1
    889c:	25 df       	rcall	.-438    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    889e:	89 81       	ldd	r24, Y+1	; 0x01
    88a0:	9a 81       	ldd	r25, Y+2	; 0x02
    88a2:	a6 d8       	rcall	.-3764   	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    88a4:	4d 2d       	mov	r20, r13
    88a6:	4c 29       	or	r20, r12
    88a8:	60 e0       	ldi	r22, 0x00	; 0
    W5100.writeSnMR(s, protocol | flag);
    88aa:	70 e0       	ldi	r23, 0x00	; 0
    88ac:	81 2f       	mov	r24, r17
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
    88ae:	62 df       	rcall	.-316    	; 0x8774 <_ZN10W5100Class7writeSnEhjh>
    88b0:	e1 14       	cp	r14, r1
    88b2:	f1 04       	cpc	r15, r1
    88b4:	11 f0       	breq	.+4      	; 0x88ba <_Z6sockethhjh+0x5a>
    88b6:	b7 01       	movw	r22, r14
    if (port != 0) {
    88b8:	0a c0       	rjmp	.+20     	; 0x88ce <_Z6sockethhjh+0x6e>
    88ba:	60 91 a7 08 	lds	r22, 0x08A7
      W5100.writeSnPORT(s, port);
    88be:	70 91 a8 08 	lds	r23, 0x08A8
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
    88c2:	6f 5f       	subi	r22, 0xFF	; 255
    88c4:	7f 4f       	sbci	r23, 0xFF	; 255
    88c6:	70 93 a8 08 	sts	0x08A8, r23
    88ca:	60 93 a7 08 	sts	0x08A7, r22
    88ce:	81 2f       	mov	r24, r17
    88d0:	5c df       	rcall	.-328    	; 0x878a <_ZN10W5100Class11writeSnPORTEhj>
    88d2:	41 e0       	ldi	r20, 0x01	; 1
    88d4:	50 e0       	ldi	r21, 0x00	; 0
      W5100.writeSnPORT(s, local_port);
    88d6:	61 2f       	mov	r22, r17
    88d8:	89 ea       	ldi	r24, 0xA9	; 169
    88da:	98 e0       	ldi	r25, 0x08	; 8
    }

    W5100.execCmdSn(s, Sock_OPEN);
    88dc:	21 d5       	rcall	.+2626   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    88de:	a2 d8       	rcall	.-3772   	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    88e0:	81 e0       	ldi	r24, 0x01	; 1
    88e2:	01 c0       	rjmp	.+2      	; 0x88e6 <_Z6sockethhjh+0x86>
    88e4:	80 e0       	ldi	r24, 0x00	; 0
    88e6:	0f 90       	pop	r0
    88e8:	0f 90       	pop	r0
    SPI.endTransaction();
    88ea:	df 91       	pop	r29
    88ec:	cf 91       	pop	r28
    return 1;
    88ee:	1f 91       	pop	r17
    88f0:	0f 91       	pop	r16
  }

  return 0;
    88f2:	ff 90       	pop	r15
}
    88f4:	ef 90       	pop	r14
    88f6:	df 90       	pop	r13
    88f8:	cf 90       	pop	r12
    88fa:	08 95       	ret

000088fc <_Z6listenh>:
    88fc:	0f 93       	push	r16
    88fe:	1f 93       	push	r17
    8900:	cf 93       	push	r28
    8902:	df 93       	push	r29
    8904:	1f 92       	push	r1
    8906:	1f 92       	push	r1
    8908:	cd b7       	in	r28, 0x3d	; 61
/**
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
    890a:	de b7       	in	r29, 0x3e	; 62
    890c:	18 2f       	mov	r17, r24
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    890e:	00 e0       	ldi	r16, 0x00	; 0
    8910:	21 e0       	ldi	r18, 0x01	; 1
    8912:	40 e0       	ldi	r20, 0x00	; 0
    8914:	59 e0       	ldi	r21, 0x09	; 9
    8916:	6d e3       	ldi	r22, 0x3D	; 61
    8918:	70 e0       	ldi	r23, 0x00	; 0
    891a:	ce 01       	movw	r24, r28
    891c:	01 96       	adiw	r24, 0x01	; 1
    891e:	e4 de       	rcall	.-568    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8920:	89 81       	ldd	r24, Y+1	; 0x01
    8922:	9a 81       	ldd	r25, Y+2	; 0x02
    8924:	65 d8       	rcall	.-3894   	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8926:	63 e0       	ldi	r22, 0x03	; 3
    8928:	70 e0       	ldi	r23, 0x00	; 0
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    892a:	81 2f       	mov	r24, r17
    892c:	17 df       	rcall	.-466    	; 0x875c <_ZN10W5100Class6readSnEhj>
    892e:	83 31       	cpi	r24, 0x13	; 19
    8930:	19 f0       	breq	.+6      	; 0x8938 <_Z6listenh+0x3c>
    8932:	78 d8       	rcall	.-3856   	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
  if (W5100.readSnSR(s) != SnSR::INIT) {
    8934:	80 e0       	ldi	r24, 0x00	; 0
    8936:	08 c0       	rjmp	.+16     	; 0x8948 <_Z6listenh+0x4c>
    SPI.endTransaction();
    8938:	42 e0       	ldi	r20, 0x02	; 2
    893a:	50 e0       	ldi	r21, 0x00	; 0
    return 0;
    893c:	61 2f       	mov	r22, r17
    893e:	89 ea       	ldi	r24, 0xA9	; 169
  }
  W5100.execCmdSn(s, Sock_LISTEN);
    8940:	98 e0       	ldi	r25, 0x08	; 8
    8942:	ee d4       	rcall	.+2524   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    8944:	6f d8       	rcall	.-3874   	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8946:	81 e0       	ldi	r24, 0x01	; 1
    8948:	0f 90       	pop	r0
    894a:	0f 90       	pop	r0
    894c:	df 91       	pop	r29
  SPI.endTransaction();
    894e:	cf 91       	pop	r28
    8950:	1f 91       	pop	r17
  return 1;
    8952:	0f 91       	pop	r16
}
    8954:	08 95       	ret

00008956 <_Z7connecthPhj>:
    8956:	cf 92       	push	r12
    8958:	df 92       	push	r13
    895a:	ef 92       	push	r14
    895c:	ff 92       	push	r15
    895e:	0f 93       	push	r16
    8960:	1f 93       	push	r17
 * 		This function waits for the untill the connection is established.
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
    8962:	cf 93       	push	r28
    8964:	df 93       	push	r29
    8966:	1f 92       	push	r1
    8968:	1f 92       	push	r1
    896a:	cd b7       	in	r28, 0x3d	; 61
    896c:	de b7       	in	r29, 0x3e	; 62
    896e:	18 2f       	mov	r17, r24
    8970:	7b 01       	movw	r14, r22
    8972:	6a 01       	movw	r12, r20
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    8974:	fb 01       	movw	r30, r22
    8976:	80 81       	ld	r24, Z
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    8978:	8f 3f       	cpi	r24, 0xFF	; 255
    897a:	51 f4       	brne	.+20     	; 0x8990 <_Z7connecthPhj+0x3a>
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    897c:	81 81       	ldd	r24, Z+1	; 0x01
    897e:	8f 3f       	cpi	r24, 0xFF	; 255
    8980:	99 f4       	brne	.+38     	; 0x89a8 <_Z7connecthPhj+0x52>
    8982:	82 81       	ldd	r24, Z+2	; 0x02
    8984:	8f 3f       	cpi	r24, 0xFF	; 255
    8986:	81 f4       	brne	.+32     	; 0x89a8 <_Z7connecthPhj+0x52>
    8988:	83 81       	ldd	r24, Z+3	; 0x03
    898a:	8f 3f       	cpi	r24, 0xFF	; 255
    898c:	69 f4       	brne	.+26     	; 0x89a8 <_Z7connecthPhj+0x52>
    898e:	2a c0       	rjmp	.+84     	; 0x89e4 <_Z7connecthPhj+0x8e>
    8990:	81 11       	cpse	r24, r1
    8992:	0a c0       	rjmp	.+20     	; 0x89a8 <_Z7connecthPhj+0x52>
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    8994:	fb 01       	movw	r30, r22
    8996:	81 81       	ldd	r24, Z+1	; 0x01
    8998:	81 11       	cpse	r24, r1
    899a:	06 c0       	rjmp	.+12     	; 0x89a8 <_Z7connecthPhj+0x52>
    899c:	82 81       	ldd	r24, Z+2	; 0x02
    899e:	81 11       	cpse	r24, r1
    89a0:	03 c0       	rjmp	.+6      	; 0x89a8 <_Z7connecthPhj+0x52>
    89a2:	83 81       	ldd	r24, Z+3	; 0x03
    89a4:	88 23       	and	r24, r24
    89a6:	f1 f0       	breq	.+60     	; 0x89e4 <_Z7connecthPhj+0x8e>
    89a8:	c1 14       	cp	r12, r1
    89aa:	d1 04       	cpc	r13, r1
    89ac:	d9 f0       	breq	.+54     	; 0x89e4 <_Z7connecthPhj+0x8e>
    (port == 0x00) 
    ) 
    return 0;

  // set destination IP
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    89ae:	00 e0       	ldi	r16, 0x00	; 0
    89b0:	21 e0       	ldi	r18, 0x01	; 1
    89b2:	40 e0       	ldi	r20, 0x00	; 0
    89b4:	59 e0       	ldi	r21, 0x09	; 9
    89b6:	6d e3       	ldi	r22, 0x3D	; 61
    89b8:	70 e0       	ldi	r23, 0x00	; 0
    89ba:	ce 01       	movw	r24, r28
    89bc:	01 96       	adiw	r24, 0x01	; 1
    89be:	94 de       	rcall	.-728    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    89c0:	89 81       	ldd	r24, Y+1	; 0x01
    89c2:	9a 81       	ldd	r25, Y+2	; 0x02
    89c4:	15 d8       	rcall	.-4054   	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    89c6:	b7 01       	movw	r22, r14
    89c8:	81 2f       	mov	r24, r17
  W5100.writeSnDIPR(s, addr);
    89ca:	c0 de       	rcall	.-640    	; 0x874c <_ZN10W5100Class11writeSnDIPREhPh>
    89cc:	b6 01       	movw	r22, r12
    89ce:	81 2f       	mov	r24, r17
    89d0:	ef de       	rcall	.-546    	; 0x87b0 <_ZN10W5100Class12writeSnDPORTEhj>
  W5100.writeSnDPORT(s, port);
    89d2:	44 e0       	ldi	r20, 0x04	; 4
    89d4:	50 e0       	ldi	r21, 0x00	; 0
    89d6:	61 2f       	mov	r22, r17
    89d8:	89 ea       	ldi	r24, 0xA9	; 169
  W5100.execCmdSn(s, Sock_CONNECT);
    89da:	98 e0       	ldi	r25, 0x08	; 8
    89dc:	a1 d4       	rcall	.+2370   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    89de:	22 d8       	rcall	.-4028   	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    89e0:	81 e0       	ldi	r24, 0x01	; 1
    89e2:	01 c0       	rjmp	.+2      	; 0x89e6 <_Z7connecthPhj+0x90>
    89e4:	80 e0       	ldi	r24, 0x00	; 0
    89e6:	0f 90       	pop	r0
  SPI.endTransaction();
    89e8:	0f 90       	pop	r0
    89ea:	df 91       	pop	r29

  return 1;
    89ec:	cf 91       	pop	r28
    89ee:	1f 91       	pop	r17
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    (port == 0x00) 
    ) 
    return 0;
    89f0:	0f 91       	pop	r16
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);
  SPI.endTransaction();

  return 1;
}
    89f2:	ff 90       	pop	r15
    89f4:	ef 90       	pop	r14
    89f6:	df 90       	pop	r13
    89f8:	cf 90       	pop	r12
    89fa:	08 95       	ret

000089fc <_Z10disconnecth>:
    89fc:	0f 93       	push	r16
    89fe:	1f 93       	push	r17
    8a00:	cf 93       	push	r28
    8a02:	df 93       	push	r29
    8a04:	1f 92       	push	r1
    8a06:	1f 92       	push	r1
/**
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
    8a08:	cd b7       	in	r28, 0x3d	; 61
    8a0a:	de b7       	in	r29, 0x3e	; 62
    8a0c:	18 2f       	mov	r17, r24
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8a0e:	00 e0       	ldi	r16, 0x00	; 0
    8a10:	21 e0       	ldi	r18, 0x01	; 1
    8a12:	40 e0       	ldi	r20, 0x00	; 0
    8a14:	59 e0       	ldi	r21, 0x09	; 9
    8a16:	6d e3       	ldi	r22, 0x3D	; 61
    8a18:	70 e0       	ldi	r23, 0x00	; 0
    8a1a:	ce 01       	movw	r24, r28
    8a1c:	01 96       	adiw	r24, 0x01	; 1
    8a1e:	64 de       	rcall	.-824    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8a20:	89 81       	ldd	r24, Y+1	; 0x01
    8a22:	9a 81       	ldd	r25, Y+2	; 0x02
    8a24:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8a28:	48 e0       	ldi	r20, 0x08	; 8
  W5100.execCmdSn(s, Sock_DISCON);
    8a2a:	50 e0       	ldi	r21, 0x00	; 0
    8a2c:	61 2f       	mov	r22, r17
    8a2e:	89 ea       	ldi	r24, 0xA9	; 169
    8a30:	98 e0       	ldi	r25, 0x08	; 8
    8a32:	76 d4       	rcall	.+2284   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    8a34:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
  SPI.endTransaction();
    8a38:	0f 90       	pop	r0
    8a3a:	0f 90       	pop	r0
}
    8a3c:	df 91       	pop	r29
    8a3e:	cf 91       	pop	r28
    8a40:	1f 91       	pop	r17
    8a42:	0f 91       	pop	r16
    8a44:	08 95       	ret

00008a46 <_Z4sendhPKhj>:
    8a46:	bf 92       	push	r11
    8a48:	cf 92       	push	r12
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)
{
    8a4a:	df 92       	push	r13
    8a4c:	ef 92       	push	r14
    8a4e:	ff 92       	push	r15
    8a50:	0f 93       	push	r16
    8a52:	1f 93       	push	r17
    8a54:	cf 93       	push	r28
    8a56:	df 93       	push	r29
    8a58:	00 d0       	rcall	.+0      	; 0x8a5a <_Z4sendhPKhj+0x14>
    8a5a:	cd b7       	in	r28, 0x3d	; 61
    8a5c:	de b7       	in	r29, 0x3e	; 62
    8a5e:	b8 2e       	mov	r11, r24
    8a60:	6b 01       	movw	r12, r22
    8a62:	7a 01       	movw	r14, r20
    8a64:	41 30       	cpi	r20, 0x01	; 1
    8a66:	88 e0       	ldi	r24, 0x08	; 8
    8a68:	58 07       	cpc	r21, r24
    8a6a:	18 f0       	brcs	.+6      	; 0x8a72 <_Z4sendhPKhj+0x2c>
    8a6c:	e1 2c       	mov	r14, r1
    8a6e:	98 e0       	ldi	r25, 0x08	; 8
    8a70:	f9 2e       	mov	r15, r25
    ret = len;

  // if freebuf is available, start.
  do 
  {
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8a72:	00 e0       	ldi	r16, 0x00	; 0
    8a74:	21 e0       	ldi	r18, 0x01	; 1
    8a76:	40 e0       	ldi	r20, 0x00	; 0
    8a78:	59 e0       	ldi	r21, 0x09	; 9
    8a7a:	6d e3       	ldi	r22, 0x3D	; 61
    8a7c:	70 e0       	ldi	r23, 0x00	; 0
    8a7e:	ce 01       	movw	r24, r28
    8a80:	01 96       	adiw	r24, 0x01	; 1
    8a82:	32 de       	rcall	.-924    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8a84:	89 81       	ldd	r24, Y+1	; 0x01
    8a86:	9a 81       	ldd	r25, Y+2	; 0x02
    8a88:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8a8c:	6b 2d       	mov	r22, r11
    freesize = W5100.getTXFreeSize(s);
    8a8e:	89 ea       	ldi	r24, 0xA9	; 169
    8a90:	98 e0       	ldi	r25, 0x08	; 8
    8a92:	cd d2       	rcall	.+1434   	; 0x902e <_ZN10W5100Class13getTXFreeSizeEh>
    8a94:	8c 01       	movw	r16, r24
    8a96:	63 e0       	ldi	r22, 0x03	; 3
    8a98:	70 e0       	ldi	r23, 0x00	; 0
    8a9a:	8b 2d       	mov	r24, r11
    8a9c:	5f de       	rcall	.-834    	; 0x875c <_ZN10W5100Class6readSnEhj>
    8a9e:	8b 83       	std	Y+3, r24	; 0x03
    8aa0:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    status = W5100.readSnSR(s);
    SPI.endTransaction();
    8aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    8aa6:	87 31       	cpi	r24, 0x17	; 23
    8aa8:	11 f0       	breq	.+4      	; 0x8aae <_Z4sendhPKhj+0x68>
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    8aaa:	8c 31       	cpi	r24, 0x1C	; 28
    8aac:	29 f4       	brne	.+10     	; 0x8ab8 <_Z4sendhPKhj+0x72>
    8aae:	78 d4       	rcall	.+2288   	; 0x93a0 <yield>
    8ab0:	0e 15       	cp	r16, r14
    8ab2:	1f 05       	cpc	r17, r15
    {
      ret = 0; 
      break;
    }
    yield();
    8ab4:	f0 f2       	brcs	.-68     	; 0x8a72 <_Z4sendhPKhj+0x2c>
    8ab6:	02 c0       	rjmp	.+4      	; 0x8abc <_Z4sendhPKhj+0x76>
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  // if freebuf is available, start.
  do 
    8ab8:	e1 2c       	mov	r14, r1
    8aba:	f1 2c       	mov	r15, r1
    8abc:	00 e0       	ldi	r16, 0x00	; 0
    8abe:	21 e0       	ldi	r18, 0x01	; 1
    freesize = W5100.getTXFreeSize(s);
    status = W5100.readSnSR(s);
    SPI.endTransaction();
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    8ac0:	40 e0       	ldi	r20, 0x00	; 0
    8ac2:	59 e0       	ldi	r21, 0x09	; 9
    yield();
  } 
  while (freesize < ret);

  // copy data
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8ac4:	6d e3       	ldi	r22, 0x3D	; 61
    8ac6:	70 e0       	ldi	r23, 0x00	; 0
    8ac8:	ce 01       	movw	r24, r28
    8aca:	01 96       	adiw	r24, 0x01	; 1
    8acc:	0d de       	rcall	.-998    	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8ace:	89 81       	ldd	r24, Y+1	; 0x01
    8ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    8ad2:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8ad6:	97 01       	movw	r18, r14
    8ad8:	a6 01       	movw	r20, r12
    8ada:	6b 2d       	mov	r22, r11
    8adc:	89 ea       	ldi	r24, 0xA9	; 169
    8ade:	98 e0       	ldi	r25, 0x08	; 8
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    8ae0:	59 d3       	rcall	.+1714   	; 0x9194 <_ZN10W5100Class20send_data_processingEhPKhj>
    8ae2:	40 e2       	ldi	r20, 0x20	; 32
    8ae4:	50 e0       	ldi	r21, 0x00	; 0
    8ae6:	6b 2d       	mov	r22, r11
    8ae8:	89 ea       	ldi	r24, 0xA9	; 169
    8aea:	98 e0       	ldi	r25, 0x08	; 8
    8aec:	19 d4       	rcall	.+2098   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
  W5100.execCmdSn(s, Sock_SEND);
    8aee:	8b 2d       	mov	r24, r11
    8af0:	3e de       	rcall	.-900    	; 0x876e <_ZN10W5100Class8readSnIREh>
    8af2:	84 fd       	sbrc	r24, 4
    8af4:	1e c0       	rjmp	.+60     	; 0x8b32 <_Z4sendhPKhj+0xec>
    8af6:	63 e0       	ldi	r22, 0x03	; 3
    8af8:	70 e0       	ldi	r23, 0x00	; 0
    8afa:	8b 2d       	mov	r24, r11

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    8afc:	2f de       	rcall	.-930    	; 0x875c <_ZN10W5100Class6readSnEhj>
    8afe:	81 11       	cpse	r24, r1
    8b00:	07 c0       	rjmp	.+14     	; 0x8b10 <_Z4sendhPKhj+0xca>
    8b02:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8b06:	8b 2d       	mov	r24, r11
    8b08:	85 de       	rcall	.-758    	; 0x8814 <_Z5closeh>
    8b0a:	80 e0       	ldi	r24, 0x00	; 0
    8b0c:	90 e0       	ldi	r25, 0x00	; 0
    8b0e:	17 c0       	rjmp	.+46     	; 0x8b3e <_Z4sendhPKhj+0xf8>
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    8b10:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    {
      SPI.endTransaction();
    8b14:	45 d4       	rcall	.+2186   	; 0x93a0 <yield>
    8b16:	00 e0       	ldi	r16, 0x00	; 0
      close(s);
    8b18:	21 e0       	ldi	r18, 0x01	; 1
    8b1a:	40 e0       	ldi	r20, 0x00	; 0
    8b1c:	59 e0       	ldi	r21, 0x09	; 9
      return 0;
    8b1e:	6d e3       	ldi	r22, 0x3D	; 61
    8b20:	70 e0       	ldi	r23, 0x00	; 0
    8b22:	ce 01       	movw	r24, r28
    }
    SPI.endTransaction();
    8b24:	01 96       	adiw	r24, 0x01	; 1
    8b26:	e0 dd       	rcall	.-1088   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    yield();
    8b28:	89 81       	ldd	r24, Y+1	; 0x01
    8b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8b2c:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8b30:	de cf       	rjmp	.-68     	; 0x8aee <_Z4sendhPKhj+0xa8>
    8b32:	60 e1       	ldi	r22, 0x10	; 16
    8b34:	8b 2d       	mov	r24, r11
    8b36:	38 de       	rcall	.-912    	; 0x87a8 <_ZN10W5100Class9writeSnIREhh>
    8b38:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8b3c:	c7 01       	movw	r24, r14
    8b3e:	0f 90       	pop	r0
    8b40:	0f 90       	pop	r0
    8b42:	0f 90       	pop	r0
    8b44:	df 91       	pop	r29
    8b46:	cf 91       	pop	r28
    8b48:	1f 91       	pop	r17
  }
  /* +2008.01 bj */
  W5100.writeSnIR(s, SnIR::SEND_OK);
    8b4a:	0f 91       	pop	r16
    8b4c:	ff 90       	pop	r15
    8b4e:	ef 90       	pop	r14
    8b50:	df 90       	pop	r13
  SPI.endTransaction();
    8b52:	cf 90       	pop	r12
    8b54:	bf 90       	pop	r11
  return ret;
    8b56:	08 95       	ret

00008b58 <_Z4recvhPhi>:
}
    8b58:	af 92       	push	r10
    8b5a:	bf 92       	push	r11
    8b5c:	cf 92       	push	r12
    8b5e:	df 92       	push	r13
    8b60:	ef 92       	push	r14
    8b62:	ff 92       	push	r15
    8b64:	0f 93       	push	r16
    8b66:	1f 93       	push	r17
    8b68:	cf 93       	push	r28
    8b6a:	df 93       	push	r29
    8b6c:	1f 92       	push	r1
    8b6e:	1f 92       	push	r1
    8b70:	cd b7       	in	r28, 0x3d	; 61
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    8b72:	de b7       	in	r29, 0x3e	; 62
    8b74:	18 2f       	mov	r17, r24
    8b76:	5b 01       	movw	r10, r22
    8b78:	6a 01       	movw	r12, r20
  // Check how much data is available
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8b7a:	00 e0       	ldi	r16, 0x00	; 0
    8b7c:	21 e0       	ldi	r18, 0x01	; 1
    8b7e:	40 e0       	ldi	r20, 0x00	; 0
    8b80:	59 e0       	ldi	r21, 0x09	; 9
    8b82:	6d e3       	ldi	r22, 0x3D	; 61
    8b84:	70 e0       	ldi	r23, 0x00	; 0
    8b86:	ce 01       	movw	r24, r28
    8b88:	01 96       	adiw	r24, 0x01	; 1
    8b8a:	ae dd       	rcall	.-1188   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8b8c:	89 81       	ldd	r24, Y+1	; 0x01
    8b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    8b90:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8b94:	61 2f       	mov	r22, r17
  int16_t ret = W5100.getRXReceivedSize(s);
    8b96:	89 ea       	ldi	r24, 0xA9	; 169
    8b98:	98 e0       	ldi	r25, 0x08	; 8
    8b9a:	79 d2       	rcall	.+1266   	; 0x908e <_ZN10W5100Class17getRXReceivedSizeEh>
    8b9c:	7c 01       	movw	r14, r24
    8b9e:	00 97       	sbiw	r24, 0x00	; 0
    8ba0:	99 f4       	brne	.+38     	; 0x8bc8 <_Z4recvhPhi+0x70>
  if ( ret == 0 )
    8ba2:	63 e0       	ldi	r22, 0x03	; 3
    8ba4:	70 e0       	ldi	r23, 0x00	; 0
    8ba6:	81 2f       	mov	r24, r17
    8ba8:	d9 dd       	rcall	.-1102   	; 0x875c <_ZN10W5100Class6readSnEhj>
    8baa:	84 31       	cpi	r24, 0x14	; 20
    8bac:	09 f1       	breq	.+66     	; 0x8bf0 <_Z4recvhPhi+0x98>
    8bae:	88 23       	and	r24, r24
  {
    // No data available.
    uint8_t status = W5100.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    8bb0:	f9 f0       	breq	.+62     	; 0x8bf0 <_Z4recvhPhi+0x98>
    8bb2:	21 e0       	ldi	r18, 0x01	; 1
    8bb4:	30 e0       	ldi	r19, 0x00	; 0
    8bb6:	8c 31       	cpi	r24, 0x1C	; 28
    8bb8:	11 f4       	brne	.+4      	; 0x8bbe <_Z4recvhPhi+0x66>
    8bba:	20 e0       	ldi	r18, 0x00	; 0
    8bbc:	30 e0       	ldi	r19, 0x00	; 0
    8bbe:	ee 24       	eor	r14, r14
    8bc0:	ff 24       	eor	r15, r15
    8bc2:	e2 1a       	sub	r14, r18
    8bc4:	f3 0a       	sbc	r15, r19
    8bc6:	14 c0       	rjmp	.+40     	; 0x8bf0 <_Z4recvhPhi+0x98>
    8bc8:	c8 16       	cp	r12, r24
    8bca:	d9 06       	cpc	r13, r25
    8bcc:	0c f4       	brge	.+2      	; 0x8bd0 <_Z4recvhPhi+0x78>
    8bce:	76 01       	movw	r14, r12
    8bd0:	1e 14       	cp	r1, r14
    8bd2:	1f 04       	cpc	r1, r15
    8bd4:	6c f4       	brge	.+26     	; 0x8bf0 <_Z4recvhPhi+0x98>
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    8bd6:	00 e0       	ldi	r16, 0x00	; 0
    8bd8:	97 01       	movw	r18, r14
    8bda:	a5 01       	movw	r20, r10
  {
    W5100.recv_data_processing(s, buf, ret);
    8bdc:	61 2f       	mov	r22, r17
    8bde:	89 ea       	ldi	r24, 0xA9	; 169
    8be0:	98 e0       	ldi	r25, 0x08	; 8
    8be2:	53 d3       	rcall	.+1702   	; 0x928a <_ZN10W5100Class20recv_data_processingEhPhjh>
    8be4:	40 e4       	ldi	r20, 0x40	; 64
    8be6:	50 e0       	ldi	r21, 0x00	; 0
    8be8:	61 2f       	mov	r22, r17
    8bea:	89 ea       	ldi	r24, 0xA9	; 169
    W5100.execCmdSn(s, Sock_RECV);
    8bec:	98 e0       	ldi	r25, 0x08	; 8
    8bee:	98 d3       	rcall	.+1840   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    8bf0:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8bf4:	c7 01       	movw	r24, r14
    8bf6:	0f 90       	pop	r0
    8bf8:	0f 90       	pop	r0
  }
  SPI.endTransaction();
    8bfa:	df 91       	pop	r29
    8bfc:	cf 91       	pop	r28
  return ret;
}
    8bfe:	1f 91       	pop	r17
    8c00:	0f 91       	pop	r16
    8c02:	ff 90       	pop	r15
    8c04:	ef 90       	pop	r14
    8c06:	df 90       	pop	r13
    8c08:	cf 90       	pop	r12
    8c0a:	bf 90       	pop	r11
    8c0c:	af 90       	pop	r10
    8c0e:	08 95       	ret

00008c10 <_Z13recvAvailableh>:
    8c10:	0f 93       	push	r16
    8c12:	1f 93       	push	r17
    8c14:	cf 93       	push	r28
    8c16:	df 93       	push	r29
    8c18:	00 d0       	rcall	.+0      	; 0x8c1a <_Z13recvAvailableh+0xa>


int16_t recvAvailable(SOCKET s)
{
    8c1a:	1f 92       	push	r1
    8c1c:	cd b7       	in	r28, 0x3d	; 61
    8c1e:	de b7       	in	r29, 0x3e	; 62
    8c20:	18 2f       	mov	r17, r24
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8c22:	00 e0       	ldi	r16, 0x00	; 0
    8c24:	21 e0       	ldi	r18, 0x01	; 1
    8c26:	40 e0       	ldi	r20, 0x00	; 0
    8c28:	59 e0       	ldi	r21, 0x09	; 9
    8c2a:	6d e3       	ldi	r22, 0x3D	; 61
    8c2c:	70 e0       	ldi	r23, 0x00	; 0
    8c2e:	ce 01       	movw	r24, r28
    8c30:	01 96       	adiw	r24, 0x01	; 1
    8c32:	5a dd       	rcall	.-1356   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8c34:	89 81       	ldd	r24, Y+1	; 0x01
    8c36:	9a 81       	ldd	r25, Y+2	; 0x02
    8c38:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8c3c:	61 2f       	mov	r22, r17
  int16_t ret = W5100.getRXReceivedSize(s);
    8c3e:	89 ea       	ldi	r24, 0xA9	; 169
    8c40:	98 e0       	ldi	r25, 0x08	; 8
    8c42:	25 d2       	rcall	.+1098   	; 0x908e <_ZN10W5100Class17getRXReceivedSizeEh>
    8c44:	8b 83       	std	Y+3, r24	; 0x03
    8c46:	9c 83       	std	Y+4, r25	; 0x04
  SPI.endTransaction();
    8c48:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    8c4e:	9c 81       	ldd	r25, Y+4	; 0x04
  return ret;
}
    8c50:	0f 90       	pop	r0
    8c52:	0f 90       	pop	r0
    8c54:	0f 90       	pop	r0
    8c56:	0f 90       	pop	r0
    8c58:	df 91       	pop	r29
    8c5a:	cf 91       	pop	r28
    8c5c:	1f 91       	pop	r17
    8c5e:	0f 91       	pop	r16
    8c60:	08 95       	ret

00008c62 <_Z4peekhPh>:
    8c62:	ef 92       	push	r14
    8c64:	ff 92       	push	r15
 * @brief	Returns the first byte in the receive queue (no checking)
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
    8c66:	0f 93       	push	r16
    8c68:	1f 93       	push	r17
    8c6a:	cf 93       	push	r28
    8c6c:	df 93       	push	r29
    8c6e:	1f 92       	push	r1
    8c70:	1f 92       	push	r1
    8c72:	cd b7       	in	r28, 0x3d	; 61
    8c74:	de b7       	in	r29, 0x3e	; 62
    8c76:	18 2f       	mov	r17, r24
    8c78:	7b 01       	movw	r14, r22
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8c7a:	00 e0       	ldi	r16, 0x00	; 0
    8c7c:	21 e0       	ldi	r18, 0x01	; 1
    8c7e:	40 e0       	ldi	r20, 0x00	; 0
    8c80:	59 e0       	ldi	r21, 0x09	; 9
    8c82:	6d e3       	ldi	r22, 0x3D	; 61
    8c84:	70 e0       	ldi	r23, 0x00	; 0
    8c86:	ce 01       	movw	r24, r28
    8c88:	01 96       	adiw	r24, 0x01	; 1
    8c8a:	2e dd       	rcall	.-1444   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8c8c:	89 81       	ldd	r24, Y+1	; 0x01
    8c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    8c90:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8c94:	01 e0       	ldi	r16, 0x01	; 1
  W5100.recv_data_processing(s, buf, 1, 1);
    8c96:	21 e0       	ldi	r18, 0x01	; 1
    8c98:	30 e0       	ldi	r19, 0x00	; 0
    8c9a:	a7 01       	movw	r20, r14
    8c9c:	61 2f       	mov	r22, r17
    8c9e:	89 ea       	ldi	r24, 0xA9	; 169
    8ca0:	98 e0       	ldi	r25, 0x08	; 8
    8ca2:	f3 d2       	rcall	.+1510   	; 0x928a <_ZN10W5100Class20recv_data_processingEhPhjh>
    8ca4:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
  SPI.endTransaction();
    8ca8:	81 e0       	ldi	r24, 0x01	; 1
    8caa:	90 e0       	ldi	r25, 0x00	; 0
  return 1;
}
    8cac:	0f 90       	pop	r0
    8cae:	0f 90       	pop	r0
    8cb0:	df 91       	pop	r29
    8cb2:	cf 91       	pop	r28
    8cb4:	1f 91       	pop	r17
    8cb6:	0f 91       	pop	r16
    8cb8:	ff 90       	pop	r15
    8cba:	ef 90       	pop	r14
    8cbc:	08 95       	ret

00008cbe <_Z5flushh>:
    8cbe:	08 95       	ret

00008cc0 <_Z10bufferDatahjPKhj>:
    8cc0:	9f 92       	push	r9
  SPI.endTransaction();
  return ret;
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    8cc2:	af 92       	push	r10
    8cc4:	bf 92       	push	r11
    8cc6:	cf 92       	push	r12
    8cc8:	df 92       	push	r13
    8cca:	ef 92       	push	r14
    8ccc:	ff 92       	push	r15
    8cce:	0f 93       	push	r16
    8cd0:	1f 93       	push	r17
    8cd2:	cf 93       	push	r28
    8cd4:	df 93       	push	r29
    8cd6:	1f 92       	push	r1
    8cd8:	1f 92       	push	r1
    8cda:	cd b7       	in	r28, 0x3d	; 61
    8cdc:	de b7       	in	r29, 0x3e	; 62
    8cde:	98 2e       	mov	r9, r24
    8ce0:	6b 01       	movw	r12, r22
    8ce2:	5a 01       	movw	r10, r20
    8ce4:	79 01       	movw	r14, r18
  uint16_t ret =0;
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8ce6:	00 e0       	ldi	r16, 0x00	; 0
    8ce8:	21 e0       	ldi	r18, 0x01	; 1
    8cea:	40 e0       	ldi	r20, 0x00	; 0
    8cec:	59 e0       	ldi	r21, 0x09	; 9
    8cee:	6d e3       	ldi	r22, 0x3D	; 61
    8cf0:	70 e0       	ldi	r23, 0x00	; 0
    8cf2:	ce 01       	movw	r24, r28
    8cf4:	01 96       	adiw	r24, 0x01	; 1
    8cf6:	f8 dc       	rcall	.-1552   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8cf8:	89 81       	ldd	r24, Y+1	; 0x01
    8cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    8cfc:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8d00:	69 2d       	mov	r22, r9
  if (len > W5100.getTXFreeSize(s))
    8d02:	89 ea       	ldi	r24, 0xA9	; 169
    8d04:	98 e0       	ldi	r25, 0x08	; 8
    8d06:	93 d1       	rcall	.+806    	; 0x902e <_ZN10W5100Class13getTXFreeSizeEh>
    8d08:	8e 15       	cp	r24, r14
    8d0a:	9f 05       	cpc	r25, r15
    8d0c:	28 f4       	brcc	.+10     	; 0x8d18 <_Z10bufferDatahjPKhj+0x58>
    8d0e:	69 2d       	mov	r22, r9
    8d10:	89 ea       	ldi	r24, 0xA9	; 169
  {
    ret = W5100.getTXFreeSize(s); // check size not to exceed MAX size.
    8d12:	98 e0       	ldi	r25, 0x08	; 8
    8d14:	8c d1       	rcall	.+792    	; 0x902e <_ZN10W5100Class13getTXFreeSizeEh>
    8d16:	7c 01       	movw	r14, r24
    8d18:	87 01       	movw	r16, r14
    8d1a:	95 01       	movw	r18, r10
    8d1c:	a6 01       	movw	r20, r12
  }
  else
  {
    ret = len;
  }
  W5100.send_data_processing_offset(s, offset, buf, ret);
    8d1e:	69 2d       	mov	r22, r9
    8d20:	89 ea       	ldi	r24, 0xA9	; 169
    8d22:	98 e0       	ldi	r25, 0x08	; 8
    8d24:	ce d1       	rcall	.+924    	; 0x90c2 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
    8d26:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8d2a:	c7 01       	movw	r24, r14
    8d2c:	0f 90       	pop	r0
  SPI.endTransaction();
    8d2e:	0f 90       	pop	r0
    8d30:	df 91       	pop	r29
  return ret;
}
    8d32:	cf 91       	pop	r28
    8d34:	1f 91       	pop	r17
    8d36:	0f 91       	pop	r16
    8d38:	ff 90       	pop	r15
    8d3a:	ef 90       	pop	r14
    8d3c:	df 90       	pop	r13
    8d3e:	cf 90       	pop	r12
    8d40:	bf 90       	pop	r11
    8d42:	af 90       	pop	r10
    8d44:	9f 90       	pop	r9
    8d46:	08 95       	ret

00008d48 <_Z8startUDPhPhj>:
    8d48:	cf 92       	push	r12
    8d4a:	df 92       	push	r13
    8d4c:	ef 92       	push	r14
    8d4e:	ff 92       	push	r15

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    8d50:	0f 93       	push	r16
    8d52:	1f 93       	push	r17
    8d54:	cf 93       	push	r28
    8d56:	df 93       	push	r29
    8d58:	1f 92       	push	r1
    8d5a:	1f 92       	push	r1
    8d5c:	cd b7       	in	r28, 0x3d	; 61
    8d5e:	de b7       	in	r29, 0x3e	; 62
    8d60:	18 2f       	mov	r17, r24
    8d62:	7b 01       	movw	r14, r22
    8d64:	6a 01       	movw	r12, r20
  if
    8d66:	fb 01       	movw	r30, r22
    8d68:	80 81       	ld	r24, Z
    8d6a:	81 11       	cpse	r24, r1
    8d6c:	09 c0       	rjmp	.+18     	; 0x8d80 <_Z8startUDPhPhj+0x38>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    8d6e:	81 81       	ldd	r24, Z+1	; 0x01
    8d70:	81 11       	cpse	r24, r1
    8d72:	06 c0       	rjmp	.+12     	; 0x8d80 <_Z8startUDPhPhj+0x38>
    8d74:	82 81       	ldd	r24, Z+2	; 0x02
    8d76:	81 11       	cpse	r24, r1
    8d78:	03 c0       	rjmp	.+6      	; 0x8d80 <_Z8startUDPhPhj+0x38>
    8d7a:	83 81       	ldd	r24, Z+3	; 0x03
    8d7c:	88 23       	and	r24, r24
    8d7e:	d9 f0       	breq	.+54     	; 0x8db6 <_Z8startUDPhPhj+0x6e>
    8d80:	c1 14       	cp	r12, r1
    8d82:	d1 04       	cpc	r13, r1
    8d84:	c1 f0       	breq	.+48     	; 0x8db6 <_Z8startUDPhPhj+0x6e>
  {
    return 0;
  }
  else
  {
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8d86:	00 e0       	ldi	r16, 0x00	; 0
    8d88:	21 e0       	ldi	r18, 0x01	; 1
    8d8a:	40 e0       	ldi	r20, 0x00	; 0
    8d8c:	59 e0       	ldi	r21, 0x09	; 9
    8d8e:	6d e3       	ldi	r22, 0x3D	; 61
    8d90:	70 e0       	ldi	r23, 0x00	; 0
    8d92:	ce 01       	movw	r24, r28
    8d94:	01 96       	adiw	r24, 0x01	; 1
    8d96:	a8 dc       	rcall	.-1712   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8d98:	89 81       	ldd	r24, Y+1	; 0x01
    8d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d9c:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8da0:	b7 01       	movw	r22, r14
    W5100.writeSnDIPR(s, addr);
    8da2:	81 2f       	mov	r24, r17
    8da4:	d3 dc       	rcall	.-1626   	; 0x874c <_ZN10W5100Class11writeSnDIPREhPh>
    8da6:	b6 01       	movw	r22, r12
    8da8:	81 2f       	mov	r24, r17
    W5100.writeSnDPORT(s, port);
    8daa:	02 dd       	rcall	.-1532   	; 0x87b0 <_ZN10W5100Class12writeSnDPORTEhj>
    8dac:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8db0:	81 e0       	ldi	r24, 0x01	; 1
    SPI.endTransaction();
    8db2:	90 e0       	ldi	r25, 0x00	; 0
    8db4:	02 c0       	rjmp	.+4      	; 0x8dba <_Z8startUDPhPhj+0x72>
    return 1;
    8db6:	80 e0       	ldi	r24, 0x00	; 0
    8db8:	90 e0       	ldi	r25, 0x00	; 0
    8dba:	0f 90       	pop	r0
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    8dbc:	0f 90       	pop	r0
    8dbe:	df 91       	pop	r29
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    SPI.endTransaction();
    return 1;
  }
}
    8dc0:	cf 91       	pop	r28
    8dc2:	1f 91       	pop	r17
    8dc4:	0f 91       	pop	r16
    8dc6:	ff 90       	pop	r15
    8dc8:	ef 90       	pop	r14
    8dca:	df 90       	pop	r13
    8dcc:	cf 90       	pop	r12
    8dce:	08 95       	ret

00008dd0 <_Z7sendUDPh>:
    8dd0:	0f 93       	push	r16
    8dd2:	1f 93       	push	r17
    8dd4:	cf 93       	push	r28

int sendUDP(SOCKET s)
{
    8dd6:	df 93       	push	r29
    8dd8:	1f 92       	push	r1
    8dda:	1f 92       	push	r1
    8ddc:	cd b7       	in	r28, 0x3d	; 61
    8dde:	de b7       	in	r29, 0x3e	; 62
    8de0:	18 2f       	mov	r17, r24
  SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8de2:	00 e0       	ldi	r16, 0x00	; 0
    8de4:	21 e0       	ldi	r18, 0x01	; 1
    8de6:	40 e0       	ldi	r20, 0x00	; 0
    8de8:	59 e0       	ldi	r21, 0x09	; 9
    8dea:	6d e3       	ldi	r22, 0x3D	; 61
    8dec:	70 e0       	ldi	r23, 0x00	; 0
    8dee:	ce 01       	movw	r24, r28
    8df0:	01 96       	adiw	r24, 0x01	; 1
    8df2:	7a dc       	rcall	.-1804   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8df4:	89 81       	ldd	r24, Y+1	; 0x01
    8df6:	9a 81       	ldd	r25, Y+2	; 0x02
    8df8:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8dfc:	40 e2       	ldi	r20, 0x20	; 32
  W5100.execCmdSn(s, Sock_SEND);
    8dfe:	50 e0       	ldi	r21, 0x00	; 0
    8e00:	61 2f       	mov	r22, r17
    8e02:	89 ea       	ldi	r24, 0xA9	; 169
    8e04:	98 e0       	ldi	r25, 0x08	; 8
    8e06:	8c d2       	rcall	.+1304   	; 0x9320 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    8e08:	81 2f       	mov	r24, r17
    8e0a:	b1 dc       	rcall	.-1694   	; 0x876e <_ZN10W5100Class8readSnIREh>
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    8e0c:	84 fd       	sbrc	r24, 4
    8e0e:	1d c0       	rjmp	.+58     	; 0x8e4a <_Z7sendUDPh+0x7a>
    8e10:	81 2f       	mov	r24, r17
    8e12:	ad dc       	rcall	.-1702   	; 0x876e <_ZN10W5100Class8readSnIREh>
    8e14:	83 ff       	sbrs	r24, 3
  {
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    8e16:	08 c0       	rjmp	.+16     	; 0x8e28 <_Z7sendUDPh+0x58>
    8e18:	68 e1       	ldi	r22, 0x18	; 24
    8e1a:	81 2f       	mov	r24, r17
    8e1c:	c5 dc       	rcall	.-1654   	; 0x87a8 <_ZN10W5100Class9writeSnIREhh>
    8e1e:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
    8e22:	80 e0       	ldi	r24, 0x00	; 0
    8e24:	90 e0       	ldi	r25, 0x00	; 0
    8e26:	18 c0       	rjmp	.+48     	; 0x8e58 <_Z7sendUDPh+0x88>
      SPI.endTransaction();
    8e28:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
      return 0;
    8e2c:	b9 d2       	rcall	.+1394   	; 0x93a0 <yield>
    8e2e:	00 e0       	ldi	r16, 0x00	; 0
    8e30:	21 e0       	ldi	r18, 0x01	; 1
    }
    SPI.endTransaction();
    8e32:	40 e0       	ldi	r20, 0x00	; 0
    8e34:	59 e0       	ldi	r21, 0x09	; 9
    yield();
    8e36:	6d e3       	ldi	r22, 0x3D	; 61
    8e38:	70 e0       	ldi	r23, 0x00	; 0
    SPI.beginTransaction(SPI_ETHERNET_SETTINGS);
    8e3a:	ce 01       	movw	r24, r28
    8e3c:	01 96       	adiw	r24, 0x01	; 1
    8e3e:	54 dc       	rcall	.-1880   	; 0x86e8 <_ZN11SPISettingsC1Emhh>
    8e40:	89 81       	ldd	r24, Y+1	; 0x01
    8e42:	9a 81       	ldd	r25, Y+2	; 0x02
    8e44:	0e 94 f8 3c 	call	0x79f0	; 0x79f0 <_ZN8SPIClass16beginTransactionE11SPISettings>
    8e48:	df cf       	rjmp	.-66     	; 0x8e08 <_Z7sendUDPh+0x38>
    8e4a:	60 e1       	ldi	r22, 0x10	; 16
    8e4c:	81 2f       	mov	r24, r17
    8e4e:	ac dc       	rcall	.-1704   	; 0x87a8 <_ZN10W5100Class9writeSnIREhh>
    8e50:	0e 94 12 3d 	call	0x7a24	; 0x7a24 <_ZN8SPIClass14endTransactionEv>
    8e54:	81 e0       	ldi	r24, 0x01	; 1
    8e56:	90 e0       	ldi	r25, 0x00	; 0
  }

  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);
    8e58:	0f 90       	pop	r0
    8e5a:	0f 90       	pop	r0
    8e5c:	df 91       	pop	r29
    8e5e:	cf 91       	pop	r28
  SPI.endTransaction();
    8e60:	1f 91       	pop	r17
    8e62:	0f 91       	pop	r16

  /* Sent ok */
  return 1;
    8e64:	08 95       	ret

00008e66 <_ZN8SPIClass8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    8e66:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    8e68:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    8e6a:	0d b4       	in	r0, 0x2d	; 45
    8e6c:	07 fe       	sbrs	r0, 7
    8e6e:	fd cf       	rjmp	.-6      	; 0x8e6a <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
    8e70:	8e b5       	in	r24, 0x2e	; 46
  }
    8e72:	08 95       	ret

00008e74 <_ZN10W5100Class5setSSEv>:

private:
#if defined(ARDUINO_ARCH_AVR)
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    8e74:	2c 98       	cbi	0x05, 4	; 5
    8e76:	08 95       	ret

00008e78 <_ZN10W5100Class7resetSSEv>:
  inline static void resetSS()   { PORTB |=  _BV(4); };
    8e78:	2c 9a       	sbi	0x05, 4	; 5
    8e7a:	08 95       	ret

00008e7c <_ZN10W5100Class5writeEjh>:
    read(src_ptr, (uint8_t *) dst, len);
}


uint8_t W5100Class::write(uint16_t _addr, uint8_t _data)
{
    8e7c:	1f 93       	push	r17
    8e7e:	cf 93       	push	r28
    8e80:	df 93       	push	r29
    8e82:	1f 92       	push	r1
    8e84:	1f 92       	push	r1
    8e86:	cd b7       	in	r28, 0x3d	; 61
    8e88:	de b7       	in	r29, 0x3e	; 62
    8e8a:	18 2f       	mov	r17, r24
#if defined(ARDUINO_ARCH_AVR)
  setSS();  
    8e8c:	6a 83       	std	Y+2, r22	; 0x02
    8e8e:	99 83       	std	Y+1, r25	; 0x01
    8e90:	f1 df       	rcall	.-30     	; 0x8e74 <_ZN10W5100Class5setSSEv>
    8e92:	80 ef       	ldi	r24, 0xF0	; 240
  SPI.transfer(0xF0);
    8e94:	e8 df       	rcall	.-48     	; 0x8e66 <_ZN8SPIClass8transferEh>
    8e96:	99 81       	ldd	r25, Y+1	; 0x01
    8e98:	89 2f       	mov	r24, r25
  SPI.transfer(_addr >> 8);
    8e9a:	e5 df       	rcall	.-54     	; 0x8e66 <_ZN8SPIClass8transferEh>
    8e9c:	81 2f       	mov	r24, r17
    8e9e:	e3 df       	rcall	.-58     	; 0x8e66 <_ZN8SPIClass8transferEh>
    8ea0:	6a 81       	ldd	r22, Y+2	; 0x02
  SPI.transfer(_addr & 0xFF);
    8ea2:	86 2f       	mov	r24, r22
    8ea4:	e0 df       	rcall	.-64     	; 0x8e66 <_ZN8SPIClass8transferEh>
    8ea6:	e8 df       	rcall	.-48     	; 0x8e78 <_ZN10W5100Class7resetSSEv>
  SPI.transfer(_data);
    8ea8:	81 e0       	ldi	r24, 0x01	; 1
    8eaa:	0f 90       	pop	r0
    8eac:	0f 90       	pop	r0
    8eae:	df 91       	pop	r29
  resetSS();
    8eb0:	cf 91       	pop	r28
    8eb2:	1f 91       	pop	r17
  SPI.transfer(SPI_CS, _addr >> 8, SPI_CONTINUE);
  SPI.transfer(SPI_CS, _addr & 0xFF, SPI_CONTINUE);
  SPI.transfer(SPI_CS, _data);
#endif
  return 1;
}
    8eb4:	08 95       	ret

00008eb6 <_ZN10W5100Class4initEv>:
    8eb6:	cf 93       	push	r28
    8eb8:	df 93       	push	r29
    8eba:	ec 01       	movw	r28, r24
    8ebc:	6c e2       	ldi	r22, 0x2C	; 44
    8ebe:	71 e0       	ldi	r23, 0x01	; 1
    8ec0:	80 e0       	ldi	r24, 0x00	; 0
#define TXBUF_BASE 0x4000
#define RXBUF_BASE 0x6000

void W5100Class::init(void)
{
  delay(300);
    8ec2:	90 e0       	ldi	r25, 0x00	; 0
    8ec4:	e7 d2       	rcall	.+1486   	; 0x9494 <delay>
    8ec6:	3a d2       	rcall	.+1140   	; 0x933c <_ZN8SPIClass5beginEv>

#if defined(ARDUINO_ARCH_AVR)
  SPI.begin();
    8ec8:	24 9a       	sbi	0x04, 4	; 4
    8eca:	80 91 bb 08 	lds	r24, 0x08BB

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    8ece:	88 23       	and	r24, r24
    8ed0:	99 f0       	breq	.+38     	; 0x8ef8 <_ZN10W5100Class4initEv+0x42>
    8ed2:	9f b7       	in	r25, 0x3f	; 63
    8ed4:	f8 94       	cli
      uint8_t sreg = SREG;
    8ed6:	80 91 bb 08 	lds	r24, 0x08BB
      noInterrupts();

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    8eda:	81 30       	cpi	r24, 0x01	; 1
    8edc:	59 f4       	brne	.+22     	; 0x8ef4 <_ZN10W5100Class4initEv+0x3e>
    8ede:	8d b3       	in	r24, 0x1d	; 29
    8ee0:	80 93 b9 08 	sts	0x08B9, r24
        interruptSave = SPI_AVR_EIMSK;
    8ee4:	2d b3       	in	r18, 0x1d	; 29
    8ee6:	80 91 ba 08 	lds	r24, 0x08BA
        SPI_AVR_EIMSK &= ~interruptMask;
    8eea:	80 95       	com	r24
    8eec:	82 23       	and	r24, r18
    8eee:	8d bb       	out	0x1d, r24	; 29
    8ef0:	9f bf       	out	0x3f, r25	; 63
    8ef2:	02 c0       	rjmp	.+4      	; 0x8ef8 <_ZN10W5100Class4initEv+0x42>
        SREG = sreg;
    8ef4:	90 93 b9 08 	sts	0x08B9, r25
      } else
      #endif
      {
        interruptSave = sreg;
    8ef8:	80 e5       	ldi	r24, 0x50	; 80
    8efa:	8c bd       	out	0x2c, r24	; 44
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    8efc:	1d bc       	out	0x2d, r1	; 45
    8efe:	60 e8       	ldi	r22, 0x80	; 128
    SPSR = settings.spsr;
    8f00:	80 e0       	ldi	r24, 0x00	; 0
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    8f02:	90 e0       	ldi	r25, 0x00	; 0
    8f04:	bb df       	rcall	.-138    	; 0x8e7c <_ZN10W5100Class5writeEjh>
    8f06:	65 e5       	ldi	r22, 0x55	; 85
    8f08:	8b e1       	ldi	r24, 0x1B	; 27
    8f0a:	90 e0       	ldi	r25, 0x00	; 0
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size
    8f0c:	b7 df       	rcall	.-146    	; 0x8e7c <_ZN10W5100Class5writeEjh>
    8f0e:	65 e5       	ldi	r22, 0x55	; 85
    8f10:	8a e1       	ldi	r24, 0x1A	; 26
    8f12:	90 e0       	ldi	r25, 0x00	; 0
    8f14:	b3 df       	rcall	.-154    	; 0x8e7c <_ZN10W5100Class5writeEjh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
    8f16:	80 91 bb 08 	lds	r24, 0x08BB
    8f1a:	88 23       	and	r24, r24
    8f1c:	61 f0       	breq	.+24     	; 0x8f36 <_ZN10W5100Class4initEv+0x80>
    8f1e:	9f b7       	in	r25, 0x3f	; 63
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    8f20:	f8 94       	cli
    8f22:	20 91 bb 08 	lds	r18, 0x08BB
    8f26:	80 91 b9 08 	lds	r24, 0x08B9
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
      #endif
      noInterrupts();
    8f2a:	21 30       	cpi	r18, 0x01	; 1
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    8f2c:	19 f4       	brne	.+6      	; 0x8f34 <_ZN10W5100Class4initEv+0x7e>
    8f2e:	8d bb       	out	0x1d, r24	; 29
    8f30:	9f bf       	out	0x3f, r25	; 63
    8f32:	01 c0       	rjmp	.+2      	; 0x8f36 <_ZN10W5100Class4initEv+0x80>
    8f34:	8f bf       	out	0x3f, r24	; 63
    8f36:	80 e0       	ldi	r24, 0x00	; 0
        SPI_AVR_EIMSK = interruptSave;
    8f38:	90 e4       	ldi	r25, 0x40	; 64
        SREG = sreg;
    8f3a:	99 83       	std	Y+1, r25	; 0x01
    8f3c:	88 83       	st	Y, r24
      } else
      #endif
      {
        SREG = interruptSave;
    8f3e:	80 e0       	ldi	r24, 0x00	; 0
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    8f40:	90 e6       	ldi	r25, 0x60	; 96
    8f42:	99 87       	std	Y+9, r25	; 0x09
    8f44:	88 87       	std	Y+8, r24	; 0x08
    8f46:	80 e0       	ldi	r24, 0x00	; 0
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    8f48:	98 e4       	ldi	r25, 0x48	; 72
    8f4a:	9b 83       	std	Y+3, r25	; 0x03
    8f4c:	8a 83       	std	Y+2, r24	; 0x02
    8f4e:	80 e0       	ldi	r24, 0x00	; 0
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    8f50:	98 e6       	ldi	r25, 0x68	; 104
    8f52:	9b 87       	std	Y+11, r25	; 0x0b
    8f54:	8a 87       	std	Y+10, r24	; 0x0a
    8f56:	80 e0       	ldi	r24, 0x00	; 0
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    8f58:	90 e5       	ldi	r25, 0x50	; 80
    8f5a:	9d 83       	std	Y+5, r25	; 0x05
    8f5c:	8c 83       	std	Y+4, r24	; 0x04
    8f5e:	80 e0       	ldi	r24, 0x00	; 0
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    8f60:	90 e7       	ldi	r25, 0x70	; 112
    8f62:	9d 87       	std	Y+13, r25	; 0x0d
    8f64:	8c 87       	std	Y+12, r24	; 0x0c
    8f66:	80 e0       	ldi	r24, 0x00	; 0
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    8f68:	98 e5       	ldi	r25, 0x58	; 88
    8f6a:	9f 83       	std	Y+7, r25	; 0x07
    8f6c:	8e 83       	std	Y+6, r24	; 0x06
    8f6e:	80 e0       	ldi	r24, 0x00	; 0
  writeTMSR(0x55);
  writeRMSR(0x55);
  SPI.endTransaction();

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    8f70:	98 e7       	ldi	r25, 0x78	; 120
    8f72:	9f 87       	std	Y+15, r25	; 0x0f
    8f74:	8e 87       	std	Y+14, r24	; 0x0e
    8f76:	df 91       	pop	r29
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    8f78:	cf 91       	pop	r28
    8f7a:	08 95       	ret

00008f7c <_ZN10W5100Class5writeEjPKhj>:
    8f7c:	cf 92       	push	r12
    8f7e:	df 92       	push	r13
  }
}
    8f80:	ef 92       	push	r14
    8f82:	ff 92       	push	r15
    8f84:	0f 93       	push	r16
#endif
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
    8f86:	1f 93       	push	r17
    8f88:	cf 93       	push	r28
    8f8a:	df 93       	push	r29
    8f8c:	ec 01       	movw	r28, r24
    8f8e:	7a 01       	movw	r14, r20
    8f90:	8b 01       	movw	r16, r22
    8f92:	6c 01       	movw	r12, r24
    8f94:	c4 0e       	add	r12, r20
    8f96:	d5 1e       	adc	r13, r21
  for (uint16_t i=0; i<_len; i++)
    8f98:	cc 15       	cp	r28, r12
    8f9a:	dd 05       	cpc	r29, r13
    8f9c:	71 f0       	breq	.+28     	; 0x8fba <_ZN10W5100Class5writeEjPKhj+0x3e>
  {
#if defined(ARDUINO_ARCH_AVR)
    setSS();    
    8f9e:	6a df       	rcall	.-300    	; 0x8e74 <_ZN10W5100Class5setSSEv>
    8fa0:	80 ef       	ldi	r24, 0xF0	; 240
    SPI.transfer(0xF0);
    8fa2:	61 df       	rcall	.-318    	; 0x8e66 <_ZN8SPIClass8transferEh>
    8fa4:	8d 2f       	mov	r24, r29
    8fa6:	5f df       	rcall	.-322    	; 0x8e66 <_ZN8SPIClass8transferEh>
    SPI.transfer(_addr >> 8);
    8fa8:	8c 2f       	mov	r24, r28
    8faa:	5d df       	rcall	.-326    	; 0x8e66 <_ZN8SPIClass8transferEh>
    8fac:	21 96       	adiw	r28, 0x01	; 1
    SPI.transfer(_addr & 0xFF);
    8fae:	f8 01       	movw	r30, r16
    8fb0:	81 91       	ld	r24, Z+
    8fb2:	8f 01       	movw	r16, r30
    _addr++;
    8fb4:	58 df       	rcall	.-336    	; 0x8e66 <_ZN8SPIClass8transferEh>
    SPI.transfer(_buf[i]);
    8fb6:	60 df       	rcall	.-320    	; 0x8e78 <_ZN10W5100Class7resetSSEv>
    8fb8:	ef cf       	rjmp	.-34     	; 0x8f98 <_ZN10W5100Class5writeEjPKhj+0x1c>
    8fba:	c7 01       	movw	r24, r14
    8fbc:	df 91       	pop	r29
    8fbe:	cf 91       	pop	r28
    resetSS();
    8fc0:	1f 91       	pop	r17
    8fc2:	0f 91       	pop	r16
    8fc4:	ff 90       	pop	r15
	SPI.transfer(SPI_CS, _buf[i]);
    _addr++;
#endif
  }
  return _len;
}
    8fc6:	ef 90       	pop	r14
    8fc8:	df 90       	pop	r13
    8fca:	cf 90       	pop	r12
    8fcc:	08 95       	ret

00008fce <_ZN10W5100Class4readEj>:
    8fce:	1f 93       	push	r17
    8fd0:	cf 93       	push	r28
    8fd2:	df 93       	push	r29
    8fd4:	1f 92       	push	r1
    8fd6:	cd b7       	in	r28, 0x3d	; 61
    8fd8:	de b7       	in	r29, 0x3e	; 62

uint8_t W5100Class::read(uint16_t _addr)
{
    8fda:	18 2f       	mov	r17, r24
#if defined(ARDUINO_ARCH_AVR)
  setSS();  
    8fdc:	99 83       	std	Y+1, r25	; 0x01
    8fde:	4a df       	rcall	.-364    	; 0x8e74 <_ZN10W5100Class5setSSEv>
    8fe0:	8f e0       	ldi	r24, 0x0F	; 15
  SPI.transfer(0x0F);
    8fe2:	41 df       	rcall	.-382    	; 0x8e66 <_ZN8SPIClass8transferEh>
    8fe4:	99 81       	ldd	r25, Y+1	; 0x01
    8fe6:	89 2f       	mov	r24, r25
  SPI.transfer(_addr >> 8);
    8fe8:	3e df       	rcall	.-388    	; 0x8e66 <_ZN8SPIClass8transferEh>
    8fea:	81 2f       	mov	r24, r17
    8fec:	3c df       	rcall	.-392    	; 0x8e66 <_ZN8SPIClass8transferEh>
    8fee:	80 e0       	ldi	r24, 0x00	; 0
  SPI.transfer(_addr & 0xFF);
    8ff0:	3a df       	rcall	.-396    	; 0x8e66 <_ZN8SPIClass8transferEh>
    8ff2:	89 83       	std	Y+1, r24	; 0x01
    8ff4:	41 df       	rcall	.-382    	; 0x8e78 <_ZN10W5100Class7resetSSEv>
  uint8_t _data = SPI.transfer(0);
    8ff6:	89 81       	ldd	r24, Y+1	; 0x01
    8ff8:	0f 90       	pop	r0
    8ffa:	df 91       	pop	r29
  resetSS();
    8ffc:	cf 91       	pop	r28
    8ffe:	1f 91       	pop	r17
    9000:	08 95       	ret

00009002 <_ZN10W5100Class12readSnTX_FSREh>:
  SPI.transfer(SPI_CS, _addr >> 8, SPI_CONTINUE);
  SPI.transfer(SPI_CS, _addr & 0xFF, SPI_CONTINUE);
  uint8_t _data = SPI.transfer(SPI_CS, 0);
#endif
  return _data;
}
    9002:	1f 93       	push	r17
    9004:	cf 93       	push	r28
    9006:	df 93       	push	r29
    9008:	18 2f       	mov	r17, r24
    900a:	60 e2       	ldi	r22, 0x20	; 32
    900c:	70 e0       	ldi	r23, 0x00	; 0
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    900e:	a6 db       	rcall	.-2228   	; 0x875c <_ZN10W5100Class6readSnEhj>
    9010:	c8 2f       	mov	r28, r24
    9012:	d0 e0       	ldi	r29, 0x00	; 0
    9014:	61 e2       	ldi	r22, 0x21	; 33
    9016:	70 e0       	ldi	r23, 0x00	; 0
    9018:	81 2f       	mov	r24, r17
    901a:	a0 db       	rcall	.-2240   	; 0x875c <_ZN10W5100Class6readSnEhj>
    901c:	dc 2f       	mov	r29, r28
    901e:	cc 27       	eor	r28, r28
    9020:	9e 01       	movw	r18, r28
    9022:	28 2b       	or	r18, r24
    9024:	c9 01       	movw	r24, r18
    9026:	df 91       	pop	r29
    9028:	cf 91       	pop	r28
    902a:	1f 91       	pop	r17
    902c:	08 95       	ret

0000902e <_ZN10W5100Class13getTXFreeSizeEh>:
    902e:	ff 92       	push	r15
    9030:	0f 93       	push	r16
    RBASE[i] = RXBUF_BASE + RSIZE * i;
  }
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
    9032:	1f 93       	push	r17
    9034:	cf 93       	push	r28
    9036:	df 93       	push	r29
    9038:	f6 2e       	mov	r15, r22
  uint16_t val=0, val1=0;
    903a:	c0 e0       	ldi	r28, 0x00	; 0
    903c:	d0 e0       	ldi	r29, 0x00	; 0
  do {
    val1 = readSnTX_FSR(s);
    903e:	8f 2d       	mov	r24, r15
    9040:	e0 df       	rcall	.-64     	; 0x9002 <_ZN10W5100Class12readSnTX_FSREh>
    9042:	8c 01       	movw	r16, r24
    9044:	00 97       	sbiw	r24, 0x00	; 0
    if (val1 != 0)
    9046:	19 f0       	breq	.+6      	; 0x904e <_ZN10W5100Class13getTXFreeSizeEh+0x20>
    9048:	8f 2d       	mov	r24, r15
      val = readSnTX_FSR(s);
    904a:	db df       	rcall	.-74     	; 0x9002 <_ZN10W5100Class12readSnTX_FSREh>
    904c:	ec 01       	movw	r28, r24
    904e:	c0 17       	cp	r28, r16
    9050:	d1 07       	cpc	r29, r17
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
  uint16_t val=0, val1=0;
  do {
    9052:	a9 f7       	brne	.-22     	; 0x903e <_ZN10W5100Class13getTXFreeSizeEh+0x10>
    9054:	ce 01       	movw	r24, r28
    9056:	df 91       	pop	r29
    if (val1 != 0)
      val = readSnTX_FSR(s);
  } 
  while (val != val1);
  return val;
}
    9058:	cf 91       	pop	r28
    905a:	1f 91       	pop	r17
    905c:	0f 91       	pop	r16
    905e:	ff 90       	pop	r15
    9060:	08 95       	ret

00009062 <_ZN10W5100Class12readSnRX_RSREh>:
    9062:	1f 93       	push	r17
    9064:	cf 93       	push	r28
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    9066:	df 93       	push	r29
    9068:	18 2f       	mov	r17, r24
    906a:	66 e2       	ldi	r22, 0x26	; 38
    906c:	70 e0       	ldi	r23, 0x00	; 0
    906e:	76 db       	rcall	.-2324   	; 0x875c <_ZN10W5100Class6readSnEhj>
    9070:	c8 2f       	mov	r28, r24
    9072:	d0 e0       	ldi	r29, 0x00	; 0
    9074:	67 e2       	ldi	r22, 0x27	; 39
    9076:	70 e0       	ldi	r23, 0x00	; 0
    9078:	81 2f       	mov	r24, r17
    907a:	70 db       	rcall	.-2336   	; 0x875c <_ZN10W5100Class6readSnEhj>
    907c:	dc 2f       	mov	r29, r28
    907e:	cc 27       	eor	r28, r28
    9080:	9e 01       	movw	r18, r28
    9082:	28 2b       	or	r18, r24
    9084:	c9 01       	movw	r24, r18
    9086:	df 91       	pop	r29
    9088:	cf 91       	pop	r28
    908a:	1f 91       	pop	r17
    908c:	08 95       	ret

0000908e <_ZN10W5100Class17getRXReceivedSizeEh>:
    908e:	ff 92       	push	r15
    9090:	0f 93       	push	r16

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
    9092:	1f 93       	push	r17
    9094:	cf 93       	push	r28
    9096:	df 93       	push	r29
    9098:	f6 2e       	mov	r15, r22
  uint16_t val=0,val1=0;
    909a:	c0 e0       	ldi	r28, 0x00	; 0
    909c:	d0 e0       	ldi	r29, 0x00	; 0
  do {
    val1 = readSnRX_RSR(s);
    909e:	8f 2d       	mov	r24, r15
    90a0:	e0 df       	rcall	.-64     	; 0x9062 <_ZN10W5100Class12readSnRX_RSREh>
    90a2:	8c 01       	movw	r16, r24
    90a4:	00 97       	sbiw	r24, 0x00	; 0
    if (val1 != 0)
    90a6:	19 f0       	breq	.+6      	; 0x90ae <_ZN10W5100Class17getRXReceivedSizeEh+0x20>
    90a8:	8f 2d       	mov	r24, r15
      val = readSnRX_RSR(s);
    90aa:	db df       	rcall	.-74     	; 0x9062 <_ZN10W5100Class12readSnRX_RSREh>
    90ac:	ec 01       	movw	r28, r24
    90ae:	c0 17       	cp	r28, r16
    90b0:	d1 07       	cpc	r29, r17
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
  uint16_t val=0,val1=0;
  do {
    90b2:	a9 f7       	brne	.-22     	; 0x909e <_ZN10W5100Class17getRXReceivedSizeEh+0x10>
    90b4:	ce 01       	movw	r24, r28
    90b6:	df 91       	pop	r29
    if (val1 != 0)
      val = readSnRX_RSR(s);
  } 
  while (val != val1);
  return val;
}
    90b8:	cf 91       	pop	r28
    90ba:	1f 91       	pop	r17
    90bc:	0f 91       	pop	r16
    90be:	ff 90       	pop	r15
    90c0:	08 95       	ret

000090c2 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
    90c2:	6f 92       	push	r6
    90c4:	7f 92       	push	r7
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
}

void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    90c6:	9f 92       	push	r9
    90c8:	af 92       	push	r10
    90ca:	bf 92       	push	r11
    90cc:	cf 92       	push	r12
    90ce:	df 92       	push	r13
    90d0:	ef 92       	push	r14
    90d2:	ff 92       	push	r15
    90d4:	0f 93       	push	r16
    90d6:	1f 93       	push	r17
    90d8:	cf 93       	push	r28
    90da:	df 93       	push	r29
    90dc:	1f 92       	push	r1
    90de:	cd b7       	in	r28, 0x3d	; 61
    90e0:	de b7       	in	r29, 0x3e	; 62
    90e2:	d8 2e       	mov	r13, r24
    90e4:	96 2e       	mov	r9, r22
    90e6:	3a 01       	movw	r6, r20
    90e8:	59 01       	movw	r10, r18
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    90ea:	64 e2       	ldi	r22, 0x24	; 36
    90ec:	70 e0       	ldi	r23, 0x00	; 0
    90ee:	89 2d       	mov	r24, r9
    90f0:	99 83       	std	Y+1, r25	; 0x01
    90f2:	34 db       	rcall	.-2456   	; 0x875c <_ZN10W5100Class6readSnEhj>
    90f4:	e8 2e       	mov	r14, r24
    90f6:	f1 2c       	mov	r15, r1
    90f8:	65 e2       	ldi	r22, 0x25	; 37
    90fa:	70 e0       	ldi	r23, 0x00	; 0
    90fc:	89 2d       	mov	r24, r9
    90fe:	2e db       	rcall	.-2468   	; 0x875c <_ZN10W5100Class6readSnEhj>
    9100:	fe 2c       	mov	r15, r14
    9102:	ee 24       	eor	r14, r14
    9104:	e8 2a       	or	r14, r24
    9106:	e6 0c       	add	r14, r6
    9108:	f7 1c       	adc	r15, r7
  uint16_t ptr = readSnTX_WR(s);
  ptr += data_offset;
    910a:	97 01       	movw	r18, r14
    910c:	37 70       	andi	r19, 0x07	; 7
  uint16_t offset = ptr & SMASK;
    910e:	6d 2c       	mov	r6, r13
    9110:	99 81       	ldd	r25, Y+1	; 0x01
    9112:	79 2e       	mov	r7, r25
    9114:	69 0c       	add	r6, r9
    9116:	71 1c       	adc	r7, r1
    9118:	69 0c       	add	r6, r9
    911a:	71 1c       	adc	r7, r1
    911c:	d3 01       	movw	r26, r6
    911e:	ed 91       	ld	r30, X+
  uint16_t dstAddr = offset + SBASE[s];
    9120:	fc 91       	ld	r31, X
    9122:	e2 0f       	add	r30, r18
    9124:	f3 1f       	adc	r31, r19
    9126:	c9 01       	movw	r24, r18
    9128:	80 0f       	add	r24, r16

  if (offset + len > SSIZE) 
    912a:	91 1f       	adc	r25, r17
    912c:	81 30       	cpi	r24, 0x01	; 1
    912e:	98 40       	sbci	r25, 0x08	; 8
    9130:	98 f0       	brcs	.+38     	; 0x9158 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0x96>
    9132:	c1 2c       	mov	r12, r1
    9134:	48 e0       	ldi	r20, 0x08	; 8
  {
    // Wrap around circular buffer
    uint16_t size = SSIZE - offset;
    9136:	d4 2e       	mov	r13, r20
    9138:	c2 1a       	sub	r12, r18
    913a:	d3 0a       	sbc	r13, r19
    913c:	a6 01       	movw	r20, r12
    913e:	b5 01       	movw	r22, r10
    write(dstAddr, data, size);
    9140:	cf 01       	movw	r24, r30
    9142:	1c df       	rcall	.-456    	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>
    9144:	a8 01       	movw	r20, r16
    9146:	4c 19       	sub	r20, r12
    9148:	5d 09       	sbc	r21, r13
    write(SBASE[s], data + size, len - size);
    914a:	b5 01       	movw	r22, r10
    914c:	6c 0d       	add	r22, r12
    914e:	7d 1d       	adc	r23, r13
    9150:	f3 01       	movw	r30, r6
    9152:	80 81       	ld	r24, Z
    9154:	91 81       	ldd	r25, Z+1	; 0x01
    9156:	03 c0       	rjmp	.+6      	; 0x915e <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0x9c>
    9158:	a8 01       	movw	r20, r16
    915a:	b5 01       	movw	r22, r10
    915c:	cf 01       	movw	r24, r30
  } 
  else {
    write(dstAddr, data, len);
    915e:	0e df       	rcall	.-484    	; 0x8f7c <_ZN10W5100Class5writeEjPKhj>
    9160:	e0 0e       	add	r14, r16
    9162:	f1 1e       	adc	r15, r17
    9164:	4f 2d       	mov	r20, r15
    9166:	64 e2       	ldi	r22, 0x24	; 36
  }

  ptr += len;
    9168:	70 e0       	ldi	r23, 0x00	; 0
    916a:	89 2d       	mov	r24, r9
    916c:	03 db       	rcall	.-2554   	; 0x8774 <_ZN10W5100Class7writeSnEhjh>
    916e:	4e 2d       	mov	r20, r14
    9170:	65 e2       	ldi	r22, 0x25	; 37
    9172:	70 e0       	ldi	r23, 0x00	; 0
    9174:	89 2d       	mov	r24, r9
    9176:	0f 90       	pop	r0
    9178:	df 91       	pop	r29
    917a:	cf 91       	pop	r28
    917c:	1f 91       	pop	r17
    917e:	0f 91       	pop	r16
  writeSnTX_WR(s, ptr);
}
    9180:	ff 90       	pop	r15
    9182:	ef 90       	pop	r14
    9184:	df 90       	pop	r13
    9186:	cf 90       	pop	r12
    9188:	bf 90       	pop	r11
    918a:	af 90       	pop	r10
    918c:	9f 90       	pop	r9
    918e:	7f 90       	pop	r7
    9190:	6f 90       	pop	r6
    9192:	f0 ca       	rjmp	.-2592   	; 0x8774 <_ZN10W5100Class7writeSnEhjh>

00009194 <_ZN10W5100Class20send_data_processingEhPKhj>:
    9194:	0f 93       	push	r16
    9196:	1f 93       	push	r17
    9198:	89 01       	movw	r16, r18
    919a:	9a 01       	movw	r18, r20
    919c:	40 e0       	ldi	r20, 0x00	; 0
    919e:	50 e0       	ldi	r21, 0x00	; 0


void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    91a0:	90 df       	rcall	.-224    	; 0x90c2 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
    91a2:	1f 91       	pop	r17
}
    91a4:	0f 91       	pop	r16
    91a6:	08 95       	ret

000091a8 <_ZN10W5100Class4readEjPhj>:
    91a8:	cf 92       	push	r12
#endif
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
    91aa:	df 92       	push	r13
    91ac:	ef 92       	push	r14
    91ae:	ff 92       	push	r15
    91b0:	0f 93       	push	r16
    91b2:	1f 93       	push	r17
    91b4:	cf 93       	push	r28
    91b6:	df 93       	push	r29
    91b8:	ec 01       	movw	r28, r24
    91ba:	7a 01       	movw	r14, r20
    91bc:	8b 01       	movw	r16, r22
    91be:	6c 01       	movw	r12, r24
    91c0:	c4 0e       	add	r12, r20
    91c2:	d5 1e       	adc	r13, r21
  for (uint16_t i=0; i<_len; i++)
    91c4:	cc 15       	cp	r28, r12
    91c6:	dd 05       	cpc	r29, r13
    91c8:	79 f0       	breq	.+30     	; 0x91e8 <_ZN10W5100Class4readEjPhj+0x40>
  {
#if defined(ARDUINO_ARCH_AVR)
    setSS();
    91ca:	54 de       	rcall	.-856    	; 0x8e74 <_ZN10W5100Class5setSSEv>
    91cc:	8f e0       	ldi	r24, 0x0F	; 15
    SPI.transfer(0x0F);
    91ce:	4b de       	rcall	.-874    	; 0x8e66 <_ZN8SPIClass8transferEh>
    91d0:	8d 2f       	mov	r24, r29
    91d2:	49 de       	rcall	.-878    	; 0x8e66 <_ZN8SPIClass8transferEh>
    SPI.transfer(_addr >> 8);
    91d4:	8c 2f       	mov	r24, r28
    91d6:	47 de       	rcall	.-882    	; 0x8e66 <_ZN8SPIClass8transferEh>
    91d8:	21 96       	adiw	r28, 0x01	; 1
    SPI.transfer(_addr & 0xFF);
    91da:	80 e0       	ldi	r24, 0x00	; 0
    91dc:	44 de       	rcall	.-888    	; 0x8e66 <_ZN8SPIClass8transferEh>
    91de:	f8 01       	movw	r30, r16
    _addr++;
    91e0:	81 93       	st	Z+, r24
    _buf[i] = SPI.transfer(0);
    91e2:	8f 01       	movw	r16, r30
    91e4:	49 de       	rcall	.-878    	; 0x8e78 <_ZN10W5100Class7resetSSEv>
    91e6:	ee cf       	rjmp	.-36     	; 0x91c4 <_ZN10W5100Class4readEjPhj+0x1c>
    91e8:	c7 01       	movw	r24, r14
    91ea:	df 91       	pop	r29
    91ec:	cf 91       	pop	r28
    resetSS();
    91ee:	1f 91       	pop	r17
    91f0:	0f 91       	pop	r16
    91f2:	ff 90       	pop	r15
    _buf[i] = SPI.transfer(SPI_CS, 0);
    _addr++;
#endif
  }
  return _len;
}
    91f4:	ef 90       	pop	r14
    91f6:	df 90       	pop	r13
    91f8:	cf 90       	pop	r12
    91fa:	08 95       	ret

000091fc <_ZN10W5100Class9read_dataEhjPVhj>:
    91fc:	af 92       	push	r10
    91fe:	bf 92       	push	r11
    9200:	cf 92       	push	r12
    9202:	df 92       	push	r13
    9204:	ef 92       	push	r14
    9206:	ff 92       	push	r15
    writeSnRX_RD(s, ptr);
  }
}

void W5100Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    9208:	0f 93       	push	r16
    920a:	1f 93       	push	r17
    920c:	cf 93       	push	r28
    920e:	df 93       	push	r29
    9210:	1f 92       	push	r1
    9212:	1f 92       	push	r1
    9214:	cd b7       	in	r28, 0x3d	; 61
    9216:	de b7       	in	r29, 0x3e	; 62
    9218:	5a 83       	std	Y+2, r21	; 0x02
    921a:	49 83       	std	Y+1, r20	; 0x01
    921c:	59 01       	movw	r10, r18
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  src_mask = src & RMASK;
    921e:	e9 81       	ldd	r30, Y+1	; 0x01
    9220:	fa 81       	ldd	r31, Y+2	; 0x02
    9222:	f7 70       	andi	r31, 0x07	; 7
    9224:	7c 01       	movw	r14, r24
    9226:	e6 0e       	add	r14, r22
    9228:	f1 1c       	adc	r15, r1
    922a:	e6 0e       	add	r14, r22
    922c:	f1 1c       	adc	r15, r1
  src_ptr = RBASE[s] + src_mask;
    922e:	d7 01       	movw	r26, r14
    9230:	18 96       	adiw	r26, 0x08	; 8
    9232:	8d 91       	ld	r24, X+
    9234:	9c 91       	ld	r25, X
    9236:	19 97       	sbiw	r26, 0x09	; 9
    9238:	8e 0f       	add	r24, r30
    923a:	9f 1f       	adc	r25, r31

  if( (src_mask + len) > RSIZE ) 
    923c:	98 01       	movw	r18, r16
    923e:	2e 0f       	add	r18, r30
    9240:	3f 1f       	adc	r19, r31
    9242:	21 30       	cpi	r18, 0x01	; 1
    9244:	38 40       	sbci	r19, 0x08	; 8
    9246:	90 f0       	brcs	.+36     	; 0x926c <_ZN10W5100Class9read_dataEhjPVhj+0x70>
  {
    size = RSIZE - src_mask;
    9248:	c1 2c       	mov	r12, r1
    924a:	68 e0       	ldi	r22, 0x08	; 8
    924c:	d6 2e       	mov	r13, r22
    924e:	ce 1a       	sub	r12, r30
    9250:	df 0a       	sbc	r13, r31
    read(src_ptr, (uint8_t *)dst, size);
    9252:	a6 01       	movw	r20, r12
    9254:	b5 01       	movw	r22, r10
    9256:	a8 df       	rcall	.-176    	; 0x91a8 <_ZN10W5100Class4readEjPhj>
    9258:	a8 01       	movw	r20, r16
    dst += size;
    read(RBASE[s], (uint8_t *) dst, len - size);
    925a:	4c 19       	sub	r20, r12
    925c:	5d 09       	sbc	r21, r13
    925e:	b5 01       	movw	r22, r10

  if( (src_mask + len) > RSIZE ) 
  {
    size = RSIZE - src_mask;
    read(src_ptr, (uint8_t *)dst, size);
    dst += size;
    9260:	6c 0d       	add	r22, r12
    9262:	7d 1d       	adc	r23, r13
    9264:	f7 01       	movw	r30, r14
    read(RBASE[s], (uint8_t *) dst, len - size);
    9266:	80 85       	ldd	r24, Z+8	; 0x08
    9268:	91 85       	ldd	r25, Z+9	; 0x09
    926a:	02 c0       	rjmp	.+4      	; 0x9270 <_ZN10W5100Class9read_dataEhjPVhj+0x74>
    926c:	a8 01       	movw	r20, r16
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
    926e:	b5 01       	movw	r22, r10
    9270:	0f 90       	pop	r0
}
    9272:	0f 90       	pop	r0
    9274:	df 91       	pop	r29
    9276:	cf 91       	pop	r28
    9278:	1f 91       	pop	r17
    927a:	0f 91       	pop	r16
    927c:	ff 90       	pop	r15
    927e:	ef 90       	pop	r14
    9280:	df 90       	pop	r13
    9282:	cf 90       	pop	r12
    9284:	bf 90       	pop	r11
    9286:	af 90       	pop	r10
    9288:	8f cf       	rjmp	.-226    	; 0x91a8 <_ZN10W5100Class4readEjPhj>

0000928a <_ZN10W5100Class20recv_data_processingEhPhjh>:
    read(src_ptr, (uint8_t *)dst, size);
    dst += size;
    read(RBASE[s], (uint8_t *) dst, len - size);
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
    928a:	8f 92       	push	r8
    928c:	9f 92       	push	r9
  writeSnTX_WR(s, ptr);
}


void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
{
    928e:	af 92       	push	r10
    9290:	bf 92       	push	r11
    9292:	cf 92       	push	r12
    9294:	df 92       	push	r13
    9296:	ef 92       	push	r14
    9298:	ff 92       	push	r15
    929a:	0f 93       	push	r16
    929c:	1f 93       	push	r17
    929e:	cf 93       	push	r28
    92a0:	df 93       	push	r29
    92a2:	6c 01       	movw	r12, r24
    92a4:	96 2e       	mov	r9, r22
    92a6:	5a 01       	movw	r10, r20
    92a8:	79 01       	movw	r14, r18
    92aa:	80 2e       	mov	r8, r16
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    92ac:	68 e2       	ldi	r22, 0x28	; 40
    92ae:	70 e0       	ldi	r23, 0x00	; 0
    92b0:	89 2d       	mov	r24, r9
    92b2:	54 da       	rcall	.-2904   	; 0x875c <_ZN10W5100Class6readSnEhj>
    92b4:	c8 2f       	mov	r28, r24
    92b6:	d0 e0       	ldi	r29, 0x00	; 0
    92b8:	69 e2       	ldi	r22, 0x29	; 41
    92ba:	70 e0       	ldi	r23, 0x00	; 0
    92bc:	89 2d       	mov	r24, r9
    92be:	4e da       	rcall	.-2916   	; 0x875c <_ZN10W5100Class6readSnEhj>
    92c0:	dc 2f       	mov	r29, r28
    92c2:	cc 27       	eor	r28, r28
    92c4:	c8 2b       	or	r28, r24
    92c6:	87 01       	movw	r16, r14
    92c8:	95 01       	movw	r18, r10
  uint16_t ptr;
  ptr = readSnRX_RD(s);
  read_data(s, ptr, data, len);
    92ca:	ae 01       	movw	r20, r28
    92cc:	69 2d       	mov	r22, r9
    92ce:	c6 01       	movw	r24, r12
    92d0:	95 df       	rcall	.-214    	; 0x91fc <_ZN10W5100Class9read_dataEhjPVhj>
    92d2:	81 10       	cpse	r8, r1
    92d4:	18 c0       	rjmp	.+48     	; 0x9306 <_ZN10W5100Class20recv_data_processingEhPhjh+0x7c>
    92d6:	ce 0d       	add	r28, r14
  if (!peek)
    92d8:	df 1d       	adc	r29, r15
    92da:	4d 2f       	mov	r20, r29
  {
    ptr += len;
    92dc:	68 e2       	ldi	r22, 0x28	; 40
    92de:	70 e0       	ldi	r23, 0x00	; 0
    92e0:	89 2d       	mov	r24, r9
    92e2:	48 da       	rcall	.-2928   	; 0x8774 <_ZN10W5100Class7writeSnEhjh>
    92e4:	4c 2f       	mov	r20, r28
    92e6:	69 e2       	ldi	r22, 0x29	; 41
    92e8:	70 e0       	ldi	r23, 0x00	; 0
    92ea:	89 2d       	mov	r24, r9
    92ec:	df 91       	pop	r29
    92ee:	cf 91       	pop	r28
    92f0:	1f 91       	pop	r17
    92f2:	0f 91       	pop	r16
    writeSnRX_RD(s, ptr);
  }
}
    92f4:	ff 90       	pop	r15
    92f6:	ef 90       	pop	r14
    92f8:	df 90       	pop	r13
    92fa:	cf 90       	pop	r12
    92fc:	bf 90       	pop	r11
    92fe:	af 90       	pop	r10
    9300:	9f 90       	pop	r9
    9302:	8f 90       	pop	r8
    9304:	37 ca       	rjmp	.-2962   	; 0x8774 <_ZN10W5100Class7writeSnEhjh>
    9306:	df 91       	pop	r29
    9308:	cf 91       	pop	r28
    930a:	1f 91       	pop	r17
    930c:	0f 91       	pop	r16
    930e:	ff 90       	pop	r15
    9310:	ef 90       	pop	r14
    9312:	df 90       	pop	r13
    9314:	cf 90       	pop	r12
    9316:	bf 90       	pop	r11
    9318:	af 90       	pop	r10
    931a:	9f 90       	pop	r9
    931c:	8f 90       	pop	r8
    931e:	08 95       	ret

00009320 <_ZN10W5100Class9execCmdSnEh7SockCMD>:
    9320:	cf 93       	push	r28
    9322:	c6 2f       	mov	r28, r22
    9324:	61 e0       	ldi	r22, 0x01	; 1
    9326:	70 e0       	ldi	r23, 0x00	; 0
    9328:	8c 2f       	mov	r24, r28
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
    932a:	24 da       	rcall	.-3000   	; 0x8774 <_ZN10W5100Class7writeSnEhjh>
    932c:	61 e0       	ldi	r22, 0x01	; 1
    932e:	70 e0       	ldi	r23, 0x00	; 0
    9330:	8c 2f       	mov	r24, r28
    9332:	14 da       	rcall	.-3032   	; 0x875c <_ZN10W5100Class6readSnEhj>
    9334:	81 11       	cpse	r24, r1
    9336:	fa cf       	rjmp	.-12     	; 0x932c <_ZN10W5100Class9execCmdSnEh7SockCMD+0xc>

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {
  // Send command to socket
  writeSnCR(s, _cmd);
  // Wait for command to complete
  while (readSnCR(s))
    9338:	cf 91       	pop	r28
    933a:	08 95       	ret

0000933c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    933c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    933e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    9340:	f8 94       	cli
  if (!initialized) {
    9342:	80 91 bc 08 	lds	r24, 0x08BC
    9346:	81 11       	cpse	r24, r1
    9348:	23 c0       	rjmp	.+70     	; 0x9390 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    934a:	e5 e5       	ldi	r30, 0x55	; 85
    934c:	f5 e1       	ldi	r31, 0x15	; 21
    934e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    9350:	ef e0       	ldi	r30, 0x0F	; 15
    9352:	f5 e1       	ldi	r31, 0x15	; 21
    9354:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    9356:	e8 2f       	mov	r30, r24
    9358:	f0 e0       	ldi	r31, 0x00	; 0
    935a:	ee 0f       	add	r30, r30
    935c:	ff 1f       	adc	r31, r31
    935e:	e6 56       	subi	r30, 0x66	; 102
    9360:	fa 4e       	sbci	r31, 0xEA	; 234
    9362:	a5 91       	lpm	r26, Z+
    9364:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    9366:	8c 91       	ld	r24, X
    9368:	89 23       	and	r24, r25
    936a:	19 f4       	brne	.+6      	; 0x9372 <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    936c:	61 e0       	ldi	r22, 0x01	; 1
    936e:	85 e3       	ldi	r24, 0x35	; 53
    9370:	a5 d1       	rcall	.+842    	; 0x96bc <digitalWrite>
    9372:	61 e0       	ldi	r22, 0x01	; 1
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    9374:	85 e3       	ldi	r24, 0x35	; 53
    9376:	69 d1       	rcall	.+722    	; 0x964a <pinMode>
    9378:	8c b5       	in	r24, 0x2c	; 44
    937a:	80 61       	ori	r24, 0x10	; 16

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    937c:	8c bd       	out	0x2c, r24	; 44
    937e:	8c b5       	in	r24, 0x2c	; 44
    9380:	80 64       	ori	r24, 0x40	; 64
    SPCR |= _BV(SPE);
    9382:	8c bd       	out	0x2c, r24	; 44
    9384:	61 e0       	ldi	r22, 0x01	; 1
    9386:	84 e3       	ldi	r24, 0x34	; 52
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    9388:	60 d1       	rcall	.+704    	; 0x964a <pinMode>
    938a:	61 e0       	ldi	r22, 0x01	; 1
    938c:	83 e3       	ldi	r24, 0x33	; 51
    938e:	5d d1       	rcall	.+698    	; 0x964a <pinMode>
    pinMode(MOSI, OUTPUT);
    9390:	80 91 bc 08 	lds	r24, 0x08BC
    9394:	8f 5f       	subi	r24, 0xFF	; 255
    9396:	80 93 bc 08 	sts	0x08BC, r24
  }
  initialized++; // reference count
    939a:	cf bf       	out	0x3f, r28	; 63
    939c:	cf 91       	pop	r28
    939e:	08 95       	ret

000093a0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    93a0:	08 95       	ret

000093a2 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    93a2:	1f 92       	push	r1
    93a4:	0f 92       	push	r0
    93a6:	0f b6       	in	r0, 0x3f	; 63
    93a8:	0f 92       	push	r0
    93aa:	11 24       	eor	r1, r1
    93ac:	2f 93       	push	r18
    93ae:	3f 93       	push	r19
    93b0:	8f 93       	push	r24
    93b2:	9f 93       	push	r25
    93b4:	af 93       	push	r26
    93b6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    93b8:	80 91 be 08 	lds	r24, 0x08BE
    93bc:	90 91 bf 08 	lds	r25, 0x08BF
    93c0:	a0 91 c0 08 	lds	r26, 0x08C0
    93c4:	b0 91 c1 08 	lds	r27, 0x08C1
	unsigned char f = timer0_fract;
    93c8:	30 91 bd 08 	lds	r19, 0x08BD

	m += MILLIS_INC;
	f += FRACT_INC;
    93cc:	23 e0       	ldi	r18, 0x03	; 3
    93ce:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    93d0:	2d 37       	cpi	r18, 0x7D	; 125
    93d2:	20 f4       	brcc	.+8      	; 0x93dc <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    93d4:	01 96       	adiw	r24, 0x01	; 1
    93d6:	a1 1d       	adc	r26, r1
    93d8:	b1 1d       	adc	r27, r1
    93da:	05 c0       	rjmp	.+10     	; 0x93e6 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    93dc:	26 e8       	ldi	r18, 0x86	; 134
    93de:	23 0f       	add	r18, r19
		m += 1;
    93e0:	02 96       	adiw	r24, 0x02	; 2
    93e2:	a1 1d       	adc	r26, r1
    93e4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    93e6:	20 93 bd 08 	sts	0x08BD, r18
	timer0_millis = m;
    93ea:	80 93 be 08 	sts	0x08BE, r24
    93ee:	90 93 bf 08 	sts	0x08BF, r25
    93f2:	a0 93 c0 08 	sts	0x08C0, r26
    93f6:	b0 93 c1 08 	sts	0x08C1, r27
	timer0_overflow_count++;
    93fa:	80 91 c2 08 	lds	r24, 0x08C2
    93fe:	90 91 c3 08 	lds	r25, 0x08C3
    9402:	a0 91 c4 08 	lds	r26, 0x08C4
    9406:	b0 91 c5 08 	lds	r27, 0x08C5
    940a:	01 96       	adiw	r24, 0x01	; 1
    940c:	a1 1d       	adc	r26, r1
    940e:	b1 1d       	adc	r27, r1
    9410:	80 93 c2 08 	sts	0x08C2, r24
    9414:	90 93 c3 08 	sts	0x08C3, r25
    9418:	a0 93 c4 08 	sts	0x08C4, r26
    941c:	b0 93 c5 08 	sts	0x08C5, r27
}
    9420:	bf 91       	pop	r27
    9422:	af 91       	pop	r26
    9424:	9f 91       	pop	r25
    9426:	8f 91       	pop	r24
    9428:	3f 91       	pop	r19
    942a:	2f 91       	pop	r18
    942c:	0f 90       	pop	r0
    942e:	0f be       	out	0x3f, r0	; 63
    9430:	0f 90       	pop	r0
    9432:	1f 90       	pop	r1
    9434:	18 95       	reti

00009436 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    9436:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    9438:	f8 94       	cli
	m = timer0_millis;
    943a:	60 91 be 08 	lds	r22, 0x08BE
    943e:	70 91 bf 08 	lds	r23, 0x08BF
    9442:	80 91 c0 08 	lds	r24, 0x08C0
    9446:	90 91 c1 08 	lds	r25, 0x08C1
	SREG = oldSREG;
    944a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    944c:	08 95       	ret

0000944e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    944e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    9450:	f8 94       	cli
	m = timer0_overflow_count;
    9452:	80 91 c2 08 	lds	r24, 0x08C2
    9456:	90 91 c3 08 	lds	r25, 0x08C3
    945a:	a0 91 c4 08 	lds	r26, 0x08C4
    945e:	b0 91 c5 08 	lds	r27, 0x08C5
#if defined(TCNT0)
	t = TCNT0;
    9462:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    9464:	a8 9b       	sbis	0x15, 0	; 21
    9466:	05 c0       	rjmp	.+10     	; 0x9472 <micros+0x24>
    9468:	2f 3f       	cpi	r18, 0xFF	; 255
    946a:	19 f0       	breq	.+6      	; 0x9472 <micros+0x24>
		m++;
    946c:	01 96       	adiw	r24, 0x01	; 1
    946e:	a1 1d       	adc	r26, r1
    9470:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    9472:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    9474:	66 27       	eor	r22, r22
    9476:	78 2f       	mov	r23, r24
    9478:	89 2f       	mov	r24, r25
    947a:	9a 2f       	mov	r25, r26
    947c:	62 0f       	add	r22, r18
    947e:	71 1d       	adc	r23, r1
    9480:	81 1d       	adc	r24, r1
    9482:	91 1d       	adc	r25, r1
    9484:	42 e0       	ldi	r20, 0x02	; 2
    9486:	66 0f       	add	r22, r22
    9488:	77 1f       	adc	r23, r23
    948a:	88 1f       	adc	r24, r24
    948c:	99 1f       	adc	r25, r25
    948e:	4a 95       	dec	r20
    9490:	d1 f7       	brne	.-12     	; 0x9486 <micros+0x38>
}
    9492:	08 95       	ret

00009494 <delay>:

void delay(unsigned long ms)
{
    9494:	cf 92       	push	r12
    9496:	df 92       	push	r13
    9498:	ef 92       	push	r14
    949a:	ff 92       	push	r15
    949c:	cf 93       	push	r28
    949e:	df 93       	push	r29
    94a0:	6b 01       	movw	r12, r22
    94a2:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    94a4:	d4 df       	rcall	.-88     	; 0x944e <micros>
    94a6:	eb 01       	movw	r28, r22
    94a8:	c1 14       	cp	r12, r1

	while (ms > 0) {
    94aa:	d1 04       	cpc	r13, r1
    94ac:	e1 04       	cpc	r14, r1
    94ae:	f1 04       	cpc	r15, r1
    94b0:	79 f0       	breq	.+30     	; 0x94d0 <delay+0x3c>
    94b2:	76 df       	rcall	.-276    	; 0x93a0 <yield>
		yield();
    94b4:	cc df       	rcall	.-104    	; 0x944e <micros>
    94b6:	6c 1b       	sub	r22, r28
		if (((uint16_t)micros() - start) >= 1000) {
    94b8:	7d 0b       	sbc	r23, r29
    94ba:	68 3e       	cpi	r22, 0xE8	; 232
    94bc:	73 40       	sbci	r23, 0x03	; 3
    94be:	a0 f3       	brcs	.-24     	; 0x94a8 <delay+0x14>
    94c0:	81 e0       	ldi	r24, 0x01	; 1
    94c2:	c8 1a       	sub	r12, r24
    94c4:	d1 08       	sbc	r13, r1
			ms--;
    94c6:	e1 08       	sbc	r14, r1
    94c8:	f1 08       	sbc	r15, r1
    94ca:	c8 51       	subi	r28, 0x18	; 24
    94cc:	dc 4f       	sbci	r29, 0xFC	; 252
    94ce:	ec cf       	rjmp	.-40     	; 0x94a8 <delay+0x14>
			start += 1000;
    94d0:	df 91       	pop	r29
    94d2:	cf 91       	pop	r28
    94d4:	ff 90       	pop	r15
		}
	}
}
    94d6:	ef 90       	pop	r14
    94d8:	df 90       	pop	r13
    94da:	cf 90       	pop	r12
    94dc:	08 95       	ret

000094de <init>:
    94de:	78 94       	sei
    94e0:	84 b5       	in	r24, 0x24	; 36
    94e2:	82 60       	ori	r24, 0x02	; 2
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    94e4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    94e6:	84 b5       	in	r24, 0x24	; 36
    94e8:	81 60       	ori	r24, 0x01	; 1
    94ea:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    94ec:	85 b5       	in	r24, 0x25	; 37
    94ee:	82 60       	ori	r24, 0x02	; 2
    94f0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    94f2:	85 b5       	in	r24, 0x25	; 37
    94f4:	81 60       	ori	r24, 0x01	; 1
    94f6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    94f8:	ee e6       	ldi	r30, 0x6E	; 110
    94fa:	f0 e0       	ldi	r31, 0x00	; 0
    94fc:	80 81       	ld	r24, Z
    94fe:	81 60       	ori	r24, 0x01	; 1
    9500:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    9502:	e1 e8       	ldi	r30, 0x81	; 129
    9504:	f0 e0       	ldi	r31, 0x00	; 0
    9506:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    9508:	80 81       	ld	r24, Z
    950a:	82 60       	ori	r24, 0x02	; 2
    950c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    950e:	80 81       	ld	r24, Z
    9510:	81 60       	ori	r24, 0x01	; 1
    9512:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    9514:	e0 e8       	ldi	r30, 0x80	; 128
    9516:	f0 e0       	ldi	r31, 0x00	; 0
    9518:	80 81       	ld	r24, Z
    951a:	81 60       	ori	r24, 0x01	; 1
    951c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    951e:	e1 eb       	ldi	r30, 0xB1	; 177
    9520:	f0 e0       	ldi	r31, 0x00	; 0
    9522:	80 81       	ld	r24, Z
    9524:	84 60       	ori	r24, 0x04	; 4
    9526:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    9528:	e0 eb       	ldi	r30, 0xB0	; 176
    952a:	f0 e0       	ldi	r31, 0x00	; 0
    952c:	80 81       	ld	r24, Z
    952e:	81 60       	ori	r24, 0x01	; 1
    9530:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    9532:	e1 e9       	ldi	r30, 0x91	; 145
    9534:	f0 e0       	ldi	r31, 0x00	; 0
    9536:	80 81       	ld	r24, Z
    9538:	82 60       	ori	r24, 0x02	; 2
    953a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    953c:	80 81       	ld	r24, Z
    953e:	81 60       	ori	r24, 0x01	; 1
    9540:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    9542:	e0 e9       	ldi	r30, 0x90	; 144
    9544:	f0 e0       	ldi	r31, 0x00	; 0
    9546:	80 81       	ld	r24, Z
    9548:	81 60       	ori	r24, 0x01	; 1
    954a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    954c:	e1 ea       	ldi	r30, 0xA1	; 161
    954e:	f0 e0       	ldi	r31, 0x00	; 0
    9550:	80 81       	ld	r24, Z
    9552:	82 60       	ori	r24, 0x02	; 2
    9554:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    9556:	80 81       	ld	r24, Z
    9558:	81 60       	ori	r24, 0x01	; 1
    955a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    955c:	e0 ea       	ldi	r30, 0xA0	; 160
    955e:	f0 e0       	ldi	r31, 0x00	; 0
    9560:	80 81       	ld	r24, Z
    9562:	81 60       	ori	r24, 0x01	; 1
    9564:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    9566:	e1 e2       	ldi	r30, 0x21	; 33
    9568:	f1 e0       	ldi	r31, 0x01	; 1
    956a:	80 81       	ld	r24, Z
    956c:	82 60       	ori	r24, 0x02	; 2
    956e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    9570:	80 81       	ld	r24, Z
    9572:	81 60       	ori	r24, 0x01	; 1
    9574:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    9576:	e0 e2       	ldi	r30, 0x20	; 32
    9578:	f1 e0       	ldi	r31, 0x01	; 1
    957a:	80 81       	ld	r24, Z
    957c:	81 60       	ori	r24, 0x01	; 1
    957e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    9580:	ea e7       	ldi	r30, 0x7A	; 122
    9582:	f0 e0       	ldi	r31, 0x00	; 0
    9584:	80 81       	ld	r24, Z
    9586:	84 60       	ori	r24, 0x04	; 4
    9588:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    958a:	80 81       	ld	r24, Z
    958c:	82 60       	ori	r24, 0x02	; 2
    958e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    9590:	80 81       	ld	r24, Z
    9592:	81 60       	ori	r24, 0x01	; 1
    9594:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    9596:	80 81       	ld	r24, Z
    9598:	80 68       	ori	r24, 0x80	; 128
    959a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    959c:	10 92 c1 00 	sts	0x00C1, r1
    95a0:	08 95       	ret

000095a2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    95a2:	90 e0       	ldi	r25, 0x00	; 0
    95a4:	fc 01       	movw	r30, r24
    95a6:	31 97       	sbiw	r30, 0x01	; 1
    95a8:	e2 31       	cpi	r30, 0x12	; 18
    95aa:	f1 05       	cpc	r31, r1
    95ac:	08 f0       	brcs	.+2      	; 0x95b0 <turnOffPWM+0xe>
    95ae:	4c c0       	rjmp	.+152    	; 0x9648 <turnOffPWM+0xa6>
    95b0:	ee 58       	subi	r30, 0x8E	; 142
    95b2:	ff 4f       	sbci	r31, 0xFF	; 255
    95b4:	0c 94 a9 57 	jmp	0xaf52	; 0xaf52 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    95b8:	80 91 80 00 	lds	r24, 0x0080
    95bc:	8f 77       	andi	r24, 0x7F	; 127
    95be:	03 c0       	rjmp	.+6      	; 0x95c6 <turnOffPWM+0x24>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    95c0:	80 91 80 00 	lds	r24, 0x0080
    95c4:	8f 7d       	andi	r24, 0xDF	; 223
    95c6:	80 93 80 00 	sts	0x0080, r24
    95ca:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    95cc:	80 91 80 00 	lds	r24, 0x0080
    95d0:	87 7f       	andi	r24, 0xF7	; 247
    95d2:	f9 cf       	rjmp	.-14     	; 0x95c6 <turnOffPWM+0x24>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    95d4:	84 b5       	in	r24, 0x24	; 36
    95d6:	8f 77       	andi	r24, 0x7F	; 127
    95d8:	02 c0       	rjmp	.+4      	; 0x95de <turnOffPWM+0x3c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    95da:	84 b5       	in	r24, 0x24	; 36
    95dc:	8f 7d       	andi	r24, 0xDF	; 223
    95de:	84 bd       	out	0x24, r24	; 36
    95e0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    95e2:	80 91 b0 00 	lds	r24, 0x00B0
    95e6:	8f 77       	andi	r24, 0x7F	; 127
    95e8:	03 c0       	rjmp	.+6      	; 0x95f0 <turnOffPWM+0x4e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    95ea:	80 91 b0 00 	lds	r24, 0x00B0
    95ee:	8f 7d       	andi	r24, 0xDF	; 223
    95f0:	80 93 b0 00 	sts	0x00B0, r24
    95f4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    95f6:	80 91 90 00 	lds	r24, 0x0090
    95fa:	8f 77       	andi	r24, 0x7F	; 127
    95fc:	07 c0       	rjmp	.+14     	; 0x960c <turnOffPWM+0x6a>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    95fe:	80 91 90 00 	lds	r24, 0x0090
    9602:	8f 7d       	andi	r24, 0xDF	; 223
    9604:	03 c0       	rjmp	.+6      	; 0x960c <turnOffPWM+0x6a>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    9606:	80 91 90 00 	lds	r24, 0x0090
    960a:	87 7f       	andi	r24, 0xF7	; 247
    960c:	80 93 90 00 	sts	0x0090, r24
    9610:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    9612:	80 91 a0 00 	lds	r24, 0x00A0
    9616:	8f 77       	andi	r24, 0x7F	; 127
    9618:	07 c0       	rjmp	.+14     	; 0x9628 <turnOffPWM+0x86>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    961a:	80 91 a0 00 	lds	r24, 0x00A0
    961e:	8f 7d       	andi	r24, 0xDF	; 223
    9620:	03 c0       	rjmp	.+6      	; 0x9628 <turnOffPWM+0x86>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    9622:	80 91 a0 00 	lds	r24, 0x00A0
    9626:	87 7f       	andi	r24, 0xF7	; 247
    9628:	80 93 a0 00 	sts	0x00A0, r24
    962c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    962e:	80 91 20 01 	lds	r24, 0x0120
    9632:	8f 77       	andi	r24, 0x7F	; 127
    9634:	07 c0       	rjmp	.+14     	; 0x9644 <turnOffPWM+0xa2>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    9636:	80 91 20 01 	lds	r24, 0x0120
    963a:	8f 7d       	andi	r24, 0xDF	; 223
    963c:	03 c0       	rjmp	.+6      	; 0x9644 <turnOffPWM+0xa2>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    963e:	80 91 20 01 	lds	r24, 0x0120
    9642:	87 7f       	andi	r24, 0xF7	; 247
    9644:	80 93 20 01 	sts	0x0120, r24
    9648:	08 95       	ret

0000964a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    964a:	cf 93       	push	r28
    964c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    964e:	90 e0       	ldi	r25, 0x00	; 0
    9650:	fc 01       	movw	r30, r24
    9652:	e6 52       	subi	r30, 0x26	; 38
    9654:	fb 4e       	sbci	r31, 0xEB	; 235
    9656:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    9658:	fc 01       	movw	r30, r24
    965a:	e0 5e       	subi	r30, 0xE0	; 224
    965c:	fa 4e       	sbci	r31, 0xEA	; 234
    965e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    9660:	88 23       	and	r24, r24
    9662:	49 f1       	breq	.+82     	; 0x96b6 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    9664:	90 e0       	ldi	r25, 0x00	; 0
    9666:	88 0f       	add	r24, r24
    9668:	99 1f       	adc	r25, r25
    966a:	fc 01       	movw	r30, r24
    966c:	e6 56       	subi	r30, 0x66	; 102
    966e:	fa 4e       	sbci	r31, 0xEA	; 234
    9670:	a5 91       	lpm	r26, Z+
    9672:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    9674:	80 58       	subi	r24, 0x80	; 128
    9676:	9a 4e       	sbci	r25, 0xEA	; 234
    9678:	fc 01       	movw	r30, r24
    967a:	c5 91       	lpm	r28, Z+
    967c:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    967e:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    9680:	61 11       	cpse	r22, r1
    9682:	08 c0       	rjmp	.+16     	; 0x9694 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
    9684:	f8 94       	cli
		*reg &= ~bit;
    9686:	8c 91       	ld	r24, X
    9688:	20 95       	com	r18
    968a:	82 23       	and	r24, r18
    968c:	8c 93       	st	X, r24
		*out &= ~bit;
    968e:	88 81       	ld	r24, Y
    9690:	82 23       	and	r24, r18
    9692:	0a c0       	rjmp	.+20     	; 0x96a8 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    9694:	62 30       	cpi	r22, 0x02	; 2
    9696:	51 f4       	brne	.+20     	; 0x96ac <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
    9698:	f8 94       	cli
		*reg &= ~bit;
    969a:	8c 91       	ld	r24, X
    969c:	32 2f       	mov	r19, r18
    969e:	30 95       	com	r19
    96a0:	83 23       	and	r24, r19
    96a2:	8c 93       	st	X, r24
		*out |= bit;
    96a4:	88 81       	ld	r24, Y
    96a6:	82 2b       	or	r24, r18
    96a8:	88 83       	st	Y, r24
    96aa:	04 c0       	rjmp	.+8      	; 0x96b4 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
    96ac:	f8 94       	cli
		*reg |= bit;
    96ae:	8c 91       	ld	r24, X
    96b0:	82 2b       	or	r24, r18
    96b2:	8c 93       	st	X, r24
		SREG = oldSREG;
    96b4:	9f bf       	out	0x3f, r25	; 63
	}
}
    96b6:	df 91       	pop	r29
    96b8:	cf 91       	pop	r28
    96ba:	08 95       	ret

000096bc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    96bc:	0f 93       	push	r16
    96be:	1f 93       	push	r17
    96c0:	cf 93       	push	r28
    96c2:	df 93       	push	r29
    96c4:	1f 92       	push	r1
    96c6:	cd b7       	in	r28, 0x3d	; 61
    96c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    96ca:	28 2f       	mov	r18, r24
    96cc:	30 e0       	ldi	r19, 0x00	; 0
    96ce:	f9 01       	movw	r30, r18
    96d0:	ec 56       	subi	r30, 0x6C	; 108
    96d2:	fb 4e       	sbci	r31, 0xEB	; 235
    96d4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    96d6:	f9 01       	movw	r30, r18
    96d8:	e6 52       	subi	r30, 0x26	; 38
    96da:	fb 4e       	sbci	r31, 0xEB	; 235
    96dc:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    96de:	f9 01       	movw	r30, r18
    96e0:	e0 5e       	subi	r30, 0xE0	; 224
    96e2:	fa 4e       	sbci	r31, 0xEA	; 234
    96e4:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    96e6:	00 23       	and	r16, r16
    96e8:	c1 f0       	breq	.+48     	; 0x971a <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    96ea:	88 23       	and	r24, r24
    96ec:	19 f0       	breq	.+6      	; 0x96f4 <digitalWrite+0x38>
    96ee:	69 83       	std	Y+1, r22	; 0x01
    96f0:	58 df       	rcall	.-336    	; 0x95a2 <turnOffPWM>
    96f2:	69 81       	ldd	r22, Y+1	; 0x01
    96f4:	e0 2f       	mov	r30, r16

	out = portOutputRegister(port);
    96f6:	f0 e0       	ldi	r31, 0x00	; 0
    96f8:	ee 0f       	add	r30, r30
    96fa:	ff 1f       	adc	r31, r31
    96fc:	e0 58       	subi	r30, 0x80	; 128
    96fe:	fa 4e       	sbci	r31, 0xEA	; 234
    9700:	a5 91       	lpm	r26, Z+
    9702:	b4 91       	lpm	r27, Z
    9704:	9f b7       	in	r25, 0x3f	; 63

	uint8_t oldSREG = SREG;
    9706:	f8 94       	cli
	cli();
    9708:	8c 91       	ld	r24, X

	if (val == LOW) {
		*out &= ~bit;
    970a:	61 11       	cpse	r22, r1
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    970c:	03 c0       	rjmp	.+6      	; 0x9714 <digitalWrite+0x58>
    970e:	10 95       	com	r17
		*out &= ~bit;
    9710:	81 23       	and	r24, r17
    9712:	01 c0       	rjmp	.+2      	; 0x9716 <digitalWrite+0x5a>
    9714:	81 2b       	or	r24, r17
	} else {
		*out |= bit;
    9716:	8c 93       	st	X, r24
    9718:	9f bf       	out	0x3f, r25	; 63
	}

	SREG = oldSREG;
    971a:	0f 90       	pop	r0
}
    971c:	df 91       	pop	r29
    971e:	cf 91       	pop	r28
    9720:	1f 91       	pop	r17
    9722:	0f 91       	pop	r16
    9724:	08 95       	ret

00009726 <digitalRead>:
    9726:	cf 93       	push	r28

int digitalRead(uint8_t pin)
{
    9728:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    972a:	28 2f       	mov	r18, r24
    972c:	30 e0       	ldi	r19, 0x00	; 0
    972e:	f9 01       	movw	r30, r18
    9730:	ec 56       	subi	r30, 0x6C	; 108
    9732:	fb 4e       	sbci	r31, 0xEB	; 235
    9734:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    9736:	f9 01       	movw	r30, r18
    9738:	e6 52       	subi	r30, 0x26	; 38
    973a:	fb 4e       	sbci	r31, 0xEB	; 235
    973c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    973e:	f9 01       	movw	r30, r18
    9740:	e0 5e       	subi	r30, 0xE0	; 224
    9742:	fa 4e       	sbci	r31, 0xEA	; 234
    9744:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    9746:	cc 23       	and	r28, r28
    9748:	89 f0       	breq	.+34     	; 0x976c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    974a:	81 11       	cpse	r24, r1
    974c:	2a df       	rcall	.-428    	; 0x95a2 <turnOffPWM>
    974e:	ec 2f       	mov	r30, r28

	if (*portInputRegister(port) & bit) return HIGH;
    9750:	f0 e0       	ldi	r31, 0x00	; 0
    9752:	ee 0f       	add	r30, r30
    9754:	ff 1f       	adc	r31, r31
    9756:	ea 59       	subi	r30, 0x9A	; 154
    9758:	fa 4e       	sbci	r31, 0xEA	; 234
    975a:	a5 91       	lpm	r26, Z+
    975c:	b4 91       	lpm	r27, Z
    975e:	2c 91       	ld	r18, X
    9760:	2d 23       	and	r18, r29
    9762:	81 e0       	ldi	r24, 0x01	; 1
    9764:	90 e0       	ldi	r25, 0x00	; 0
    9766:	21 f4       	brne	.+8      	; 0x9770 <digitalRead+0x4a>
    9768:	80 e0       	ldi	r24, 0x00	; 0
    976a:	02 c0       	rjmp	.+4      	; 0x9770 <digitalRead+0x4a>
    976c:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    976e:	90 e0       	ldi	r25, 0x00	; 0
    9770:	df 91       	pop	r29
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    9772:	cf 91       	pop	r28
    9774:	08 95       	ret

00009776 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    9776:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    9778:	81 8d       	ldd	r24, Z+25	; 0x19
    977a:	22 8d       	ldd	r18, Z+26	; 0x1a
    977c:	90 e0       	ldi	r25, 0x00	; 0
    977e:	80 5c       	subi	r24, 0xC0	; 192
    9780:	9f 4f       	sbci	r25, 0xFF	; 255
    9782:	82 1b       	sub	r24, r18
    9784:	91 09       	sbc	r25, r1
}
    9786:	8f 73       	andi	r24, 0x3F	; 63
    9788:	99 27       	eor	r25, r25
    978a:	08 95       	ret

0000978c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    978c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    978e:	91 8d       	ldd	r25, Z+25	; 0x19
    9790:	82 8d       	ldd	r24, Z+26	; 0x1a
    9792:	98 17       	cp	r25, r24
    9794:	31 f0       	breq	.+12     	; 0x97a2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    9796:	82 8d       	ldd	r24, Z+26	; 0x1a
    9798:	e8 0f       	add	r30, r24
    979a:	f1 1d       	adc	r31, r1
    979c:	85 8d       	ldd	r24, Z+29	; 0x1d
    979e:	90 e0       	ldi	r25, 0x00	; 0
    97a0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    97a2:	8f ef       	ldi	r24, 0xFF	; 255
    97a4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    97a6:	08 95       	ret

000097a8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    97a8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    97aa:	91 8d       	ldd	r25, Z+25	; 0x19
    97ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    97ae:	98 17       	cp	r25, r24
    97b0:	61 f0       	breq	.+24     	; 0x97ca <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    97b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    97b4:	df 01       	movw	r26, r30
    97b6:	a8 0f       	add	r26, r24
    97b8:	b1 1d       	adc	r27, r1
    97ba:	5d 96       	adiw	r26, 0x1d	; 29
    97bc:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    97be:	92 8d       	ldd	r25, Z+26	; 0x1a
    97c0:	9f 5f       	subi	r25, 0xFF	; 255
    97c2:	9f 73       	andi	r25, 0x3F	; 63
    97c4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    97c6:	90 e0       	ldi	r25, 0x00	; 0
    97c8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    97ca:	8f ef       	ldi	r24, 0xFF	; 255
    97cc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    97ce:	08 95       	ret

000097d0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    97d0:	8a e8       	ldi	r24, 0x8A	; 138
    97d2:	9d e4       	ldi	r25, 0x4D	; 77
    97d4:	89 2b       	or	r24, r25
    97d6:	39 f0       	breq	.+14     	; 0x97e6 <_Z14serialEventRunv+0x16>
    97d8:	80 e0       	ldi	r24, 0x00	; 0
    97da:	90 e0       	ldi	r25, 0x00	; 0
    97dc:	89 2b       	or	r24, r25
    97de:	19 f0       	breq	.+6      	; 0x97e6 <_Z14serialEventRunv+0x16>
    97e0:	99 d1       	rcall	.+818    	; 0x9b14 <_Z17Serial0_availablev>
    97e2:	81 11       	cpse	r24, r1
    97e4:	24 c0       	rjmp	.+72     	; 0x982e <_Z14serialEventRunv+0x5e>
    97e6:	80 e0       	ldi	r24, 0x00	; 0
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    97e8:	90 e0       	ldi	r25, 0x00	; 0
    97ea:	89 2b       	or	r24, r25
    97ec:	41 f0       	breq	.+16     	; 0x97fe <_Z14serialEventRunv+0x2e>
    97ee:	80 e0       	ldi	r24, 0x00	; 0
    97f0:	90 e0       	ldi	r25, 0x00	; 0
    97f2:	89 2b       	or	r24, r25
    97f4:	21 f0       	breq	.+8      	; 0x97fe <_Z14serialEventRunv+0x2e>
    97f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    97fa:	81 11       	cpse	r24, r1
    97fc:	1b c0       	rjmp	.+54     	; 0x9834 <_Z14serialEventRunv+0x64>
    97fe:	80 e0       	ldi	r24, 0x00	; 0
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    9800:	90 e0       	ldi	r25, 0x00	; 0
    9802:	89 2b       	or	r24, r25
    9804:	41 f0       	breq	.+16     	; 0x9816 <_Z14serialEventRunv+0x46>
    9806:	80 e0       	ldi	r24, 0x00	; 0
    9808:	90 e0       	ldi	r25, 0x00	; 0
    980a:	89 2b       	or	r24, r25
    980c:	21 f0       	breq	.+8      	; 0x9816 <_Z14serialEventRunv+0x46>
    980e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    9812:	81 11       	cpse	r24, r1
    9814:	12 c0       	rjmp	.+36     	; 0x983a <_Z14serialEventRunv+0x6a>
    9816:	85 e3       	ldi	r24, 0x35	; 53
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    9818:	9e e4       	ldi	r25, 0x4E	; 78
    981a:	89 2b       	or	r24, r25
    981c:	99 f0       	breq	.+38     	; 0x9844 <_Z14serialEventRunv+0x74>
    981e:	80 e0       	ldi	r24, 0x00	; 0
    9820:	90 e0       	ldi	r25, 0x00	; 0
    9822:	89 2b       	or	r24, r25
    9824:	79 f0       	breq	.+30     	; 0x9844 <_Z14serialEventRunv+0x74>
    9826:	21 d2       	rcall	.+1090   	; 0x9c6a <_Z17Serial3_availablev>
    9828:	81 11       	cpse	r24, r1
    982a:	0a c0       	rjmp	.+20     	; 0x9840 <_Z14serialEventRunv+0x70>
    982c:	08 95       	ret
    982e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    9832:	d9 cf       	rjmp	.-78     	; 0x97e6 <_Z14serialEventRunv+0x16>
    9834:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    9838:	e2 cf       	rjmp	.-60     	; 0x97fe <_Z14serialEventRunv+0x2e>
    983a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    983e:	eb cf       	rjmp	.-42     	; 0x9816 <_Z14serialEventRunv+0x46>
    9840:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    9844:	08 95       	ret

00009846 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    9846:	fc 01       	movw	r30, r24
    9848:	84 8d       	ldd	r24, Z+28	; 0x1c

void HardwareSerial::_tx_udr_empty_irq(void)
{
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    984a:	df 01       	movw	r26, r30
    984c:	a8 0f       	add	r26, r24
    984e:	b1 1d       	adc	r27, r1
    9850:	a3 5a       	subi	r26, 0xA3	; 163
    9852:	bf 4f       	sbci	r27, 0xFF	; 255
    9854:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    9856:	84 8d       	ldd	r24, Z+28	; 0x1c
    9858:	90 e0       	ldi	r25, 0x00	; 0
    985a:	01 96       	adiw	r24, 0x01	; 1
    985c:	8f 73       	andi	r24, 0x3F	; 63
    985e:	99 27       	eor	r25, r25
    9860:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    9862:	a6 89       	ldd	r26, Z+22	; 0x16
    9864:	b7 89       	ldd	r27, Z+23	; 0x17
    9866:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    9868:	a0 89       	ldd	r26, Z+16	; 0x10
    986a:	b1 89       	ldd	r27, Z+17	; 0x11
    986c:	8c 91       	ld	r24, X
    986e:	80 64       	ori	r24, 0x40	; 64
    9870:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    9872:	93 8d       	ldd	r25, Z+27	; 0x1b
    9874:	84 8d       	ldd	r24, Z+28	; 0x1c
    9876:	98 13       	cpse	r25, r24
    9878:	06 c0       	rjmp	.+12     	; 0x9886 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    987a:	02 88       	ldd	r0, Z+18	; 0x12
    987c:	f3 89       	ldd	r31, Z+19	; 0x13
    987e:	e0 2d       	mov	r30, r0
    9880:	80 81       	ld	r24, Z
    9882:	8f 7d       	andi	r24, 0xDF	; 223
    9884:	80 83       	st	Z, r24
    9886:	08 95       	ret

00009888 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    9888:	cf 93       	push	r28
    988a:	df 93       	push	r29
    988c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    988e:	88 8d       	ldd	r24, Y+24	; 0x18
    9890:	88 23       	and	r24, r24
    9892:	c1 f0       	breq	.+48     	; 0x98c4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    9894:	ea 89       	ldd	r30, Y+18	; 0x12
    9896:	fb 89       	ldd	r31, Y+19	; 0x13
    9898:	80 81       	ld	r24, Z
    989a:	85 fd       	sbrc	r24, 5
    989c:	05 c0       	rjmp	.+10     	; 0x98a8 <_ZN14HardwareSerial5flushEv+0x20>
    989e:	a8 89       	ldd	r26, Y+16	; 0x10
    98a0:	b9 89       	ldd	r27, Y+17	; 0x11
    98a2:	8c 91       	ld	r24, X
    98a4:	86 fd       	sbrc	r24, 6
    98a6:	0e c0       	rjmp	.+28     	; 0x98c4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    98a8:	0f b6       	in	r0, 0x3f	; 63
    98aa:	07 fc       	sbrc	r0, 7
    98ac:	f5 cf       	rjmp	.-22     	; 0x9898 <_ZN14HardwareSerial5flushEv+0x10>
    98ae:	80 81       	ld	r24, Z
    98b0:	85 ff       	sbrs	r24, 5
    98b2:	f2 cf       	rjmp	.-28     	; 0x9898 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    98b4:	a8 89       	ldd	r26, Y+16	; 0x10
    98b6:	b9 89       	ldd	r27, Y+17	; 0x11
    98b8:	8c 91       	ld	r24, X
    98ba:	85 ff       	sbrs	r24, 5
    98bc:	ed cf       	rjmp	.-38     	; 0x9898 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    98be:	ce 01       	movw	r24, r28
    98c0:	c2 df       	rcall	.-124    	; 0x9846 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    98c2:	e8 cf       	rjmp	.-48     	; 0x9894 <_ZN14HardwareSerial5flushEv+0xc>
    98c4:	df 91       	pop	r29
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    98c6:	cf 91       	pop	r28
    98c8:	08 95       	ret

000098ca <_ZN14HardwareSerial5writeEh>:
    98ca:	cf 92       	push	r12

size_t HardwareSerial::write(uint8_t c)
{
    98cc:	df 92       	push	r13
    98ce:	ff 92       	push	r15
    98d0:	0f 93       	push	r16
    98d2:	1f 93       	push	r17
    98d4:	cf 93       	push	r28
    98d6:	df 93       	push	r29
    98d8:	1f 92       	push	r1
    98da:	cd b7       	in	r28, 0x3d	; 61
    98dc:	de b7       	in	r29, 0x3e	; 62
    98de:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    98e0:	dc 01       	movw	r26, r24
    98e2:	5b 96       	adiw	r26, 0x1b	; 27
    98e4:	9c 91       	ld	r25, X
    98e6:	5b 97       	sbiw	r26, 0x1b	; 27
    98e8:	5c 96       	adiw	r26, 0x1c	; 28
    98ea:	8c 91       	ld	r24, X
    98ec:	5c 97       	sbiw	r26, 0x1c	; 28
    98ee:	98 13       	cpse	r25, r24
    98f0:	07 c0       	rjmp	.+14     	; 0x9900 <_ZN14HardwareSerial5writeEh+0x36>
    98f2:	50 96       	adiw	r26, 0x10	; 16
    98f4:	ed 91       	ld	r30, X+
    98f6:	fc 91       	ld	r31, X
    98f8:	51 97       	sbiw	r26, 0x11	; 17
    98fa:	80 81       	ld	r24, Z
    98fc:	85 fd       	sbrc	r24, 5
    98fe:	31 c0       	rjmp	.+98     	; 0x9962 <_ZN14HardwareSerial5writeEh+0x98>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    9900:	f6 01       	movw	r30, r12
    9902:	03 8d       	ldd	r16, Z+27	; 0x1b
    9904:	10 e0       	ldi	r17, 0x00	; 0
    9906:	0f 5f       	subi	r16, 0xFF	; 255
    9908:	1f 4f       	sbci	r17, 0xFF	; 255
    990a:	0f 73       	andi	r16, 0x3F	; 63
    990c:	11 27       	eor	r17, r17
    990e:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    9910:	f6 01       	movw	r30, r12
    9912:	84 8d       	ldd	r24, Z+28	; 0x1c
    9914:	f8 12       	cpse	r15, r24
    9916:	10 c0       	rjmp	.+32     	; 0x9938 <_ZN14HardwareSerial5writeEh+0x6e>
    if (bit_is_clear(SREG, SREG_I)) {
    9918:	0f b6       	in	r0, 0x3f	; 63
    991a:	07 fc       	sbrc	r0, 7
    991c:	f9 cf       	rjmp	.-14     	; 0x9910 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    991e:	d6 01       	movw	r26, r12
    9920:	50 96       	adiw	r26, 0x10	; 16
    9922:	ed 91       	ld	r30, X+
    9924:	fc 91       	ld	r31, X
    9926:	51 97       	sbiw	r26, 0x11	; 17
    9928:	80 81       	ld	r24, Z
    992a:	85 ff       	sbrs	r24, 5
    992c:	f1 cf       	rjmp	.-30     	; 0x9910 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
    992e:	c6 01       	movw	r24, r12
    9930:	69 83       	std	Y+1, r22	; 0x01
    9932:	89 df       	rcall	.-238    	; 0x9846 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    9934:	69 81       	ldd	r22, Y+1	; 0x01
    9936:	ec cf       	rjmp	.-40     	; 0x9910 <_ZN14HardwareSerial5writeEh+0x46>
    9938:	83 8d       	ldd	r24, Z+27	; 0x1b
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    993a:	e8 0f       	add	r30, r24
    993c:	f1 1d       	adc	r31, r1
    993e:	e3 5a       	subi	r30, 0xA3	; 163
    9940:	ff 4f       	sbci	r31, 0xFF	; 255
    9942:	60 83       	st	Z, r22
    9944:	d6 01       	movw	r26, r12
  _tx_buffer_head = i;
    9946:	5b 96       	adiw	r26, 0x1b	; 27
    9948:	0c 93       	st	X, r16
    994a:	5b 97       	sbiw	r26, 0x1b	; 27
    994c:	52 96       	adiw	r26, 0x12	; 18
	
  sbi(*_ucsrb, UDRIE0);
    994e:	ed 91       	ld	r30, X+
    9950:	fc 91       	ld	r31, X
    9952:	53 97       	sbiw	r26, 0x13	; 19
    9954:	80 81       	ld	r24, Z
    9956:	80 62       	ori	r24, 0x20	; 32
    9958:	80 83       	st	Z, r24
    995a:	81 e0       	ldi	r24, 0x01	; 1
  _written = true;
    995c:	58 96       	adiw	r26, 0x18	; 24
    995e:	8c 93       	st	X, r24
    9960:	0d c0       	rjmp	.+26     	; 0x997c <_ZN14HardwareSerial5writeEh+0xb2>
    9962:	d6 01       	movw	r26, r12
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    9964:	56 96       	adiw	r26, 0x16	; 22
    9966:	ed 91       	ld	r30, X+
    9968:	fc 91       	ld	r31, X
    996a:	57 97       	sbiw	r26, 0x17	; 23
    996c:	60 83       	st	Z, r22
    996e:	50 96       	adiw	r26, 0x10	; 16
    sbi(*_ucsra, TXC0);
    9970:	ed 91       	ld	r30, X+
    9972:	fc 91       	ld	r31, X
    9974:	51 97       	sbiw	r26, 0x11	; 17
    9976:	80 81       	ld	r24, Z
    9978:	80 64       	ori	r24, 0x40	; 64
    997a:	80 83       	st	Z, r24
    997c:	81 e0       	ldi	r24, 0x01	; 1
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    997e:	90 e0       	ldi	r25, 0x00	; 0
    9980:	0f 90       	pop	r0
    9982:	df 91       	pop	r29
    9984:	cf 91       	pop	r28
    9986:	1f 91       	pop	r17
    9988:	0f 91       	pop	r16
    998a:	ff 90       	pop	r15
    998c:	df 90       	pop	r13
    998e:	cf 90       	pop	r12
    9990:	08 95       	ret

00009992 <_ZN14HardwareSerial5beginEmh>:
    9992:	bf 92       	push	r11
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    9994:	cf 92       	push	r12
    9996:	df 92       	push	r13
    9998:	ef 92       	push	r14
    999a:	ff 92       	push	r15
    999c:	cf 93       	push	r28
    999e:	df 93       	push	r29
    99a0:	ec 01       	movw	r28, r24
    99a2:	6a 01       	movw	r12, r20
    99a4:	7b 01       	movw	r14, r22
    99a6:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    99a8:	e8 89       	ldd	r30, Y+16	; 0x10
    99aa:	f9 89       	ldd	r31, Y+17	; 0x11
    99ac:	82 e0       	ldi	r24, 0x02	; 2
    99ae:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    99b0:	41 15       	cp	r20, r1
    99b2:	81 ee       	ldi	r24, 0xE1	; 225
    99b4:	58 07       	cpc	r21, r24
    99b6:	61 05       	cpc	r22, r1
    99b8:	71 05       	cpc	r23, r1
    99ba:	a1 f0       	breq	.+40     	; 0x99e4 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    99bc:	60 e0       	ldi	r22, 0x00	; 0
    99be:	79 e0       	ldi	r23, 0x09	; 9
    99c0:	8d e3       	ldi	r24, 0x3D	; 61
    99c2:	90 e0       	ldi	r25, 0x00	; 0
    99c4:	a7 01       	movw	r20, r14
    99c6:	96 01       	movw	r18, r12
    99c8:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    99cc:	21 50       	subi	r18, 0x01	; 1
    99ce:	31 09       	sbc	r19, r1
    99d0:	41 09       	sbc	r20, r1
    99d2:	51 09       	sbc	r21, r1
    99d4:	56 95       	lsr	r21
    99d6:	47 95       	ror	r20
    99d8:	37 95       	ror	r19
    99da:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    99dc:	21 15       	cp	r18, r1
    99de:	80 e1       	ldi	r24, 0x10	; 16
    99e0:	38 07       	cpc	r19, r24
    99e2:	98 f0       	brcs	.+38     	; 0x9a0a <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    99e4:	e8 89       	ldd	r30, Y+16	; 0x10
    99e6:	f9 89       	ldd	r31, Y+17	; 0x11
    99e8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    99ea:	60 e8       	ldi	r22, 0x80	; 128
    99ec:	74 e8       	ldi	r23, 0x84	; 132
    99ee:	8e e1       	ldi	r24, 0x1E	; 30
    99f0:	90 e0       	ldi	r25, 0x00	; 0
    99f2:	a7 01       	movw	r20, r14
    99f4:	96 01       	movw	r18, r12
    99f6:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__udivmodsi4>
    99fa:	21 50       	subi	r18, 0x01	; 1
    99fc:	31 09       	sbc	r19, r1
    99fe:	41 09       	sbc	r20, r1
    9a00:	51 09       	sbc	r21, r1
    9a02:	56 95       	lsr	r21
    9a04:	47 95       	ror	r20
    9a06:	37 95       	ror	r19
    9a08:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    9a0a:	ec 85       	ldd	r30, Y+12	; 0x0c
    9a0c:	fd 85       	ldd	r31, Y+13	; 0x0d
    9a0e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    9a10:	ee 85       	ldd	r30, Y+14	; 0x0e
    9a12:	ff 85       	ldd	r31, Y+15	; 0x0f
    9a14:	20 83       	st	Z, r18

  _written = false;
    9a16:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    9a18:	ec 89       	ldd	r30, Y+20	; 0x14
    9a1a:	fd 89       	ldd	r31, Y+21	; 0x15
    9a1c:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    9a1e:	ea 89       	ldd	r30, Y+18	; 0x12
    9a20:	fb 89       	ldd	r31, Y+19	; 0x13
    9a22:	80 81       	ld	r24, Z
    9a24:	80 61       	ori	r24, 0x10	; 16
    9a26:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    9a28:	ea 89       	ldd	r30, Y+18	; 0x12
    9a2a:	fb 89       	ldd	r31, Y+19	; 0x13
    9a2c:	80 81       	ld	r24, Z
    9a2e:	88 60       	ori	r24, 0x08	; 8
    9a30:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    9a32:	ea 89       	ldd	r30, Y+18	; 0x12
    9a34:	fb 89       	ldd	r31, Y+19	; 0x13
    9a36:	80 81       	ld	r24, Z
    9a38:	80 68       	ori	r24, 0x80	; 128
    9a3a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    9a3c:	ea 89       	ldd	r30, Y+18	; 0x12
    9a3e:	fb 89       	ldd	r31, Y+19	; 0x13
    9a40:	80 81       	ld	r24, Z
    9a42:	8f 7d       	andi	r24, 0xDF	; 223
    9a44:	80 83       	st	Z, r24
}
    9a46:	df 91       	pop	r29
    9a48:	cf 91       	pop	r28
    9a4a:	ff 90       	pop	r15
    9a4c:	ef 90       	pop	r14
    9a4e:	df 90       	pop	r13
    9a50:	cf 90       	pop	r12
    9a52:	bf 90       	pop	r11
    9a54:	08 95       	ret

00009a56 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    9a56:	1f 92       	push	r1
    9a58:	0f 92       	push	r0
    9a5a:	0f b6       	in	r0, 0x3f	; 63
    9a5c:	0f 92       	push	r0
    9a5e:	11 24       	eor	r1, r1
    9a60:	0b b6       	in	r0, 0x3b	; 59
    9a62:	0f 92       	push	r0
    9a64:	2f 93       	push	r18
    9a66:	8f 93       	push	r24
    9a68:	9f 93       	push	r25
    9a6a:	ef 93       	push	r30
    9a6c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    9a6e:	e0 91 d6 08 	lds	r30, 0x08D6
    9a72:	f0 91 d7 08 	lds	r31, 0x08D7
    9a76:	80 81       	ld	r24, Z
    9a78:	e0 91 dc 08 	lds	r30, 0x08DC
    9a7c:	f0 91 dd 08 	lds	r31, 0x08DD
    9a80:	82 fd       	sbrc	r24, 2
    9a82:	12 c0       	rjmp	.+36     	; 0x9aa8 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    9a84:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    9a86:	80 91 df 08 	lds	r24, 0x08DF
    9a8a:	8f 5f       	subi	r24, 0xFF	; 255
    9a8c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    9a8e:	20 91 e0 08 	lds	r18, 0x08E0
    9a92:	82 17       	cp	r24, r18
    9a94:	51 f0       	breq	.+20     	; 0x9aaa <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    9a96:	e0 91 df 08 	lds	r30, 0x08DF
    9a9a:	f0 e0       	ldi	r31, 0x00	; 0
    9a9c:	ea 53       	subi	r30, 0x3A	; 58
    9a9e:	f7 4f       	sbci	r31, 0xF7	; 247
    9aa0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    9aa2:	80 93 df 08 	sts	0x08DF, r24
    9aa6:	01 c0       	rjmp	.+2      	; 0x9aaa <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    9aa8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    9aaa:	ff 91       	pop	r31
    9aac:	ef 91       	pop	r30
    9aae:	9f 91       	pop	r25
    9ab0:	8f 91       	pop	r24
    9ab2:	2f 91       	pop	r18
    9ab4:	0f 90       	pop	r0
    9ab6:	0b be       	out	0x3b, r0	; 59
    9ab8:	0f 90       	pop	r0
    9aba:	0f be       	out	0x3f, r0	; 63
    9abc:	0f 90       	pop	r0
    9abe:	1f 90       	pop	r1
    9ac0:	18 95       	reti

00009ac2 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    9ac2:	1f 92       	push	r1
    9ac4:	0f 92       	push	r0
    9ac6:	0f b6       	in	r0, 0x3f	; 63
    9ac8:	0f 92       	push	r0
    9aca:	11 24       	eor	r1, r1
    9acc:	0b b6       	in	r0, 0x3b	; 59
    9ace:	0f 92       	push	r0
    9ad0:	2f 93       	push	r18
    9ad2:	3f 93       	push	r19
    9ad4:	4f 93       	push	r20
    9ad6:	5f 93       	push	r21
    9ad8:	6f 93       	push	r22
    9ada:	7f 93       	push	r23
    9adc:	8f 93       	push	r24
    9ade:	9f 93       	push	r25
    9ae0:	af 93       	push	r26
    9ae2:	bf 93       	push	r27
    9ae4:	ef 93       	push	r30
    9ae6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    9ae8:	86 ec       	ldi	r24, 0xC6	; 198
    9aea:	98 e0       	ldi	r25, 0x08	; 8
    9aec:	ac de       	rcall	.-680    	; 0x9846 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    9aee:	ff 91       	pop	r31
}
    9af0:	ef 91       	pop	r30
    9af2:	bf 91       	pop	r27
    9af4:	af 91       	pop	r26
    9af6:	9f 91       	pop	r25
    9af8:	8f 91       	pop	r24
    9afa:	7f 91       	pop	r23
    9afc:	6f 91       	pop	r22
    9afe:	5f 91       	pop	r21
    9b00:	4f 91       	pop	r20
    9b02:	3f 91       	pop	r19
    9b04:	2f 91       	pop	r18
    9b06:	0f 90       	pop	r0
    9b08:	0b be       	out	0x3b, r0	; 59
    9b0a:	0f 90       	pop	r0
    9b0c:	0f be       	out	0x3f, r0	; 63
    9b0e:	0f 90       	pop	r0
    9b10:	1f 90       	pop	r1
    9b12:	18 95       	reti

00009b14 <_Z17Serial0_availablev>:
    9b14:	86 ec       	ldi	r24, 0xC6	; 198
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    9b16:	98 e0       	ldi	r25, 0x08	; 8
    9b18:	2e de       	rcall	.-932    	; 0x9776 <_ZN14HardwareSerial9availableEv>
    9b1a:	21 e0       	ldi	r18, 0x01	; 1
    9b1c:	89 2b       	or	r24, r25
    9b1e:	09 f4       	brne	.+2      	; 0x9b22 <_Z17Serial0_availablev+0xe>
    9b20:	20 e0       	ldi	r18, 0x00	; 0
    9b22:	82 2f       	mov	r24, r18
}
    9b24:	08 95       	ret

00009b26 <_GLOBAL__sub_I___vector_25>:
    9b26:	10 92 c9 08 	sts	0x08C9, r1
    9b2a:	10 92 c8 08 	sts	0x08C8, r1
    9b2e:	88 ee       	ldi	r24, 0xE8	; 232
    9b30:	93 e0       	ldi	r25, 0x03	; 3
    9b32:	a0 e0       	ldi	r26, 0x00	; 0
    9b34:	b0 e0       	ldi	r27, 0x00	; 0
    9b36:	80 93 ca 08 	sts	0x08CA, r24
    9b3a:	90 93 cb 08 	sts	0x08CB, r25
    9b3e:	a0 93 cc 08 	sts	0x08CC, r26
    9b42:	b0 93 cd 08 	sts	0x08CD, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    9b46:	88 e6       	ldi	r24, 0x68	; 104
    9b48:	96 e0       	ldi	r25, 0x06	; 6
    9b4a:	90 93 c7 08 	sts	0x08C7, r25
    9b4e:	80 93 c6 08 	sts	0x08C6, r24
    9b52:	85 ec       	ldi	r24, 0xC5	; 197
    9b54:	90 e0       	ldi	r25, 0x00	; 0
    9b56:	90 93 d3 08 	sts	0x08D3, r25
    9b5a:	80 93 d2 08 	sts	0x08D2, r24
    9b5e:	84 ec       	ldi	r24, 0xC4	; 196
    9b60:	90 e0       	ldi	r25, 0x00	; 0
    9b62:	90 93 d5 08 	sts	0x08D5, r25
    9b66:	80 93 d4 08 	sts	0x08D4, r24
    9b6a:	80 ec       	ldi	r24, 0xC0	; 192
    9b6c:	90 e0       	ldi	r25, 0x00	; 0
    9b6e:	90 93 d7 08 	sts	0x08D7, r25
    9b72:	80 93 d6 08 	sts	0x08D6, r24
    9b76:	81 ec       	ldi	r24, 0xC1	; 193
    9b78:	90 e0       	ldi	r25, 0x00	; 0
    9b7a:	90 93 d9 08 	sts	0x08D9, r25
    9b7e:	80 93 d8 08 	sts	0x08D8, r24
    9b82:	82 ec       	ldi	r24, 0xC2	; 194
    9b84:	90 e0       	ldi	r25, 0x00	; 0
    9b86:	90 93 db 08 	sts	0x08DB, r25
    9b8a:	80 93 da 08 	sts	0x08DA, r24
    9b8e:	86 ec       	ldi	r24, 0xC6	; 198
    9b90:	90 e0       	ldi	r25, 0x00	; 0
    9b92:	90 93 dd 08 	sts	0x08DD, r25
    9b96:	80 93 dc 08 	sts	0x08DC, r24
    9b9a:	10 92 df 08 	sts	0x08DF, r1
    9b9e:	10 92 e0 08 	sts	0x08E0, r1
    9ba2:	10 92 e1 08 	sts	0x08E1, r1
    9ba6:	10 92 e2 08 	sts	0x08E2, r1
    9baa:	08 95       	ret

00009bac <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    9bac:	1f 92       	push	r1
    9bae:	0f 92       	push	r0
    9bb0:	0f b6       	in	r0, 0x3f	; 63
    9bb2:	0f 92       	push	r0
    9bb4:	11 24       	eor	r1, r1
    9bb6:	0b b6       	in	r0, 0x3b	; 59
    9bb8:	0f 92       	push	r0
    9bba:	2f 93       	push	r18
    9bbc:	8f 93       	push	r24
    9bbe:	9f 93       	push	r25
    9bc0:	ef 93       	push	r30
    9bc2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    9bc4:	e0 91 73 09 	lds	r30, 0x0973
    9bc8:	f0 91 74 09 	lds	r31, 0x0974
    9bcc:	80 81       	ld	r24, Z
    9bce:	e0 91 79 09 	lds	r30, 0x0979
    9bd2:	f0 91 7a 09 	lds	r31, 0x097A
    9bd6:	82 fd       	sbrc	r24, 2
    9bd8:	12 c0       	rjmp	.+36     	; 0x9bfe <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    9bda:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    9bdc:	80 91 7c 09 	lds	r24, 0x097C
    9be0:	8f 5f       	subi	r24, 0xFF	; 255
    9be2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    9be4:	20 91 7d 09 	lds	r18, 0x097D
    9be8:	82 17       	cp	r24, r18
    9bea:	51 f0       	breq	.+20     	; 0x9c00 <__vector_54+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    9bec:	e0 91 7c 09 	lds	r30, 0x097C
    9bf0:	f0 e0       	ldi	r31, 0x00	; 0
    9bf2:	ed 59       	subi	r30, 0x9D	; 157
    9bf4:	f6 4f       	sbci	r31, 0xF6	; 246
    9bf6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    9bf8:	80 93 7c 09 	sts	0x097C, r24
    9bfc:	01 c0       	rjmp	.+2      	; 0x9c00 <__vector_54+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    9bfe:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    9c00:	ff 91       	pop	r31
    9c02:	ef 91       	pop	r30
    9c04:	9f 91       	pop	r25
    9c06:	8f 91       	pop	r24
    9c08:	2f 91       	pop	r18
    9c0a:	0f 90       	pop	r0
    9c0c:	0b be       	out	0x3b, r0	; 59
    9c0e:	0f 90       	pop	r0
    9c10:	0f be       	out	0x3f, r0	; 63
    9c12:	0f 90       	pop	r0
    9c14:	1f 90       	pop	r1
    9c16:	18 95       	reti

00009c18 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    9c18:	1f 92       	push	r1
    9c1a:	0f 92       	push	r0
    9c1c:	0f b6       	in	r0, 0x3f	; 63
    9c1e:	0f 92       	push	r0
    9c20:	11 24       	eor	r1, r1
    9c22:	0b b6       	in	r0, 0x3b	; 59
    9c24:	0f 92       	push	r0
    9c26:	2f 93       	push	r18
    9c28:	3f 93       	push	r19
    9c2a:	4f 93       	push	r20
    9c2c:	5f 93       	push	r21
    9c2e:	6f 93       	push	r22
    9c30:	7f 93       	push	r23
    9c32:	8f 93       	push	r24
    9c34:	9f 93       	push	r25
    9c36:	af 93       	push	r26
    9c38:	bf 93       	push	r27
    9c3a:	ef 93       	push	r30
    9c3c:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    9c3e:	83 e6       	ldi	r24, 0x63	; 99
    9c40:	99 e0       	ldi	r25, 0x09	; 9
    9c42:	01 de       	rcall	.-1022   	; 0x9846 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    9c44:	ff 91       	pop	r31
}
    9c46:	ef 91       	pop	r30
    9c48:	bf 91       	pop	r27
    9c4a:	af 91       	pop	r26
    9c4c:	9f 91       	pop	r25
    9c4e:	8f 91       	pop	r24
    9c50:	7f 91       	pop	r23
    9c52:	6f 91       	pop	r22
    9c54:	5f 91       	pop	r21
    9c56:	4f 91       	pop	r20
    9c58:	3f 91       	pop	r19
    9c5a:	2f 91       	pop	r18
    9c5c:	0f 90       	pop	r0
    9c5e:	0b be       	out	0x3b, r0	; 59
    9c60:	0f 90       	pop	r0
    9c62:	0f be       	out	0x3f, r0	; 63
    9c64:	0f 90       	pop	r0
    9c66:	1f 90       	pop	r1
    9c68:	18 95       	reti

00009c6a <_Z17Serial3_availablev>:
    9c6a:	83 e6       	ldi	r24, 0x63	; 99
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    9c6c:	99 e0       	ldi	r25, 0x09	; 9
    9c6e:	83 dd       	rcall	.-1274   	; 0x9776 <_ZN14HardwareSerial9availableEv>
    9c70:	21 e0       	ldi	r18, 0x01	; 1
    9c72:	89 2b       	or	r24, r25
    9c74:	09 f4       	brne	.+2      	; 0x9c78 <_Z17Serial3_availablev+0xe>
    9c76:	20 e0       	ldi	r18, 0x00	; 0
    9c78:	82 2f       	mov	r24, r18
}
    9c7a:	08 95       	ret

00009c7c <_GLOBAL__sub_I___vector_54>:
    9c7c:	10 92 66 09 	sts	0x0966, r1
    9c80:	10 92 65 09 	sts	0x0965, r1
    9c84:	88 ee       	ldi	r24, 0xE8	; 232
    9c86:	93 e0       	ldi	r25, 0x03	; 3
    9c88:	a0 e0       	ldi	r26, 0x00	; 0
    9c8a:	b0 e0       	ldi	r27, 0x00	; 0
    9c8c:	80 93 67 09 	sts	0x0967, r24
    9c90:	90 93 68 09 	sts	0x0968, r25
    9c94:	a0 93 69 09 	sts	0x0969, r26
    9c98:	b0 93 6a 09 	sts	0x096A, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    9c9c:	88 e6       	ldi	r24, 0x68	; 104
    9c9e:	96 e0       	ldi	r25, 0x06	; 6
    9ca0:	90 93 64 09 	sts	0x0964, r25
    9ca4:	80 93 63 09 	sts	0x0963, r24
    9ca8:	85 e3       	ldi	r24, 0x35	; 53
    9caa:	91 e0       	ldi	r25, 0x01	; 1
    9cac:	90 93 70 09 	sts	0x0970, r25
    9cb0:	80 93 6f 09 	sts	0x096F, r24
    9cb4:	84 e3       	ldi	r24, 0x34	; 52
    9cb6:	91 e0       	ldi	r25, 0x01	; 1
    9cb8:	90 93 72 09 	sts	0x0972, r25
    9cbc:	80 93 71 09 	sts	0x0971, r24
    9cc0:	80 e3       	ldi	r24, 0x30	; 48
    9cc2:	91 e0       	ldi	r25, 0x01	; 1
    9cc4:	90 93 74 09 	sts	0x0974, r25
    9cc8:	80 93 73 09 	sts	0x0973, r24
    9ccc:	81 e3       	ldi	r24, 0x31	; 49
    9cce:	91 e0       	ldi	r25, 0x01	; 1
    9cd0:	90 93 76 09 	sts	0x0976, r25
    9cd4:	80 93 75 09 	sts	0x0975, r24
    9cd8:	82 e3       	ldi	r24, 0x32	; 50
    9cda:	91 e0       	ldi	r25, 0x01	; 1
    9cdc:	90 93 78 09 	sts	0x0978, r25
    9ce0:	80 93 77 09 	sts	0x0977, r24
    9ce4:	86 e3       	ldi	r24, 0x36	; 54
    9ce6:	91 e0       	ldi	r25, 0x01	; 1
    9ce8:	90 93 7a 09 	sts	0x097A, r25
    9cec:	80 93 79 09 	sts	0x0979, r24
    9cf0:	10 92 7c 09 	sts	0x097C, r1
    9cf4:	10 92 7d 09 	sts	0x097D, r1
    9cf8:	10 92 7e 09 	sts	0x097E, r1
    9cfc:	10 92 7f 09 	sts	0x097F, r1
    9d00:	08 95       	ret

00009d02 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    9d02:	af 92       	push	r10
    9d04:	bf 92       	push	r11
    9d06:	cf 92       	push	r12
    9d08:	df 92       	push	r13
    9d0a:	ef 92       	push	r14
    9d0c:	ff 92       	push	r15
    9d0e:	0f 93       	push	r16
    9d10:	1f 93       	push	r17
    9d12:	cf 93       	push	r28
    9d14:	df 93       	push	r29
    9d16:	6c 01       	movw	r12, r24
    9d18:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
    9d1a:	c0 e0       	ldi	r28, 0x00	; 0
    9d1c:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    9d1e:	00 e0       	ldi	r16, 0x00	; 0
    9d20:	10 e0       	ldi	r17, 0x00	; 0
    9d22:	f6 01       	movw	r30, r12
    9d24:	ec 0f       	add	r30, r28
    9d26:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    9d28:	4a e0       	ldi	r20, 0x0A	; 10
    9d2a:	50 e0       	ldi	r21, 0x00	; 0
    9d2c:	62 81       	ldd	r22, Z+2	; 0x02
    9d2e:	c7 01       	movw	r24, r14
    9d30:	18 d2       	rcall	.+1072   	; 0xa162 <_ZN5Print5printEhi>
    9d32:	5c 01       	movw	r10, r24
    9d34:	6e e2       	ldi	r22, 0x2E	; 46
        n += p.print('.');
    9d36:	c7 01       	movw	r24, r14
    9d38:	da d0       	rcall	.+436    	; 0x9eee <_ZN5Print5printEc>
    9d3a:	8a 0d       	add	r24, r10
    9d3c:	9b 1d       	adc	r25, r11
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    9d3e:	08 0f       	add	r16, r24
    9d40:	19 1f       	adc	r17, r25
        n += p.print('.');
    9d42:	21 96       	adiw	r28, 0x01	; 1
    9d44:	c3 30       	cpi	r28, 0x03	; 3
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    9d46:	d1 05       	cpc	r29, r1
    9d48:	61 f7       	brne	.-40     	; 0x9d22 <_ZNK9IPAddress7printToER5Print+0x20>
    9d4a:	4a e0       	ldi	r20, 0x0A	; 10
    9d4c:	50 e0       	ldi	r21, 0x00	; 0
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    9d4e:	f6 01       	movw	r30, r12
    9d50:	65 81       	ldd	r22, Z+5	; 0x05
    9d52:	c7 01       	movw	r24, r14
    9d54:	06 d2       	rcall	.+1036   	; 0xa162 <_ZN5Print5printEhi>
    9d56:	80 0f       	add	r24, r16
    9d58:	91 1f       	adc	r25, r17
    9d5a:	df 91       	pop	r29
    return n;
}
    9d5c:	cf 91       	pop	r28
    9d5e:	1f 91       	pop	r17
    9d60:	0f 91       	pop	r16
    9d62:	ff 90       	pop	r15
    9d64:	ef 90       	pop	r14
    9d66:	df 90       	pop	r13
    9d68:	cf 90       	pop	r12
    9d6a:	bf 90       	pop	r11
    9d6c:	af 90       	pop	r10
    9d6e:	08 95       	ret

00009d70 <_ZN9IPAddressC1Ev>:
    9d70:	28 e7       	ldi	r18, 0x78	; 120
    9d72:	36 e0       	ldi	r19, 0x06	; 6
    9d74:	fc 01       	movw	r30, r24
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    9d76:	31 83       	std	Z+1, r19	; 0x01
    9d78:	20 83       	st	Z, r18
{
    _address.dword = 0;
    9d7a:	12 82       	std	Z+2, r1	; 0x02
    9d7c:	13 82       	std	Z+3, r1	; 0x03
    9d7e:	14 82       	std	Z+4, r1	; 0x04
    9d80:	15 82       	std	Z+5, r1	; 0x05
    9d82:	08 95       	ret

00009d84 <_ZN9IPAddressC1Ehhhh>:
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    9d84:	0f 93       	push	r16
    9d86:	fc 01       	movw	r30, r24
    9d88:	88 e7       	ldi	r24, 0x78	; 120
    9d8a:	96 e0       	ldi	r25, 0x06	; 6
    9d8c:	91 83       	std	Z+1, r25	; 0x01
    9d8e:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    9d90:	62 83       	std	Z+2, r22	; 0x02
    _address.bytes[1] = second_octet;
    9d92:	43 83       	std	Z+3, r20	; 0x03
    _address.bytes[2] = third_octet;
    9d94:	24 83       	std	Z+4, r18	; 0x04
    _address.bytes[3] = fourth_octet;
    9d96:	05 83       	std	Z+5, r16	; 0x05
}
    9d98:	0f 91       	pop	r16
    9d9a:	08 95       	ret

00009d9c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    9d9c:	28 e7       	ldi	r18, 0x78	; 120
    9d9e:	36 e0       	ldi	r19, 0x06	; 6
    9da0:	fc 01       	movw	r30, r24
    9da2:	31 83       	std	Z+1, r19	; 0x01
    9da4:	20 83       	st	Z, r18
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    9da6:	fb 01       	movw	r30, r22
    9da8:	40 81       	ld	r20, Z
    9daa:	51 81       	ldd	r21, Z+1	; 0x01
    9dac:	62 81       	ldd	r22, Z+2	; 0x02
    9dae:	73 81       	ldd	r23, Z+3	; 0x03
    9db0:	fc 01       	movw	r30, r24
    9db2:	42 83       	std	Z+2, r20	; 0x02
    9db4:	53 83       	std	Z+3, r21	; 0x03
    9db6:	64 83       	std	Z+4, r22	; 0x04
    9db8:	75 83       	std	Z+5, r23	; 0x05
    9dba:	08 95       	ret

00009dbc <_ZN9IPAddressaSEPKh>:
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    9dbc:	fb 01       	movw	r30, r22
    9dbe:	40 81       	ld	r20, Z
    9dc0:	51 81       	ldd	r21, Z+1	; 0x01
    9dc2:	62 81       	ldd	r22, Z+2	; 0x02
    9dc4:	73 81       	ldd	r23, Z+3	; 0x03
    9dc6:	fc 01       	movw	r30, r24
    9dc8:	42 83       	std	Z+2, r20	; 0x02
    9dca:	53 83       	std	Z+3, r21	; 0x03
    9dcc:	64 83       	std	Z+4, r22	; 0x04
    9dce:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    9dd0:	08 95       	ret

00009dd2 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    9dd2:	88 e7       	ldi	r24, 0x78	; 120
    9dd4:	96 e0       	ldi	r25, 0x06	; 6
    9dd6:	90 93 01 0a 	sts	0x0A01, r25
    9dda:	80 93 00 0a 	sts	0x0A00, r24
{
    _address.bytes[0] = first_octet;
    9dde:	10 92 02 0a 	sts	0x0A02, r1
    _address.bytes[1] = second_octet;
    9de2:	10 92 03 0a 	sts	0x0A03, r1
    _address.bytes[2] = third_octet;
    9de6:	10 92 04 0a 	sts	0x0A04, r1
    _address.bytes[3] = fourth_octet;
    9dea:	10 92 05 0a 	sts	0x0A05, r1
    9dee:	08 95       	ret

00009df0 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    9df0:	08 95       	ret

00009df2 <main>:

int main(void)
{
	init();
    9df2:	75 db       	rcall	.-2326   	; 0x94de <init>
    9df4:	fd df       	rcall	.-6      	; 0x9df0 <initVariant>

	initVariant();
    9df6:	0e 94 2d 2c 	call	0x585a	; 0x585a <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    9dfa:	c8 ee       	ldi	r28, 0xE8	; 232
    9dfc:	db e4       	ldi	r29, 0x4B	; 75
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    9dfe:	0e 94 77 30 	call	0x60ee	; 0x60ee <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    9e02:	20 97       	sbiw	r28, 0x00	; 0
    9e04:	e1 f3       	breq	.-8      	; 0x9dfe <main+0xc>
		if (serialEventRun) serialEventRun();
    9e06:	e4 dc       	rcall	.-1592   	; 0x97d0 <_Z14serialEventRunv>
    9e08:	fa cf       	rjmp	.-12     	; 0x9dfe <main+0xc>

00009e0a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    9e0a:	cf 92       	push	r12
    9e0c:	df 92       	push	r13
    9e0e:	ef 92       	push	r14
    9e10:	ff 92       	push	r15
    9e12:	0f 93       	push	r16
    9e14:	1f 93       	push	r17
    9e16:	cf 93       	push	r28
    9e18:	df 93       	push	r29
    9e1a:	6c 01       	movw	r12, r24
    9e1c:	7a 01       	movw	r14, r20
    9e1e:	eb 01       	movw	r28, r22
    9e20:	e6 0e       	add	r14, r22
    9e22:	f7 1e       	adc	r15, r23
  size_t n = 0;
    9e24:	00 e0       	ldi	r16, 0x00	; 0
    9e26:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    9e28:	ce 15       	cp	r28, r14
    9e2a:	df 05       	cpc	r29, r15
    9e2c:	61 f0       	breq	.+24     	; 0x9e46 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
    9e2e:	69 91       	ld	r22, Y+
    9e30:	d6 01       	movw	r26, r12
    9e32:	ed 91       	ld	r30, X+
    9e34:	fc 91       	ld	r31, X
    9e36:	01 90       	ld	r0, Z+
    9e38:	f0 81       	ld	r31, Z
    9e3a:	e0 2d       	mov	r30, r0
    9e3c:	c6 01       	movw	r24, r12
    9e3e:	19 95       	eicall
    9e40:	08 0f       	add	r16, r24
    9e42:	19 1f       	adc	r17, r25
    9e44:	f1 cf       	rjmp	.-30     	; 0x9e28 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
    9e46:	c8 01       	movw	r24, r16
    9e48:	df 91       	pop	r29
    9e4a:	cf 91       	pop	r28
    9e4c:	1f 91       	pop	r17
    9e4e:	0f 91       	pop	r16
    9e50:	ff 90       	pop	r15
    9e52:	ef 90       	pop	r14
    9e54:	df 90       	pop	r13
    9e56:	cf 90       	pop	r12
    9e58:	08 95       	ret

00009e5a <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    9e5a:	61 15       	cp	r22, r1
    9e5c:	71 05       	cpc	r23, r1
    9e5e:	81 f0       	breq	.+32     	; 0x9e80 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    9e60:	db 01       	movw	r26, r22
    9e62:	0d 90       	ld	r0, X+
    9e64:	00 20       	and	r0, r0
    9e66:	e9 f7       	brne	.-6      	; 0x9e62 <_ZN5Print5writeEPKc+0x8>
    9e68:	ad 01       	movw	r20, r26
    9e6a:	41 50       	subi	r20, 0x01	; 1
    9e6c:	51 09       	sbc	r21, r1
    9e6e:	46 1b       	sub	r20, r22
    9e70:	57 0b       	sbc	r21, r23
    9e72:	dc 01       	movw	r26, r24
    9e74:	ed 91       	ld	r30, X+
    9e76:	fc 91       	ld	r31, X
    9e78:	02 80       	ldd	r0, Z+2	; 0x02
    9e7a:	f3 81       	ldd	r31, Z+3	; 0x03
    9e7c:	e0 2d       	mov	r30, r0
    9e7e:	19 94       	eijmp
    }
    9e80:	80 e0       	ldi	r24, 0x00	; 0
    9e82:	90 e0       	ldi	r25, 0x00	; 0
    9e84:	08 95       	ret

00009e86 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    9e86:	ef 92       	push	r14
    9e88:	ff 92       	push	r15
    9e8a:	0f 93       	push	r16
    9e8c:	1f 93       	push	r17
    9e8e:	cf 93       	push	r28
    9e90:	df 93       	push	r29
    9e92:	8c 01       	movw	r16, r24
    9e94:	fb 01       	movw	r30, r22
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    9e96:	c0 e0       	ldi	r28, 0x00	; 0
    9e98:	d0 e0       	ldi	r29, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    9e9a:	64 91       	lpm	r22, Z
    9e9c:	7f 01       	movw	r14, r30
    9e9e:	8f ef       	ldi	r24, 0xFF	; 255
    9ea0:	e8 1a       	sub	r14, r24
    9ea2:	f8 0a       	sbc	r15, r24
    if (c == 0) break;
    9ea4:	66 23       	and	r22, r22
    9ea6:	61 f0       	breq	.+24     	; 0x9ec0 <_ZN5Print5printEPK19__FlashStringHelper+0x3a>
    n += write(c);
    9ea8:	d8 01       	movw	r26, r16
    9eaa:	ed 91       	ld	r30, X+
    9eac:	fc 91       	ld	r31, X
    9eae:	01 90       	ld	r0, Z+
    9eb0:	f0 81       	ld	r31, Z
    9eb2:	e0 2d       	mov	r30, r0
    9eb4:	c8 01       	movw	r24, r16
    9eb6:	19 95       	eicall
    9eb8:	c8 0f       	add	r28, r24
    9eba:	d9 1f       	adc	r29, r25
    9ebc:	f7 01       	movw	r30, r14
  }
  return n;
    9ebe:	ed cf       	rjmp	.-38     	; 0x9e9a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
}
    9ec0:	ce 01       	movw	r24, r28
    9ec2:	df 91       	pop	r29
    9ec4:	cf 91       	pop	r28
    9ec6:	1f 91       	pop	r17
    9ec8:	0f 91       	pop	r16
    9eca:	ff 90       	pop	r15
    9ecc:	ef 90       	pop	r14
    9ece:	08 95       	ret

00009ed0 <_ZN5Print5printERK6String>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    9ed0:	dc 01       	movw	r26, r24
    9ed2:	ed 91       	ld	r30, X+
    9ed4:	fc 91       	ld	r31, X
    9ed6:	db 01       	movw	r26, r22
    9ed8:	14 96       	adiw	r26, 0x04	; 4
    9eda:	4d 91       	ld	r20, X+
    9edc:	5c 91       	ld	r21, X
    9ede:	15 97       	sbiw	r26, 0x05	; 5
    9ee0:	6d 91       	ld	r22, X+
    9ee2:	7c 91       	ld	r23, X
    9ee4:	02 80       	ldd	r0, Z+2	; 0x02
    9ee6:	f3 81       	ldd	r31, Z+3	; 0x03
    9ee8:	e0 2d       	mov	r30, r0
    9eea:	19 94       	eijmp

00009eec <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    9eec:	b6 cf       	rjmp	.-148    	; 0x9e5a <_ZN5Print5writeEPKc>

00009eee <_ZN5Print5printEc>:
    9eee:	dc 01       	movw	r26, r24
}

size_t Print::print(char c)
{
  return write(c);
    9ef0:	ed 91       	ld	r30, X+
    9ef2:	fc 91       	ld	r31, X
    9ef4:	01 90       	ld	r0, Z+
    9ef6:	f0 81       	ld	r31, Z
    9ef8:	e0 2d       	mov	r30, r0
    9efa:	19 94       	eijmp

00009efc <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    9efc:	db 01       	movw	r26, r22
  return x.printTo(*this);
    9efe:	ed 91       	ld	r30, X+
    9f00:	fc 91       	ld	r31, X
    9f02:	11 97       	sbiw	r26, 0x01	; 1
    9f04:	01 90       	ld	r0, Z+
    9f06:	f0 81       	ld	r31, Z
    9f08:	e0 2d       	mov	r30, r0
    9f0a:	bc 01       	movw	r22, r24
    9f0c:	cd 01       	movw	r24, r26
    9f0e:	19 94       	eijmp

00009f10 <_ZN5Print7printlnEv>:
}

size_t Print::println(void)
{
    9f10:	0f 93       	push	r16
    9f12:	1f 93       	push	r17
    9f14:	cf 93       	push	r28
    9f16:	df 93       	push	r29
    9f18:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    9f1a:	6d e0       	ldi	r22, 0x0D	; 13
    9f1c:	e8 df       	rcall	.-48     	; 0x9eee <_ZN5Print5printEc>
    9f1e:	8c 01       	movw	r16, r24
    9f20:	6a e0       	ldi	r22, 0x0A	; 10
  n += print('\n');
    9f22:	ce 01       	movw	r24, r28
    9f24:	e4 df       	rcall	.-56     	; 0x9eee <_ZN5Print5printEc>
    9f26:	80 0f       	add	r24, r16
    9f28:	91 1f       	adc	r25, r17
  return n;
}
    9f2a:	df 91       	pop	r29
    9f2c:	cf 91       	pop	r28
    9f2e:	1f 91       	pop	r17
    9f30:	0f 91       	pop	r16
    9f32:	08 95       	ret

00009f34 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    9f34:	0f 93       	push	r16
    9f36:	1f 93       	push	r17
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    9f38:	cf 93       	push	r28
    9f3a:	df 93       	push	r29
    9f3c:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    9f3e:	a3 df       	rcall	.-186    	; 0x9e86 <_ZN5Print5printEPK19__FlashStringHelper>
    9f40:	8c 01       	movw	r16, r24
    9f42:	ce 01       	movw	r24, r28
  n += println();
    9f44:	e5 df       	rcall	.-54     	; 0x9f10 <_ZN5Print7printlnEv>
    9f46:	80 0f       	add	r24, r16
    9f48:	91 1f       	adc	r25, r17
  return n;
}
    9f4a:	df 91       	pop	r29
    9f4c:	cf 91       	pop	r28
    9f4e:	1f 91       	pop	r17
    9f50:	0f 91       	pop	r16
    9f52:	08 95       	ret

00009f54 <_ZN5Print7printlnERK6String>:
    9f54:	0f 93       	push	r16
    9f56:	1f 93       	push	r17
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    9f58:	cf 93       	push	r28
    9f5a:	df 93       	push	r29
    9f5c:	ec 01       	movw	r28, r24
  size_t n = print(s);
    9f5e:	b8 df       	rcall	.-144    	; 0x9ed0 <_ZN5Print5printERK6String>
    9f60:	8c 01       	movw	r16, r24
    9f62:	ce 01       	movw	r24, r28
  n += println();
    9f64:	d5 df       	rcall	.-86     	; 0x9f10 <_ZN5Print7printlnEv>
    9f66:	80 0f       	add	r24, r16
    9f68:	91 1f       	adc	r25, r17
  return n;
}
    9f6a:	df 91       	pop	r29
    9f6c:	cf 91       	pop	r28
    9f6e:	1f 91       	pop	r17
    9f70:	0f 91       	pop	r16
    9f72:	08 95       	ret

00009f74 <_ZN5Print7printlnEPKc>:
    9f74:	0f 93       	push	r16
    9f76:	1f 93       	push	r17

size_t Print::println(const char c[])
{
    9f78:	cf 93       	push	r28
    9f7a:	df 93       	push	r29
    9f7c:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    9f7e:	6d df       	rcall	.-294    	; 0x9e5a <_ZN5Print5writeEPKc>
    9f80:	8c 01       	movw	r16, r24
    9f82:	ce 01       	movw	r24, r28
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    9f84:	c5 df       	rcall	.-118    	; 0x9f10 <_ZN5Print7printlnEv>
    9f86:	80 0f       	add	r24, r16
    9f88:	91 1f       	adc	r25, r17
  return n;
}
    9f8a:	df 91       	pop	r29
    9f8c:	cf 91       	pop	r28
    9f8e:	1f 91       	pop	r17
    9f90:	0f 91       	pop	r16
    9f92:	08 95       	ret

00009f94 <_ZN5Print7printlnERK9Printable>:
    9f94:	0f 93       	push	r16
    9f96:	1f 93       	push	r17
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    9f98:	cf 93       	push	r28
    9f9a:	df 93       	push	r29
    9f9c:	ec 01       	movw	r28, r24
  size_t n = print(x);
    9f9e:	ae df       	rcall	.-164    	; 0x9efc <_ZN5Print5printERK9Printable>
    9fa0:	8c 01       	movw	r16, r24
    9fa2:	ce 01       	movw	r24, r28
  n += println();
    9fa4:	b5 df       	rcall	.-150    	; 0x9f10 <_ZN5Print7printlnEv>
    9fa6:	80 0f       	add	r24, r16
    9fa8:	91 1f       	adc	r25, r17
  return n;
}
    9faa:	df 91       	pop	r29
    9fac:	cf 91       	pop	r28
    9fae:	1f 91       	pop	r17
    9fb0:	0f 91       	pop	r16
    9fb2:	08 95       	ret

00009fb4 <_ZN5Print11printNumberEmh>:
    9fb4:	8f 92       	push	r8
    9fb6:	9f 92       	push	r9

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    9fb8:	af 92       	push	r10
    9fba:	bf 92       	push	r11
    9fbc:	cf 92       	push	r12
    9fbe:	df 92       	push	r13
    9fc0:	ef 92       	push	r14
    9fc2:	ff 92       	push	r15
    9fc4:	0f 93       	push	r16
    9fc6:	1f 93       	push	r17
    9fc8:	cf 93       	push	r28
    9fca:	df 93       	push	r29
    9fcc:	cd b7       	in	r28, 0x3d	; 61
    9fce:	de b7       	in	r29, 0x3e	; 62
    9fd0:	a1 97       	sbiw	r28, 0x21	; 33
    9fd2:	0f b6       	in	r0, 0x3f	; 63
    9fd4:	f8 94       	cli
    9fd6:	de bf       	out	0x3e, r29	; 62
    9fd8:	0f be       	out	0x3f, r0	; 63
    9fda:	cd bf       	out	0x3d, r28	; 61
    9fdc:	7c 01       	movw	r14, r24
    9fde:	c4 2e       	mov	r12, r20
    9fe0:	e5 2f       	mov	r30, r21
    9fe2:	cb 01       	movw	r24, r22
    9fe4:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    9fe6:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    9fe8:	21 e0       	ldi	r18, 0x01	; 1
    9fea:	2d 15       	cp	r18, r13
    9fec:	10 f0       	brcs	.+4      	; 0x9ff2 <_ZN5Print11printNumberEmh+0x3e>
    9fee:	2a e0       	ldi	r18, 0x0A	; 10
    9ff0:	d2 2e       	mov	r13, r18
    9ff2:	8e 01       	movw	r16, r28
    9ff4:	0f 5d       	subi	r16, 0xDF	; 223
    9ff6:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    9ff8:	8d 2c       	mov	r8, r13
    9ffa:	91 2c       	mov	r9, r1
    9ffc:	a1 2c       	mov	r10, r1
    9ffe:	b1 2c       	mov	r11, r1
    a000:	6c 2d       	mov	r22, r12
    a002:	7e 2f       	mov	r23, r30
    a004:	a5 01       	movw	r20, r10
    a006:	94 01       	movw	r18, r8
    a008:	66 d7       	rcall	.+3788   	; 0xaed6 <__udivmodsi4>
    a00a:	8c 2d       	mov	r24, r12
    char c = m - base * n;
    a00c:	d2 9e       	mul	r13, r18
    a00e:	80 19       	sub	r24, r0
    a010:	11 24       	eor	r1, r1
    a012:	01 50       	subi	r16, 0x01	; 1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    a014:	11 09       	sbc	r17, r1
    a016:	8a 30       	cpi	r24, 0x0A	; 10
    a018:	14 f4       	brge	.+4      	; 0xa01e <_ZN5Print11printNumberEmh+0x6a>
    a01a:	80 5d       	subi	r24, 0xD0	; 208
    a01c:	01 c0       	rjmp	.+2      	; 0xa020 <_ZN5Print11printNumberEmh+0x6c>
    a01e:	89 5c       	subi	r24, 0xC9	; 201
    a020:	f8 01       	movw	r30, r16
    a022:	80 83       	st	Z, r24
    a024:	21 15       	cp	r18, r1
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    a026:	31 05       	cpc	r19, r1
    a028:	41 05       	cpc	r20, r1
    a02a:	51 05       	cpc	r21, r1
    a02c:	21 f0       	breq	.+8      	; 0xa036 <_ZN5Print11printNumberEmh+0x82>
    a02e:	c2 2e       	mov	r12, r18
    unsigned long m = n;
    n /= base;
    a030:	e3 2f       	mov	r30, r19
    a032:	ca 01       	movw	r24, r20
    a034:	e5 cf       	rjmp	.-54     	; 0xa000 <_ZN5Print11printNumberEmh+0x4c>
    a036:	b8 01       	movw	r22, r16
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    a038:	c7 01       	movw	r24, r14
    a03a:	0f df       	rcall	.-482    	; 0x9e5a <_ZN5Print5writeEPKc>
    a03c:	a1 96       	adiw	r28, 0x21	; 33
    a03e:	0f b6       	in	r0, 0x3f	; 63
}
    a040:	f8 94       	cli
    a042:	de bf       	out	0x3e, r29	; 62
    a044:	0f be       	out	0x3f, r0	; 63
    a046:	cd bf       	out	0x3d, r28	; 61
    a048:	df 91       	pop	r29
    a04a:	cf 91       	pop	r28
    a04c:	1f 91       	pop	r17
    a04e:	0f 91       	pop	r16
    a050:	ff 90       	pop	r15
    a052:	ef 90       	pop	r14
    a054:	df 90       	pop	r13
    a056:	cf 90       	pop	r12
    a058:	bf 90       	pop	r11
    a05a:	af 90       	pop	r10
    a05c:	9f 90       	pop	r9
    a05e:	8f 90       	pop	r8
    a060:	08 95       	ret

0000a062 <_ZN5Print5printEli>:
    a062:	cf 92       	push	r12
    a064:	df 92       	push	r13
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    a066:	ef 92       	push	r14
    a068:	ff 92       	push	r15
    a06a:	0f 93       	push	r16
    a06c:	1f 93       	push	r17
    a06e:	cf 93       	push	r28
    a070:	df 93       	push	r29
    a072:	ec 01       	movw	r28, r24
    a074:	6a 01       	movw	r12, r20
    a076:	7b 01       	movw	r14, r22
  if (base == 0) {
    a078:	21 15       	cp	r18, r1
    a07a:	31 05       	cpc	r19, r1
    a07c:	79 f4       	brne	.+30     	; 0xa09c <_ZN5Print5printEli+0x3a>
    return write(n);
    a07e:	e8 81       	ld	r30, Y
    a080:	f9 81       	ldd	r31, Y+1	; 0x01
    a082:	01 90       	ld	r0, Z+
    a084:	f0 81       	ld	r31, Z
    a086:	e0 2d       	mov	r30, r0
    a088:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    a08a:	df 91       	pop	r29
    a08c:	cf 91       	pop	r28
    a08e:	1f 91       	pop	r17
    a090:	0f 91       	pop	r16
    a092:	ff 90       	pop	r15
    a094:	ef 90       	pop	r14
    a096:	df 90       	pop	r13
    a098:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    a09a:	19 94       	eijmp
  } else if (base == 10) {
    a09c:	2a 30       	cpi	r18, 0x0A	; 10
    a09e:	31 05       	cpc	r19, r1
    a0a0:	d9 f4       	brne	.+54     	; 0xa0d8 <_ZN5Print5printEli+0x76>
    if (n < 0) {
    a0a2:	77 ff       	sbrs	r23, 7
    a0a4:	18 c0       	rjmp	.+48     	; 0xa0d6 <_ZN5Print5printEli+0x74>
      int t = print('-');
    a0a6:	6d e2       	ldi	r22, 0x2D	; 45
    a0a8:	22 df       	rcall	.-444    	; 0x9eee <_ZN5Print5printEc>
    a0aa:	8c 01       	movw	r16, r24
    a0ac:	44 27       	eor	r20, r20
      n = -n;
    a0ae:	55 27       	eor	r21, r21
    a0b0:	ba 01       	movw	r22, r20
    a0b2:	4c 19       	sub	r20, r12
    a0b4:	5d 09       	sbc	r21, r13
    a0b6:	6e 09       	sbc	r22, r14
    a0b8:	7f 09       	sbc	r23, r15
    a0ba:	2a e0       	ldi	r18, 0x0A	; 10
      return printNumber(n, 10) + t;
    a0bc:	ce 01       	movw	r24, r28
    a0be:	7a df       	rcall	.-268    	; 0x9fb4 <_ZN5Print11printNumberEmh>
    a0c0:	80 0f       	add	r24, r16
    a0c2:	91 1f       	adc	r25, r17
    a0c4:	df 91       	pop	r29
    a0c6:	cf 91       	pop	r28
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    a0c8:	1f 91       	pop	r17
    a0ca:	0f 91       	pop	r16
    a0cc:	ff 90       	pop	r15
    a0ce:	ef 90       	pop	r14
    a0d0:	df 90       	pop	r13
    a0d2:	cf 90       	pop	r12
    a0d4:	08 95       	ret
    a0d6:	2a e0       	ldi	r18, 0x0A	; 10
    a0d8:	b7 01       	movw	r22, r14
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    a0da:	a6 01       	movw	r20, r12
  } else {
    return printNumber(n, base);
    a0dc:	ce 01       	movw	r24, r28
    a0de:	df 91       	pop	r29
    a0e0:	cf 91       	pop	r28
  }
}
    a0e2:	1f 91       	pop	r17
    a0e4:	0f 91       	pop	r16
    a0e6:	ff 90       	pop	r15
    a0e8:	ef 90       	pop	r14
    a0ea:	df 90       	pop	r13
    a0ec:	cf 90       	pop	r12
    a0ee:	62 cf       	rjmp	.-316    	; 0x9fb4 <_ZN5Print11printNumberEmh>

0000a0f0 <_ZN5Print5printEii>:
    a0f0:	9a 01       	movw	r18, r20
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    a0f2:	ab 01       	movw	r20, r22
    a0f4:	66 27       	eor	r22, r22
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    a0f6:	57 fd       	sbrc	r21, 7
    a0f8:	60 95       	com	r22
    a0fa:	76 2f       	mov	r23, r22
    a0fc:	b2 cf       	rjmp	.-156    	; 0xa062 <_ZN5Print5printEli>

0000a0fe <_ZN5Print7printlnEii>:
    a0fe:	0f 93       	push	r16
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    a100:	1f 93       	push	r17
    a102:	cf 93       	push	r28
    a104:	df 93       	push	r29
    a106:	ec 01       	movw	r28, r24
    a108:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    a10a:	ab 01       	movw	r20, r22
    a10c:	66 27       	eor	r22, r22
    a10e:	57 fd       	sbrc	r21, 7
    a110:	60 95       	com	r22
    a112:	76 2f       	mov	r23, r22
    a114:	a6 df       	rcall	.-180    	; 0xa062 <_ZN5Print5printEli>
    a116:	8c 01       	movw	r16, r24
    a118:	ce 01       	movw	r24, r28
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    a11a:	fa de       	rcall	.-524    	; 0x9f10 <_ZN5Print7printlnEv>
    a11c:	80 0f       	add	r24, r16
    a11e:	91 1f       	adc	r25, r17
  return n;
}
    a120:	df 91       	pop	r29
    a122:	cf 91       	pop	r28
    a124:	1f 91       	pop	r17
    a126:	0f 91       	pop	r16
    a128:	08 95       	ret

0000a12a <_ZN5Print7printlnEli>:
    a12a:	0f 93       	push	r16
    a12c:	1f 93       	push	r17
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    a12e:	cf 93       	push	r28
    a130:	df 93       	push	r29
    a132:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    a134:	96 df       	rcall	.-212    	; 0xa062 <_ZN5Print5printEli>
    a136:	8c 01       	movw	r16, r24
    a138:	ce 01       	movw	r24, r28
  n += println();
    a13a:	ea de       	rcall	.-556    	; 0x9f10 <_ZN5Print7printlnEv>
    a13c:	80 0f       	add	r24, r16
    a13e:	91 1f       	adc	r25, r17
  return n;
}
    a140:	df 91       	pop	r29
    a142:	cf 91       	pop	r28
    a144:	1f 91       	pop	r17
    a146:	0f 91       	pop	r16
    a148:	08 95       	ret

0000a14a <_ZN5Print5printEmi>:
    a14a:	21 15       	cp	r18, r1
    a14c:	31 05       	cpc	r19, r1
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    a14e:	41 f4       	brne	.+16     	; 0xa160 <_ZN5Print5printEmi+0x16>
    a150:	dc 01       	movw	r26, r24
    a152:	ed 91       	ld	r30, X+
    a154:	fc 91       	ld	r31, X
    a156:	01 90       	ld	r0, Z+
    a158:	f0 81       	ld	r31, Z
    a15a:	e0 2d       	mov	r30, r0
    a15c:	64 2f       	mov	r22, r20
    a15e:	19 94       	eijmp
  else return printNumber(n, base);
    a160:	29 cf       	rjmp	.-430    	; 0x9fb4 <_ZN5Print11printNumberEmh>

0000a162 <_ZN5Print5printEhi>:
    a162:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    a164:	46 2f       	mov	r20, r22
    a166:	50 e0       	ldi	r21, 0x00	; 0
    a168:	60 e0       	ldi	r22, 0x00	; 0
    a16a:	70 e0       	ldi	r23, 0x00	; 0
    a16c:	ee cf       	rjmp	.-36     	; 0xa14a <_ZN5Print5printEmi>

0000a16e <_ZN5Print7printlnEhi>:
    a16e:	0f 93       	push	r16
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    a170:	1f 93       	push	r17
    a172:	cf 93       	push	r28
    a174:	df 93       	push	r29
    a176:	ec 01       	movw	r28, r24
    a178:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    a17a:	46 2f       	mov	r20, r22
    a17c:	50 e0       	ldi	r21, 0x00	; 0
    a17e:	60 e0       	ldi	r22, 0x00	; 0
    a180:	70 e0       	ldi	r23, 0x00	; 0
    a182:	e3 df       	rcall	.-58     	; 0xa14a <_ZN5Print5printEmi>
    a184:	8c 01       	movw	r16, r24
    a186:	ce 01       	movw	r24, r28
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    a188:	c3 de       	rcall	.-634    	; 0x9f10 <_ZN5Print7printlnEv>
    a18a:	80 0f       	add	r24, r16
    a18c:	91 1f       	adc	r25, r17
  return n;
}
    a18e:	df 91       	pop	r29
    a190:	cf 91       	pop	r28
    a192:	1f 91       	pop	r17
    a194:	0f 91       	pop	r16
    a196:	08 95       	ret

0000a198 <_ZN5Print7printlnEji>:
    a198:	0f 93       	push	r16
    a19a:	1f 93       	push	r17
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    a19c:	cf 93       	push	r28
    a19e:	df 93       	push	r29
    a1a0:	ec 01       	movw	r28, r24
    a1a2:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    a1a4:	ab 01       	movw	r20, r22
    a1a6:	60 e0       	ldi	r22, 0x00	; 0
    a1a8:	70 e0       	ldi	r23, 0x00	; 0
    a1aa:	cf df       	rcall	.-98     	; 0xa14a <_ZN5Print5printEmi>
    a1ac:	8c 01       	movw	r16, r24
    a1ae:	ce 01       	movw	r24, r28
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    a1b0:	af de       	rcall	.-674    	; 0x9f10 <_ZN5Print7printlnEv>
    a1b2:	80 0f       	add	r24, r16
    a1b4:	91 1f       	adc	r25, r17
  return n;
}
    a1b6:	df 91       	pop	r29
    a1b8:	cf 91       	pop	r28
    a1ba:	1f 91       	pop	r17
    a1bc:	0f 91       	pop	r16
    a1be:	08 95       	ret

0000a1c0 <_ZN5Print7printlnEmi>:
    a1c0:	0f 93       	push	r16
    a1c2:	1f 93       	push	r17
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    a1c4:	cf 93       	push	r28
    a1c6:	df 93       	push	r29
    a1c8:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    a1ca:	bf df       	rcall	.-130    	; 0xa14a <_ZN5Print5printEmi>
    a1cc:	8c 01       	movw	r16, r24
    a1ce:	ce 01       	movw	r24, r28
  n += println();
    a1d0:	9f de       	rcall	.-706    	; 0x9f10 <_ZN5Print7printlnEv>
    a1d2:	80 0f       	add	r24, r16
    a1d4:	91 1f       	adc	r25, r17
  return n;
}
    a1d6:	df 91       	pop	r29
    a1d8:	cf 91       	pop	r28
    a1da:	1f 91       	pop	r17
    a1dc:	0f 91       	pop	r16
    a1de:	08 95       	ret

0000a1e0 <_ZN5Print10printFloatEdh>:
    a1e0:	4f 92       	push	r4
    a1e2:	5f 92       	push	r5

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    a1e4:	6f 92       	push	r6
    a1e6:	7f 92       	push	r7
    a1e8:	8f 92       	push	r8
    a1ea:	9f 92       	push	r9
    a1ec:	af 92       	push	r10
    a1ee:	bf 92       	push	r11
    a1f0:	cf 92       	push	r12
    a1f2:	df 92       	push	r13
    a1f4:	ef 92       	push	r14
    a1f6:	ff 92       	push	r15
    a1f8:	0f 93       	push	r16
    a1fa:	1f 93       	push	r17
    a1fc:	cf 93       	push	r28
    a1fe:	df 93       	push	r29
    a200:	ec 01       	movw	r28, r24
    a202:	6a 01       	movw	r12, r20
    a204:	7b 01       	movw	r14, r22
    a206:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    a208:	9a 01       	movw	r18, r20
    a20a:	ab 01       	movw	r20, r22
    a20c:	c7 01       	movw	r24, r14
    a20e:	b6 01       	movw	r22, r12
    a210:	4f d6       	rcall	.+3230   	; 0xaeb0 <__unordsf2>
    a212:	88 23       	and	r24, r24
    a214:	19 f0       	breq	.+6      	; 0xa21c <_ZN5Print10printFloatEdh+0x3c>
    a216:	6a e7       	ldi	r22, 0x7A	; 122
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    a218:	76 e0       	ldi	r23, 0x06	; 6
    a21a:	24 c0       	rjmp	.+72     	; 0xa264 <_ZN5Print10printFloatEdh+0x84>
    a21c:	26 01       	movw	r4, r12
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    a21e:	37 01       	movw	r6, r14
    a220:	e8 94       	clt
    a222:	77 f8       	bld	r7, 7
    a224:	2f ef       	ldi	r18, 0xFF	; 255
    a226:	3f ef       	ldi	r19, 0xFF	; 255
    a228:	4f e7       	ldi	r20, 0x7F	; 127
    a22a:	5f e7       	ldi	r21, 0x7F	; 127
    a22c:	c3 01       	movw	r24, r6
    a22e:	b2 01       	movw	r22, r4
    a230:	3f d6       	rcall	.+3198   	; 0xaeb0 <__unordsf2>
    a232:	81 11       	cpse	r24, r1
    a234:	0c c0       	rjmp	.+24     	; 0xa24e <_ZN5Print10printFloatEdh+0x6e>
    a236:	2f ef       	ldi	r18, 0xFF	; 255
    a238:	3f ef       	ldi	r19, 0xFF	; 255
    a23a:	4f e7       	ldi	r20, 0x7F	; 127
    a23c:	5f e7       	ldi	r21, 0x7F	; 127
    a23e:	c3 01       	movw	r24, r6
    a240:	b2 01       	movw	r22, r4
    a242:	80 d4       	rcall	.+2304   	; 0xab44 <__cmpsf2>
    a244:	18 16       	cp	r1, r24
    a246:	1c f4       	brge	.+6      	; 0xa24e <_ZN5Print10printFloatEdh+0x6e>
    a248:	6e e7       	ldi	r22, 0x7E	; 126
    a24a:	76 e0       	ldi	r23, 0x06	; 6
    a24c:	0b c0       	rjmp	.+22     	; 0xa264 <_ZN5Print10printFloatEdh+0x84>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    a24e:	2f ef       	ldi	r18, 0xFF	; 255
    a250:	3f ef       	ldi	r19, 0xFF	; 255
    a252:	4f e7       	ldi	r20, 0x7F	; 127
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    a254:	5f e4       	ldi	r21, 0x4F	; 79
    a256:	c7 01       	movw	r24, r14
    a258:	b6 01       	movw	r22, r12
    a25a:	c3 d5       	rcall	.+2950   	; 0xade2 <__gesf2>
    a25c:	18 16       	cp	r1, r24
    a25e:	a4 f4       	brge	.+40     	; 0xa288 <_ZN5Print10printFloatEdh+0xa8>
    a260:	62 e8       	ldi	r22, 0x82	; 130
    a262:	76 e0       	ldi	r23, 0x06	; 6
    a264:	ce 01       	movw	r24, r28
    a266:	df 91       	pop	r29
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    a268:	cf 91       	pop	r28
    a26a:	1f 91       	pop	r17
    a26c:	0f 91       	pop	r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    a26e:	ff 90       	pop	r15
    a270:	ef 90       	pop	r14
    a272:	df 90       	pop	r13
    a274:	cf 90       	pop	r12
    a276:	bf 90       	pop	r11
    a278:	af 90       	pop	r10
    a27a:	9f 90       	pop	r9
    a27c:	8f 90       	pop	r8
    a27e:	7f 90       	pop	r7
    a280:	6f 90       	pop	r6
    a282:	5f 90       	pop	r5
    a284:	4f 90       	pop	r4
    a286:	e9 cd       	rjmp	.-1070   	; 0x9e5a <_ZN5Print5writeEPKc>
    a288:	2f ef       	ldi	r18, 0xFF	; 255
    a28a:	3f ef       	ldi	r19, 0xFF	; 255
    a28c:	4f e7       	ldi	r20, 0x7F	; 127
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    a28e:	5f ec       	ldi	r21, 0xCF	; 207
    a290:	c7 01       	movw	r24, r14
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    a292:	b6 01       	movw	r22, r12
    a294:	57 d4       	rcall	.+2222   	; 0xab44 <__cmpsf2>
    a296:	87 fd       	sbrc	r24, 7
    a298:	e3 cf       	rjmp	.-58     	; 0xa260 <_ZN5Print10printFloatEdh+0x80>
    a29a:	20 e0       	ldi	r18, 0x00	; 0
    a29c:	30 e0       	ldi	r19, 0x00	; 0
    a29e:	a9 01       	movw	r20, r18
    a2a0:	c7 01       	movw	r24, r14
    a2a2:	b6 01       	movw	r22, r12
    a2a4:	4f d4       	rcall	.+2206   	; 0xab44 <__cmpsf2>
  
  // Handle negative numbers
  if (number < 0.0)
    a2a6:	87 ff       	sbrs	r24, 7
    a2a8:	09 c0       	rjmp	.+18     	; 0xa2bc <_ZN5Print10printFloatEdh+0xdc>
    a2aa:	6d e2       	ldi	r22, 0x2D	; 45
    a2ac:	ce 01       	movw	r24, r28
    a2ae:	1f de       	rcall	.-962    	; 0x9eee <_ZN5Print5printEc>
    a2b0:	8c 01       	movw	r16, r24
    a2b2:	f7 fa       	bst	r15, 7
    a2b4:	f0 94       	com	r15
    a2b6:	f7 f8       	bld	r15, 7
  {
     n += print('-');
    a2b8:	f0 94       	com	r15
    a2ba:	02 c0       	rjmp	.+4      	; 0xa2c0 <_ZN5Print10printFloatEdh+0xe0>
    a2bc:	00 e0       	ldi	r16, 0x00	; 0
    a2be:	10 e0       	ldi	r17, 0x00	; 0
    a2c0:	a1 2c       	mov	r10, r1
     number = -number;
    a2c2:	60 e0       	ldi	r22, 0x00	; 0
    a2c4:	70 e0       	ldi	r23, 0x00	; 0
    a2c6:	80 e0       	ldi	r24, 0x00	; 0
    a2c8:	9f e3       	ldi	r25, 0x3F	; 63
    a2ca:	ab 14       	cp	r10, r11
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    a2cc:	39 f0       	breq	.+14     	; 0xa2dc <_ZN5Print10printFloatEdh+0xfc>
    a2ce:	20 e0       	ldi	r18, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    a2d0:	30 e0       	ldi	r19, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    a2d2:	40 e2       	ldi	r20, 0x20	; 32
    a2d4:	51 e4       	ldi	r21, 0x41	; 65
    a2d6:	3a d4       	rcall	.+2164   	; 0xab4c <__divsf3>
    a2d8:	a3 94       	inc	r10
  for (uint8_t i=0; i<digits; ++i)
    a2da:	f7 cf       	rjmp	.-18     	; 0xa2ca <_ZN5Print10printFloatEdh+0xea>
    a2dc:	9b 01       	movw	r18, r22
    rounding /= 10.0;
    a2de:	ac 01       	movw	r20, r24
    a2e0:	c7 01       	movw	r24, r14
    a2e2:	b6 01       	movw	r22, r12
    a2e4:	cb d3       	rcall	.+1942   	; 0xaa7c <__addsf3>
    a2e6:	6b 01       	movw	r12, r22
    a2e8:	7c 01       	movw	r14, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    a2ea:	9d d4       	rcall	.+2362   	; 0xac26 <__fixunssfsi>
    a2ec:	2b 01       	movw	r4, r22
    rounding /= 10.0;
  
  number += rounding;
    a2ee:	3c 01       	movw	r6, r24
    a2f0:	c6 d4       	rcall	.+2444   	; 0xac7e <__floatunsisf>
    a2f2:	9b 01       	movw	r18, r22
    a2f4:	ac 01       	movw	r20, r24
    a2f6:	c7 01       	movw	r24, r14
    a2f8:	b6 01       	movw	r22, r12
    a2fa:	bf d3       	rcall	.+1918   	; 0xaa7a <__subsf3>
    a2fc:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    a2fe:	7c 01       	movw	r14, r24
    a300:	2a e0       	ldi	r18, 0x0A	; 10
    a302:	b3 01       	movw	r22, r6
    a304:	a2 01       	movw	r20, r4
  double remainder = number - (double)int_part;
    a306:	ce 01       	movw	r24, r28
    a308:	55 de       	rcall	.-854    	; 0x9fb4 <_ZN5Print11printNumberEmh>
    a30a:	08 0f       	add	r16, r24
    a30c:	19 1f       	adc	r17, r25
    a30e:	bb 20       	and	r11, r11
    a310:	31 f0       	breq	.+12     	; 0xa31e <_ZN5Print10printFloatEdh+0x13e>
    a312:	69 e0       	ldi	r22, 0x09	; 9
    a314:	76 e0       	ldi	r23, 0x06	; 6
    a316:	ce 01       	movw	r24, r28
    a318:	a0 dd       	rcall	.-1216   	; 0x9e5a <_ZN5Print5writeEPKc>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    a31a:	08 0f       	add	r16, r24
    a31c:	19 1f       	adc	r17, r25
    a31e:	7b 2c       	mov	r7, r11
    a320:	77 20       	and	r7, r7
    a322:	19 f1       	breq	.+70     	; 0xa36a <_ZN5Print10printFloatEdh+0x18a>
    a324:	20 e0       	ldi	r18, 0x00	; 0
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    a326:	30 e0       	ldi	r19, 0x00	; 0
    a328:	40 e2       	ldi	r20, 0x20	; 32

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    a32a:	51 e4       	ldi	r21, 0x41	; 65
    a32c:	c7 01       	movw	r24, r14
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    a32e:	b6 01       	movw	r22, r12
    a330:	5c d5       	rcall	.+2744   	; 0xadea <__mulsf3>
    a332:	6b 01       	movw	r12, r22
    a334:	7c 01       	movw	r14, r24
    a336:	72 d4       	rcall	.+2276   	; 0xac1c <__fixsfsi>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    a338:	4b 01       	movw	r8, r22
    a33a:	aa 24       	eor	r10, r10
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    a33c:	97 fc       	sbrc	r9, 7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    a33e:	a0 94       	com	r10
    a340:	ba 2c       	mov	r11, r10
  {
    remainder *= 10.0;
    a342:	2a e0       	ldi	r18, 0x0A	; 10
    a344:	30 e0       	ldi	r19, 0x00	; 0
    a346:	b5 01       	movw	r22, r10
    a348:	a4 01       	movw	r20, r8
    a34a:	ce 01       	movw	r24, r28
    a34c:	8a de       	rcall	.-748    	; 0xa062 <_ZN5Print5printEli>
    a34e:	08 0f       	add	r16, r24
    a350:	19 1f       	adc	r17, r25
    a352:	c5 01       	movw	r24, r10
    a354:	b4 01       	movw	r22, r8
    int toPrint = int(remainder);
    a356:	95 d4       	rcall	.+2346   	; 0xac82 <__floatsisf>
    a358:	9b 01       	movw	r18, r22
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    a35a:	ac 01       	movw	r20, r24
    a35c:	c7 01       	movw	r24, r14
    a35e:	b6 01       	movw	r22, r12
    a360:	8c d3       	rcall	.+1816   	; 0xaa7a <__subsf3>
    a362:	6b 01       	movw	r12, r22
    a364:	7c 01       	movw	r14, r24
    a366:	7a 94       	dec	r7
    a368:	db cf       	rjmp	.-74     	; 0xa320 <_ZN5Print10printFloatEdh+0x140>
    a36a:	c8 01       	movw	r24, r16
    a36c:	df 91       	pop	r29
    a36e:	cf 91       	pop	r28
    a370:	1f 91       	pop	r17
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    a372:	0f 91       	pop	r16
    a374:	ff 90       	pop	r15
    remainder -= toPrint; 
    a376:	ef 90       	pop	r14
    a378:	df 90       	pop	r13
    a37a:	cf 90       	pop	r12
    a37c:	bf 90       	pop	r11
    a37e:	af 90       	pop	r10
    a380:	9f 90       	pop	r9
    a382:	8f 90       	pop	r8
    a384:	7f 90       	pop	r7
    a386:	6f 90       	pop	r6
    a388:	5f 90       	pop	r5
    a38a:	4f 90       	pop	r4
    a38c:	08 95       	ret

0000a38e <_ZN5Print5printEdi>:
    a38e:	28 cf       	rjmp	.-432    	; 0xa1e0 <_ZN5Print10printFloatEdh>

0000a390 <_ZN5Print7printlnEdi>:
    a390:	0f 93       	push	r16
  } 
  
  return n;
}
    a392:	1f 93       	push	r17
    a394:	cf 93       	push	r28
    a396:	df 93       	push	r29
    a398:	ec 01       	movw	r28, r24
    a39a:	22 df       	rcall	.-444    	; 0xa1e0 <_ZN5Print10printFloatEdh>
    a39c:	8c 01       	movw	r16, r24
    a39e:	ce 01       	movw	r24, r28
    a3a0:	b7 dd       	rcall	.-1170   	; 0x9f10 <_ZN5Print7printlnEv>
    a3a2:	80 0f       	add	r24, r16
    a3a4:	91 1f       	adc	r25, r17
    a3a6:	df 91       	pop	r29
    a3a8:	cf 91       	pop	r28
    a3aa:	1f 91       	pop	r17
    a3ac:	0f 91       	pop	r16
    a3ae:	08 95       	ret

0000a3b0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    a3b0:	0f 93       	push	r16
    a3b2:	1f 93       	push	r17
    a3b4:	cf 93       	push	r28
    a3b6:	df 93       	push	r29
    a3b8:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    a3ba:	3d d8       	rcall	.-3974   	; 0x9436 <millis>
    a3bc:	68 87       	std	Y+8, r22	; 0x08
    a3be:	79 87       	std	Y+9, r23	; 0x09
    a3c0:	8a 87       	std	Y+10, r24	; 0x0a
    a3c2:	9b 87       	std	Y+11, r25	; 0x0b
    a3c4:	e8 81       	ld	r30, Y
  do {
    c = read();
    a3c6:	f9 81       	ldd	r31, Y+1	; 0x01
    a3c8:	06 80       	ldd	r0, Z+6	; 0x06
    a3ca:	f7 81       	ldd	r31, Z+7	; 0x07
    a3cc:	e0 2d       	mov	r30, r0
    a3ce:	ce 01       	movw	r24, r28
    a3d0:	19 95       	eicall
    a3d2:	97 ff       	sbrs	r25, 7
    if (c >= 0) return c;
    a3d4:	14 c0       	rjmp	.+40     	; 0xa3fe <_ZN6Stream9timedReadEv+0x4e>
    a3d6:	2f d8       	rcall	.-4002   	; 0x9436 <millis>
  } while(millis() - _startMillis < _timeout);
    a3d8:	08 85       	ldd	r16, Y+8	; 0x08
    a3da:	19 85       	ldd	r17, Y+9	; 0x09
    a3dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    a3de:	3b 85       	ldd	r19, Y+11	; 0x0b
    a3e0:	60 1b       	sub	r22, r16
    a3e2:	71 0b       	sbc	r23, r17
    a3e4:	82 0b       	sbc	r24, r18
    a3e6:	93 0b       	sbc	r25, r19
    a3e8:	0c 81       	ldd	r16, Y+4	; 0x04
    a3ea:	1d 81       	ldd	r17, Y+5	; 0x05
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    a3ec:	2e 81       	ldd	r18, Y+6	; 0x06
    a3ee:	3f 81       	ldd	r19, Y+7	; 0x07
    a3f0:	60 17       	cp	r22, r16
    a3f2:	71 07       	cpc	r23, r17
    a3f4:	82 07       	cpc	r24, r18
    a3f6:	93 07       	cpc	r25, r19
    a3f8:	28 f3       	brcs	.-54     	; 0xa3c4 <_ZN6Stream9timedReadEv+0x14>
    a3fa:	8f ef       	ldi	r24, 0xFF	; 255
    a3fc:	9f ef       	ldi	r25, 0xFF	; 255
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a3fe:	df 91       	pop	r29
    a400:	cf 91       	pop	r28
}
    a402:	1f 91       	pop	r17
    a404:	0f 91       	pop	r16
    a406:	08 95       	ret

0000a408 <_ZN6Stream10setTimeoutEm>:
    a408:	fc 01       	movw	r30, r24
    a40a:	44 83       	std	Z+4, r20	; 0x04
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    a40c:	55 83       	std	Z+5, r21	; 0x05
    a40e:	66 83       	std	Z+6, r22	; 0x06
    a410:	77 83       	std	Z+7, r23	; 0x07
    a412:	08 95       	ret

0000a414 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    a414:	af 92       	push	r10
    a416:	bf 92       	push	r11
    a418:	cf 92       	push	r12
    a41a:	df 92       	push	r13
    a41c:	ef 92       	push	r14
    a41e:	ff 92       	push	r15
    a420:	0f 93       	push	r16
    a422:	1f 93       	push	r17
    a424:	cf 93       	push	r28
    a426:	df 93       	push	r29
    a428:	6c 01       	movw	r12, r24
    a42a:	79 01       	movw	r14, r18
  if (length < 1) return 0;
    a42c:	21 15       	cp	r18, r1
    a42e:	31 05       	cpc	r19, r1
    a430:	b1 f0       	breq	.+44     	; 0xa45e <_ZN6Stream14readBytesUntilEcPcj+0x4a>
    a432:	8a 01       	movw	r16, r20
    a434:	c0 e0       	ldi	r28, 0x00	; 0
    a436:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    a438:	a6 2e       	mov	r10, r22
    a43a:	bb 24       	eor	r11, r11
    a43c:	a7 fc       	sbrc	r10, 7
    a43e:	b0 94       	com	r11
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    a440:	c6 01       	movw	r24, r12
    a442:	b6 df       	rcall	.-148    	; 0xa3b0 <_ZN6Stream9timedReadEv>
    a444:	97 fd       	sbrc	r25, 7
    if (c < 0 || c == terminator) break;
    a446:	0e c0       	rjmp	.+28     	; 0xa464 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    a448:	8a 15       	cp	r24, r10
    a44a:	9b 05       	cpc	r25, r11
    a44c:	59 f0       	breq	.+22     	; 0xa464 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    a44e:	f8 01       	movw	r30, r16
    *buffer++ = (char)c;
    a450:	81 93       	st	Z+, r24
    a452:	8f 01       	movw	r16, r30
    a454:	21 96       	adiw	r28, 0x01	; 1
    index++;
    a456:	ce 15       	cp	r28, r14

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    a458:	df 05       	cpc	r29, r15
    a45a:	91 f7       	brne	.-28     	; 0xa440 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
    a45c:	03 c0       	rjmp	.+6      	; 0xa464 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    a45e:	80 e0       	ldi	r24, 0x00	; 0
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
    a460:	90 e0       	ldi	r25, 0x00	; 0
    a462:	01 c0       	rjmp	.+2      	; 0xa466 <_ZN6Stream14readBytesUntilEcPcj+0x52>
    a464:	ce 01       	movw	r24, r28
    a466:	df 91       	pop	r29
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
    a468:	cf 91       	pop	r28
    a46a:	1f 91       	pop	r17
    a46c:	0f 91       	pop	r16
    a46e:	ff 90       	pop	r15
    a470:	ef 90       	pop	r14
    a472:	df 90       	pop	r13
    a474:	cf 90       	pop	r12
    a476:	bf 90       	pop	r11
    a478:	af 90       	pop	r10
    a47a:	08 95       	ret

0000a47c <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    a47c:	cf 93       	push	r28
    a47e:	df 93       	push	r29
    a480:	00 d0       	rcall	.+0      	; 0xa482 <_Z6randoml+0x6>
    a482:	1f 92       	push	r1
    a484:	cd b7       	in	r28, 0x3d	; 61
    a486:	de b7       	in	r29, 0x3e	; 62
    a488:	9b 01       	movw	r18, r22
    a48a:	ac 01       	movw	r20, r24
  if (howbig == 0) {
    a48c:	61 15       	cp	r22, r1
    a48e:	71 05       	cpc	r23, r1
    a490:	81 05       	cpc	r24, r1
    a492:	91 05       	cpc	r25, r1
    a494:	59 f0       	breq	.+22     	; 0xa4ac <_Z6randoml+0x30>
    return 0;
  }
  return random() % howbig;
    a496:	69 83       	std	Y+1, r22	; 0x01
    a498:	3a 83       	std	Y+2, r19	; 0x02
    a49a:	4b 83       	std	Y+3, r20	; 0x03
    a49c:	5c 83       	std	Y+4, r21	; 0x04
    a49e:	f4 d6       	rcall	.+3560   	; 0xb288 <random>
    a4a0:	29 81       	ldd	r18, Y+1	; 0x01
    a4a2:	3a 81       	ldd	r19, Y+2	; 0x02
    a4a4:	4b 81       	ldd	r20, Y+3	; 0x03
    a4a6:	5c 81       	ldd	r21, Y+4	; 0x04
    a4a8:	38 d5       	rcall	.+2672   	; 0xaf1a <__divmodsi4>
    a4aa:	03 c0       	rjmp	.+6      	; 0xa4b2 <_Z6randoml+0x36>
    a4ac:	60 e0       	ldi	r22, 0x00	; 0
    a4ae:	70 e0       	ldi	r23, 0x00	; 0
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    a4b0:	cb 01       	movw	r24, r22
    a4b2:	0f 90       	pop	r0
    a4b4:	0f 90       	pop	r0
  }
  return random() % howbig;
}
    a4b6:	0f 90       	pop	r0
    a4b8:	0f 90       	pop	r0
    a4ba:	df 91       	pop	r29
    a4bc:	cf 91       	pop	r28
    a4be:	08 95       	ret

0000a4c0 <_Z6randomll>:
    a4c0:	cf 92       	push	r12
    a4c2:	df 92       	push	r13

long random(long howsmall, long howbig)
{
    a4c4:	ef 92       	push	r14
    a4c6:	ff 92       	push	r15
    a4c8:	6b 01       	movw	r12, r22
    a4ca:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    a4cc:	62 17       	cp	r22, r18
    a4ce:	73 07       	cpc	r23, r19
    a4d0:	84 07       	cpc	r24, r20
    a4d2:	95 07       	cpc	r25, r21
    a4d4:	5c f4       	brge	.+22     	; 0xa4ec <_Z6randomll+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    a4d6:	ca 01       	movw	r24, r20
    a4d8:	b9 01       	movw	r22, r18
    a4da:	6c 19       	sub	r22, r12
    a4dc:	7d 09       	sbc	r23, r13
    a4de:	8e 09       	sbc	r24, r14
    a4e0:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    a4e2:	cc df       	rcall	.-104    	; 0xa47c <_Z6randoml>
    a4e4:	6c 0d       	add	r22, r12
    a4e6:	7d 1d       	adc	r23, r13
    a4e8:	8e 1d       	adc	r24, r14
    a4ea:	9f 1d       	adc	r25, r15
    a4ec:	ff 90       	pop	r15
}
    a4ee:	ef 90       	pop	r14
    a4f0:	df 90       	pop	r13
    a4f2:	cf 90       	pop	r12
    a4f4:	08 95       	ret

0000a4f6 <_Z3maplllll>:
    a4f6:	4f 92       	push	r4

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    a4f8:	5f 92       	push	r5
    a4fa:	6f 92       	push	r6
    a4fc:	7f 92       	push	r7
    a4fe:	af 92       	push	r10
    a500:	bf 92       	push	r11
    a502:	cf 92       	push	r12
    a504:	df 92       	push	r13
    a506:	ef 92       	push	r14
    a508:	ff 92       	push	r15
    a50a:	0f 93       	push	r16
    a50c:	1f 93       	push	r17
    a50e:	cf 93       	push	r28
    a510:	df 93       	push	r29
    a512:	cd b7       	in	r28, 0x3d	; 61
    a514:	de b7       	in	r29, 0x3e	; 62
    a516:	29 01       	movw	r4, r18
    a518:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    a51a:	62 1b       	sub	r22, r18
    a51c:	73 0b       	sbc	r23, r19
    a51e:	84 0b       	sbc	r24, r20
    a520:	95 0b       	sbc	r25, r21
    a522:	2a 89       	ldd	r18, Y+18	; 0x12
    a524:	3b 89       	ldd	r19, Y+19	; 0x13
    a526:	4c 89       	ldd	r20, Y+20	; 0x14
    a528:	5d 89       	ldd	r21, Y+21	; 0x15
    a52a:	2a 19       	sub	r18, r10
    a52c:	3b 09       	sbc	r19, r11
    a52e:	4c 09       	sbc	r20, r12
    a530:	5d 09       	sbc	r21, r13
    a532:	2a 8b       	std	Y+18, r18	; 0x12
    a534:	3b 8b       	std	Y+19, r19	; 0x13
    a536:	4c 8b       	std	Y+20, r20	; 0x14
    a538:	5d 8b       	std	Y+21, r21	; 0x15
    a53a:	9b 01       	movw	r18, r22
    a53c:	ac 01       	movw	r20, r24
    a53e:	6a 89       	ldd	r22, Y+18	; 0x12
    a540:	7b 89       	ldd	r23, Y+19	; 0x13
    a542:	8c 89       	ldd	r24, Y+20	; 0x14
    a544:	9d 89       	ldd	r25, Y+21	; 0x15
    a546:	b8 d4       	rcall	.+2416   	; 0xaeb8 <__mulsi3>
    a548:	e4 18       	sub	r14, r4
    a54a:	f5 08       	sbc	r15, r5
    a54c:	06 09       	sbc	r16, r6
    a54e:	17 09       	sbc	r17, r7
    a550:	a8 01       	movw	r20, r16
    a552:	97 01       	movw	r18, r14
    a554:	e2 d4       	rcall	.+2500   	; 0xaf1a <__divmodsi4>
    a556:	2a 0d       	add	r18, r10
    a558:	3b 1d       	adc	r19, r11
    a55a:	4c 1d       	adc	r20, r12
    a55c:	5d 1d       	adc	r21, r13
    a55e:	ca 01       	movw	r24, r20
    a560:	b9 01       	movw	r22, r18
}
    a562:	df 91       	pop	r29
    a564:	cf 91       	pop	r28
    a566:	1f 91       	pop	r17
    a568:	0f 91       	pop	r16
    a56a:	ff 90       	pop	r15
    a56c:	ef 90       	pop	r14
    a56e:	df 90       	pop	r13
    a570:	cf 90       	pop	r12
    a572:	bf 90       	pop	r11
    a574:	af 90       	pop	r10
    a576:	7f 90       	pop	r7
    a578:	6f 90       	pop	r6
    a57a:	5f 90       	pop	r5
    a57c:	4f 90       	pop	r4
    a57e:	08 95       	ret

0000a580 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    a580:	fc 01       	movw	r30, r24
    a582:	80 81       	ld	r24, Z
    a584:	91 81       	ldd	r25, Z+1	; 0x01
    a586:	a7 c5       	rjmp	.+2894   	; 0xb0d6 <free>

0000a588 <_ZN6String10invalidateEv>:
    a588:	cf 93       	push	r28
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    a58a:	df 93       	push	r29
    a58c:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    a58e:	88 81       	ld	r24, Y
    a590:	99 81       	ldd	r25, Y+1	; 0x01
    a592:	00 97       	sbiw	r24, 0x00	; 0
    a594:	09 f0       	breq	.+2      	; 0xa598 <_ZN6String10invalidateEv+0x10>
    a596:	9f d5       	rcall	.+2878   	; 0xb0d6 <free>
    a598:	19 82       	std	Y+1, r1	; 0x01
	buffer = NULL;
    a59a:	18 82       	st	Y, r1
    a59c:	1d 82       	std	Y+5, r1	; 0x05
	capacity = len = 0;
    a59e:	1c 82       	std	Y+4, r1	; 0x04
    a5a0:	1b 82       	std	Y+3, r1	; 0x03
    a5a2:	1a 82       	std	Y+2, r1	; 0x02
    a5a4:	df 91       	pop	r29
}
    a5a6:	cf 91       	pop	r28
    a5a8:	08 95       	ret

0000a5aa <_ZN6String12changeBufferEj>:
    a5aa:	0f 93       	push	r16
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    a5ac:	1f 93       	push	r17
    a5ae:	cf 93       	push	r28
    a5b0:	df 93       	push	r29
    a5b2:	ec 01       	movw	r28, r24
    a5b4:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    a5b6:	6f 5f       	subi	r22, 0xFF	; 255
    a5b8:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ba:	88 81       	ld	r24, Y
    a5bc:	99 81       	ldd	r25, Y+1	; 0x01
    a5be:	70 d6       	rcall	.+3296   	; 0xb2a0 <realloc>
    a5c0:	00 97       	sbiw	r24, 0x00	; 0
	if (newbuffer) {
    a5c2:	31 f0       	breq	.+12     	; 0xa5d0 <_ZN6String12changeBufferEj+0x26>
    a5c4:	99 83       	std	Y+1, r25	; 0x01
		buffer = newbuffer;
    a5c6:	88 83       	st	Y, r24
    a5c8:	1b 83       	std	Y+3, r17	; 0x03
		capacity = maxStrLen;
    a5ca:	0a 83       	std	Y+2, r16	; 0x02
    a5cc:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
    a5ce:	01 c0       	rjmp	.+2      	; 0xa5d2 <_ZN6String12changeBufferEj+0x28>
    a5d0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
    a5d2:	df 91       	pop	r29
}
    a5d4:	cf 91       	pop	r28
    a5d6:	1f 91       	pop	r17
    a5d8:	0f 91       	pop	r16
    a5da:	08 95       	ret

0000a5dc <_ZN6String7reserveEj>:
    a5dc:	cf 93       	push	r28
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    a5de:	df 93       	push	r29
    a5e0:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    a5e2:	88 81       	ld	r24, Y
    a5e4:	99 81       	ldd	r25, Y+1	; 0x01
    a5e6:	89 2b       	or	r24, r25
    a5e8:	29 f0       	breq	.+10     	; 0xa5f4 <_ZN6String7reserveEj+0x18>
    a5ea:	8a 81       	ldd	r24, Y+2	; 0x02
    a5ec:	9b 81       	ldd	r25, Y+3	; 0x03
    a5ee:	86 17       	cp	r24, r22
    a5f0:	97 07       	cpc	r25, r23
    a5f2:	58 f4       	brcc	.+22     	; 0xa60a <_ZN6String7reserveEj+0x2e>
	if (changeBuffer(size)) {
    a5f4:	ce 01       	movw	r24, r28
    a5f6:	d9 df       	rcall	.-78     	; 0xa5aa <_ZN6String12changeBufferEj>
    a5f8:	88 23       	and	r24, r24
    a5fa:	41 f0       	breq	.+16     	; 0xa60c <_ZN6String7reserveEj+0x30>
    a5fc:	8c 81       	ldd	r24, Y+4	; 0x04
		if (len == 0) buffer[0] = 0;
    a5fe:	9d 81       	ldd	r25, Y+5	; 0x05
    a600:	89 2b       	or	r24, r25
    a602:	19 f4       	brne	.+6      	; 0xa60a <_ZN6String7reserveEj+0x2e>
    a604:	e8 81       	ld	r30, Y
    a606:	f9 81       	ldd	r31, Y+1	; 0x01
    a608:	10 82       	st	Z, r1
    a60a:	81 e0       	ldi	r24, 0x01	; 1
    a60c:	df 91       	pop	r29
		return 1;
	}
	return 0;
}
    a60e:	cf 91       	pop	r28
    a610:	08 95       	ret

0000a612 <_ZN6String4copyEPKcj>:
    a612:	ef 92       	push	r14
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    a614:	ff 92       	push	r15
    a616:	0f 93       	push	r16
    a618:	1f 93       	push	r17
    a61a:	cf 93       	push	r28
    a61c:	df 93       	push	r29
    a61e:	ec 01       	movw	r28, r24
    a620:	7b 01       	movw	r14, r22
    a622:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    a624:	ba 01       	movw	r22, r20
    a626:	da df       	rcall	.-76     	; 0xa5dc <_ZN6String7reserveEj>
    a628:	81 11       	cpse	r24, r1
    a62a:	03 c0       	rjmp	.+6      	; 0xa632 <_ZN6String4copyEPKcj+0x20>
    a62c:	ce 01       	movw	r24, r28
		invalidate();
    a62e:	ac df       	rcall	.-168    	; 0xa588 <_ZN6String10invalidateEv>
    a630:	07 c0       	rjmp	.+14     	; 0xa640 <_ZN6String4copyEPKcj+0x2e>
    a632:	1d 83       	std	Y+5, r17	; 0x05
		return *this;
    a634:	0c 83       	std	Y+4, r16	; 0x04
	}
	len = length;
    a636:	b7 01       	movw	r22, r14
    a638:	88 81       	ld	r24, Y
	strcpy(buffer, cstr);
    a63a:	99 81       	ldd	r25, Y+1	; 0x01
    a63c:	0e 94 47 5c 	call	0xb88e	; 0xb88e <strcpy>
    a640:	ce 01       	movw	r24, r28
    a642:	df 91       	pop	r29
	return *this;
}
    a644:	cf 91       	pop	r28
    a646:	1f 91       	pop	r17
    a648:	0f 91       	pop	r16
    a64a:	ff 90       	pop	r15
    a64c:	ef 90       	pop	r14
    a64e:	08 95       	ret

0000a650 <_ZN6StringC1EPKc>:
    a650:	fc 01       	movw	r30, r24
    a652:	11 82       	std	Z+1, r1	; 0x01
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    a654:	10 82       	st	Z, r1
	capacity = 0;
    a656:	13 82       	std	Z+3, r1	; 0x03
    a658:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    a65a:	15 82       	std	Z+5, r1	; 0x05
    a65c:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    a65e:	61 15       	cp	r22, r1
    a660:	71 05       	cpc	r23, r1
    a662:	51 f0       	breq	.+20     	; 0xa678 <_ZN6StringC1EPKc+0x28>
    a664:	fb 01       	movw	r30, r22
    a666:	01 90       	ld	r0, Z+
    a668:	00 20       	and	r0, r0
    a66a:	e9 f7       	brne	.-6      	; 0xa666 <_ZN6StringC1EPKc+0x16>
    a66c:	af 01       	movw	r20, r30
    a66e:	41 50       	subi	r20, 0x01	; 1
    a670:	51 09       	sbc	r21, r1
    a672:	46 1b       	sub	r20, r22
    a674:	57 0b       	sbc	r21, r23
    a676:	cd cf       	rjmp	.-102    	; 0xa612 <_ZN6String4copyEPKcj>
    a678:	08 95       	ret

0000a67a <_ZN6String4copyEPK19__FlashStringHelperj>:
    a67a:	ef 92       	push	r14
	strcpy(buffer, cstr);
	return *this;
}

String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
{
    a67c:	ff 92       	push	r15
    a67e:	0f 93       	push	r16
    a680:	1f 93       	push	r17
    a682:	cf 93       	push	r28
    a684:	df 93       	push	r29
    a686:	ec 01       	movw	r28, r24
    a688:	7b 01       	movw	r14, r22
    a68a:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    a68c:	ba 01       	movw	r22, r20
    a68e:	a6 df       	rcall	.-180    	; 0xa5dc <_ZN6String7reserveEj>
    a690:	81 11       	cpse	r24, r1
    a692:	03 c0       	rjmp	.+6      	; 0xa69a <_ZN6String4copyEPK19__FlashStringHelperj+0x20>
    a694:	ce 01       	movw	r24, r28
		invalidate();
    a696:	78 df       	rcall	.-272    	; 0xa588 <_ZN6String10invalidateEv>
    a698:	07 c0       	rjmp	.+14     	; 0xa6a8 <_ZN6String4copyEPK19__FlashStringHelperj+0x2e>
    a69a:	1d 83       	std	Y+5, r17	; 0x05
		return *this;
    a69c:	0c 83       	std	Y+4, r16	; 0x04
	}
	len = length;
    a69e:	b7 01       	movw	r22, r14
    a6a0:	88 81       	ld	r24, Y
	strcpy_P(buffer, (PGM_P)pstr);
    a6a2:	99 81       	ldd	r25, Y+1	; 0x01
    a6a4:	0e 94 f2 5b 	call	0xb7e4	; 0xb7e4 <strcpy_P>
    a6a8:	ce 01       	movw	r24, r28
    a6aa:	df 91       	pop	r29
	return *this;
}
    a6ac:	cf 91       	pop	r28
    a6ae:	1f 91       	pop	r17
    a6b0:	0f 91       	pop	r16
    a6b2:	ff 90       	pop	r15
    a6b4:	ef 90       	pop	r14
    a6b6:	08 95       	ret

0000a6b8 <_ZN6StringaSERKS_>:
    a6b8:	cf 93       	push	r28
    a6ba:	df 93       	push	r29
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    a6bc:	ec 01       	movw	r28, r24
    a6be:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    a6c0:	86 17       	cp	r24, r22
    a6c2:	97 07       	cpc	r25, r23
    a6c4:	51 f0       	breq	.+20     	; 0xa6da <_ZN6StringaSERKS_+0x22>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    a6c6:	60 81       	ld	r22, Z
    a6c8:	71 81       	ldd	r23, Z+1	; 0x01
    a6ca:	61 15       	cp	r22, r1
    a6cc:	71 05       	cpc	r23, r1
    a6ce:	21 f0       	breq	.+8      	; 0xa6d8 <_ZN6StringaSERKS_+0x20>
    a6d0:	44 81       	ldd	r20, Z+4	; 0x04
    a6d2:	55 81       	ldd	r21, Z+5	; 0x05
    a6d4:	9e df       	rcall	.-196    	; 0xa612 <_ZN6String4copyEPKcj>
    a6d6:	01 c0       	rjmp	.+2      	; 0xa6da <_ZN6StringaSERKS_+0x22>
    a6d8:	57 df       	rcall	.-338    	; 0xa588 <_ZN6String10invalidateEv>
	else invalidate();
    a6da:	ce 01       	movw	r24, r28
    a6dc:	df 91       	pop	r29
	
	return *this;
}
    a6de:	cf 91       	pop	r28
    a6e0:	08 95       	ret

0000a6e2 <_ZN6StringC1ERKS_>:
    a6e2:	fc 01       	movw	r30, r24
    a6e4:	11 82       	std	Z+1, r1	; 0x01
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    a6e6:	10 82       	st	Z, r1
	capacity = 0;
    a6e8:	13 82       	std	Z+3, r1	; 0x03
    a6ea:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    a6ec:	15 82       	std	Z+5, r1	; 0x05
    a6ee:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    a6f0:	e3 cf       	rjmp	.-58     	; 0xa6b8 <_ZN6StringaSERKS_>

0000a6f2 <_ZN6StringaSEPKc>:
    a6f2:	cf 93       	push	r28
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    a6f4:	df 93       	push	r29
    a6f6:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
    a6f8:	61 15       	cp	r22, r1
    a6fa:	71 05       	cpc	r23, r1
    a6fc:	59 f0       	breq	.+22     	; 0xa714 <_ZN6StringaSEPKc+0x22>
    a6fe:	fb 01       	movw	r30, r22
    a700:	01 90       	ld	r0, Z+
    a702:	00 20       	and	r0, r0
    a704:	e9 f7       	brne	.-6      	; 0xa700 <_ZN6StringaSEPKc+0xe>
    a706:	af 01       	movw	r20, r30
    a708:	41 50       	subi	r20, 0x01	; 1
    a70a:	51 09       	sbc	r21, r1
    a70c:	46 1b       	sub	r20, r22
    a70e:	57 0b       	sbc	r21, r23
    a710:	80 df       	rcall	.-256    	; 0xa612 <_ZN6String4copyEPKcj>
    a712:	01 c0       	rjmp	.+2      	; 0xa716 <_ZN6StringaSEPKc+0x24>
    a714:	39 df       	rcall	.-398    	; 0xa588 <_ZN6String10invalidateEv>
	else invalidate();
    a716:	ce 01       	movw	r24, r28
    a718:	df 91       	pop	r29
	
	return *this;
}
    a71a:	cf 91       	pop	r28
    a71c:	08 95       	ret

0000a71e <_ZN6StringC1Ejh>:
    a71e:	0f 93       	push	r16
    a720:	1f 93       	push	r17
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    a722:	cf 93       	push	r28
    a724:	df 93       	push	r29
    a726:	cd b7       	in	r28, 0x3d	; 61
    a728:	de b7       	in	r29, 0x3e	; 62
    a72a:	61 97       	sbiw	r28, 0x11	; 17
    a72c:	0f b6       	in	r0, 0x3f	; 63
    a72e:	f8 94       	cli
    a730:	de bf       	out	0x3e, r29	; 62
    a732:	0f be       	out	0x3f, r0	; 63
    a734:	cd bf       	out	0x3d, r28	; 61
    a736:	8c 01       	movw	r16, r24
    a738:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    a73a:	f8 01       	movw	r30, r16
    a73c:	11 82       	std	Z+1, r1	; 0x01
    a73e:	10 82       	st	Z, r1
	capacity = 0;
    a740:	13 82       	std	Z+3, r1	; 0x03
    a742:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    a744:	15 82       	std	Z+5, r1	; 0x05
    a746:	14 82       	std	Z+4, r1	; 0x04

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
    a748:	50 e0       	ldi	r21, 0x00	; 0
    a74a:	be 01       	movw	r22, r28
    a74c:	6f 5f       	subi	r22, 0xFF	; 255
    a74e:	7f 4f       	sbci	r23, 0xFF	; 255
    a750:	0e 94 a0 5c 	call	0xb940	; 0xb940 <utoa>
	*this = buf;
    a754:	be 01       	movw	r22, r28
    a756:	6f 5f       	subi	r22, 0xFF	; 255
    a758:	7f 4f       	sbci	r23, 0xFF	; 255
    a75a:	c8 01       	movw	r24, r16
    a75c:	ca df       	rcall	.-108    	; 0xa6f2 <_ZN6StringaSEPKc>
    a75e:	61 96       	adiw	r28, 0x11	; 17
}
    a760:	0f b6       	in	r0, 0x3f	; 63
    a762:	f8 94       	cli
    a764:	de bf       	out	0x3e, r29	; 62
    a766:	0f be       	out	0x3f, r0	; 63
    a768:	cd bf       	out	0x3d, r28	; 61
    a76a:	df 91       	pop	r29
    a76c:	cf 91       	pop	r28
    a76e:	1f 91       	pop	r17
    a770:	0f 91       	pop	r16
    a772:	08 95       	ret

0000a774 <_ZN6StringaSEPK19__FlashStringHelper>:
    a774:	0f 93       	push	r16
	
	return *this;
}

String & String::operator = (const __FlashStringHelper *pstr)
{
    a776:	1f 93       	push	r17
    a778:	cf 93       	push	r28
    a77a:	df 93       	push	r29
    a77c:	1f 92       	push	r1
    a77e:	1f 92       	push	r1
    a780:	cd b7       	in	r28, 0x3d	; 61
    a782:	de b7       	in	r29, 0x3e	; 62
    a784:	8c 01       	movw	r16, r24
	if (pstr) copy(pstr, strlen_P((PGM_P)pstr));
    a786:	61 15       	cp	r22, r1
    a788:	71 05       	cpc	r23, r1
    a78a:	59 f0       	breq	.+22     	; 0xa7a2 <_ZN6StringaSEPK19__FlashStringHelper+0x2e>


__attribute__((__always_inline__)) static inline size_t strlen_P(const char * s);
static inline size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    a78c:	cb 01       	movw	r24, r22
    a78e:	69 83       	std	Y+1, r22	; 0x01
    a790:	7a 83       	std	Y+2, r23	; 0x02
    a792:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <__strlen_P>
    a796:	ac 01       	movw	r20, r24
    a798:	69 81       	ldd	r22, Y+1	; 0x01
    a79a:	7a 81       	ldd	r23, Y+2	; 0x02
    a79c:	c8 01       	movw	r24, r16
    a79e:	6d df       	rcall	.-294    	; 0xa67a <_ZN6String4copyEPK19__FlashStringHelperj>
    a7a0:	01 c0       	rjmp	.+2      	; 0xa7a4 <_ZN6StringaSEPK19__FlashStringHelper+0x30>
    a7a2:	f2 de       	rcall	.-540    	; 0xa588 <_ZN6String10invalidateEv>
	else invalidate();
    a7a4:	c8 01       	movw	r24, r16
    a7a6:	0f 90       	pop	r0

	return *this;
}
    a7a8:	0f 90       	pop	r0
    a7aa:	df 91       	pop	r29
    a7ac:	cf 91       	pop	r28
    a7ae:	1f 91       	pop	r17
    a7b0:	0f 91       	pop	r16
    a7b2:	08 95       	ret

0000a7b4 <_ZN6StringC1EPK19__FlashStringHelper>:
    a7b4:	fc 01       	movw	r30, r24
    a7b6:	11 82       	std	Z+1, r1	; 0x01
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    a7b8:	10 82       	st	Z, r1
	capacity = 0;
    a7ba:	13 82       	std	Z+3, r1	; 0x03
    a7bc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    a7be:	15 82       	std	Z+5, r1	; 0x05
    a7c0:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const __FlashStringHelper *pstr)
{
	init();
	*this = pstr;
    a7c2:	d8 cf       	rjmp	.-80     	; 0xa774 <_ZN6StringaSEPK19__FlashStringHelper>

0000a7c4 <_ZN6String6concatEPKcj>:
    a7c4:	ef 92       	push	r14
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    a7c6:	ff 92       	push	r15
    a7c8:	0f 93       	push	r16
    a7ca:	1f 93       	push	r17
    a7cc:	cf 93       	push	r28
    a7ce:	df 93       	push	r29
    a7d0:	ec 01       	movw	r28, r24
    a7d2:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    a7d4:	0c 81       	ldd	r16, Y+4	; 0x04
    a7d6:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    a7d8:	61 15       	cp	r22, r1
    a7da:	71 05       	cpc	r23, r1
    a7dc:	11 f4       	brne	.+4      	; 0xa7e2 <_ZN6String6concatEPKcj+0x1e>
    a7de:	80 e0       	ldi	r24, 0x00	; 0
    a7e0:	15 c0       	rjmp	.+42     	; 0xa80c <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    a7e2:	41 15       	cp	r20, r1
    a7e4:	51 05       	cpc	r21, r1
    a7e6:	89 f0       	breq	.+34     	; 0xa80a <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    a7e8:	04 0f       	add	r16, r20
    a7ea:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    a7ec:	b8 01       	movw	r22, r16
    a7ee:	f6 de       	rcall	.-532    	; 0xa5dc <_ZN6String7reserveEj>
    a7f0:	88 23       	and	r24, r24
    a7f2:	a9 f3       	breq	.-22     	; 0xa7de <_ZN6String6concatEPKcj+0x1a>
    a7f4:	28 81       	ld	r18, Y
	strcpy(buffer + len, cstr);
    a7f6:	39 81       	ldd	r19, Y+1	; 0x01
    a7f8:	8c 81       	ldd	r24, Y+4	; 0x04
    a7fa:	9d 81       	ldd	r25, Y+5	; 0x05
    a7fc:	b7 01       	movw	r22, r14
    a7fe:	82 0f       	add	r24, r18
    a800:	93 1f       	adc	r25, r19
    a802:	0e 94 47 5c 	call	0xb88e	; 0xb88e <strcpy>
    a806:	1d 83       	std	Y+5, r17	; 0x05
	len = newlen;
    a808:	0c 83       	std	Y+4, r16	; 0x04
    a80a:	81 e0       	ldi	r24, 0x01	; 1

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    a80c:	df 91       	pop	r29
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    a80e:	cf 91       	pop	r28
    a810:	1f 91       	pop	r17
    a812:	0f 91       	pop	r16
    a814:	ff 90       	pop	r15
    a816:	ef 90       	pop	r14
    a818:	08 95       	ret

0000a81a <_ZplRK15StringSumHelperRK6String>:
    a81a:	cf 93       	push	r28
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    a81c:	df 93       	push	r29
    a81e:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    a820:	fb 01       	movw	r30, r22
    a822:	44 81       	ldd	r20, Z+4	; 0x04
    a824:	55 81       	ldd	r21, Z+5	; 0x05
    a826:	60 81       	ld	r22, Z
    a828:	71 81       	ldd	r23, Z+1	; 0x01
    a82a:	cc df       	rcall	.-104    	; 0xa7c4 <_ZN6String6concatEPKcj>
    a82c:	81 11       	cpse	r24, r1
    a82e:	02 c0       	rjmp	.+4      	; 0xa834 <_ZplRK15StringSumHelperRK6String+0x1a>
    a830:	ce 01       	movw	r24, r28
    a832:	aa de       	rcall	.-684    	; 0xa588 <_ZN6String10invalidateEv>
    a834:	ce 01       	movw	r24, r28
    a836:	df 91       	pop	r29
	return a;
}
    a838:	cf 91       	pop	r28
    a83a:	08 95       	ret

0000a83c <_ZplRK15StringSumHelperPKc>:
    a83c:	cf 93       	push	r28
    a83e:	df 93       	push	r29

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    a840:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    a842:	61 15       	cp	r22, r1
    a844:	71 05       	cpc	r23, r1
    a846:	61 f0       	breq	.+24     	; 0xa860 <_ZplRK15StringSumHelperPKc+0x24>
    a848:	fb 01       	movw	r30, r22
    a84a:	01 90       	ld	r0, Z+
    a84c:	00 20       	and	r0, r0
    a84e:	e9 f7       	brne	.-6      	; 0xa84a <_ZplRK15StringSumHelperPKc+0xe>
    a850:	af 01       	movw	r20, r30
    a852:	41 50       	subi	r20, 0x01	; 1
    a854:	51 09       	sbc	r21, r1
    a856:	46 1b       	sub	r20, r22
    a858:	57 0b       	sbc	r21, r23
    a85a:	b4 df       	rcall	.-152    	; 0xa7c4 <_ZN6String6concatEPKcj>
    a85c:	81 11       	cpse	r24, r1
    a85e:	02 c0       	rjmp	.+4      	; 0xa864 <_ZplRK15StringSumHelperPKc+0x28>
    a860:	ce 01       	movw	r24, r28
    a862:	92 de       	rcall	.-732    	; 0xa588 <_ZN6String10invalidateEv>
    a864:	ce 01       	movw	r24, r28
    a866:	df 91       	pop	r29
	return a;
}
    a868:	cf 91       	pop	r28
    a86a:	08 95       	ret

0000a86c <_ZNK6String10startsWithERKS_j>:
    a86c:	fa 01       	movw	r30, r20
    a86e:	db 01       	movw	r26, r22
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    a870:	14 96       	adiw	r26, 0x04	; 4
    a872:	4d 91       	ld	r20, X+
    a874:	5c 91       	ld	r21, X
    a876:	15 97       	sbiw	r26, 0x05	; 5
    a878:	dc 01       	movw	r26, r24
    a87a:	14 96       	adiw	r26, 0x04	; 4
    a87c:	2d 91       	ld	r18, X+
    a87e:	3c 91       	ld	r19, X
    a880:	15 97       	sbiw	r26, 0x05	; 5
    a882:	24 1b       	sub	r18, r20
    a884:	35 0b       	sbc	r19, r21
    a886:	2e 17       	cp	r18, r30
    a888:	3f 07       	cpc	r19, r31
    a88a:	80 f0       	brcs	.+32     	; 0xa8ac <_ZNK6String10startsWithERKS_j+0x40>
    a88c:	8d 91       	ld	r24, X+
    a88e:	9c 91       	ld	r25, X
    a890:	00 97       	sbiw	r24, 0x00	; 0
    a892:	61 f0       	breq	.+24     	; 0xa8ac <_ZNK6String10startsWithERKS_j+0x40>
    a894:	db 01       	movw	r26, r22
    a896:	6d 91       	ld	r22, X+
    a898:	7c 91       	ld	r23, X
    a89a:	61 15       	cp	r22, r1
    a89c:	71 05       	cpc	r23, r1
    a89e:	31 f0       	breq	.+12     	; 0xa8ac <_ZNK6String10startsWithERKS_j+0x40>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    a8a0:	8e 0f       	add	r24, r30
    a8a2:	9f 1f       	adc	r25, r31
    a8a4:	fb d7       	rcall	.+4086   	; 0xb89c <strncmp>
    a8a6:	21 e0       	ldi	r18, 0x01	; 1
    a8a8:	89 2b       	or	r24, r25
    a8aa:	09 f0       	breq	.+2      	; 0xa8ae <_ZNK6String10startsWithERKS_j+0x42>
    a8ac:	20 e0       	ldi	r18, 0x00	; 0
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    a8ae:	82 2f       	mov	r24, r18
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    a8b0:	08 95       	ret

0000a8b2 <_ZNK6String10startsWithERKS_>:
    a8b2:	fc 01       	movw	r30, r24
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    a8b4:	44 81       	ldd	r20, Z+4	; 0x04
    a8b6:	55 81       	ldd	r21, Z+5	; 0x05
    a8b8:	fb 01       	movw	r30, r22
    a8ba:	24 81       	ldd	r18, Z+4	; 0x04
    a8bc:	35 81       	ldd	r19, Z+5	; 0x05
    a8be:	42 17       	cp	r20, r18
    a8c0:	53 07       	cpc	r21, r19
    a8c2:	18 f0       	brcs	.+6      	; 0xa8ca <_ZNK6String10startsWithERKS_+0x18>
	return startsWith(s2, 0);
    a8c4:	40 e0       	ldi	r20, 0x00	; 0
    a8c6:	50 e0       	ldi	r21, 0x00	; 0
    a8c8:	d1 cf       	rjmp	.-94     	; 0xa86c <_ZNK6String10startsWithERKS_j>
    a8ca:	80 e0       	ldi	r24, 0x00	; 0
}
    a8cc:	08 95       	ret

0000a8ce <_ZNK6StringixEj>:
    a8ce:	fc 01       	movw	r30, r24
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    a8d0:	24 81       	ldd	r18, Z+4	; 0x04
    a8d2:	35 81       	ldd	r19, Z+5	; 0x05
    a8d4:	62 17       	cp	r22, r18
    a8d6:	73 07       	cpc	r23, r19
    a8d8:	48 f4       	brcc	.+18     	; 0xa8ec <_ZNK6StringixEj+0x1e>
    a8da:	80 81       	ld	r24, Z
    a8dc:	91 81       	ldd	r25, Z+1	; 0x01
    a8de:	00 97       	sbiw	r24, 0x00	; 0
    a8e0:	29 f0       	breq	.+10     	; 0xa8ec <_ZNK6StringixEj+0x1e>
	return buffer[index];
    a8e2:	fc 01       	movw	r30, r24
    a8e4:	e6 0f       	add	r30, r22
    a8e6:	f7 1f       	adc	r31, r23
    a8e8:	80 81       	ld	r24, Z
    a8ea:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    a8ec:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    a8ee:	08 95       	ret

0000a8f0 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    a8f0:	ee cf       	rjmp	.-36     	; 0xa8ce <_ZNK6StringixEj>

0000a8f2 <_ZNK6String7indexOfEcj>:
    a8f2:	cf 93       	push	r28
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    a8f4:	df 93       	push	r29
    a8f6:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    a8f8:	84 81       	ldd	r24, Z+4	; 0x04
    a8fa:	95 81       	ldd	r25, Z+5	; 0x05
    a8fc:	48 17       	cp	r20, r24
    a8fe:	59 07       	cpc	r21, r25
    a900:	70 f4       	brcc	.+28     	; 0xa91e <_ZNK6String7indexOfEcj+0x2c>
	const char* temp = strchr(buffer + fromIndex, ch);
    a902:	c0 81       	ld	r28, Z
    a904:	d1 81       	ldd	r29, Z+1	; 0x01
    a906:	77 27       	eor	r23, r23
    a908:	67 fd       	sbrc	r22, 7
    a90a:	70 95       	com	r23
    a90c:	ce 01       	movw	r24, r28
    a90e:	84 0f       	add	r24, r20
    a910:	95 1f       	adc	r25, r21
    a912:	a9 d7       	rcall	.+3922   	; 0xb866 <strchr>
    a914:	00 97       	sbiw	r24, 0x00	; 0
	if (temp == NULL) return -1;
    a916:	19 f0       	breq	.+6      	; 0xa91e <_ZNK6String7indexOfEcj+0x2c>
    a918:	8c 1b       	sub	r24, r28
	return temp - buffer;
    a91a:	9d 0b       	sbc	r25, r29
    a91c:	02 c0       	rjmp	.+4      	; 0xa922 <_ZNK6String7indexOfEcj+0x30>
    a91e:	8f ef       	ldi	r24, 0xFF	; 255
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    a920:	9f ef       	ldi	r25, 0xFF	; 255
    a922:	df 91       	pop	r29
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
    a924:	cf 91       	pop	r28
    a926:	08 95       	ret

0000a928 <_ZNK6String9substringEjj>:
    a928:	bf 92       	push	r11
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    a92a:	cf 92       	push	r12
    a92c:	df 92       	push	r13
    a92e:	ef 92       	push	r14
    a930:	ff 92       	push	r15
    a932:	0f 93       	push	r16
    a934:	1f 93       	push	r17
    a936:	cf 93       	push	r28
    a938:	df 93       	push	r29
    a93a:	6c 01       	movw	r12, r24
    a93c:	7b 01       	movw	r14, r22
    a93e:	ea 01       	movw	r28, r20
    a940:	89 01       	movw	r16, r18
	if (left > right) {
    a942:	24 17       	cp	r18, r20
    a944:	35 07       	cpc	r19, r21
    a946:	20 f4       	brcc	.+8      	; 0xa950 <_ZNK6String9substringEjj+0x28>
    a948:	8d 2f       	mov	r24, r29
    a94a:	e9 01       	movw	r28, r18
    a94c:	04 2f       	mov	r16, r20
    a94e:	18 2f       	mov	r17, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    a950:	6f e0       	ldi	r22, 0x0F	; 15
    a952:	72 e0       	ldi	r23, 0x02	; 2
    a954:	c6 01       	movw	r24, r12
    a956:	7c de       	rcall	.-776    	; 0xa650 <_ZN6StringC1EPKc>
    a958:	d7 01       	movw	r26, r14
	if (left >= len) return out;
    a95a:	14 96       	adiw	r26, 0x04	; 4
    a95c:	8d 91       	ld	r24, X+
    a95e:	9c 91       	ld	r25, X
    a960:	15 97       	sbiw	r26, 0x05	; 5
    a962:	c8 17       	cp	r28, r24
    a964:	d9 07       	cpc	r29, r25
    a966:	c0 f4       	brcc	.+48     	; 0xa998 <_ZNK6String9substringEjj+0x70>
    a968:	80 17       	cp	r24, r16
    a96a:	91 07       	cpc	r25, r17
    a96c:	08 f4       	brcc	.+2      	; 0xa970 <_ZNK6String9substringEjj+0x48>
    a96e:	8c 01       	movw	r16, r24
    a970:	d7 01       	movw	r26, r14
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    a972:	ed 91       	ld	r30, X+
    a974:	fc 91       	ld	r31, X
    a976:	11 97       	sbiw	r26, 0x01	; 1
    a978:	e0 0f       	add	r30, r16
    a97a:	f1 1f       	adc	r31, r17
    a97c:	b0 80       	ld	r11, Z
    a97e:	10 82       	st	Z, r1
	buffer[right] = '\0';	
    a980:	6d 91       	ld	r22, X+
	out = buffer + left;  // pointer arithmetic
    a982:	7c 91       	ld	r23, X
    a984:	6c 0f       	add	r22, r28
    a986:	7d 1f       	adc	r23, r29
    a988:	c6 01       	movw	r24, r12
    a98a:	b3 de       	rcall	.-666    	; 0xa6f2 <_ZN6StringaSEPKc>
    a98c:	d7 01       	movw	r26, r14
    a98e:	ed 91       	ld	r30, X+
	buffer[right] = temp;  //restore character
    a990:	fc 91       	ld	r31, X
    a992:	e0 0f       	add	r30, r16
    a994:	f1 1f       	adc	r31, r17
    a996:	b0 82       	st	Z, r11
    a998:	c6 01       	movw	r24, r12
    a99a:	df 91       	pop	r29
	return out;
}
    a99c:	cf 91       	pop	r28
    a99e:	1f 91       	pop	r17
    a9a0:	0f 91       	pop	r16
    a9a2:	ff 90       	pop	r15
    a9a4:	ef 90       	pop	r14
    a9a6:	df 90       	pop	r13
    a9a8:	cf 90       	pop	r12
    a9aa:	bf 90       	pop	r11
    a9ac:	08 95       	ret

0000a9ae <_ZN6String4trimEv>:
    a9ae:	af 92       	push	r10
    a9b0:	bf 92       	push	r11
		*p = toupper(*p);
	}
}

void String::trim(void)
{
    a9b2:	cf 92       	push	r12
    a9b4:	df 92       	push	r13
    a9b6:	ef 92       	push	r14
    a9b8:	ff 92       	push	r15
    a9ba:	0f 93       	push	r16
    a9bc:	1f 93       	push	r17
    a9be:	cf 93       	push	r28
    a9c0:	df 93       	push	r29
    a9c2:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    a9c4:	dc 01       	movw	r26, r24
    a9c6:	cd 90       	ld	r12, X+
    a9c8:	dc 90       	ld	r13, X
    a9ca:	11 97       	sbiw	r26, 0x01	; 1
    a9cc:	c1 14       	cp	r12, r1
    a9ce:	d1 04       	cpc	r13, r1
    a9d0:	09 f4       	brne	.+2      	; 0xa9d4 <_ZN6String4trimEv+0x26>
    a9d2:	3e c0       	rjmp	.+124    	; 0xaa50 <_ZN6String4trimEv+0xa2>
    a9d4:	14 96       	adiw	r26, 0x04	; 4
    a9d6:	cd 91       	ld	r28, X+
    a9d8:	dc 91       	ld	r29, X
    a9da:	15 97       	sbiw	r26, 0x05	; 5
    a9dc:	20 97       	sbiw	r28, 0x00	; 0
    a9de:	c1 f1       	breq	.+112    	; 0xaa50 <_ZN6String4trimEv+0xa2>
    a9e0:	56 01       	movw	r10, r12
    a9e2:	85 01       	movw	r16, r10
    a9e4:	bf ef       	ldi	r27, 0xFF	; 255
    a9e6:	ab 1a       	sub	r10, r27
    a9e8:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    a9ea:	f8 01       	movw	r30, r16
    a9ec:	80 81       	ld	r24, Z
    a9ee:	99 27       	eor	r25, r25
    a9f0:	87 fd       	sbrc	r24, 7
    a9f2:	90 95       	com	r25
    a9f4:	e7 d6       	rcall	.+3534   	; 0xb7c4 <isspace>
    a9f6:	89 2b       	or	r24, r25
    a9f8:	a1 f7       	brne	.-24     	; 0xa9e2 <_ZN6String4trimEv+0x34>
    a9fa:	21 97       	sbiw	r28, 0x01	; 1
	char *end = buffer + len - 1;
    a9fc:	cc 0d       	add	r28, r12
    a9fe:	dd 1d       	adc	r29, r13
    aa00:	88 81       	ld	r24, Y
	while (isspace(*end) && end >= begin) end--;
    aa02:	99 27       	eor	r25, r25
    aa04:	87 fd       	sbrc	r24, 7
    aa06:	90 95       	com	r25
    aa08:	dd d6       	rcall	.+3514   	; 0xb7c4 <isspace>
    aa0a:	89 2b       	or	r24, r25
    aa0c:	89 f4       	brne	.+34     	; 0xaa30 <_ZN6String4trimEv+0x82>
    aa0e:	ae 01       	movw	r20, r28
    aa10:	4f 5f       	subi	r20, 0xFF	; 255
	len = end + 1 - begin;
    aa12:	5f 4f       	sbci	r21, 0xFF	; 255
    aa14:	40 1b       	sub	r20, r16
    aa16:	51 0b       	sbc	r21, r17
    aa18:	d7 01       	movw	r26, r14
    aa1a:	15 96       	adiw	r26, 0x05	; 5
    aa1c:	5c 93       	st	X, r21
    aa1e:	4e 93       	st	-X, r20
    aa20:	14 97       	sbiw	r26, 0x04	; 4
    aa22:	c0 16       	cp	r12, r16
    aa24:	d1 06       	cpc	r13, r17
	if (begin > buffer) memcpy(buffer, begin, len);
    aa26:	48 f4       	brcc	.+18     	; 0xaa3a <_ZN6String4trimEv+0x8c>
    aa28:	b8 01       	movw	r22, r16
    aa2a:	c6 01       	movw	r24, r12
    aa2c:	13 d7       	rcall	.+3622   	; 0xb854 <memcpy>
    aa2e:	05 c0       	rjmp	.+10     	; 0xaa3a <_ZN6String4trimEv+0x8c>
    aa30:	c0 17       	cp	r28, r16
    aa32:	d1 07       	cpc	r29, r17
    aa34:	60 f3       	brcs	.-40     	; 0xaa0e <_ZN6String4trimEv+0x60>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    aa36:	21 97       	sbiw	r28, 0x01	; 1
    aa38:	e3 cf       	rjmp	.-58     	; 0xaa00 <_ZN6String4trimEv+0x52>
    aa3a:	d7 01       	movw	r26, r14
    aa3c:	ed 91       	ld	r30, X+
    aa3e:	fc 91       	ld	r31, X
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    aa40:	11 97       	sbiw	r26, 0x01	; 1
    aa42:	14 96       	adiw	r26, 0x04	; 4
    aa44:	8d 91       	ld	r24, X+
    aa46:	9c 91       	ld	r25, X
    aa48:	15 97       	sbiw	r26, 0x05	; 5
    aa4a:	e8 0f       	add	r30, r24
    aa4c:	f9 1f       	adc	r31, r25
    aa4e:	10 82       	st	Z, r1
    aa50:	df 91       	pop	r29
    aa52:	cf 91       	pop	r28
    aa54:	1f 91       	pop	r17
}
    aa56:	0f 91       	pop	r16
    aa58:	ff 90       	pop	r15
    aa5a:	ef 90       	pop	r14
    aa5c:	df 90       	pop	r13
    aa5e:	cf 90       	pop	r12
    aa60:	bf 90       	pop	r11
    aa62:	af 90       	pop	r10
    aa64:	08 95       	ret

0000aa66 <_ZNK6String5toIntEv>:
    aa66:	fc 01       	movw	r30, r24
    aa68:	80 81       	ld	r24, Z
    aa6a:	91 81       	ldd	r25, Z+1	; 0x01
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    aa6c:	00 97       	sbiw	r24, 0x00	; 0
    aa6e:	09 f0       	breq	.+2      	; 0xaa72 <_ZNK6String5toIntEv+0xc>
    aa70:	83 c6       	rjmp	.+3334   	; 0xb778 <atol>
    aa72:	60 e0       	ldi	r22, 0x00	; 0
	return 0;
}
    aa74:	70 e0       	ldi	r23, 0x00	; 0
    aa76:	cb 01       	movw	r24, r22
    aa78:	08 95       	ret

0000aa7a <__subsf3>:
    aa7a:	50 58       	subi	r21, 0x80	; 128

0000aa7c <__addsf3>:
    aa7c:	bb 27       	eor	r27, r27
    aa7e:	aa 27       	eor	r26, r26
    aa80:	0e d0       	rcall	.+28     	; 0xaa9e <__addsf3x>
    aa82:	75 c1       	rjmp	.+746    	; 0xad6e <__fp_round>
    aa84:	66 d1       	rcall	.+716    	; 0xad52 <__fp_pscA>
    aa86:	30 f0       	brcs	.+12     	; 0xaa94 <__addsf3+0x18>
    aa88:	6b d1       	rcall	.+726    	; 0xad60 <__fp_pscB>
    aa8a:	20 f0       	brcs	.+8      	; 0xaa94 <__addsf3+0x18>
    aa8c:	31 f4       	brne	.+12     	; 0xaa9a <__addsf3+0x1e>
    aa8e:	9f 3f       	cpi	r25, 0xFF	; 255
    aa90:	11 f4       	brne	.+4      	; 0xaa96 <__addsf3+0x1a>
    aa92:	1e f4       	brtc	.+6      	; 0xaa9a <__addsf3+0x1e>
    aa94:	5b c1       	rjmp	.+694    	; 0xad4c <__fp_nan>
    aa96:	0e f4       	brtc	.+2      	; 0xaa9a <__addsf3+0x1e>
    aa98:	e0 95       	com	r30
    aa9a:	e7 fb       	bst	r30, 7
    aa9c:	51 c1       	rjmp	.+674    	; 0xad40 <__fp_inf>

0000aa9e <__addsf3x>:
    aa9e:	e9 2f       	mov	r30, r25
    aaa0:	77 d1       	rcall	.+750    	; 0xad90 <__fp_split3>
    aaa2:	80 f3       	brcs	.-32     	; 0xaa84 <__addsf3+0x8>
    aaa4:	ba 17       	cp	r27, r26
    aaa6:	62 07       	cpc	r22, r18
    aaa8:	73 07       	cpc	r23, r19
    aaaa:	84 07       	cpc	r24, r20
    aaac:	95 07       	cpc	r25, r21
    aaae:	18 f0       	brcs	.+6      	; 0xaab6 <__addsf3x+0x18>
    aab0:	71 f4       	brne	.+28     	; 0xaace <__addsf3x+0x30>
    aab2:	9e f5       	brtc	.+102    	; 0xab1a <__addsf3x+0x7c>
    aab4:	8f c1       	rjmp	.+798    	; 0xadd4 <__fp_zero>
    aab6:	0e f4       	brtc	.+2      	; 0xaaba <__addsf3x+0x1c>
    aab8:	e0 95       	com	r30
    aaba:	0b 2e       	mov	r0, r27
    aabc:	ba 2f       	mov	r27, r26
    aabe:	a0 2d       	mov	r26, r0
    aac0:	0b 01       	movw	r0, r22
    aac2:	b9 01       	movw	r22, r18
    aac4:	90 01       	movw	r18, r0
    aac6:	0c 01       	movw	r0, r24
    aac8:	ca 01       	movw	r24, r20
    aaca:	a0 01       	movw	r20, r0
    aacc:	11 24       	eor	r1, r1
    aace:	ff 27       	eor	r31, r31
    aad0:	59 1b       	sub	r21, r25
    aad2:	99 f0       	breq	.+38     	; 0xaafa <__addsf3x+0x5c>
    aad4:	59 3f       	cpi	r21, 0xF9	; 249
    aad6:	50 f4       	brcc	.+20     	; 0xaaec <__addsf3x+0x4e>
    aad8:	50 3e       	cpi	r21, 0xE0	; 224
    aada:	68 f1       	brcs	.+90     	; 0xab36 <__addsf3x+0x98>
    aadc:	1a 16       	cp	r1, r26
    aade:	f0 40       	sbci	r31, 0x00	; 0
    aae0:	a2 2f       	mov	r26, r18
    aae2:	23 2f       	mov	r18, r19
    aae4:	34 2f       	mov	r19, r20
    aae6:	44 27       	eor	r20, r20
    aae8:	58 5f       	subi	r21, 0xF8	; 248
    aaea:	f3 cf       	rjmp	.-26     	; 0xaad2 <__addsf3x+0x34>
    aaec:	46 95       	lsr	r20
    aaee:	37 95       	ror	r19
    aaf0:	27 95       	ror	r18
    aaf2:	a7 95       	ror	r26
    aaf4:	f0 40       	sbci	r31, 0x00	; 0
    aaf6:	53 95       	inc	r21
    aaf8:	c9 f7       	brne	.-14     	; 0xaaec <__addsf3x+0x4e>
    aafa:	7e f4       	brtc	.+30     	; 0xab1a <__addsf3x+0x7c>
    aafc:	1f 16       	cp	r1, r31
    aafe:	ba 0b       	sbc	r27, r26
    ab00:	62 0b       	sbc	r22, r18
    ab02:	73 0b       	sbc	r23, r19
    ab04:	84 0b       	sbc	r24, r20
    ab06:	ba f0       	brmi	.+46     	; 0xab36 <__addsf3x+0x98>
    ab08:	91 50       	subi	r25, 0x01	; 1
    ab0a:	a1 f0       	breq	.+40     	; 0xab34 <__addsf3x+0x96>
    ab0c:	ff 0f       	add	r31, r31
    ab0e:	bb 1f       	adc	r27, r27
    ab10:	66 1f       	adc	r22, r22
    ab12:	77 1f       	adc	r23, r23
    ab14:	88 1f       	adc	r24, r24
    ab16:	c2 f7       	brpl	.-16     	; 0xab08 <__addsf3x+0x6a>
    ab18:	0e c0       	rjmp	.+28     	; 0xab36 <__addsf3x+0x98>
    ab1a:	ba 0f       	add	r27, r26
    ab1c:	62 1f       	adc	r22, r18
    ab1e:	73 1f       	adc	r23, r19
    ab20:	84 1f       	adc	r24, r20
    ab22:	48 f4       	brcc	.+18     	; 0xab36 <__addsf3x+0x98>
    ab24:	87 95       	ror	r24
    ab26:	77 95       	ror	r23
    ab28:	67 95       	ror	r22
    ab2a:	b7 95       	ror	r27
    ab2c:	f7 95       	ror	r31
    ab2e:	9e 3f       	cpi	r25, 0xFE	; 254
    ab30:	08 f0       	brcs	.+2      	; 0xab34 <__addsf3x+0x96>
    ab32:	b3 cf       	rjmp	.-154    	; 0xaa9a <__addsf3+0x1e>
    ab34:	93 95       	inc	r25
    ab36:	88 0f       	add	r24, r24
    ab38:	08 f0       	brcs	.+2      	; 0xab3c <__addsf3x+0x9e>
    ab3a:	99 27       	eor	r25, r25
    ab3c:	ee 0f       	add	r30, r30
    ab3e:	97 95       	ror	r25
    ab40:	87 95       	ror	r24
    ab42:	08 95       	ret

0000ab44 <__cmpsf2>:
    ab44:	d9 d0       	rcall	.+434    	; 0xacf8 <__fp_cmp>
    ab46:	08 f4       	brcc	.+2      	; 0xab4a <__cmpsf2+0x6>
    ab48:	81 e0       	ldi	r24, 0x01	; 1
    ab4a:	08 95       	ret

0000ab4c <__divsf3>:
    ab4c:	0c d0       	rcall	.+24     	; 0xab66 <__divsf3x>
    ab4e:	0f c1       	rjmp	.+542    	; 0xad6e <__fp_round>
    ab50:	07 d1       	rcall	.+526    	; 0xad60 <__fp_pscB>
    ab52:	40 f0       	brcs	.+16     	; 0xab64 <__divsf3+0x18>
    ab54:	fe d0       	rcall	.+508    	; 0xad52 <__fp_pscA>
    ab56:	30 f0       	brcs	.+12     	; 0xab64 <__divsf3+0x18>
    ab58:	21 f4       	brne	.+8      	; 0xab62 <__divsf3+0x16>
    ab5a:	5f 3f       	cpi	r21, 0xFF	; 255
    ab5c:	19 f0       	breq	.+6      	; 0xab64 <__divsf3+0x18>
    ab5e:	f0 c0       	rjmp	.+480    	; 0xad40 <__fp_inf>
    ab60:	51 11       	cpse	r21, r1
    ab62:	39 c1       	rjmp	.+626    	; 0xadd6 <__fp_szero>
    ab64:	f3 c0       	rjmp	.+486    	; 0xad4c <__fp_nan>

0000ab66 <__divsf3x>:
    ab66:	14 d1       	rcall	.+552    	; 0xad90 <__fp_split3>
    ab68:	98 f3       	brcs	.-26     	; 0xab50 <__divsf3+0x4>

0000ab6a <__divsf3_pse>:
    ab6a:	99 23       	and	r25, r25
    ab6c:	c9 f3       	breq	.-14     	; 0xab60 <__divsf3+0x14>
    ab6e:	55 23       	and	r21, r21
    ab70:	b1 f3       	breq	.-20     	; 0xab5e <__divsf3+0x12>
    ab72:	95 1b       	sub	r25, r21
    ab74:	55 0b       	sbc	r21, r21
    ab76:	bb 27       	eor	r27, r27
    ab78:	aa 27       	eor	r26, r26
    ab7a:	62 17       	cp	r22, r18
    ab7c:	73 07       	cpc	r23, r19
    ab7e:	84 07       	cpc	r24, r20
    ab80:	38 f0       	brcs	.+14     	; 0xab90 <__divsf3_pse+0x26>
    ab82:	9f 5f       	subi	r25, 0xFF	; 255
    ab84:	5f 4f       	sbci	r21, 0xFF	; 255
    ab86:	22 0f       	add	r18, r18
    ab88:	33 1f       	adc	r19, r19
    ab8a:	44 1f       	adc	r20, r20
    ab8c:	aa 1f       	adc	r26, r26
    ab8e:	a9 f3       	breq	.-22     	; 0xab7a <__divsf3_pse+0x10>
    ab90:	33 d0       	rcall	.+102    	; 0xabf8 <__divsf3_pse+0x8e>
    ab92:	0e 2e       	mov	r0, r30
    ab94:	3a f0       	brmi	.+14     	; 0xaba4 <__divsf3_pse+0x3a>
    ab96:	e0 e8       	ldi	r30, 0x80	; 128
    ab98:	30 d0       	rcall	.+96     	; 0xabfa <__divsf3_pse+0x90>
    ab9a:	91 50       	subi	r25, 0x01	; 1
    ab9c:	50 40       	sbci	r21, 0x00	; 0
    ab9e:	e6 95       	lsr	r30
    aba0:	00 1c       	adc	r0, r0
    aba2:	ca f7       	brpl	.-14     	; 0xab96 <__divsf3_pse+0x2c>
    aba4:	29 d0       	rcall	.+82     	; 0xabf8 <__divsf3_pse+0x8e>
    aba6:	fe 2f       	mov	r31, r30
    aba8:	27 d0       	rcall	.+78     	; 0xabf8 <__divsf3_pse+0x8e>
    abaa:	66 0f       	add	r22, r22
    abac:	77 1f       	adc	r23, r23
    abae:	88 1f       	adc	r24, r24
    abb0:	bb 1f       	adc	r27, r27
    abb2:	26 17       	cp	r18, r22
    abb4:	37 07       	cpc	r19, r23
    abb6:	48 07       	cpc	r20, r24
    abb8:	ab 07       	cpc	r26, r27
    abba:	b0 e8       	ldi	r27, 0x80	; 128
    abbc:	09 f0       	breq	.+2      	; 0xabc0 <__divsf3_pse+0x56>
    abbe:	bb 0b       	sbc	r27, r27
    abc0:	80 2d       	mov	r24, r0
    abc2:	bf 01       	movw	r22, r30
    abc4:	ff 27       	eor	r31, r31
    abc6:	93 58       	subi	r25, 0x83	; 131
    abc8:	5f 4f       	sbci	r21, 0xFF	; 255
    abca:	2a f0       	brmi	.+10     	; 0xabd6 <__divsf3_pse+0x6c>
    abcc:	9e 3f       	cpi	r25, 0xFE	; 254
    abce:	51 05       	cpc	r21, r1
    abd0:	68 f0       	brcs	.+26     	; 0xabec <__divsf3_pse+0x82>
    abd2:	b6 c0       	rjmp	.+364    	; 0xad40 <__fp_inf>
    abd4:	00 c1       	rjmp	.+512    	; 0xadd6 <__fp_szero>
    abd6:	5f 3f       	cpi	r21, 0xFF	; 255
    abd8:	ec f3       	brlt	.-6      	; 0xabd4 <__divsf3_pse+0x6a>
    abda:	98 3e       	cpi	r25, 0xE8	; 232
    abdc:	dc f3       	brlt	.-10     	; 0xabd4 <__divsf3_pse+0x6a>
    abde:	86 95       	lsr	r24
    abe0:	77 95       	ror	r23
    abe2:	67 95       	ror	r22
    abe4:	b7 95       	ror	r27
    abe6:	f7 95       	ror	r31
    abe8:	9f 5f       	subi	r25, 0xFF	; 255
    abea:	c9 f7       	brne	.-14     	; 0xabde <__divsf3_pse+0x74>
    abec:	88 0f       	add	r24, r24
    abee:	91 1d       	adc	r25, r1
    abf0:	96 95       	lsr	r25
    abf2:	87 95       	ror	r24
    abf4:	97 f9       	bld	r25, 7
    abf6:	08 95       	ret
    abf8:	e1 e0       	ldi	r30, 0x01	; 1
    abfa:	66 0f       	add	r22, r22
    abfc:	77 1f       	adc	r23, r23
    abfe:	88 1f       	adc	r24, r24
    ac00:	bb 1f       	adc	r27, r27
    ac02:	62 17       	cp	r22, r18
    ac04:	73 07       	cpc	r23, r19
    ac06:	84 07       	cpc	r24, r20
    ac08:	ba 07       	cpc	r27, r26
    ac0a:	20 f0       	brcs	.+8      	; 0xac14 <__divsf3_pse+0xaa>
    ac0c:	62 1b       	sub	r22, r18
    ac0e:	73 0b       	sbc	r23, r19
    ac10:	84 0b       	sbc	r24, r20
    ac12:	ba 0b       	sbc	r27, r26
    ac14:	ee 1f       	adc	r30, r30
    ac16:	88 f7       	brcc	.-30     	; 0xabfa <__divsf3_pse+0x90>
    ac18:	e0 95       	com	r30
    ac1a:	08 95       	ret

0000ac1c <__fixsfsi>:
    ac1c:	04 d0       	rcall	.+8      	; 0xac26 <__fixunssfsi>
    ac1e:	68 94       	set
    ac20:	b1 11       	cpse	r27, r1
    ac22:	d9 c0       	rjmp	.+434    	; 0xadd6 <__fp_szero>
    ac24:	08 95       	ret

0000ac26 <__fixunssfsi>:
    ac26:	bc d0       	rcall	.+376    	; 0xada0 <__fp_splitA>
    ac28:	88 f0       	brcs	.+34     	; 0xac4c <__fixunssfsi+0x26>
    ac2a:	9f 57       	subi	r25, 0x7F	; 127
    ac2c:	90 f0       	brcs	.+36     	; 0xac52 <__fixunssfsi+0x2c>
    ac2e:	b9 2f       	mov	r27, r25
    ac30:	99 27       	eor	r25, r25
    ac32:	b7 51       	subi	r27, 0x17	; 23
    ac34:	a0 f0       	brcs	.+40     	; 0xac5e <__fixunssfsi+0x38>
    ac36:	d1 f0       	breq	.+52     	; 0xac6c <__fixunssfsi+0x46>
    ac38:	66 0f       	add	r22, r22
    ac3a:	77 1f       	adc	r23, r23
    ac3c:	88 1f       	adc	r24, r24
    ac3e:	99 1f       	adc	r25, r25
    ac40:	1a f0       	brmi	.+6      	; 0xac48 <__fixunssfsi+0x22>
    ac42:	ba 95       	dec	r27
    ac44:	c9 f7       	brne	.-14     	; 0xac38 <__fixunssfsi+0x12>
    ac46:	12 c0       	rjmp	.+36     	; 0xac6c <__fixunssfsi+0x46>
    ac48:	b1 30       	cpi	r27, 0x01	; 1
    ac4a:	81 f0       	breq	.+32     	; 0xac6c <__fixunssfsi+0x46>
    ac4c:	c3 d0       	rcall	.+390    	; 0xadd4 <__fp_zero>
    ac4e:	b1 e0       	ldi	r27, 0x01	; 1
    ac50:	08 95       	ret
    ac52:	c0 c0       	rjmp	.+384    	; 0xadd4 <__fp_zero>
    ac54:	67 2f       	mov	r22, r23
    ac56:	78 2f       	mov	r23, r24
    ac58:	88 27       	eor	r24, r24
    ac5a:	b8 5f       	subi	r27, 0xF8	; 248
    ac5c:	39 f0       	breq	.+14     	; 0xac6c <__fixunssfsi+0x46>
    ac5e:	b9 3f       	cpi	r27, 0xF9	; 249
    ac60:	cc f3       	brlt	.-14     	; 0xac54 <__fixunssfsi+0x2e>
    ac62:	86 95       	lsr	r24
    ac64:	77 95       	ror	r23
    ac66:	67 95       	ror	r22
    ac68:	b3 95       	inc	r27
    ac6a:	d9 f7       	brne	.-10     	; 0xac62 <__fixunssfsi+0x3c>
    ac6c:	3e f4       	brtc	.+14     	; 0xac7c <__fixunssfsi+0x56>
    ac6e:	90 95       	com	r25
    ac70:	80 95       	com	r24
    ac72:	70 95       	com	r23
    ac74:	61 95       	neg	r22
    ac76:	7f 4f       	sbci	r23, 0xFF	; 255
    ac78:	8f 4f       	sbci	r24, 0xFF	; 255
    ac7a:	9f 4f       	sbci	r25, 0xFF	; 255
    ac7c:	08 95       	ret

0000ac7e <__floatunsisf>:
    ac7e:	e8 94       	clt
    ac80:	09 c0       	rjmp	.+18     	; 0xac94 <__floatsisf+0x12>

0000ac82 <__floatsisf>:
    ac82:	97 fb       	bst	r25, 7
    ac84:	3e f4       	brtc	.+14     	; 0xac94 <__floatsisf+0x12>
    ac86:	90 95       	com	r25
    ac88:	80 95       	com	r24
    ac8a:	70 95       	com	r23
    ac8c:	61 95       	neg	r22
    ac8e:	7f 4f       	sbci	r23, 0xFF	; 255
    ac90:	8f 4f       	sbci	r24, 0xFF	; 255
    ac92:	9f 4f       	sbci	r25, 0xFF	; 255
    ac94:	99 23       	and	r25, r25
    ac96:	a9 f0       	breq	.+42     	; 0xacc2 <__floatsisf+0x40>
    ac98:	f9 2f       	mov	r31, r25
    ac9a:	96 e9       	ldi	r25, 0x96	; 150
    ac9c:	bb 27       	eor	r27, r27
    ac9e:	93 95       	inc	r25
    aca0:	f6 95       	lsr	r31
    aca2:	87 95       	ror	r24
    aca4:	77 95       	ror	r23
    aca6:	67 95       	ror	r22
    aca8:	b7 95       	ror	r27
    acaa:	f1 11       	cpse	r31, r1
    acac:	f8 cf       	rjmp	.-16     	; 0xac9e <__floatsisf+0x1c>
    acae:	fa f4       	brpl	.+62     	; 0xacee <__floatsisf+0x6c>
    acb0:	bb 0f       	add	r27, r27
    acb2:	11 f4       	brne	.+4      	; 0xacb8 <__floatsisf+0x36>
    acb4:	60 ff       	sbrs	r22, 0
    acb6:	1b c0       	rjmp	.+54     	; 0xacee <__floatsisf+0x6c>
    acb8:	6f 5f       	subi	r22, 0xFF	; 255
    acba:	7f 4f       	sbci	r23, 0xFF	; 255
    acbc:	8f 4f       	sbci	r24, 0xFF	; 255
    acbe:	9f 4f       	sbci	r25, 0xFF	; 255
    acc0:	16 c0       	rjmp	.+44     	; 0xacee <__floatsisf+0x6c>
    acc2:	88 23       	and	r24, r24
    acc4:	11 f0       	breq	.+4      	; 0xacca <__floatsisf+0x48>
    acc6:	96 e9       	ldi	r25, 0x96	; 150
    acc8:	11 c0       	rjmp	.+34     	; 0xacec <__floatsisf+0x6a>
    acca:	77 23       	and	r23, r23
    accc:	21 f0       	breq	.+8      	; 0xacd6 <__floatsisf+0x54>
    acce:	9e e8       	ldi	r25, 0x8E	; 142
    acd0:	87 2f       	mov	r24, r23
    acd2:	76 2f       	mov	r23, r22
    acd4:	05 c0       	rjmp	.+10     	; 0xace0 <__floatsisf+0x5e>
    acd6:	66 23       	and	r22, r22
    acd8:	71 f0       	breq	.+28     	; 0xacf6 <__floatsisf+0x74>
    acda:	96 e8       	ldi	r25, 0x86	; 134
    acdc:	86 2f       	mov	r24, r22
    acde:	70 e0       	ldi	r23, 0x00	; 0
    ace0:	60 e0       	ldi	r22, 0x00	; 0
    ace2:	2a f0       	brmi	.+10     	; 0xacee <__floatsisf+0x6c>
    ace4:	9a 95       	dec	r25
    ace6:	66 0f       	add	r22, r22
    ace8:	77 1f       	adc	r23, r23
    acea:	88 1f       	adc	r24, r24
    acec:	da f7       	brpl	.-10     	; 0xace4 <__floatsisf+0x62>
    acee:	88 0f       	add	r24, r24
    acf0:	96 95       	lsr	r25
    acf2:	87 95       	ror	r24
    acf4:	97 f9       	bld	r25, 7
    acf6:	08 95       	ret

0000acf8 <__fp_cmp>:
    acf8:	99 0f       	add	r25, r25
    acfa:	00 08       	sbc	r0, r0
    acfc:	55 0f       	add	r21, r21
    acfe:	aa 0b       	sbc	r26, r26
    ad00:	e0 e8       	ldi	r30, 0x80	; 128
    ad02:	fe ef       	ldi	r31, 0xFE	; 254
    ad04:	16 16       	cp	r1, r22
    ad06:	17 06       	cpc	r1, r23
    ad08:	e8 07       	cpc	r30, r24
    ad0a:	f9 07       	cpc	r31, r25
    ad0c:	c0 f0       	brcs	.+48     	; 0xad3e <__fp_cmp+0x46>
    ad0e:	12 16       	cp	r1, r18
    ad10:	13 06       	cpc	r1, r19
    ad12:	e4 07       	cpc	r30, r20
    ad14:	f5 07       	cpc	r31, r21
    ad16:	98 f0       	brcs	.+38     	; 0xad3e <__fp_cmp+0x46>
    ad18:	62 1b       	sub	r22, r18
    ad1a:	73 0b       	sbc	r23, r19
    ad1c:	84 0b       	sbc	r24, r20
    ad1e:	95 0b       	sbc	r25, r21
    ad20:	39 f4       	brne	.+14     	; 0xad30 <__fp_cmp+0x38>
    ad22:	0a 26       	eor	r0, r26
    ad24:	61 f0       	breq	.+24     	; 0xad3e <__fp_cmp+0x46>
    ad26:	23 2b       	or	r18, r19
    ad28:	24 2b       	or	r18, r20
    ad2a:	25 2b       	or	r18, r21
    ad2c:	21 f4       	brne	.+8      	; 0xad36 <__fp_cmp+0x3e>
    ad2e:	08 95       	ret
    ad30:	0a 26       	eor	r0, r26
    ad32:	09 f4       	brne	.+2      	; 0xad36 <__fp_cmp+0x3e>
    ad34:	a1 40       	sbci	r26, 0x01	; 1
    ad36:	a6 95       	lsr	r26
    ad38:	8f ef       	ldi	r24, 0xFF	; 255
    ad3a:	81 1d       	adc	r24, r1
    ad3c:	81 1d       	adc	r24, r1
    ad3e:	08 95       	ret

0000ad40 <__fp_inf>:
    ad40:	97 f9       	bld	r25, 7
    ad42:	9f 67       	ori	r25, 0x7F	; 127
    ad44:	80 e8       	ldi	r24, 0x80	; 128
    ad46:	70 e0       	ldi	r23, 0x00	; 0
    ad48:	60 e0       	ldi	r22, 0x00	; 0
    ad4a:	08 95       	ret

0000ad4c <__fp_nan>:
    ad4c:	9f ef       	ldi	r25, 0xFF	; 255
    ad4e:	80 ec       	ldi	r24, 0xC0	; 192
    ad50:	08 95       	ret

0000ad52 <__fp_pscA>:
    ad52:	00 24       	eor	r0, r0
    ad54:	0a 94       	dec	r0
    ad56:	16 16       	cp	r1, r22
    ad58:	17 06       	cpc	r1, r23
    ad5a:	18 06       	cpc	r1, r24
    ad5c:	09 06       	cpc	r0, r25
    ad5e:	08 95       	ret

0000ad60 <__fp_pscB>:
    ad60:	00 24       	eor	r0, r0
    ad62:	0a 94       	dec	r0
    ad64:	12 16       	cp	r1, r18
    ad66:	13 06       	cpc	r1, r19
    ad68:	14 06       	cpc	r1, r20
    ad6a:	05 06       	cpc	r0, r21
    ad6c:	08 95       	ret

0000ad6e <__fp_round>:
    ad6e:	09 2e       	mov	r0, r25
    ad70:	03 94       	inc	r0
    ad72:	00 0c       	add	r0, r0
    ad74:	11 f4       	brne	.+4      	; 0xad7a <__fp_round+0xc>
    ad76:	88 23       	and	r24, r24
    ad78:	52 f0       	brmi	.+20     	; 0xad8e <__fp_round+0x20>
    ad7a:	bb 0f       	add	r27, r27
    ad7c:	40 f4       	brcc	.+16     	; 0xad8e <__fp_round+0x20>
    ad7e:	bf 2b       	or	r27, r31
    ad80:	11 f4       	brne	.+4      	; 0xad86 <__fp_round+0x18>
    ad82:	60 ff       	sbrs	r22, 0
    ad84:	04 c0       	rjmp	.+8      	; 0xad8e <__fp_round+0x20>
    ad86:	6f 5f       	subi	r22, 0xFF	; 255
    ad88:	7f 4f       	sbci	r23, 0xFF	; 255
    ad8a:	8f 4f       	sbci	r24, 0xFF	; 255
    ad8c:	9f 4f       	sbci	r25, 0xFF	; 255
    ad8e:	08 95       	ret

0000ad90 <__fp_split3>:
    ad90:	57 fd       	sbrc	r21, 7
    ad92:	90 58       	subi	r25, 0x80	; 128
    ad94:	44 0f       	add	r20, r20
    ad96:	55 1f       	adc	r21, r21
    ad98:	59 f0       	breq	.+22     	; 0xadb0 <__fp_splitA+0x10>
    ad9a:	5f 3f       	cpi	r21, 0xFF	; 255
    ad9c:	71 f0       	breq	.+28     	; 0xadba <__fp_splitA+0x1a>
    ad9e:	47 95       	ror	r20

0000ada0 <__fp_splitA>:
    ada0:	88 0f       	add	r24, r24
    ada2:	97 fb       	bst	r25, 7
    ada4:	99 1f       	adc	r25, r25
    ada6:	61 f0       	breq	.+24     	; 0xadc0 <__fp_splitA+0x20>
    ada8:	9f 3f       	cpi	r25, 0xFF	; 255
    adaa:	79 f0       	breq	.+30     	; 0xadca <__fp_splitA+0x2a>
    adac:	87 95       	ror	r24
    adae:	08 95       	ret
    adb0:	12 16       	cp	r1, r18
    adb2:	13 06       	cpc	r1, r19
    adb4:	14 06       	cpc	r1, r20
    adb6:	55 1f       	adc	r21, r21
    adb8:	f2 cf       	rjmp	.-28     	; 0xad9e <__fp_split3+0xe>
    adba:	46 95       	lsr	r20
    adbc:	f1 df       	rcall	.-30     	; 0xada0 <__fp_splitA>
    adbe:	08 c0       	rjmp	.+16     	; 0xadd0 <__fp_splitA+0x30>
    adc0:	16 16       	cp	r1, r22
    adc2:	17 06       	cpc	r1, r23
    adc4:	18 06       	cpc	r1, r24
    adc6:	99 1f       	adc	r25, r25
    adc8:	f1 cf       	rjmp	.-30     	; 0xadac <__fp_splitA+0xc>
    adca:	86 95       	lsr	r24
    adcc:	71 05       	cpc	r23, r1
    adce:	61 05       	cpc	r22, r1
    add0:	08 94       	sec
    add2:	08 95       	ret

0000add4 <__fp_zero>:
    add4:	e8 94       	clt

0000add6 <__fp_szero>:
    add6:	bb 27       	eor	r27, r27
    add8:	66 27       	eor	r22, r22
    adda:	77 27       	eor	r23, r23
    addc:	cb 01       	movw	r24, r22
    adde:	97 f9       	bld	r25, 7
    ade0:	08 95       	ret

0000ade2 <__gesf2>:
    ade2:	8a df       	rcall	.-236    	; 0xacf8 <__fp_cmp>
    ade4:	08 f4       	brcc	.+2      	; 0xade8 <__gesf2+0x6>
    ade6:	8f ef       	ldi	r24, 0xFF	; 255
    ade8:	08 95       	ret

0000adea <__mulsf3>:
    adea:	0b d0       	rcall	.+22     	; 0xae02 <__mulsf3x>
    adec:	c0 cf       	rjmp	.-128    	; 0xad6e <__fp_round>
    adee:	b1 df       	rcall	.-158    	; 0xad52 <__fp_pscA>
    adf0:	28 f0       	brcs	.+10     	; 0xadfc <__mulsf3+0x12>
    adf2:	b6 df       	rcall	.-148    	; 0xad60 <__fp_pscB>
    adf4:	18 f0       	brcs	.+6      	; 0xadfc <__mulsf3+0x12>
    adf6:	95 23       	and	r25, r21
    adf8:	09 f0       	breq	.+2      	; 0xadfc <__mulsf3+0x12>
    adfa:	a2 cf       	rjmp	.-188    	; 0xad40 <__fp_inf>
    adfc:	a7 cf       	rjmp	.-178    	; 0xad4c <__fp_nan>
    adfe:	11 24       	eor	r1, r1
    ae00:	ea cf       	rjmp	.-44     	; 0xadd6 <__fp_szero>

0000ae02 <__mulsf3x>:
    ae02:	c6 df       	rcall	.-116    	; 0xad90 <__fp_split3>
    ae04:	a0 f3       	brcs	.-24     	; 0xadee <__mulsf3+0x4>

0000ae06 <__mulsf3_pse>:
    ae06:	95 9f       	mul	r25, r21
    ae08:	d1 f3       	breq	.-12     	; 0xadfe <__mulsf3+0x14>
    ae0a:	95 0f       	add	r25, r21
    ae0c:	50 e0       	ldi	r21, 0x00	; 0
    ae0e:	55 1f       	adc	r21, r21
    ae10:	62 9f       	mul	r22, r18
    ae12:	f0 01       	movw	r30, r0
    ae14:	72 9f       	mul	r23, r18
    ae16:	bb 27       	eor	r27, r27
    ae18:	f0 0d       	add	r31, r0
    ae1a:	b1 1d       	adc	r27, r1
    ae1c:	63 9f       	mul	r22, r19
    ae1e:	aa 27       	eor	r26, r26
    ae20:	f0 0d       	add	r31, r0
    ae22:	b1 1d       	adc	r27, r1
    ae24:	aa 1f       	adc	r26, r26
    ae26:	64 9f       	mul	r22, r20
    ae28:	66 27       	eor	r22, r22
    ae2a:	b0 0d       	add	r27, r0
    ae2c:	a1 1d       	adc	r26, r1
    ae2e:	66 1f       	adc	r22, r22
    ae30:	82 9f       	mul	r24, r18
    ae32:	22 27       	eor	r18, r18
    ae34:	b0 0d       	add	r27, r0
    ae36:	a1 1d       	adc	r26, r1
    ae38:	62 1f       	adc	r22, r18
    ae3a:	73 9f       	mul	r23, r19
    ae3c:	b0 0d       	add	r27, r0
    ae3e:	a1 1d       	adc	r26, r1
    ae40:	62 1f       	adc	r22, r18
    ae42:	83 9f       	mul	r24, r19
    ae44:	a0 0d       	add	r26, r0
    ae46:	61 1d       	adc	r22, r1
    ae48:	22 1f       	adc	r18, r18
    ae4a:	74 9f       	mul	r23, r20
    ae4c:	33 27       	eor	r19, r19
    ae4e:	a0 0d       	add	r26, r0
    ae50:	61 1d       	adc	r22, r1
    ae52:	23 1f       	adc	r18, r19
    ae54:	84 9f       	mul	r24, r20
    ae56:	60 0d       	add	r22, r0
    ae58:	21 1d       	adc	r18, r1
    ae5a:	82 2f       	mov	r24, r18
    ae5c:	76 2f       	mov	r23, r22
    ae5e:	6a 2f       	mov	r22, r26
    ae60:	11 24       	eor	r1, r1
    ae62:	9f 57       	subi	r25, 0x7F	; 127
    ae64:	50 40       	sbci	r21, 0x00	; 0
    ae66:	8a f0       	brmi	.+34     	; 0xae8a <__mulsf3_pse+0x84>
    ae68:	e1 f0       	breq	.+56     	; 0xaea2 <__mulsf3_pse+0x9c>
    ae6a:	88 23       	and	r24, r24
    ae6c:	4a f0       	brmi	.+18     	; 0xae80 <__mulsf3_pse+0x7a>
    ae6e:	ee 0f       	add	r30, r30
    ae70:	ff 1f       	adc	r31, r31
    ae72:	bb 1f       	adc	r27, r27
    ae74:	66 1f       	adc	r22, r22
    ae76:	77 1f       	adc	r23, r23
    ae78:	88 1f       	adc	r24, r24
    ae7a:	91 50       	subi	r25, 0x01	; 1
    ae7c:	50 40       	sbci	r21, 0x00	; 0
    ae7e:	a9 f7       	brne	.-22     	; 0xae6a <__mulsf3_pse+0x64>
    ae80:	9e 3f       	cpi	r25, 0xFE	; 254
    ae82:	51 05       	cpc	r21, r1
    ae84:	70 f0       	brcs	.+28     	; 0xaea2 <__mulsf3_pse+0x9c>
    ae86:	5c cf       	rjmp	.-328    	; 0xad40 <__fp_inf>
    ae88:	a6 cf       	rjmp	.-180    	; 0xadd6 <__fp_szero>
    ae8a:	5f 3f       	cpi	r21, 0xFF	; 255
    ae8c:	ec f3       	brlt	.-6      	; 0xae88 <__mulsf3_pse+0x82>
    ae8e:	98 3e       	cpi	r25, 0xE8	; 232
    ae90:	dc f3       	brlt	.-10     	; 0xae88 <__mulsf3_pse+0x82>
    ae92:	86 95       	lsr	r24
    ae94:	77 95       	ror	r23
    ae96:	67 95       	ror	r22
    ae98:	b7 95       	ror	r27
    ae9a:	f7 95       	ror	r31
    ae9c:	e7 95       	ror	r30
    ae9e:	9f 5f       	subi	r25, 0xFF	; 255
    aea0:	c1 f7       	brne	.-16     	; 0xae92 <__mulsf3_pse+0x8c>
    aea2:	fe 2b       	or	r31, r30
    aea4:	88 0f       	add	r24, r24
    aea6:	91 1d       	adc	r25, r1
    aea8:	96 95       	lsr	r25
    aeaa:	87 95       	ror	r24
    aeac:	97 f9       	bld	r25, 7
    aeae:	08 95       	ret

0000aeb0 <__unordsf2>:
    aeb0:	23 df       	rcall	.-442    	; 0xacf8 <__fp_cmp>
    aeb2:	88 0b       	sbc	r24, r24
    aeb4:	99 0b       	sbc	r25, r25
    aeb6:	08 95       	ret

0000aeb8 <__mulsi3>:
    aeb8:	db 01       	movw	r26, r22
    aeba:	8f 93       	push	r24
    aebc:	9f 93       	push	r25
    aebe:	56 d0       	rcall	.+172    	; 0xaf6c <__muluhisi3>
    aec0:	bf 91       	pop	r27
    aec2:	af 91       	pop	r26
    aec4:	a2 9f       	mul	r26, r18
    aec6:	80 0d       	add	r24, r0
    aec8:	91 1d       	adc	r25, r1
    aeca:	a3 9f       	mul	r26, r19
    aecc:	90 0d       	add	r25, r0
    aece:	b2 9f       	mul	r27, r18
    aed0:	90 0d       	add	r25, r0
    aed2:	11 24       	eor	r1, r1
    aed4:	08 95       	ret

0000aed6 <__udivmodsi4>:
    aed6:	a1 e2       	ldi	r26, 0x21	; 33
    aed8:	1a 2e       	mov	r1, r26
    aeda:	aa 1b       	sub	r26, r26
    aedc:	bb 1b       	sub	r27, r27
    aede:	fd 01       	movw	r30, r26
    aee0:	0d c0       	rjmp	.+26     	; 0xaefc <__udivmodsi4_ep>

0000aee2 <__udivmodsi4_loop>:
    aee2:	aa 1f       	adc	r26, r26
    aee4:	bb 1f       	adc	r27, r27
    aee6:	ee 1f       	adc	r30, r30
    aee8:	ff 1f       	adc	r31, r31
    aeea:	a2 17       	cp	r26, r18
    aeec:	b3 07       	cpc	r27, r19
    aeee:	e4 07       	cpc	r30, r20
    aef0:	f5 07       	cpc	r31, r21
    aef2:	20 f0       	brcs	.+8      	; 0xaefc <__udivmodsi4_ep>
    aef4:	a2 1b       	sub	r26, r18
    aef6:	b3 0b       	sbc	r27, r19
    aef8:	e4 0b       	sbc	r30, r20
    aefa:	f5 0b       	sbc	r31, r21

0000aefc <__udivmodsi4_ep>:
    aefc:	66 1f       	adc	r22, r22
    aefe:	77 1f       	adc	r23, r23
    af00:	88 1f       	adc	r24, r24
    af02:	99 1f       	adc	r25, r25
    af04:	1a 94       	dec	r1
    af06:	69 f7       	brne	.-38     	; 0xaee2 <__udivmodsi4_loop>
    af08:	60 95       	com	r22
    af0a:	70 95       	com	r23
    af0c:	80 95       	com	r24
    af0e:	90 95       	com	r25
    af10:	9b 01       	movw	r18, r22
    af12:	ac 01       	movw	r20, r24
    af14:	bd 01       	movw	r22, r26
    af16:	cf 01       	movw	r24, r30
    af18:	08 95       	ret

0000af1a <__divmodsi4>:
    af1a:	05 2e       	mov	r0, r21
    af1c:	97 fb       	bst	r25, 7
    af1e:	16 f4       	brtc	.+4      	; 0xaf24 <__divmodsi4+0xa>
    af20:	00 94       	com	r0
    af22:	0f d0       	rcall	.+30     	; 0xaf42 <__negsi2>
    af24:	57 fd       	sbrc	r21, 7
    af26:	05 d0       	rcall	.+10     	; 0xaf32 <__divmodsi4_neg2>
    af28:	d6 df       	rcall	.-84     	; 0xaed6 <__udivmodsi4>
    af2a:	07 fc       	sbrc	r0, 7
    af2c:	02 d0       	rcall	.+4      	; 0xaf32 <__divmodsi4_neg2>
    af2e:	46 f4       	brtc	.+16     	; 0xaf40 <__divmodsi4_exit>
    af30:	08 c0       	rjmp	.+16     	; 0xaf42 <__negsi2>

0000af32 <__divmodsi4_neg2>:
    af32:	50 95       	com	r21
    af34:	40 95       	com	r20
    af36:	30 95       	com	r19
    af38:	21 95       	neg	r18
    af3a:	3f 4f       	sbci	r19, 0xFF	; 255
    af3c:	4f 4f       	sbci	r20, 0xFF	; 255
    af3e:	5f 4f       	sbci	r21, 0xFF	; 255

0000af40 <__divmodsi4_exit>:
    af40:	08 95       	ret

0000af42 <__negsi2>:
    af42:	90 95       	com	r25
    af44:	80 95       	com	r24
    af46:	70 95       	com	r23
    af48:	61 95       	neg	r22
    af4a:	7f 4f       	sbci	r23, 0xFF	; 255
    af4c:	8f 4f       	sbci	r24, 0xFF	; 255
    af4e:	9f 4f       	sbci	r25, 0xFF	; 255
    af50:	08 95       	ret

0000af52 <__tablejump2__>:
    af52:	ee 0f       	add	r30, r30
    af54:	ff 1f       	adc	r31, r31

0000af56 <__tablejump__>:
    af56:	05 90       	lpm	r0, Z+
    af58:	f4 91       	lpm	r31, Z
    af5a:	e0 2d       	mov	r30, r0
    af5c:	19 94       	eijmp

0000af5e <__bswapsi2>:
    af5e:	69 27       	eor	r22, r25
    af60:	96 27       	eor	r25, r22
    af62:	69 27       	eor	r22, r25
    af64:	78 27       	eor	r23, r24
    af66:	87 27       	eor	r24, r23
    af68:	78 27       	eor	r23, r24
    af6a:	08 95       	ret

0000af6c <__muluhisi3>:
    af6c:	0d d0       	rcall	.+26     	; 0xaf88 <__umulhisi3>
    af6e:	a5 9f       	mul	r26, r21
    af70:	90 0d       	add	r25, r0
    af72:	b4 9f       	mul	r27, r20
    af74:	90 0d       	add	r25, r0
    af76:	a4 9f       	mul	r26, r20
    af78:	80 0d       	add	r24, r0
    af7a:	91 1d       	adc	r25, r1
    af7c:	11 24       	eor	r1, r1
    af7e:	08 95       	ret

0000af80 <__tablejump_elpm__>:
    af80:	07 90       	elpm	r0, Z+
    af82:	f6 91       	elpm	r31, Z
    af84:	e0 2d       	mov	r30, r0
    af86:	19 94       	eijmp

0000af88 <__umulhisi3>:
    af88:	a2 9f       	mul	r26, r18
    af8a:	b0 01       	movw	r22, r0
    af8c:	b3 9f       	mul	r27, r19
    af8e:	c0 01       	movw	r24, r0
    af90:	a3 9f       	mul	r26, r19
    af92:	70 0d       	add	r23, r0
    af94:	81 1d       	adc	r24, r1
    af96:	11 24       	eor	r1, r1
    af98:	91 1d       	adc	r25, r1
    af9a:	b2 9f       	mul	r27, r18
    af9c:	70 0d       	add	r23, r0
    af9e:	81 1d       	adc	r24, r1
    afa0:	11 24       	eor	r1, r1
    afa2:	91 1d       	adc	r25, r1
    afa4:	08 95       	ret

0000afa6 <malloc>:
    afa6:	cf 93       	push	r28
    afa8:	df 93       	push	r29
    afaa:	82 30       	cpi	r24, 0x02	; 2
    afac:	91 05       	cpc	r25, r1
    afae:	10 f4       	brcc	.+4      	; 0xafb4 <malloc+0xe>
    afb0:	82 e0       	ldi	r24, 0x02	; 2
    afb2:	90 e0       	ldi	r25, 0x00	; 0
    afb4:	e0 91 08 0a 	lds	r30, 0x0A08
    afb8:	f0 91 09 0a 	lds	r31, 0x0A09
    afbc:	20 e0       	ldi	r18, 0x00	; 0
    afbe:	30 e0       	ldi	r19, 0x00	; 0
    afc0:	a0 e0       	ldi	r26, 0x00	; 0
    afc2:	b0 e0       	ldi	r27, 0x00	; 0
    afc4:	30 97       	sbiw	r30, 0x00	; 0
    afc6:	39 f1       	breq	.+78     	; 0xb016 <malloc+0x70>
    afc8:	40 81       	ld	r20, Z
    afca:	51 81       	ldd	r21, Z+1	; 0x01
    afcc:	48 17       	cp	r20, r24
    afce:	59 07       	cpc	r21, r25
    afd0:	b8 f0       	brcs	.+46     	; 0xb000 <malloc+0x5a>
    afd2:	48 17       	cp	r20, r24
    afd4:	59 07       	cpc	r21, r25
    afd6:	71 f4       	brne	.+28     	; 0xaff4 <malloc+0x4e>
    afd8:	82 81       	ldd	r24, Z+2	; 0x02
    afda:	93 81       	ldd	r25, Z+3	; 0x03
    afdc:	10 97       	sbiw	r26, 0x00	; 0
    afde:	29 f0       	breq	.+10     	; 0xafea <malloc+0x44>
    afe0:	13 96       	adiw	r26, 0x03	; 3
    afe2:	9c 93       	st	X, r25
    afe4:	8e 93       	st	-X, r24
    afe6:	12 97       	sbiw	r26, 0x02	; 2
    afe8:	2c c0       	rjmp	.+88     	; 0xb042 <malloc+0x9c>
    afea:	90 93 09 0a 	sts	0x0A09, r25
    afee:	80 93 08 0a 	sts	0x0A08, r24
    aff2:	27 c0       	rjmp	.+78     	; 0xb042 <malloc+0x9c>
    aff4:	21 15       	cp	r18, r1
    aff6:	31 05       	cpc	r19, r1
    aff8:	31 f0       	breq	.+12     	; 0xb006 <malloc+0x60>
    affa:	42 17       	cp	r20, r18
    affc:	53 07       	cpc	r21, r19
    affe:	18 f0       	brcs	.+6      	; 0xb006 <malloc+0x60>
    b000:	a9 01       	movw	r20, r18
    b002:	db 01       	movw	r26, r22
    b004:	01 c0       	rjmp	.+2      	; 0xb008 <malloc+0x62>
    b006:	ef 01       	movw	r28, r30
    b008:	9a 01       	movw	r18, r20
    b00a:	bd 01       	movw	r22, r26
    b00c:	df 01       	movw	r26, r30
    b00e:	02 80       	ldd	r0, Z+2	; 0x02
    b010:	f3 81       	ldd	r31, Z+3	; 0x03
    b012:	e0 2d       	mov	r30, r0
    b014:	d7 cf       	rjmp	.-82     	; 0xafc4 <malloc+0x1e>
    b016:	21 15       	cp	r18, r1
    b018:	31 05       	cpc	r19, r1
    b01a:	f9 f0       	breq	.+62     	; 0xb05a <malloc+0xb4>
    b01c:	28 1b       	sub	r18, r24
    b01e:	39 0b       	sbc	r19, r25
    b020:	24 30       	cpi	r18, 0x04	; 4
    b022:	31 05       	cpc	r19, r1
    b024:	80 f4       	brcc	.+32     	; 0xb046 <malloc+0xa0>
    b026:	8a 81       	ldd	r24, Y+2	; 0x02
    b028:	9b 81       	ldd	r25, Y+3	; 0x03
    b02a:	61 15       	cp	r22, r1
    b02c:	71 05       	cpc	r23, r1
    b02e:	21 f0       	breq	.+8      	; 0xb038 <malloc+0x92>
    b030:	fb 01       	movw	r30, r22
    b032:	93 83       	std	Z+3, r25	; 0x03
    b034:	82 83       	std	Z+2, r24	; 0x02
    b036:	04 c0       	rjmp	.+8      	; 0xb040 <malloc+0x9a>
    b038:	90 93 09 0a 	sts	0x0A09, r25
    b03c:	80 93 08 0a 	sts	0x0A08, r24
    b040:	fe 01       	movw	r30, r28
    b042:	32 96       	adiw	r30, 0x02	; 2
    b044:	44 c0       	rjmp	.+136    	; 0xb0ce <malloc+0x128>
    b046:	fe 01       	movw	r30, r28
    b048:	e2 0f       	add	r30, r18
    b04a:	f3 1f       	adc	r31, r19
    b04c:	81 93       	st	Z+, r24
    b04e:	91 93       	st	Z+, r25
    b050:	22 50       	subi	r18, 0x02	; 2
    b052:	31 09       	sbc	r19, r1
    b054:	39 83       	std	Y+1, r19	; 0x01
    b056:	28 83       	st	Y, r18
    b058:	3a c0       	rjmp	.+116    	; 0xb0ce <malloc+0x128>
    b05a:	20 91 06 0a 	lds	r18, 0x0A06
    b05e:	30 91 07 0a 	lds	r19, 0x0A07
    b062:	23 2b       	or	r18, r19
    b064:	41 f4       	brne	.+16     	; 0xb076 <malloc+0xd0>
    b066:	20 91 02 02 	lds	r18, 0x0202
    b06a:	30 91 03 02 	lds	r19, 0x0203
    b06e:	30 93 07 0a 	sts	0x0A07, r19
    b072:	20 93 06 0a 	sts	0x0A06, r18
    b076:	20 91 00 02 	lds	r18, 0x0200
    b07a:	30 91 01 02 	lds	r19, 0x0201
    b07e:	21 15       	cp	r18, r1
    b080:	31 05       	cpc	r19, r1
    b082:	41 f4       	brne	.+16     	; 0xb094 <malloc+0xee>
    b084:	2d b7       	in	r18, 0x3d	; 61
    b086:	3e b7       	in	r19, 0x3e	; 62
    b088:	40 91 04 02 	lds	r20, 0x0204
    b08c:	50 91 05 02 	lds	r21, 0x0205
    b090:	24 1b       	sub	r18, r20
    b092:	35 0b       	sbc	r19, r21
    b094:	e0 91 06 0a 	lds	r30, 0x0A06
    b098:	f0 91 07 0a 	lds	r31, 0x0A07
    b09c:	e2 17       	cp	r30, r18
    b09e:	f3 07       	cpc	r31, r19
    b0a0:	a0 f4       	brcc	.+40     	; 0xb0ca <malloc+0x124>
    b0a2:	2e 1b       	sub	r18, r30
    b0a4:	3f 0b       	sbc	r19, r31
    b0a6:	28 17       	cp	r18, r24
    b0a8:	39 07       	cpc	r19, r25
    b0aa:	78 f0       	brcs	.+30     	; 0xb0ca <malloc+0x124>
    b0ac:	ac 01       	movw	r20, r24
    b0ae:	4e 5f       	subi	r20, 0xFE	; 254
    b0b0:	5f 4f       	sbci	r21, 0xFF	; 255
    b0b2:	24 17       	cp	r18, r20
    b0b4:	35 07       	cpc	r19, r21
    b0b6:	48 f0       	brcs	.+18     	; 0xb0ca <malloc+0x124>
    b0b8:	4e 0f       	add	r20, r30
    b0ba:	5f 1f       	adc	r21, r31
    b0bc:	50 93 07 0a 	sts	0x0A07, r21
    b0c0:	40 93 06 0a 	sts	0x0A06, r20
    b0c4:	81 93       	st	Z+, r24
    b0c6:	91 93       	st	Z+, r25
    b0c8:	02 c0       	rjmp	.+4      	; 0xb0ce <malloc+0x128>
    b0ca:	e0 e0       	ldi	r30, 0x00	; 0
    b0cc:	f0 e0       	ldi	r31, 0x00	; 0
    b0ce:	cf 01       	movw	r24, r30
    b0d0:	df 91       	pop	r29
    b0d2:	cf 91       	pop	r28
    b0d4:	08 95       	ret

0000b0d6 <free>:
    b0d6:	cf 93       	push	r28
    b0d8:	df 93       	push	r29
    b0da:	00 97       	sbiw	r24, 0x00	; 0
    b0dc:	09 f4       	brne	.+2      	; 0xb0e0 <free+0xa>
    b0de:	87 c0       	rjmp	.+270    	; 0xb1ee <free+0x118>
    b0e0:	fc 01       	movw	r30, r24
    b0e2:	32 97       	sbiw	r30, 0x02	; 2
    b0e4:	13 82       	std	Z+3, r1	; 0x03
    b0e6:	12 82       	std	Z+2, r1	; 0x02
    b0e8:	c0 91 08 0a 	lds	r28, 0x0A08
    b0ec:	d0 91 09 0a 	lds	r29, 0x0A09
    b0f0:	20 97       	sbiw	r28, 0x00	; 0
    b0f2:	81 f4       	brne	.+32     	; 0xb114 <free+0x3e>
    b0f4:	20 81       	ld	r18, Z
    b0f6:	31 81       	ldd	r19, Z+1	; 0x01
    b0f8:	28 0f       	add	r18, r24
    b0fa:	39 1f       	adc	r19, r25
    b0fc:	80 91 06 0a 	lds	r24, 0x0A06
    b100:	90 91 07 0a 	lds	r25, 0x0A07
    b104:	82 17       	cp	r24, r18
    b106:	93 07       	cpc	r25, r19
    b108:	79 f5       	brne	.+94     	; 0xb168 <free+0x92>
    b10a:	f0 93 07 0a 	sts	0x0A07, r31
    b10e:	e0 93 06 0a 	sts	0x0A06, r30
    b112:	6d c0       	rjmp	.+218    	; 0xb1ee <free+0x118>
    b114:	de 01       	movw	r26, r28
    b116:	20 e0       	ldi	r18, 0x00	; 0
    b118:	30 e0       	ldi	r19, 0x00	; 0
    b11a:	ae 17       	cp	r26, r30
    b11c:	bf 07       	cpc	r27, r31
    b11e:	50 f4       	brcc	.+20     	; 0xb134 <free+0x5e>
    b120:	12 96       	adiw	r26, 0x02	; 2
    b122:	4d 91       	ld	r20, X+
    b124:	5c 91       	ld	r21, X
    b126:	13 97       	sbiw	r26, 0x03	; 3
    b128:	9d 01       	movw	r18, r26
    b12a:	41 15       	cp	r20, r1
    b12c:	51 05       	cpc	r21, r1
    b12e:	09 f1       	breq	.+66     	; 0xb172 <free+0x9c>
    b130:	da 01       	movw	r26, r20
    b132:	f3 cf       	rjmp	.-26     	; 0xb11a <free+0x44>
    b134:	b3 83       	std	Z+3, r27	; 0x03
    b136:	a2 83       	std	Z+2, r26	; 0x02
    b138:	40 81       	ld	r20, Z
    b13a:	51 81       	ldd	r21, Z+1	; 0x01
    b13c:	84 0f       	add	r24, r20
    b13e:	95 1f       	adc	r25, r21
    b140:	8a 17       	cp	r24, r26
    b142:	9b 07       	cpc	r25, r27
    b144:	71 f4       	brne	.+28     	; 0xb162 <free+0x8c>
    b146:	8d 91       	ld	r24, X+
    b148:	9c 91       	ld	r25, X
    b14a:	11 97       	sbiw	r26, 0x01	; 1
    b14c:	84 0f       	add	r24, r20
    b14e:	95 1f       	adc	r25, r21
    b150:	02 96       	adiw	r24, 0x02	; 2
    b152:	91 83       	std	Z+1, r25	; 0x01
    b154:	80 83       	st	Z, r24
    b156:	12 96       	adiw	r26, 0x02	; 2
    b158:	8d 91       	ld	r24, X+
    b15a:	9c 91       	ld	r25, X
    b15c:	13 97       	sbiw	r26, 0x03	; 3
    b15e:	93 83       	std	Z+3, r25	; 0x03
    b160:	82 83       	std	Z+2, r24	; 0x02
    b162:	21 15       	cp	r18, r1
    b164:	31 05       	cpc	r19, r1
    b166:	29 f4       	brne	.+10     	; 0xb172 <free+0x9c>
    b168:	f0 93 09 0a 	sts	0x0A09, r31
    b16c:	e0 93 08 0a 	sts	0x0A08, r30
    b170:	3e c0       	rjmp	.+124    	; 0xb1ee <free+0x118>
    b172:	d9 01       	movw	r26, r18
    b174:	13 96       	adiw	r26, 0x03	; 3
    b176:	fc 93       	st	X, r31
    b178:	ee 93       	st	-X, r30
    b17a:	12 97       	sbiw	r26, 0x02	; 2
    b17c:	4d 91       	ld	r20, X+
    b17e:	5d 91       	ld	r21, X+
    b180:	a4 0f       	add	r26, r20
    b182:	b5 1f       	adc	r27, r21
    b184:	ea 17       	cp	r30, r26
    b186:	fb 07       	cpc	r31, r27
    b188:	79 f4       	brne	.+30     	; 0xb1a8 <free+0xd2>
    b18a:	80 81       	ld	r24, Z
    b18c:	91 81       	ldd	r25, Z+1	; 0x01
    b18e:	84 0f       	add	r24, r20
    b190:	95 1f       	adc	r25, r21
    b192:	02 96       	adiw	r24, 0x02	; 2
    b194:	d9 01       	movw	r26, r18
    b196:	11 96       	adiw	r26, 0x01	; 1
    b198:	9c 93       	st	X, r25
    b19a:	8e 93       	st	-X, r24
    b19c:	82 81       	ldd	r24, Z+2	; 0x02
    b19e:	93 81       	ldd	r25, Z+3	; 0x03
    b1a0:	13 96       	adiw	r26, 0x03	; 3
    b1a2:	9c 93       	st	X, r25
    b1a4:	8e 93       	st	-X, r24
    b1a6:	12 97       	sbiw	r26, 0x02	; 2
    b1a8:	e0 e0       	ldi	r30, 0x00	; 0
    b1aa:	f0 e0       	ldi	r31, 0x00	; 0
    b1ac:	8a 81       	ldd	r24, Y+2	; 0x02
    b1ae:	9b 81       	ldd	r25, Y+3	; 0x03
    b1b0:	00 97       	sbiw	r24, 0x00	; 0
    b1b2:	19 f0       	breq	.+6      	; 0xb1ba <free+0xe4>
    b1b4:	fe 01       	movw	r30, r28
    b1b6:	ec 01       	movw	r28, r24
    b1b8:	f9 cf       	rjmp	.-14     	; 0xb1ac <free+0xd6>
    b1ba:	ce 01       	movw	r24, r28
    b1bc:	02 96       	adiw	r24, 0x02	; 2
    b1be:	28 81       	ld	r18, Y
    b1c0:	39 81       	ldd	r19, Y+1	; 0x01
    b1c2:	82 0f       	add	r24, r18
    b1c4:	93 1f       	adc	r25, r19
    b1c6:	20 91 06 0a 	lds	r18, 0x0A06
    b1ca:	30 91 07 0a 	lds	r19, 0x0A07
    b1ce:	28 17       	cp	r18, r24
    b1d0:	39 07       	cpc	r19, r25
    b1d2:	69 f4       	brne	.+26     	; 0xb1ee <free+0x118>
    b1d4:	30 97       	sbiw	r30, 0x00	; 0
    b1d6:	29 f4       	brne	.+10     	; 0xb1e2 <free+0x10c>
    b1d8:	10 92 09 0a 	sts	0x0A09, r1
    b1dc:	10 92 08 0a 	sts	0x0A08, r1
    b1e0:	02 c0       	rjmp	.+4      	; 0xb1e6 <free+0x110>
    b1e2:	13 82       	std	Z+3, r1	; 0x03
    b1e4:	12 82       	std	Z+2, r1	; 0x02
    b1e6:	d0 93 07 0a 	sts	0x0A07, r29
    b1ea:	c0 93 06 0a 	sts	0x0A06, r28
    b1ee:	df 91       	pop	r29
    b1f0:	cf 91       	pop	r28
    b1f2:	08 95       	ret

0000b1f4 <do_random>:
    b1f4:	8f 92       	push	r8
    b1f6:	9f 92       	push	r9
    b1f8:	af 92       	push	r10
    b1fa:	bf 92       	push	r11
    b1fc:	cf 92       	push	r12
    b1fe:	df 92       	push	r13
    b200:	ef 92       	push	r14
    b202:	ff 92       	push	r15
    b204:	cf 93       	push	r28
    b206:	df 93       	push	r29
    b208:	ec 01       	movw	r28, r24
    b20a:	68 81       	ld	r22, Y
    b20c:	79 81       	ldd	r23, Y+1	; 0x01
    b20e:	8a 81       	ldd	r24, Y+2	; 0x02
    b210:	9b 81       	ldd	r25, Y+3	; 0x03
    b212:	61 15       	cp	r22, r1
    b214:	71 05       	cpc	r23, r1
    b216:	81 05       	cpc	r24, r1
    b218:	91 05       	cpc	r25, r1
    b21a:	21 f4       	brne	.+8      	; 0xb224 <do_random+0x30>
    b21c:	64 e2       	ldi	r22, 0x24	; 36
    b21e:	79 ed       	ldi	r23, 0xD9	; 217
    b220:	8b e5       	ldi	r24, 0x5B	; 91
    b222:	97 e0       	ldi	r25, 0x07	; 7
    b224:	2d e1       	ldi	r18, 0x1D	; 29
    b226:	33 ef       	ldi	r19, 0xF3	; 243
    b228:	41 e0       	ldi	r20, 0x01	; 1
    b22a:	50 e0       	ldi	r21, 0x00	; 0
    b22c:	76 de       	rcall	.-788    	; 0xaf1a <__divmodsi4>
    b22e:	49 01       	movw	r8, r18
    b230:	5a 01       	movw	r10, r20
    b232:	9b 01       	movw	r18, r22
    b234:	ac 01       	movw	r20, r24
    b236:	a7 ea       	ldi	r26, 0xA7	; 167
    b238:	b1 e4       	ldi	r27, 0x41	; 65
    b23a:	98 de       	rcall	.-720    	; 0xaf6c <__muluhisi3>
    b23c:	6b 01       	movw	r12, r22
    b23e:	7c 01       	movw	r14, r24
    b240:	ac ee       	ldi	r26, 0xEC	; 236
    b242:	b4 ef       	ldi	r27, 0xF4	; 244
    b244:	a5 01       	movw	r20, r10
    b246:	94 01       	movw	r18, r8
    b248:	9a d6       	rcall	.+3380   	; 0xbf7e <__mulohisi3>
    b24a:	c6 0e       	add	r12, r22
    b24c:	d7 1e       	adc	r13, r23
    b24e:	e8 1e       	adc	r14, r24
    b250:	f9 1e       	adc	r15, r25
    b252:	f7 fe       	sbrs	r15, 7
    b254:	06 c0       	rjmp	.+12     	; 0xb262 <do_random+0x6e>
    b256:	81 e0       	ldi	r24, 0x01	; 1
    b258:	c8 1a       	sub	r12, r24
    b25a:	d1 08       	sbc	r13, r1
    b25c:	e1 08       	sbc	r14, r1
    b25e:	80 e8       	ldi	r24, 0x80	; 128
    b260:	f8 0a       	sbc	r15, r24
    b262:	c8 82       	st	Y, r12
    b264:	d9 82       	std	Y+1, r13	; 0x01
    b266:	ea 82       	std	Y+2, r14	; 0x02
    b268:	fb 82       	std	Y+3, r15	; 0x03
    b26a:	c7 01       	movw	r24, r14
    b26c:	b6 01       	movw	r22, r12
    b26e:	9f 77       	andi	r25, 0x7F	; 127
    b270:	df 91       	pop	r29
    b272:	cf 91       	pop	r28
    b274:	ff 90       	pop	r15
    b276:	ef 90       	pop	r14
    b278:	df 90       	pop	r13
    b27a:	cf 90       	pop	r12
    b27c:	bf 90       	pop	r11
    b27e:	af 90       	pop	r10
    b280:	9f 90       	pop	r9
    b282:	8f 90       	pop	r8
    b284:	08 95       	ret

0000b286 <random_r>:
    b286:	b6 cf       	rjmp	.-148    	; 0xb1f4 <do_random>

0000b288 <random>:
    b288:	86 e0       	ldi	r24, 0x06	; 6
    b28a:	92 e0       	ldi	r25, 0x02	; 2
    b28c:	b3 cf       	rjmp	.-154    	; 0xb1f4 <do_random>

0000b28e <srandom>:
    b28e:	60 93 06 02 	sts	0x0206, r22
    b292:	70 93 07 02 	sts	0x0207, r23
    b296:	80 93 08 02 	sts	0x0208, r24
    b29a:	90 93 09 02 	sts	0x0209, r25
    b29e:	08 95       	ret

0000b2a0 <realloc>:
    b2a0:	6f 92       	push	r6
    b2a2:	7f 92       	push	r7
    b2a4:	8f 92       	push	r8
    b2a6:	9f 92       	push	r9
    b2a8:	af 92       	push	r10
    b2aa:	bf 92       	push	r11
    b2ac:	cf 92       	push	r12
    b2ae:	df 92       	push	r13
    b2b0:	ef 92       	push	r14
    b2b2:	ff 92       	push	r15
    b2b4:	0f 93       	push	r16
    b2b6:	1f 93       	push	r17
    b2b8:	cf 93       	push	r28
    b2ba:	df 93       	push	r29
    b2bc:	ec 01       	movw	r28, r24
    b2be:	cb 01       	movw	r24, r22
    b2c0:	20 97       	sbiw	r28, 0x00	; 0
    b2c2:	79 f4       	brne	.+30     	; 0xb2e2 <realloc+0x42>
    b2c4:	df 91       	pop	r29
    b2c6:	cf 91       	pop	r28
    b2c8:	1f 91       	pop	r17
    b2ca:	0f 91       	pop	r16
    b2cc:	ff 90       	pop	r15
    b2ce:	ef 90       	pop	r14
    b2d0:	df 90       	pop	r13
    b2d2:	cf 90       	pop	r12
    b2d4:	bf 90       	pop	r11
    b2d6:	af 90       	pop	r10
    b2d8:	9f 90       	pop	r9
    b2da:	8f 90       	pop	r8
    b2dc:	7f 90       	pop	r7
    b2de:	6f 90       	pop	r6
    b2e0:	62 ce       	rjmp	.-828    	; 0xafa6 <malloc>
    b2e2:	fe 01       	movw	r30, r28
    b2e4:	e6 0f       	add	r30, r22
    b2e6:	f7 1f       	adc	r31, r23
    b2e8:	9e 01       	movw	r18, r28
    b2ea:	22 50       	subi	r18, 0x02	; 2
    b2ec:	31 09       	sbc	r19, r1
    b2ee:	e2 17       	cp	r30, r18
    b2f0:	f3 07       	cpc	r31, r19
    b2f2:	08 f4       	brcc	.+2      	; 0xb2f6 <realloc+0x56>
    b2f4:	a8 c0       	rjmp	.+336    	; 0xb446 <realloc+0x1a6>
    b2f6:	d9 01       	movw	r26, r18
    b2f8:	0d 91       	ld	r16, X+
    b2fa:	1c 91       	ld	r17, X
    b2fc:	11 97       	sbiw	r26, 0x01	; 1
    b2fe:	06 17       	cp	r16, r22
    b300:	17 07       	cpc	r17, r23
    b302:	b0 f0       	brcs	.+44     	; 0xb330 <realloc+0x90>
    b304:	05 30       	cpi	r16, 0x05	; 5
    b306:	11 05       	cpc	r17, r1
    b308:	08 f4       	brcc	.+2      	; 0xb30c <realloc+0x6c>
    b30a:	9b c0       	rjmp	.+310    	; 0xb442 <realloc+0x1a2>
    b30c:	a8 01       	movw	r20, r16
    b30e:	44 50       	subi	r20, 0x04	; 4
    b310:	51 09       	sbc	r21, r1
    b312:	46 17       	cp	r20, r22
    b314:	57 07       	cpc	r21, r23
    b316:	08 f4       	brcc	.+2      	; 0xb31a <realloc+0x7a>
    b318:	94 c0       	rjmp	.+296    	; 0xb442 <realloc+0x1a2>
    b31a:	02 50       	subi	r16, 0x02	; 2
    b31c:	11 09       	sbc	r17, r1
    b31e:	06 1b       	sub	r16, r22
    b320:	17 0b       	sbc	r17, r23
    b322:	01 93       	st	Z+, r16
    b324:	11 93       	st	Z+, r17
    b326:	6d 93       	st	X+, r22
    b328:	7c 93       	st	X, r23
    b32a:	cf 01       	movw	r24, r30
    b32c:	d4 de       	rcall	.-600    	; 0xb0d6 <free>
    b32e:	89 c0       	rjmp	.+274    	; 0xb442 <realloc+0x1a2>
    b330:	5b 01       	movw	r10, r22
    b332:	a0 1a       	sub	r10, r16
    b334:	b1 0a       	sbc	r11, r17
    b336:	4e 01       	movw	r8, r28
    b338:	80 0e       	add	r8, r16
    b33a:	91 1e       	adc	r9, r17
    b33c:	a0 91 08 0a 	lds	r26, 0x0A08
    b340:	b0 91 09 0a 	lds	r27, 0x0A09
    b344:	61 2c       	mov	r6, r1
    b346:	71 2c       	mov	r7, r1
    b348:	60 e0       	ldi	r22, 0x00	; 0
    b34a:	70 e0       	ldi	r23, 0x00	; 0
    b34c:	10 97       	sbiw	r26, 0x00	; 0
    b34e:	09 f4       	brne	.+2      	; 0xb352 <realloc+0xb2>
    b350:	49 c0       	rjmp	.+146    	; 0xb3e4 <realloc+0x144>
    b352:	a8 15       	cp	r26, r8
    b354:	b9 05       	cpc	r27, r9
    b356:	c9 f5       	brne	.+114    	; 0xb3ca <realloc+0x12a>
    b358:	ed 90       	ld	r14, X+
    b35a:	fc 90       	ld	r15, X
    b35c:	11 97       	sbiw	r26, 0x01	; 1
    b35e:	67 01       	movw	r12, r14
    b360:	42 e0       	ldi	r20, 0x02	; 2
    b362:	c4 0e       	add	r12, r20
    b364:	d1 1c       	adc	r13, r1
    b366:	ca 14       	cp	r12, r10
    b368:	db 04       	cpc	r13, r11
    b36a:	78 f1       	brcs	.+94     	; 0xb3ca <realloc+0x12a>
    b36c:	47 01       	movw	r8, r14
    b36e:	8a 18       	sub	r8, r10
    b370:	9b 08       	sbc	r9, r11
    b372:	64 01       	movw	r12, r8
    b374:	42 e0       	ldi	r20, 0x02	; 2
    b376:	c4 0e       	add	r12, r20
    b378:	d1 1c       	adc	r13, r1
    b37a:	12 96       	adiw	r26, 0x02	; 2
    b37c:	bc 90       	ld	r11, X
    b37e:	12 97       	sbiw	r26, 0x02	; 2
    b380:	13 96       	adiw	r26, 0x03	; 3
    b382:	ac 91       	ld	r26, X
    b384:	b5 e0       	ldi	r27, 0x05	; 5
    b386:	cb 16       	cp	r12, r27
    b388:	d1 04       	cpc	r13, r1
    b38a:	40 f0       	brcs	.+16     	; 0xb39c <realloc+0xfc>
    b38c:	b2 82       	std	Z+2, r11	; 0x02
    b38e:	a3 83       	std	Z+3, r26	; 0x03
    b390:	91 82       	std	Z+1, r9	; 0x01
    b392:	80 82       	st	Z, r8
    b394:	d9 01       	movw	r26, r18
    b396:	8d 93       	st	X+, r24
    b398:	9c 93       	st	X, r25
    b39a:	09 c0       	rjmp	.+18     	; 0xb3ae <realloc+0x10e>
    b39c:	0e 5f       	subi	r16, 0xFE	; 254
    b39e:	1f 4f       	sbci	r17, 0xFF	; 255
    b3a0:	0e 0d       	add	r16, r14
    b3a2:	1f 1d       	adc	r17, r15
    b3a4:	f9 01       	movw	r30, r18
    b3a6:	11 83       	std	Z+1, r17	; 0x01
    b3a8:	00 83       	st	Z, r16
    b3aa:	eb 2d       	mov	r30, r11
    b3ac:	fa 2f       	mov	r31, r26
    b3ae:	61 15       	cp	r22, r1
    b3b0:	71 05       	cpc	r23, r1
    b3b2:	31 f0       	breq	.+12     	; 0xb3c0 <realloc+0x120>
    b3b4:	db 01       	movw	r26, r22
    b3b6:	13 96       	adiw	r26, 0x03	; 3
    b3b8:	fc 93       	st	X, r31
    b3ba:	ee 93       	st	-X, r30
    b3bc:	12 97       	sbiw	r26, 0x02	; 2
    b3be:	41 c0       	rjmp	.+130    	; 0xb442 <realloc+0x1a2>
    b3c0:	f0 93 09 0a 	sts	0x0A09, r31
    b3c4:	e0 93 08 0a 	sts	0x0A08, r30
    b3c8:	3c c0       	rjmp	.+120    	; 0xb442 <realloc+0x1a2>
    b3ca:	6d 91       	ld	r22, X+
    b3cc:	7c 91       	ld	r23, X
    b3ce:	11 97       	sbiw	r26, 0x01	; 1
    b3d0:	66 16       	cp	r6, r22
    b3d2:	77 06       	cpc	r7, r23
    b3d4:	08 f4       	brcc	.+2      	; 0xb3d8 <realloc+0x138>
    b3d6:	3b 01       	movw	r6, r22
    b3d8:	bd 01       	movw	r22, r26
    b3da:	12 96       	adiw	r26, 0x02	; 2
    b3dc:	0d 90       	ld	r0, X+
    b3de:	bc 91       	ld	r27, X
    b3e0:	a0 2d       	mov	r26, r0
    b3e2:	b4 cf       	rjmp	.-152    	; 0xb34c <realloc+0xac>
    b3e4:	60 91 06 0a 	lds	r22, 0x0A06
    b3e8:	70 91 07 0a 	lds	r23, 0x0A07
    b3ec:	68 15       	cp	r22, r8
    b3ee:	79 05       	cpc	r23, r9
    b3f0:	e9 f4       	brne	.+58     	; 0xb42c <realloc+0x18c>
    b3f2:	68 16       	cp	r6, r24
    b3f4:	79 06       	cpc	r7, r25
    b3f6:	d0 f4       	brcc	.+52     	; 0xb42c <realloc+0x18c>
    b3f8:	40 91 00 02 	lds	r20, 0x0200
    b3fc:	50 91 01 02 	lds	r21, 0x0201
    b400:	41 15       	cp	r20, r1
    b402:	51 05       	cpc	r21, r1
    b404:	41 f4       	brne	.+16     	; 0xb416 <realloc+0x176>
    b406:	4d b7       	in	r20, 0x3d	; 61
    b408:	5e b7       	in	r21, 0x3e	; 62
    b40a:	60 91 04 02 	lds	r22, 0x0204
    b40e:	70 91 05 02 	lds	r23, 0x0205
    b412:	46 1b       	sub	r20, r22
    b414:	57 0b       	sbc	r21, r23
    b416:	e4 17       	cp	r30, r20
    b418:	f5 07       	cpc	r31, r21
    b41a:	a8 f4       	brcc	.+42     	; 0xb446 <realloc+0x1a6>
    b41c:	f0 93 07 0a 	sts	0x0A07, r31
    b420:	e0 93 06 0a 	sts	0x0A06, r30
    b424:	f9 01       	movw	r30, r18
    b426:	91 83       	std	Z+1, r25	; 0x01
    b428:	80 83       	st	Z, r24
    b42a:	0b c0       	rjmp	.+22     	; 0xb442 <realloc+0x1a2>
    b42c:	bc dd       	rcall	.-1160   	; 0xafa6 <malloc>
    b42e:	7c 01       	movw	r14, r24
    b430:	00 97       	sbiw	r24, 0x00	; 0
    b432:	49 f0       	breq	.+18     	; 0xb446 <realloc+0x1a6>
    b434:	a8 01       	movw	r20, r16
    b436:	be 01       	movw	r22, r28
    b438:	0d d2       	rcall	.+1050   	; 0xb854 <memcpy>
    b43a:	ce 01       	movw	r24, r28
    b43c:	4c de       	rcall	.-872    	; 0xb0d6 <free>
    b43e:	c7 01       	movw	r24, r14
    b440:	04 c0       	rjmp	.+8      	; 0xb44a <realloc+0x1aa>
    b442:	ce 01       	movw	r24, r28
    b444:	02 c0       	rjmp	.+4      	; 0xb44a <realloc+0x1aa>
    b446:	80 e0       	ldi	r24, 0x00	; 0
    b448:	90 e0       	ldi	r25, 0x00	; 0
    b44a:	df 91       	pop	r29
    b44c:	cf 91       	pop	r28
    b44e:	1f 91       	pop	r17
    b450:	0f 91       	pop	r16
    b452:	ff 90       	pop	r15
    b454:	ef 90       	pop	r14
    b456:	df 90       	pop	r13
    b458:	cf 90       	pop	r12
    b45a:	bf 90       	pop	r11
    b45c:	af 90       	pop	r10
    b45e:	9f 90       	pop	r9
    b460:	8f 90       	pop	r8
    b462:	7f 90       	pop	r7
    b464:	6f 90       	pop	r6
    b466:	08 95       	ret

0000b468 <strtod>:
    b468:	8f 92       	push	r8
    b46a:	9f 92       	push	r9
    b46c:	af 92       	push	r10
    b46e:	bf 92       	push	r11
    b470:	cf 92       	push	r12
    b472:	df 92       	push	r13
    b474:	ef 92       	push	r14
    b476:	ff 92       	push	r15
    b478:	0f 93       	push	r16
    b47a:	1f 93       	push	r17
    b47c:	cf 93       	push	r28
    b47e:	df 93       	push	r29
    b480:	8b 01       	movw	r16, r22
    b482:	61 15       	cp	r22, r1
    b484:	71 05       	cpc	r23, r1
    b486:	21 f0       	breq	.+8      	; 0xb490 <strtod+0x28>
    b488:	db 01       	movw	r26, r22
    b48a:	8c 93       	st	X, r24
    b48c:	11 96       	adiw	r26, 0x01	; 1
    b48e:	9c 93       	st	X, r25
    b490:	ec 01       	movw	r28, r24
    b492:	5e 01       	movw	r10, r28
    b494:	bf ef       	ldi	r27, 0xFF	; 255
    b496:	ab 1a       	sub	r10, r27
    b498:	bb 0a       	sbc	r11, r27
    b49a:	75 01       	movw	r14, r10
    b49c:	c8 80       	ld	r12, Y
    b49e:	8c 2d       	mov	r24, r12
    b4a0:	90 e0       	ldi	r25, 0x00	; 0
    b4a2:	90 d1       	rcall	.+800    	; 0xb7c4 <isspace>
    b4a4:	89 2b       	or	r24, r25
    b4a6:	11 f0       	breq	.+4      	; 0xb4ac <strtod+0x44>
    b4a8:	e5 01       	movw	r28, r10
    b4aa:	f3 cf       	rjmp	.-26     	; 0xb492 <strtod+0x2a>
    b4ac:	ed e2       	ldi	r30, 0x2D	; 45
    b4ae:	ce 12       	cpse	r12, r30
    b4b0:	08 c0       	rjmp	.+16     	; 0xb4c2 <strtod+0x5a>
    b4b2:	7e 01       	movw	r14, r28
    b4b4:	f2 e0       	ldi	r31, 0x02	; 2
    b4b6:	ef 0e       	add	r14, r31
    b4b8:	f1 1c       	adc	r15, r1
    b4ba:	c9 80       	ldd	r12, Y+1	; 0x01
    b4bc:	dd 24       	eor	r13, r13
    b4be:	d3 94       	inc	r13
    b4c0:	09 c0       	rjmp	.+18     	; 0xb4d4 <strtod+0x6c>
    b4c2:	2b e2       	ldi	r18, 0x2B	; 43
    b4c4:	c2 12       	cpse	r12, r18
    b4c6:	05 c0       	rjmp	.+10     	; 0xb4d2 <strtod+0x6a>
    b4c8:	7e 01       	movw	r14, r28
    b4ca:	42 e0       	ldi	r20, 0x02	; 2
    b4cc:	e4 0e       	add	r14, r20
    b4ce:	f1 1c       	adc	r15, r1
    b4d0:	c9 80       	ldd	r12, Y+1	; 0x01
    b4d2:	d1 2c       	mov	r13, r1
    b4d4:	e7 01       	movw	r28, r14
    b4d6:	21 97       	sbiw	r28, 0x01	; 1
    b4d8:	43 e0       	ldi	r20, 0x03	; 3
    b4da:	50 e0       	ldi	r21, 0x00	; 0
    b4dc:	6c eb       	ldi	r22, 0xBC	; 188
    b4de:	75 e1       	ldi	r23, 0x15	; 21
    b4e0:	ce 01       	movw	r24, r28
    b4e2:	90 d1       	rcall	.+800    	; 0xb804 <strncasecmp_P>
    b4e4:	89 2b       	or	r24, r25
    b4e6:	b9 f4       	brne	.+46     	; 0xb516 <strtod+0xae>
    b4e8:	23 96       	adiw	r28, 0x03	; 3
    b4ea:	45 e0       	ldi	r20, 0x05	; 5
    b4ec:	50 e0       	ldi	r21, 0x00	; 0
    b4ee:	67 eb       	ldi	r22, 0xB7	; 183
    b4f0:	75 e1       	ldi	r23, 0x15	; 21
    b4f2:	ce 01       	movw	r24, r28
    b4f4:	87 d1       	rcall	.+782    	; 0xb804 <strncasecmp_P>
    b4f6:	89 2b       	or	r24, r25
    b4f8:	09 f4       	brne	.+2      	; 0xb4fc <strtod+0x94>
    b4fa:	25 96       	adiw	r28, 0x05	; 5
    b4fc:	01 15       	cp	r16, r1
    b4fe:	11 05       	cpc	r17, r1
    b500:	19 f0       	breq	.+6      	; 0xb508 <strtod+0xa0>
    b502:	d8 01       	movw	r26, r16
    b504:	cd 93       	st	X+, r28
    b506:	dc 93       	st	X, r29
    b508:	d1 10       	cpse	r13, r1
    b50a:	00 c1       	rjmp	.+512    	; 0xb70c <strtod+0x2a4>
    b50c:	60 e0       	ldi	r22, 0x00	; 0
    b50e:	70 e0       	ldi	r23, 0x00	; 0
    b510:	80 e8       	ldi	r24, 0x80	; 128
    b512:	9f e7       	ldi	r25, 0x7F	; 127
    b514:	04 c1       	rjmp	.+520    	; 0xb71e <strtod+0x2b6>
    b516:	43 e0       	ldi	r20, 0x03	; 3
    b518:	50 e0       	ldi	r21, 0x00	; 0
    b51a:	64 eb       	ldi	r22, 0xB4	; 180
    b51c:	75 e1       	ldi	r23, 0x15	; 21
    b51e:	ce 01       	movw	r24, r28
    b520:	71 d1       	rcall	.+738    	; 0xb804 <strncasecmp_P>
    b522:	89 2b       	or	r24, r25
    b524:	59 f4       	brne	.+22     	; 0xb53c <strtod+0xd4>
    b526:	01 15       	cp	r16, r1
    b528:	11 05       	cpc	r17, r1
    b52a:	09 f4       	brne	.+2      	; 0xb52e <strtod+0xc6>
    b52c:	f4 c0       	rjmp	.+488    	; 0xb716 <strtod+0x2ae>
    b52e:	b2 e0       	ldi	r27, 0x02	; 2
    b530:	eb 0e       	add	r14, r27
    b532:	f1 1c       	adc	r15, r1
    b534:	f8 01       	movw	r30, r16
    b536:	f1 82       	std	Z+1, r15	; 0x01
    b538:	e0 82       	st	Z, r14
    b53a:	ed c0       	rjmp	.+474    	; 0xb716 <strtod+0x2ae>
    b53c:	f7 01       	movw	r30, r14
    b53e:	60 e0       	ldi	r22, 0x00	; 0
    b540:	70 e0       	ldi	r23, 0x00	; 0
    b542:	cb 01       	movw	r24, r22
    b544:	c0 e0       	ldi	r28, 0x00	; 0
    b546:	d0 e0       	ldi	r29, 0x00	; 0
    b548:	7f 01       	movw	r14, r30
    b54a:	a0 ed       	ldi	r26, 0xD0	; 208
    b54c:	aa 2e       	mov	r10, r26
    b54e:	ac 0c       	add	r10, r12
    b550:	29 e0       	ldi	r18, 0x09	; 9
    b552:	2a 15       	cp	r18, r10
    b554:	28 f1       	brcs	.+74     	; 0xb5a0 <strtod+0x138>
    b556:	4d 2d       	mov	r20, r13
    b558:	42 60       	ori	r20, 0x02	; 2
    b55a:	b4 2e       	mov	r11, r20
    b55c:	2d 2d       	mov	r18, r13
    b55e:	28 70       	andi	r18, 0x08	; 8
    b560:	d2 fe       	sbrs	r13, 2
    b562:	04 c0       	rjmp	.+8      	; 0xb56c <strtod+0x104>
    b564:	21 11       	cpse	r18, r1
    b566:	24 c0       	rjmp	.+72     	; 0xb5b0 <strtod+0x148>
    b568:	21 96       	adiw	r28, 0x01	; 1
    b56a:	22 c0       	rjmp	.+68     	; 0xb5b0 <strtod+0x148>
    b56c:	21 11       	cpse	r18, r1
    b56e:	21 97       	sbiw	r28, 0x01	; 1
    b570:	a5 e0       	ldi	r26, 0x05	; 5
    b572:	b0 e0       	ldi	r27, 0x00	; 0
    b574:	9b 01       	movw	r18, r22
    b576:	ac 01       	movw	r20, r24
    b578:	f9 dc       	rcall	.-1550   	; 0xaf6c <__muluhisi3>
    b57a:	66 0f       	add	r22, r22
    b57c:	77 1f       	adc	r23, r23
    b57e:	88 1f       	adc	r24, r24
    b580:	99 1f       	adc	r25, r25
    b582:	6a 0d       	add	r22, r10
    b584:	71 1d       	adc	r23, r1
    b586:	81 1d       	adc	r24, r1
    b588:	91 1d       	adc	r25, r1
    b58a:	68 39       	cpi	r22, 0x98	; 152
    b58c:	a9 e9       	ldi	r26, 0x99	; 153
    b58e:	7a 07       	cpc	r23, r26
    b590:	8a 07       	cpc	r24, r26
    b592:	a9 e1       	ldi	r26, 0x19	; 25
    b594:	9a 07       	cpc	r25, r26
    b596:	60 f0       	brcs	.+24     	; 0xb5b0 <strtod+0x148>
    b598:	bd 2d       	mov	r27, r13
    b59a:	b6 60       	ori	r27, 0x06	; 6
    b59c:	bb 2e       	mov	r11, r27
    b59e:	08 c0       	rjmp	.+16     	; 0xb5b0 <strtod+0x148>
    b5a0:	2e ef       	ldi	r18, 0xFE	; 254
    b5a2:	a2 12       	cpse	r10, r18
    b5a4:	0a c0       	rjmp	.+20     	; 0xb5ba <strtod+0x152>
    b5a6:	d3 fc       	sbrc	r13, 3
    b5a8:	50 c0       	rjmp	.+160    	; 0xb64a <strtod+0x1e2>
    b5aa:	4d 2d       	mov	r20, r13
    b5ac:	48 60       	ori	r20, 0x08	; 8
    b5ae:	b4 2e       	mov	r11, r20
    b5b0:	31 96       	adiw	r30, 0x01	; 1
    b5b2:	d7 01       	movw	r26, r14
    b5b4:	cc 90       	ld	r12, X
    b5b6:	db 2c       	mov	r13, r11
    b5b8:	c7 cf       	rjmp	.-114    	; 0xb548 <strtod+0xe0>
    b5ba:	2c 2d       	mov	r18, r12
    b5bc:	2f 7d       	andi	r18, 0xDF	; 223
    b5be:	25 34       	cpi	r18, 0x45	; 69
    b5c0:	09 f0       	breq	.+2      	; 0xb5c4 <strtod+0x15c>
    b5c2:	43 c0       	rjmp	.+134    	; 0xb64a <strtod+0x1e2>
    b5c4:	a0 81       	ld	r26, Z
    b5c6:	ad 32       	cpi	r26, 0x2D	; 45
    b5c8:	41 f4       	brne	.+16     	; 0xb5da <strtod+0x172>
    b5ca:	bd 2d       	mov	r27, r13
    b5cc:	b0 61       	ori	r27, 0x10	; 16
    b5ce:	db 2e       	mov	r13, r27
    b5d0:	7f 01       	movw	r14, r30
    b5d2:	22 e0       	ldi	r18, 0x02	; 2
    b5d4:	e2 0e       	add	r14, r18
    b5d6:	f1 1c       	adc	r15, r1
    b5d8:	0c c0       	rjmp	.+24     	; 0xb5f2 <strtod+0x18a>
    b5da:	7f 01       	movw	r14, r30
    b5dc:	ab 32       	cpi	r26, 0x2B	; 43
    b5de:	31 f0       	breq	.+12     	; 0xb5ec <strtod+0x184>
    b5e0:	4f ef       	ldi	r20, 0xFF	; 255
    b5e2:	e4 1a       	sub	r14, r20
    b5e4:	f4 0a       	sbc	r15, r20
    b5e6:	21 e0       	ldi	r18, 0x01	; 1
    b5e8:	30 e0       	ldi	r19, 0x00	; 0
    b5ea:	06 c0       	rjmp	.+12     	; 0xb5f8 <strtod+0x190>
    b5ec:	a2 e0       	ldi	r26, 0x02	; 2
    b5ee:	ea 0e       	add	r14, r26
    b5f0:	f1 1c       	adc	r15, r1
    b5f2:	a1 81       	ldd	r26, Z+1	; 0x01
    b5f4:	22 e0       	ldi	r18, 0x02	; 2
    b5f6:	30 e0       	ldi	r19, 0x00	; 0
    b5f8:	a0 53       	subi	r26, 0x30	; 48
    b5fa:	aa 30       	cpi	r26, 0x0A	; 10
    b5fc:	18 f0       	brcs	.+6      	; 0xb604 <strtod+0x19c>
    b5fe:	e2 1a       	sub	r14, r18
    b600:	f3 0a       	sbc	r15, r19
    b602:	23 c0       	rjmp	.+70     	; 0xb64a <strtod+0x1e2>
    b604:	f7 01       	movw	r30, r14
    b606:	20 e0       	ldi	r18, 0x00	; 0
    b608:	30 e0       	ldi	r19, 0x00	; 0
    b60a:	20 38       	cpi	r18, 0x80	; 128
    b60c:	bc e0       	ldi	r27, 0x0C	; 12
    b60e:	3b 07       	cpc	r19, r27
    b610:	5c f4       	brge	.+22     	; 0xb628 <strtod+0x1c0>
    b612:	a9 01       	movw	r20, r18
    b614:	44 0f       	add	r20, r20
    b616:	55 1f       	adc	r21, r21
    b618:	44 0f       	add	r20, r20
    b61a:	55 1f       	adc	r21, r21
    b61c:	24 0f       	add	r18, r20
    b61e:	35 1f       	adc	r19, r21
    b620:	22 0f       	add	r18, r18
    b622:	33 1f       	adc	r19, r19
    b624:	2a 0f       	add	r18, r26
    b626:	31 1d       	adc	r19, r1
    b628:	af 01       	movw	r20, r30
    b62a:	4f 5f       	subi	r20, 0xFF	; 255
    b62c:	5f 4f       	sbci	r21, 0xFF	; 255
    b62e:	7a 01       	movw	r14, r20
    b630:	a0 81       	ld	r26, Z
    b632:	a0 53       	subi	r26, 0x30	; 48
    b634:	aa 30       	cpi	r26, 0x0A	; 10
    b636:	10 f4       	brcc	.+4      	; 0xb63c <strtod+0x1d4>
    b638:	fa 01       	movw	r30, r20
    b63a:	e7 cf       	rjmp	.-50     	; 0xb60a <strtod+0x1a2>
    b63c:	d4 fe       	sbrs	r13, 4
    b63e:	03 c0       	rjmp	.+6      	; 0xb646 <strtod+0x1de>
    b640:	31 95       	neg	r19
    b642:	21 95       	neg	r18
    b644:	31 09       	sbc	r19, r1
    b646:	c2 0f       	add	r28, r18
    b648:	d3 1f       	adc	r29, r19
    b64a:	d1 fe       	sbrs	r13, 1
    b64c:	09 c0       	rjmp	.+18     	; 0xb660 <strtod+0x1f8>
    b64e:	01 15       	cp	r16, r1
    b650:	11 05       	cpc	r17, r1
    b652:	31 f0       	breq	.+12     	; 0xb660 <strtod+0x1f8>
    b654:	e1 e0       	ldi	r30, 0x01	; 1
    b656:	ee 1a       	sub	r14, r30
    b658:	f1 08       	sbc	r15, r1
    b65a:	d8 01       	movw	r26, r16
    b65c:	ed 92       	st	X+, r14
    b65e:	fc 92       	st	X, r15
    b660:	0e db       	rcall	.-2532   	; 0xac7e <__floatunsisf>
    b662:	2d 2d       	mov	r18, r13
    b664:	23 70       	andi	r18, 0x03	; 3
    b666:	23 30       	cpi	r18, 0x03	; 3
    b668:	19 f0       	breq	.+6      	; 0xb670 <strtod+0x208>
    b66a:	4b 01       	movw	r8, r22
    b66c:	5c 01       	movw	r10, r24
    b66e:	06 c0       	rjmp	.+12     	; 0xb67c <strtod+0x214>
    b670:	4b 01       	movw	r8, r22
    b672:	5c 01       	movw	r10, r24
    b674:	b7 fa       	bst	r11, 7
    b676:	b0 94       	com	r11
    b678:	b7 f8       	bld	r11, 7
    b67a:	b0 94       	com	r11
    b67c:	20 e0       	ldi	r18, 0x00	; 0
    b67e:	30 e0       	ldi	r19, 0x00	; 0
    b680:	a9 01       	movw	r20, r18
    b682:	c5 01       	movw	r24, r10
    b684:	b4 01       	movw	r22, r8
    b686:	5e da       	rcall	.-2884   	; 0xab44 <__cmpsf2>
    b688:	88 23       	and	r24, r24
    b68a:	09 f4       	brne	.+2      	; 0xb68e <strtod+0x226>
    b68c:	3c c0       	rjmp	.+120    	; 0xb706 <strtod+0x29e>
    b68e:	d7 ff       	sbrs	r29, 7
    b690:	06 c0       	rjmp	.+12     	; 0xb69e <strtod+0x236>
    b692:	d1 95       	neg	r29
    b694:	c1 95       	neg	r28
    b696:	d1 09       	sbc	r29, r1
    b698:	03 ed       	ldi	r16, 0xD3	; 211
    b69a:	15 e1       	ldi	r17, 0x15	; 21
    b69c:	02 c0       	rjmp	.+4      	; 0xb6a2 <strtod+0x23a>
    b69e:	0b ee       	ldi	r16, 0xEB	; 235
    b6a0:	15 e1       	ldi	r17, 0x15	; 21
    b6a2:	68 01       	movw	r12, r16
    b6a4:	b8 e1       	ldi	r27, 0x18	; 24
    b6a6:	cb 1a       	sub	r12, r27
    b6a8:	d1 08       	sbc	r13, r1
    b6aa:	90 e2       	ldi	r25, 0x20	; 32
    b6ac:	e9 2e       	mov	r14, r25
    b6ae:	f1 2c       	mov	r15, r1
    b6b0:	ce 15       	cp	r28, r14
    b6b2:	df 05       	cpc	r29, r15
    b6b4:	6c f0       	brlt	.+26     	; 0xb6d0 <strtod+0x268>
    b6b6:	f8 01       	movw	r30, r16
    b6b8:	25 91       	lpm	r18, Z+
    b6ba:	35 91       	lpm	r19, Z+
    b6bc:	45 91       	lpm	r20, Z+
    b6be:	54 91       	lpm	r21, Z
    b6c0:	c5 01       	movw	r24, r10
    b6c2:	b4 01       	movw	r22, r8
    b6c4:	92 db       	rcall	.-2268   	; 0xadea <__mulsf3>
    b6c6:	4b 01       	movw	r8, r22
    b6c8:	5c 01       	movw	r10, r24
    b6ca:	ce 19       	sub	r28, r14
    b6cc:	df 09       	sbc	r29, r15
    b6ce:	f0 cf       	rjmp	.-32     	; 0xb6b0 <strtod+0x248>
    b6d0:	04 50       	subi	r16, 0x04	; 4
    b6d2:	11 09       	sbc	r17, r1
    b6d4:	f5 94       	asr	r15
    b6d6:	e7 94       	ror	r14
    b6d8:	0c 15       	cp	r16, r12
    b6da:	1d 05       	cpc	r17, r13
    b6dc:	49 f7       	brne	.-46     	; 0xb6b0 <strtod+0x248>
    b6de:	8a 2d       	mov	r24, r10
    b6e0:	88 0f       	add	r24, r24
    b6e2:	8b 2d       	mov	r24, r11
    b6e4:	88 1f       	adc	r24, r24
    b6e6:	8f 3f       	cpi	r24, 0xFF	; 255
    b6e8:	41 f0       	breq	.+16     	; 0xb6fa <strtod+0x292>
    b6ea:	20 e0       	ldi	r18, 0x00	; 0
    b6ec:	30 e0       	ldi	r19, 0x00	; 0
    b6ee:	a9 01       	movw	r20, r18
    b6f0:	c5 01       	movw	r24, r10
    b6f2:	b4 01       	movw	r22, r8
    b6f4:	27 da       	rcall	.-2994   	; 0xab44 <__cmpsf2>
    b6f6:	81 11       	cpse	r24, r1
    b6f8:	06 c0       	rjmp	.+12     	; 0xb706 <strtod+0x29e>
    b6fa:	82 e2       	ldi	r24, 0x22	; 34
    b6fc:	90 e0       	ldi	r25, 0x00	; 0
    b6fe:	90 93 0b 0a 	sts	0x0A0B, r25
    b702:	80 93 0a 0a 	sts	0x0A0A, r24
    b706:	c5 01       	movw	r24, r10
    b708:	b4 01       	movw	r22, r8
    b70a:	09 c0       	rjmp	.+18     	; 0xb71e <strtod+0x2b6>
    b70c:	60 e0       	ldi	r22, 0x00	; 0
    b70e:	70 e0       	ldi	r23, 0x00	; 0
    b710:	80 e8       	ldi	r24, 0x80	; 128
    b712:	9f ef       	ldi	r25, 0xFF	; 255
    b714:	04 c0       	rjmp	.+8      	; 0xb71e <strtod+0x2b6>
    b716:	60 e0       	ldi	r22, 0x00	; 0
    b718:	70 e0       	ldi	r23, 0x00	; 0
    b71a:	80 ec       	ldi	r24, 0xC0	; 192
    b71c:	9f e7       	ldi	r25, 0x7F	; 127
    b71e:	df 91       	pop	r29
    b720:	cf 91       	pop	r28
    b722:	1f 91       	pop	r17
    b724:	0f 91       	pop	r16
    b726:	ff 90       	pop	r15
    b728:	ef 90       	pop	r14
    b72a:	df 90       	pop	r13
    b72c:	cf 90       	pop	r12
    b72e:	bf 90       	pop	r11
    b730:	af 90       	pop	r10
    b732:	9f 90       	pop	r9
    b734:	8f 90       	pop	r8
    b736:	08 95       	ret

0000b738 <atof>:
    b738:	66 27       	eor	r22, r22
    b73a:	77 27       	eor	r23, r23
    b73c:	95 ce       	rjmp	.-726    	; 0xb468 <strtod>

0000b73e <atoi>:
    b73e:	fc 01       	movw	r30, r24
    b740:	88 27       	eor	r24, r24
    b742:	99 27       	eor	r25, r25
    b744:	e8 94       	clt
    b746:	21 91       	ld	r18, Z+
    b748:	20 32       	cpi	r18, 0x20	; 32
    b74a:	e9 f3       	breq	.-6      	; 0xb746 <atoi+0x8>
    b74c:	29 30       	cpi	r18, 0x09	; 9
    b74e:	10 f0       	brcs	.+4      	; 0xb754 <atoi+0x16>
    b750:	2e 30       	cpi	r18, 0x0E	; 14
    b752:	c8 f3       	brcs	.-14     	; 0xb746 <atoi+0x8>
    b754:	2b 32       	cpi	r18, 0x2B	; 43
    b756:	39 f0       	breq	.+14     	; 0xb766 <atoi+0x28>
    b758:	2d 32       	cpi	r18, 0x2D	; 45
    b75a:	31 f4       	brne	.+12     	; 0xb768 <atoi+0x2a>
    b75c:	68 94       	set
    b75e:	03 c0       	rjmp	.+6      	; 0xb766 <atoi+0x28>
    b760:	e7 d0       	rcall	.+462    	; 0xb930 <__mulhi_const_10>
    b762:	82 0f       	add	r24, r18
    b764:	91 1d       	adc	r25, r1
    b766:	21 91       	ld	r18, Z+
    b768:	20 53       	subi	r18, 0x30	; 48
    b76a:	2a 30       	cpi	r18, 0x0A	; 10
    b76c:	c8 f3       	brcs	.-14     	; 0xb760 <atoi+0x22>
    b76e:	1e f4       	brtc	.+6      	; 0xb776 <atoi+0x38>
    b770:	90 95       	com	r25
    b772:	81 95       	neg	r24
    b774:	9f 4f       	sbci	r25, 0xFF	; 255
    b776:	08 95       	ret

0000b778 <atol>:
    b778:	1f 93       	push	r17
    b77a:	fc 01       	movw	r30, r24
    b77c:	99 27       	eor	r25, r25
    b77e:	88 27       	eor	r24, r24
    b780:	bc 01       	movw	r22, r24
    b782:	e8 94       	clt
    b784:	11 91       	ld	r17, Z+
    b786:	10 32       	cpi	r17, 0x20	; 32
    b788:	e9 f3       	breq	.-6      	; 0xb784 <atol+0xc>
    b78a:	19 30       	cpi	r17, 0x09	; 9
    b78c:	10 f0       	brcs	.+4      	; 0xb792 <atol+0x1a>
    b78e:	1e 30       	cpi	r17, 0x0E	; 14
    b790:	c8 f3       	brcs	.-14     	; 0xb784 <atol+0xc>
    b792:	1b 32       	cpi	r17, 0x2B	; 43
    b794:	49 f0       	breq	.+18     	; 0xb7a8 <atol+0x30>
    b796:	1d 32       	cpi	r17, 0x2D	; 45
    b798:	41 f4       	brne	.+16     	; 0xb7aa <atol+0x32>
    b79a:	68 94       	set
    b79c:	05 c0       	rjmp	.+10     	; 0xb7a8 <atol+0x30>
    b79e:	b3 d0       	rcall	.+358    	; 0xb906 <__mulsi_const_10>
    b7a0:	61 0f       	add	r22, r17
    b7a2:	71 1d       	adc	r23, r1
    b7a4:	81 1d       	adc	r24, r1
    b7a6:	91 1d       	adc	r25, r1
    b7a8:	11 91       	ld	r17, Z+
    b7aa:	10 53       	subi	r17, 0x30	; 48
    b7ac:	1a 30       	cpi	r17, 0x0A	; 10
    b7ae:	b8 f3       	brcs	.-18     	; 0xb79e <atol+0x26>
    b7b0:	3e f4       	brtc	.+14     	; 0xb7c0 <atol+0x48>
    b7b2:	90 95       	com	r25
    b7b4:	80 95       	com	r24
    b7b6:	70 95       	com	r23
    b7b8:	61 95       	neg	r22
    b7ba:	7f 4f       	sbci	r23, 0xFF	; 255
    b7bc:	8f 4f       	sbci	r24, 0xFF	; 255
    b7be:	9f 4f       	sbci	r25, 0xFF	; 255
    b7c0:	1f 91       	pop	r17
    b7c2:	08 95       	ret

0000b7c4 <isspace>:
    b7c4:	91 11       	cpse	r25, r1
    b7c6:	1f c3       	rjmp	.+1598   	; 0xbe06 <__ctype_isfalse>
    b7c8:	80 32       	cpi	r24, 0x20	; 32
    b7ca:	19 f0       	breq	.+6      	; 0xb7d2 <isspace+0xe>
    b7cc:	89 50       	subi	r24, 0x09	; 9
    b7ce:	85 50       	subi	r24, 0x05	; 5
    b7d0:	d0 f7       	brcc	.-12     	; 0xb7c6 <isspace+0x2>
    b7d2:	08 95       	ret

0000b7d4 <tolower>:
    b7d4:	91 11       	cpse	r25, r1
    b7d6:	08 95       	ret
    b7d8:	81 54       	subi	r24, 0x41	; 65
    b7da:	8a 51       	subi	r24, 0x1A	; 26
    b7dc:	08 f4       	brcc	.+2      	; 0xb7e0 <tolower+0xc>
    b7de:	80 5e       	subi	r24, 0xE0	; 224
    b7e0:	85 5a       	subi	r24, 0xA5	; 165
    b7e2:	08 95       	ret

0000b7e4 <strcpy_P>:
    b7e4:	fb 01       	movw	r30, r22
    b7e6:	dc 01       	movw	r26, r24
    b7e8:	05 90       	lpm	r0, Z+
    b7ea:	0d 92       	st	X+, r0
    b7ec:	00 20       	and	r0, r0
    b7ee:	e1 f7       	brne	.-8      	; 0xb7e8 <strcpy_P+0x4>
    b7f0:	08 95       	ret

0000b7f2 <__strlen_P>:
    b7f2:	fc 01       	movw	r30, r24
    b7f4:	05 90       	lpm	r0, Z+
    b7f6:	00 20       	and	r0, r0
    b7f8:	e9 f7       	brne	.-6      	; 0xb7f4 <__strlen_P+0x2>
    b7fa:	80 95       	com	r24
    b7fc:	90 95       	com	r25
    b7fe:	8e 0f       	add	r24, r30
    b800:	9f 1f       	adc	r25, r31
    b802:	08 95       	ret

0000b804 <strncasecmp_P>:
    b804:	fb 01       	movw	r30, r22
    b806:	dc 01       	movw	r26, r24
    b808:	41 50       	subi	r20, 0x01	; 1
    b80a:	50 40       	sbci	r21, 0x00	; 0
    b80c:	88 f0       	brcs	.+34     	; 0xb830 <strncasecmp_P+0x2c>
    b80e:	8d 91       	ld	r24, X+
    b810:	81 34       	cpi	r24, 0x41	; 65
    b812:	1c f0       	brlt	.+6      	; 0xb81a <strncasecmp_P+0x16>
    b814:	8b 35       	cpi	r24, 0x5B	; 91
    b816:	0c f4       	brge	.+2      	; 0xb81a <strncasecmp_P+0x16>
    b818:	80 5e       	subi	r24, 0xE0	; 224
    b81a:	65 91       	lpm	r22, Z+
    b81c:	61 34       	cpi	r22, 0x41	; 65
    b81e:	1c f0       	brlt	.+6      	; 0xb826 <strncasecmp_P+0x22>
    b820:	6b 35       	cpi	r22, 0x5B	; 91
    b822:	0c f4       	brge	.+2      	; 0xb826 <strncasecmp_P+0x22>
    b824:	60 5e       	subi	r22, 0xE0	; 224
    b826:	86 1b       	sub	r24, r22
    b828:	61 11       	cpse	r22, r1
    b82a:	71 f3       	breq	.-36     	; 0xb808 <strncasecmp_P+0x4>
    b82c:	99 0b       	sbc	r25, r25
    b82e:	08 95       	ret
    b830:	88 1b       	sub	r24, r24
    b832:	fc cf       	rjmp	.-8      	; 0xb82c <strncasecmp_P+0x28>

0000b834 <strtok>:
    b834:	46 e8       	ldi	r20, 0x86	; 134
    b836:	56 e0       	ldi	r21, 0x06	; 6
    b838:	3f c0       	rjmp	.+126    	; 0xb8b8 <strtok_r>

0000b83a <memcmp>:
    b83a:	fb 01       	movw	r30, r22
    b83c:	dc 01       	movw	r26, r24
    b83e:	04 c0       	rjmp	.+8      	; 0xb848 <memcmp+0xe>
    b840:	8d 91       	ld	r24, X+
    b842:	01 90       	ld	r0, Z+
    b844:	80 19       	sub	r24, r0
    b846:	21 f4       	brne	.+8      	; 0xb850 <memcmp+0x16>
    b848:	41 50       	subi	r20, 0x01	; 1
    b84a:	50 40       	sbci	r21, 0x00	; 0
    b84c:	c8 f7       	brcc	.-14     	; 0xb840 <memcmp+0x6>
    b84e:	88 1b       	sub	r24, r24
    b850:	99 0b       	sbc	r25, r25
    b852:	08 95       	ret

0000b854 <memcpy>:
    b854:	fb 01       	movw	r30, r22
    b856:	dc 01       	movw	r26, r24
    b858:	02 c0       	rjmp	.+4      	; 0xb85e <memcpy+0xa>
    b85a:	01 90       	ld	r0, Z+
    b85c:	0d 92       	st	X+, r0
    b85e:	41 50       	subi	r20, 0x01	; 1
    b860:	50 40       	sbci	r21, 0x00	; 0
    b862:	d8 f7       	brcc	.-10     	; 0xb85a <memcpy+0x6>
    b864:	08 95       	ret

0000b866 <strchr>:
    b866:	fc 01       	movw	r30, r24
    b868:	81 91       	ld	r24, Z+
    b86a:	86 17       	cp	r24, r22
    b86c:	21 f0       	breq	.+8      	; 0xb876 <strchr+0x10>
    b86e:	88 23       	and	r24, r24
    b870:	d9 f7       	brne	.-10     	; 0xb868 <strchr+0x2>
    b872:	99 27       	eor	r25, r25
    b874:	08 95       	ret
    b876:	31 97       	sbiw	r30, 0x01	; 1
    b878:	cf 01       	movw	r24, r30
    b87a:	08 95       	ret

0000b87c <strcmp>:
    b87c:	fb 01       	movw	r30, r22
    b87e:	dc 01       	movw	r26, r24
    b880:	8d 91       	ld	r24, X+
    b882:	01 90       	ld	r0, Z+
    b884:	80 19       	sub	r24, r0
    b886:	01 10       	cpse	r0, r1
    b888:	d9 f3       	breq	.-10     	; 0xb880 <strcmp+0x4>
    b88a:	99 0b       	sbc	r25, r25
    b88c:	08 95       	ret

0000b88e <strcpy>:
    b88e:	fb 01       	movw	r30, r22
    b890:	dc 01       	movw	r26, r24
    b892:	01 90       	ld	r0, Z+
    b894:	0d 92       	st	X+, r0
    b896:	00 20       	and	r0, r0
    b898:	e1 f7       	brne	.-8      	; 0xb892 <strcpy+0x4>
    b89a:	08 95       	ret

0000b89c <strncmp>:
    b89c:	fb 01       	movw	r30, r22
    b89e:	dc 01       	movw	r26, r24
    b8a0:	41 50       	subi	r20, 0x01	; 1
    b8a2:	50 40       	sbci	r21, 0x00	; 0
    b8a4:	30 f0       	brcs	.+12     	; 0xb8b2 <strncmp+0x16>
    b8a6:	8d 91       	ld	r24, X+
    b8a8:	01 90       	ld	r0, Z+
    b8aa:	80 19       	sub	r24, r0
    b8ac:	19 f4       	brne	.+6      	; 0xb8b4 <strncmp+0x18>
    b8ae:	00 20       	and	r0, r0
    b8b0:	b9 f7       	brne	.-18     	; 0xb8a0 <strncmp+0x4>
    b8b2:	88 1b       	sub	r24, r24
    b8b4:	99 0b       	sbc	r25, r25
    b8b6:	08 95       	ret

0000b8b8 <strtok_r>:
    b8b8:	fa 01       	movw	r30, r20
    b8ba:	a1 91       	ld	r26, Z+
    b8bc:	b0 81       	ld	r27, Z
    b8be:	00 97       	sbiw	r24, 0x00	; 0
    b8c0:	19 f4       	brne	.+6      	; 0xb8c8 <strtok_r+0x10>
    b8c2:	10 97       	sbiw	r26, 0x00	; 0
    b8c4:	e1 f0       	breq	.+56     	; 0xb8fe <strtok_r+0x46>
    b8c6:	cd 01       	movw	r24, r26
    b8c8:	dc 01       	movw	r26, r24
    b8ca:	cd 01       	movw	r24, r26
    b8cc:	0d 90       	ld	r0, X+
    b8ce:	00 20       	and	r0, r0
    b8d0:	11 f4       	brne	.+4      	; 0xb8d6 <strtok_r+0x1e>
    b8d2:	c0 01       	movw	r24, r0
    b8d4:	13 c0       	rjmp	.+38     	; 0xb8fc <strtok_r+0x44>
    b8d6:	fb 01       	movw	r30, r22
    b8d8:	21 91       	ld	r18, Z+
    b8da:	22 23       	and	r18, r18
    b8dc:	19 f0       	breq	.+6      	; 0xb8e4 <strtok_r+0x2c>
    b8de:	20 15       	cp	r18, r0
    b8e0:	d9 f7       	brne	.-10     	; 0xb8d8 <strtok_r+0x20>
    b8e2:	f3 cf       	rjmp	.-26     	; 0xb8ca <strtok_r+0x12>
    b8e4:	fb 01       	movw	r30, r22
    b8e6:	21 91       	ld	r18, Z+
    b8e8:	20 15       	cp	r18, r0
    b8ea:	19 f4       	brne	.+6      	; 0xb8f2 <strtok_r+0x3a>
    b8ec:	1e 92       	st	-X, r1
    b8ee:	11 96       	adiw	r26, 0x01	; 1
    b8f0:	06 c0       	rjmp	.+12     	; 0xb8fe <strtok_r+0x46>
    b8f2:	22 23       	and	r18, r18
    b8f4:	c1 f7       	brne	.-16     	; 0xb8e6 <strtok_r+0x2e>
    b8f6:	0d 90       	ld	r0, X+
    b8f8:	00 20       	and	r0, r0
    b8fa:	a1 f7       	brne	.-24     	; 0xb8e4 <strtok_r+0x2c>
    b8fc:	d0 01       	movw	r26, r0
    b8fe:	fa 01       	movw	r30, r20
    b900:	a1 93       	st	Z+, r26
    b902:	b0 83       	st	Z, r27
    b904:	08 95       	ret

0000b906 <__mulsi_const_10>:
    b906:	59 2f       	mov	r21, r25
    b908:	48 2f       	mov	r20, r24
    b90a:	37 2f       	mov	r19, r23
    b90c:	26 2f       	mov	r18, r22
    b90e:	66 0f       	add	r22, r22
    b910:	77 1f       	adc	r23, r23
    b912:	88 1f       	adc	r24, r24
    b914:	99 1f       	adc	r25, r25
    b916:	66 0f       	add	r22, r22
    b918:	77 1f       	adc	r23, r23
    b91a:	88 1f       	adc	r24, r24
    b91c:	99 1f       	adc	r25, r25
    b91e:	62 0f       	add	r22, r18
    b920:	73 1f       	adc	r23, r19
    b922:	84 1f       	adc	r24, r20
    b924:	95 1f       	adc	r25, r21
    b926:	66 0f       	add	r22, r22
    b928:	77 1f       	adc	r23, r23
    b92a:	88 1f       	adc	r24, r24
    b92c:	99 1f       	adc	r25, r25
    b92e:	08 95       	ret

0000b930 <__mulhi_const_10>:
    b930:	7a e0       	ldi	r23, 0x0A	; 10
    b932:	97 9f       	mul	r25, r23
    b934:	90 2d       	mov	r25, r0
    b936:	87 9f       	mul	r24, r23
    b938:	80 2d       	mov	r24, r0
    b93a:	91 0d       	add	r25, r1
    b93c:	11 24       	eor	r1, r1
    b93e:	08 95       	ret

0000b940 <utoa>:
    b940:	45 32       	cpi	r20, 0x25	; 37
    b942:	51 05       	cpc	r21, r1
    b944:	18 f4       	brcc	.+6      	; 0xb94c <utoa+0xc>
    b946:	42 30       	cpi	r20, 0x02	; 2
    b948:	08 f0       	brcs	.+2      	; 0xb94c <utoa+0xc>
    b94a:	04 c0       	rjmp	.+8      	; 0xb954 <__utoa_ncheck>
    b94c:	fb 01       	movw	r30, r22
    b94e:	10 82       	st	Z, r1
    b950:	cb 01       	movw	r24, r22
    b952:	08 95       	ret

0000b954 <__utoa_ncheck>:
    b954:	bb 27       	eor	r27, r27

0000b956 <__utoa_common>:
    b956:	fb 01       	movw	r30, r22
    b958:	55 27       	eor	r21, r21
    b95a:	aa 27       	eor	r26, r26
    b95c:	88 0f       	add	r24, r24
    b95e:	99 1f       	adc	r25, r25
    b960:	aa 1f       	adc	r26, r26
    b962:	a4 17       	cp	r26, r20
    b964:	10 f0       	brcs	.+4      	; 0xb96a <__utoa_common+0x14>
    b966:	a4 1b       	sub	r26, r20
    b968:	83 95       	inc	r24
    b96a:	50 51       	subi	r21, 0x10	; 16
    b96c:	b9 f7       	brne	.-18     	; 0xb95c <__utoa_common+0x6>
    b96e:	a0 5d       	subi	r26, 0xD0	; 208
    b970:	aa 33       	cpi	r26, 0x3A	; 58
    b972:	08 f0       	brcs	.+2      	; 0xb976 <__utoa_common+0x20>
    b974:	a9 5d       	subi	r26, 0xD9	; 217
    b976:	a1 93       	st	Z+, r26
    b978:	00 97       	sbiw	r24, 0x00	; 0
    b97a:	79 f7       	brne	.-34     	; 0xb95a <__utoa_common+0x4>
    b97c:	b1 11       	cpse	r27, r1
    b97e:	b1 93       	st	Z+, r27
    b980:	11 92       	st	Z+, r1
    b982:	cb 01       	movw	r24, r22
    b984:	59 c2       	rjmp	.+1202   	; 0xbe38 <strrev>

0000b986 <snprintf>:
    b986:	0f 93       	push	r16
    b988:	1f 93       	push	r17
    b98a:	cf 93       	push	r28
    b98c:	df 93       	push	r29
    b98e:	cd b7       	in	r28, 0x3d	; 61
    b990:	de b7       	in	r29, 0x3e	; 62
    b992:	2e 97       	sbiw	r28, 0x0e	; 14
    b994:	0f b6       	in	r0, 0x3f	; 63
    b996:	f8 94       	cli
    b998:	de bf       	out	0x3e, r29	; 62
    b99a:	0f be       	out	0x3f, r0	; 63
    b99c:	cd bf       	out	0x3d, r28	; 61
    b99e:	0e 89       	ldd	r16, Y+22	; 0x16
    b9a0:	1f 89       	ldd	r17, Y+23	; 0x17
    b9a2:	88 8d       	ldd	r24, Y+24	; 0x18
    b9a4:	99 8d       	ldd	r25, Y+25	; 0x19
    b9a6:	26 e0       	ldi	r18, 0x06	; 6
    b9a8:	2c 83       	std	Y+4, r18	; 0x04
    b9aa:	1a 83       	std	Y+2, r17	; 0x02
    b9ac:	09 83       	std	Y+1, r16	; 0x01
    b9ae:	97 ff       	sbrs	r25, 7
    b9b0:	02 c0       	rjmp	.+4      	; 0xb9b6 <snprintf+0x30>
    b9b2:	80 e0       	ldi	r24, 0x00	; 0
    b9b4:	90 e8       	ldi	r25, 0x80	; 128
    b9b6:	01 97       	sbiw	r24, 0x01	; 1
    b9b8:	9e 83       	std	Y+6, r25	; 0x06
    b9ba:	8d 83       	std	Y+5, r24	; 0x05
    b9bc:	ae 01       	movw	r20, r28
    b9be:	44 5e       	subi	r20, 0xE4	; 228
    b9c0:	5f 4f       	sbci	r21, 0xFF	; 255
    b9c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    b9c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    b9c6:	ce 01       	movw	r24, r28
    b9c8:	01 96       	adiw	r24, 0x01	; 1
    b9ca:	19 d0       	rcall	.+50     	; 0xb9fe <vfprintf>
    b9cc:	4d 81       	ldd	r20, Y+5	; 0x05
    b9ce:	5e 81       	ldd	r21, Y+6	; 0x06
    b9d0:	57 fd       	sbrc	r21, 7
    b9d2:	0a c0       	rjmp	.+20     	; 0xb9e8 <snprintf+0x62>
    b9d4:	2f 81       	ldd	r18, Y+7	; 0x07
    b9d6:	38 85       	ldd	r19, Y+8	; 0x08
    b9d8:	42 17       	cp	r20, r18
    b9da:	53 07       	cpc	r21, r19
    b9dc:	0c f4       	brge	.+2      	; 0xb9e0 <snprintf+0x5a>
    b9de:	9a 01       	movw	r18, r20
    b9e0:	f8 01       	movw	r30, r16
    b9e2:	e2 0f       	add	r30, r18
    b9e4:	f3 1f       	adc	r31, r19
    b9e6:	10 82       	st	Z, r1
    b9e8:	2e 96       	adiw	r28, 0x0e	; 14
    b9ea:	0f b6       	in	r0, 0x3f	; 63
    b9ec:	f8 94       	cli
    b9ee:	de bf       	out	0x3e, r29	; 62
    b9f0:	0f be       	out	0x3f, r0	; 63
    b9f2:	cd bf       	out	0x3d, r28	; 61
    b9f4:	df 91       	pop	r29
    b9f6:	cf 91       	pop	r28
    b9f8:	1f 91       	pop	r17
    b9fa:	0f 91       	pop	r16
    b9fc:	08 95       	ret

0000b9fe <vfprintf>:
    b9fe:	2f 92       	push	r2
    ba00:	3f 92       	push	r3
    ba02:	4f 92       	push	r4
    ba04:	5f 92       	push	r5
    ba06:	6f 92       	push	r6
    ba08:	7f 92       	push	r7
    ba0a:	8f 92       	push	r8
    ba0c:	9f 92       	push	r9
    ba0e:	af 92       	push	r10
    ba10:	bf 92       	push	r11
    ba12:	cf 92       	push	r12
    ba14:	df 92       	push	r13
    ba16:	ef 92       	push	r14
    ba18:	ff 92       	push	r15
    ba1a:	0f 93       	push	r16
    ba1c:	1f 93       	push	r17
    ba1e:	cf 93       	push	r28
    ba20:	df 93       	push	r29
    ba22:	cd b7       	in	r28, 0x3d	; 61
    ba24:	de b7       	in	r29, 0x3e	; 62
    ba26:	2c 97       	sbiw	r28, 0x0c	; 12
    ba28:	0f b6       	in	r0, 0x3f	; 63
    ba2a:	f8 94       	cli
    ba2c:	de bf       	out	0x3e, r29	; 62
    ba2e:	0f be       	out	0x3f, r0	; 63
    ba30:	cd bf       	out	0x3d, r28	; 61
    ba32:	7c 01       	movw	r14, r24
    ba34:	6b 01       	movw	r12, r22
    ba36:	8a 01       	movw	r16, r20
    ba38:	fc 01       	movw	r30, r24
    ba3a:	17 82       	std	Z+7, r1	; 0x07
    ba3c:	16 82       	std	Z+6, r1	; 0x06
    ba3e:	83 81       	ldd	r24, Z+3	; 0x03
    ba40:	81 ff       	sbrs	r24, 1
    ba42:	b0 c1       	rjmp	.+864    	; 0xbda4 <vfprintf+0x3a6>
    ba44:	ce 01       	movw	r24, r28
    ba46:	01 96       	adiw	r24, 0x01	; 1
    ba48:	4c 01       	movw	r8, r24
    ba4a:	f7 01       	movw	r30, r14
    ba4c:	93 81       	ldd	r25, Z+3	; 0x03
    ba4e:	f6 01       	movw	r30, r12
    ba50:	93 fd       	sbrc	r25, 3
    ba52:	85 91       	lpm	r24, Z+
    ba54:	93 ff       	sbrs	r25, 3
    ba56:	81 91       	ld	r24, Z+
    ba58:	6f 01       	movw	r12, r30
    ba5a:	88 23       	and	r24, r24
    ba5c:	09 f4       	brne	.+2      	; 0xba60 <vfprintf+0x62>
    ba5e:	9e c1       	rjmp	.+828    	; 0xbd9c <vfprintf+0x39e>
    ba60:	85 32       	cpi	r24, 0x25	; 37
    ba62:	39 f4       	brne	.+14     	; 0xba72 <vfprintf+0x74>
    ba64:	93 fd       	sbrc	r25, 3
    ba66:	85 91       	lpm	r24, Z+
    ba68:	93 ff       	sbrs	r25, 3
    ba6a:	81 91       	ld	r24, Z+
    ba6c:	6f 01       	movw	r12, r30
    ba6e:	85 32       	cpi	r24, 0x25	; 37
    ba70:	21 f4       	brne	.+8      	; 0xba7a <vfprintf+0x7c>
    ba72:	b7 01       	movw	r22, r14
    ba74:	90 e0       	ldi	r25, 0x00	; 0
    ba76:	f0 d1       	rcall	.+992    	; 0xbe58 <fputc>
    ba78:	e8 cf       	rjmp	.-48     	; 0xba4a <vfprintf+0x4c>
    ba7a:	51 2c       	mov	r5, r1
    ba7c:	31 2c       	mov	r3, r1
    ba7e:	20 e0       	ldi	r18, 0x00	; 0
    ba80:	20 32       	cpi	r18, 0x20	; 32
    ba82:	a0 f4       	brcc	.+40     	; 0xbaac <vfprintf+0xae>
    ba84:	8b 32       	cpi	r24, 0x2B	; 43
    ba86:	69 f0       	breq	.+26     	; 0xbaa2 <vfprintf+0xa4>
    ba88:	30 f4       	brcc	.+12     	; 0xba96 <vfprintf+0x98>
    ba8a:	80 32       	cpi	r24, 0x20	; 32
    ba8c:	59 f0       	breq	.+22     	; 0xbaa4 <vfprintf+0xa6>
    ba8e:	83 32       	cpi	r24, 0x23	; 35
    ba90:	69 f4       	brne	.+26     	; 0xbaac <vfprintf+0xae>
    ba92:	20 61       	ori	r18, 0x10	; 16
    ba94:	2c c0       	rjmp	.+88     	; 0xbaee <vfprintf+0xf0>
    ba96:	8d 32       	cpi	r24, 0x2D	; 45
    ba98:	39 f0       	breq	.+14     	; 0xbaa8 <vfprintf+0xaa>
    ba9a:	80 33       	cpi	r24, 0x30	; 48
    ba9c:	39 f4       	brne	.+14     	; 0xbaac <vfprintf+0xae>
    ba9e:	21 60       	ori	r18, 0x01	; 1
    baa0:	26 c0       	rjmp	.+76     	; 0xbaee <vfprintf+0xf0>
    baa2:	22 60       	ori	r18, 0x02	; 2
    baa4:	24 60       	ori	r18, 0x04	; 4
    baa6:	23 c0       	rjmp	.+70     	; 0xbaee <vfprintf+0xf0>
    baa8:	28 60       	ori	r18, 0x08	; 8
    baaa:	21 c0       	rjmp	.+66     	; 0xbaee <vfprintf+0xf0>
    baac:	27 fd       	sbrc	r18, 7
    baae:	27 c0       	rjmp	.+78     	; 0xbafe <vfprintf+0x100>
    bab0:	30 ed       	ldi	r19, 0xD0	; 208
    bab2:	38 0f       	add	r19, r24
    bab4:	3a 30       	cpi	r19, 0x0A	; 10
    bab6:	78 f4       	brcc	.+30     	; 0xbad6 <vfprintf+0xd8>
    bab8:	26 ff       	sbrs	r18, 6
    baba:	06 c0       	rjmp	.+12     	; 0xbac8 <vfprintf+0xca>
    babc:	fa e0       	ldi	r31, 0x0A	; 10
    babe:	5f 9e       	mul	r5, r31
    bac0:	30 0d       	add	r19, r0
    bac2:	11 24       	eor	r1, r1
    bac4:	53 2e       	mov	r5, r19
    bac6:	13 c0       	rjmp	.+38     	; 0xbaee <vfprintf+0xf0>
    bac8:	8a e0       	ldi	r24, 0x0A	; 10
    baca:	38 9e       	mul	r3, r24
    bacc:	30 0d       	add	r19, r0
    bace:	11 24       	eor	r1, r1
    bad0:	33 2e       	mov	r3, r19
    bad2:	20 62       	ori	r18, 0x20	; 32
    bad4:	0c c0       	rjmp	.+24     	; 0xbaee <vfprintf+0xf0>
    bad6:	8e 32       	cpi	r24, 0x2E	; 46
    bad8:	21 f4       	brne	.+8      	; 0xbae2 <vfprintf+0xe4>
    bada:	26 fd       	sbrc	r18, 6
    badc:	5f c1       	rjmp	.+702    	; 0xbd9c <vfprintf+0x39e>
    bade:	20 64       	ori	r18, 0x40	; 64
    bae0:	06 c0       	rjmp	.+12     	; 0xbaee <vfprintf+0xf0>
    bae2:	8c 36       	cpi	r24, 0x6C	; 108
    bae4:	11 f4       	brne	.+4      	; 0xbaea <vfprintf+0xec>
    bae6:	20 68       	ori	r18, 0x80	; 128
    bae8:	02 c0       	rjmp	.+4      	; 0xbaee <vfprintf+0xf0>
    baea:	88 36       	cpi	r24, 0x68	; 104
    baec:	41 f4       	brne	.+16     	; 0xbafe <vfprintf+0x100>
    baee:	f6 01       	movw	r30, r12
    baf0:	93 fd       	sbrc	r25, 3
    baf2:	85 91       	lpm	r24, Z+
    baf4:	93 ff       	sbrs	r25, 3
    baf6:	81 91       	ld	r24, Z+
    baf8:	6f 01       	movw	r12, r30
    bafa:	81 11       	cpse	r24, r1
    bafc:	c1 cf       	rjmp	.-126    	; 0xba80 <vfprintf+0x82>
    bafe:	98 2f       	mov	r25, r24
    bb00:	9f 7d       	andi	r25, 0xDF	; 223
    bb02:	95 54       	subi	r25, 0x45	; 69
    bb04:	93 30       	cpi	r25, 0x03	; 3
    bb06:	28 f4       	brcc	.+10     	; 0xbb12 <vfprintf+0x114>
    bb08:	0c 5f       	subi	r16, 0xFC	; 252
    bb0a:	1f 4f       	sbci	r17, 0xFF	; 255
    bb0c:	ff e3       	ldi	r31, 0x3F	; 63
    bb0e:	f9 83       	std	Y+1, r31	; 0x01
    bb10:	0d c0       	rjmp	.+26     	; 0xbb2c <vfprintf+0x12e>
    bb12:	83 36       	cpi	r24, 0x63	; 99
    bb14:	31 f0       	breq	.+12     	; 0xbb22 <vfprintf+0x124>
    bb16:	83 37       	cpi	r24, 0x73	; 115
    bb18:	71 f0       	breq	.+28     	; 0xbb36 <vfprintf+0x138>
    bb1a:	83 35       	cpi	r24, 0x53	; 83
    bb1c:	09 f0       	breq	.+2      	; 0xbb20 <vfprintf+0x122>
    bb1e:	57 c0       	rjmp	.+174    	; 0xbbce <vfprintf+0x1d0>
    bb20:	21 c0       	rjmp	.+66     	; 0xbb64 <vfprintf+0x166>
    bb22:	f8 01       	movw	r30, r16
    bb24:	80 81       	ld	r24, Z
    bb26:	89 83       	std	Y+1, r24	; 0x01
    bb28:	0e 5f       	subi	r16, 0xFE	; 254
    bb2a:	1f 4f       	sbci	r17, 0xFF	; 255
    bb2c:	44 24       	eor	r4, r4
    bb2e:	43 94       	inc	r4
    bb30:	51 2c       	mov	r5, r1
    bb32:	54 01       	movw	r10, r8
    bb34:	14 c0       	rjmp	.+40     	; 0xbb5e <vfprintf+0x160>
    bb36:	38 01       	movw	r6, r16
    bb38:	f2 e0       	ldi	r31, 0x02	; 2
    bb3a:	6f 0e       	add	r6, r31
    bb3c:	71 1c       	adc	r7, r1
    bb3e:	f8 01       	movw	r30, r16
    bb40:	a0 80       	ld	r10, Z
    bb42:	b1 80       	ldd	r11, Z+1	; 0x01
    bb44:	26 ff       	sbrs	r18, 6
    bb46:	03 c0       	rjmp	.+6      	; 0xbb4e <vfprintf+0x150>
    bb48:	65 2d       	mov	r22, r5
    bb4a:	70 e0       	ldi	r23, 0x00	; 0
    bb4c:	02 c0       	rjmp	.+4      	; 0xbb52 <vfprintf+0x154>
    bb4e:	6f ef       	ldi	r22, 0xFF	; 255
    bb50:	7f ef       	ldi	r23, 0xFF	; 255
    bb52:	c5 01       	movw	r24, r10
    bb54:	2c 87       	std	Y+12, r18	; 0x0c
    bb56:	65 d1       	rcall	.+714    	; 0xbe22 <strnlen>
    bb58:	2c 01       	movw	r4, r24
    bb5a:	83 01       	movw	r16, r6
    bb5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    bb5e:	2f 77       	andi	r18, 0x7F	; 127
    bb60:	22 2e       	mov	r2, r18
    bb62:	16 c0       	rjmp	.+44     	; 0xbb90 <vfprintf+0x192>
    bb64:	38 01       	movw	r6, r16
    bb66:	f2 e0       	ldi	r31, 0x02	; 2
    bb68:	6f 0e       	add	r6, r31
    bb6a:	71 1c       	adc	r7, r1
    bb6c:	f8 01       	movw	r30, r16
    bb6e:	a0 80       	ld	r10, Z
    bb70:	b1 80       	ldd	r11, Z+1	; 0x01
    bb72:	26 ff       	sbrs	r18, 6
    bb74:	03 c0       	rjmp	.+6      	; 0xbb7c <vfprintf+0x17e>
    bb76:	65 2d       	mov	r22, r5
    bb78:	70 e0       	ldi	r23, 0x00	; 0
    bb7a:	02 c0       	rjmp	.+4      	; 0xbb80 <vfprintf+0x182>
    bb7c:	6f ef       	ldi	r22, 0xFF	; 255
    bb7e:	7f ef       	ldi	r23, 0xFF	; 255
    bb80:	c5 01       	movw	r24, r10
    bb82:	2c 87       	std	Y+12, r18	; 0x0c
    bb84:	43 d1       	rcall	.+646    	; 0xbe0c <strnlen_P>
    bb86:	2c 01       	movw	r4, r24
    bb88:	2c 85       	ldd	r18, Y+12	; 0x0c
    bb8a:	20 68       	ori	r18, 0x80	; 128
    bb8c:	22 2e       	mov	r2, r18
    bb8e:	83 01       	movw	r16, r6
    bb90:	23 fc       	sbrc	r2, 3
    bb92:	19 c0       	rjmp	.+50     	; 0xbbc6 <vfprintf+0x1c8>
    bb94:	83 2d       	mov	r24, r3
    bb96:	90 e0       	ldi	r25, 0x00	; 0
    bb98:	48 16       	cp	r4, r24
    bb9a:	59 06       	cpc	r5, r25
    bb9c:	a0 f4       	brcc	.+40     	; 0xbbc6 <vfprintf+0x1c8>
    bb9e:	b7 01       	movw	r22, r14
    bba0:	80 e2       	ldi	r24, 0x20	; 32
    bba2:	90 e0       	ldi	r25, 0x00	; 0
    bba4:	59 d1       	rcall	.+690    	; 0xbe58 <fputc>
    bba6:	3a 94       	dec	r3
    bba8:	f5 cf       	rjmp	.-22     	; 0xbb94 <vfprintf+0x196>
    bbaa:	f5 01       	movw	r30, r10
    bbac:	27 fc       	sbrc	r2, 7
    bbae:	85 91       	lpm	r24, Z+
    bbb0:	27 fe       	sbrs	r2, 7
    bbb2:	81 91       	ld	r24, Z+
    bbb4:	5f 01       	movw	r10, r30
    bbb6:	b7 01       	movw	r22, r14
    bbb8:	90 e0       	ldi	r25, 0x00	; 0
    bbba:	4e d1       	rcall	.+668    	; 0xbe58 <fputc>
    bbbc:	31 10       	cpse	r3, r1
    bbbe:	3a 94       	dec	r3
    bbc0:	f1 e0       	ldi	r31, 0x01	; 1
    bbc2:	4f 1a       	sub	r4, r31
    bbc4:	51 08       	sbc	r5, r1
    bbc6:	41 14       	cp	r4, r1
    bbc8:	51 04       	cpc	r5, r1
    bbca:	79 f7       	brne	.-34     	; 0xbbaa <vfprintf+0x1ac>
    bbcc:	de c0       	rjmp	.+444    	; 0xbd8a <vfprintf+0x38c>
    bbce:	84 36       	cpi	r24, 0x64	; 100
    bbd0:	11 f0       	breq	.+4      	; 0xbbd6 <vfprintf+0x1d8>
    bbd2:	89 36       	cpi	r24, 0x69	; 105
    bbd4:	31 f5       	brne	.+76     	; 0xbc22 <vfprintf+0x224>
    bbd6:	f8 01       	movw	r30, r16
    bbd8:	27 ff       	sbrs	r18, 7
    bbda:	07 c0       	rjmp	.+14     	; 0xbbea <vfprintf+0x1ec>
    bbdc:	60 81       	ld	r22, Z
    bbde:	71 81       	ldd	r23, Z+1	; 0x01
    bbe0:	82 81       	ldd	r24, Z+2	; 0x02
    bbe2:	93 81       	ldd	r25, Z+3	; 0x03
    bbe4:	0c 5f       	subi	r16, 0xFC	; 252
    bbe6:	1f 4f       	sbci	r17, 0xFF	; 255
    bbe8:	08 c0       	rjmp	.+16     	; 0xbbfa <vfprintf+0x1fc>
    bbea:	60 81       	ld	r22, Z
    bbec:	71 81       	ldd	r23, Z+1	; 0x01
    bbee:	88 27       	eor	r24, r24
    bbf0:	77 fd       	sbrc	r23, 7
    bbf2:	80 95       	com	r24
    bbf4:	98 2f       	mov	r25, r24
    bbf6:	0e 5f       	subi	r16, 0xFE	; 254
    bbf8:	1f 4f       	sbci	r17, 0xFF	; 255
    bbfa:	2f 76       	andi	r18, 0x6F	; 111
    bbfc:	b2 2e       	mov	r11, r18
    bbfe:	97 ff       	sbrs	r25, 7
    bc00:	09 c0       	rjmp	.+18     	; 0xbc14 <vfprintf+0x216>
    bc02:	90 95       	com	r25
    bc04:	80 95       	com	r24
    bc06:	70 95       	com	r23
    bc08:	61 95       	neg	r22
    bc0a:	7f 4f       	sbci	r23, 0xFF	; 255
    bc0c:	8f 4f       	sbci	r24, 0xFF	; 255
    bc0e:	9f 4f       	sbci	r25, 0xFF	; 255
    bc10:	20 68       	ori	r18, 0x80	; 128
    bc12:	b2 2e       	mov	r11, r18
    bc14:	2a e0       	ldi	r18, 0x0A	; 10
    bc16:	30 e0       	ldi	r19, 0x00	; 0
    bc18:	a4 01       	movw	r20, r8
    bc1a:	50 d1       	rcall	.+672    	; 0xbebc <__ultoa_invert>
    bc1c:	a8 2e       	mov	r10, r24
    bc1e:	a8 18       	sub	r10, r8
    bc20:	43 c0       	rjmp	.+134    	; 0xbca8 <vfprintf+0x2aa>
    bc22:	85 37       	cpi	r24, 0x75	; 117
    bc24:	29 f4       	brne	.+10     	; 0xbc30 <vfprintf+0x232>
    bc26:	2f 7e       	andi	r18, 0xEF	; 239
    bc28:	b2 2e       	mov	r11, r18
    bc2a:	2a e0       	ldi	r18, 0x0A	; 10
    bc2c:	30 e0       	ldi	r19, 0x00	; 0
    bc2e:	25 c0       	rjmp	.+74     	; 0xbc7a <vfprintf+0x27c>
    bc30:	f2 2f       	mov	r31, r18
    bc32:	f9 7f       	andi	r31, 0xF9	; 249
    bc34:	bf 2e       	mov	r11, r31
    bc36:	8f 36       	cpi	r24, 0x6F	; 111
    bc38:	c1 f0       	breq	.+48     	; 0xbc6a <vfprintf+0x26c>
    bc3a:	18 f4       	brcc	.+6      	; 0xbc42 <vfprintf+0x244>
    bc3c:	88 35       	cpi	r24, 0x58	; 88
    bc3e:	79 f0       	breq	.+30     	; 0xbc5e <vfprintf+0x260>
    bc40:	ad c0       	rjmp	.+346    	; 0xbd9c <vfprintf+0x39e>
    bc42:	80 37       	cpi	r24, 0x70	; 112
    bc44:	19 f0       	breq	.+6      	; 0xbc4c <vfprintf+0x24e>
    bc46:	88 37       	cpi	r24, 0x78	; 120
    bc48:	21 f0       	breq	.+8      	; 0xbc52 <vfprintf+0x254>
    bc4a:	a8 c0       	rjmp	.+336    	; 0xbd9c <vfprintf+0x39e>
    bc4c:	2f 2f       	mov	r18, r31
    bc4e:	20 61       	ori	r18, 0x10	; 16
    bc50:	b2 2e       	mov	r11, r18
    bc52:	b4 fe       	sbrs	r11, 4
    bc54:	0d c0       	rjmp	.+26     	; 0xbc70 <vfprintf+0x272>
    bc56:	8b 2d       	mov	r24, r11
    bc58:	84 60       	ori	r24, 0x04	; 4
    bc5a:	b8 2e       	mov	r11, r24
    bc5c:	09 c0       	rjmp	.+18     	; 0xbc70 <vfprintf+0x272>
    bc5e:	24 ff       	sbrs	r18, 4
    bc60:	0a c0       	rjmp	.+20     	; 0xbc76 <vfprintf+0x278>
    bc62:	9f 2f       	mov	r25, r31
    bc64:	96 60       	ori	r25, 0x06	; 6
    bc66:	b9 2e       	mov	r11, r25
    bc68:	06 c0       	rjmp	.+12     	; 0xbc76 <vfprintf+0x278>
    bc6a:	28 e0       	ldi	r18, 0x08	; 8
    bc6c:	30 e0       	ldi	r19, 0x00	; 0
    bc6e:	05 c0       	rjmp	.+10     	; 0xbc7a <vfprintf+0x27c>
    bc70:	20 e1       	ldi	r18, 0x10	; 16
    bc72:	30 e0       	ldi	r19, 0x00	; 0
    bc74:	02 c0       	rjmp	.+4      	; 0xbc7a <vfprintf+0x27c>
    bc76:	20 e1       	ldi	r18, 0x10	; 16
    bc78:	32 e0       	ldi	r19, 0x02	; 2
    bc7a:	f8 01       	movw	r30, r16
    bc7c:	b7 fe       	sbrs	r11, 7
    bc7e:	07 c0       	rjmp	.+14     	; 0xbc8e <vfprintf+0x290>
    bc80:	60 81       	ld	r22, Z
    bc82:	71 81       	ldd	r23, Z+1	; 0x01
    bc84:	82 81       	ldd	r24, Z+2	; 0x02
    bc86:	93 81       	ldd	r25, Z+3	; 0x03
    bc88:	0c 5f       	subi	r16, 0xFC	; 252
    bc8a:	1f 4f       	sbci	r17, 0xFF	; 255
    bc8c:	06 c0       	rjmp	.+12     	; 0xbc9a <vfprintf+0x29c>
    bc8e:	60 81       	ld	r22, Z
    bc90:	71 81       	ldd	r23, Z+1	; 0x01
    bc92:	80 e0       	ldi	r24, 0x00	; 0
    bc94:	90 e0       	ldi	r25, 0x00	; 0
    bc96:	0e 5f       	subi	r16, 0xFE	; 254
    bc98:	1f 4f       	sbci	r17, 0xFF	; 255
    bc9a:	a4 01       	movw	r20, r8
    bc9c:	0f d1       	rcall	.+542    	; 0xbebc <__ultoa_invert>
    bc9e:	a8 2e       	mov	r10, r24
    bca0:	a8 18       	sub	r10, r8
    bca2:	fb 2d       	mov	r31, r11
    bca4:	ff 77       	andi	r31, 0x7F	; 127
    bca6:	bf 2e       	mov	r11, r31
    bca8:	b6 fe       	sbrs	r11, 6
    bcaa:	0b c0       	rjmp	.+22     	; 0xbcc2 <vfprintf+0x2c4>
    bcac:	2b 2d       	mov	r18, r11
    bcae:	2e 7f       	andi	r18, 0xFE	; 254
    bcb0:	a5 14       	cp	r10, r5
    bcb2:	50 f4       	brcc	.+20     	; 0xbcc8 <vfprintf+0x2ca>
    bcb4:	b4 fe       	sbrs	r11, 4
    bcb6:	0a c0       	rjmp	.+20     	; 0xbccc <vfprintf+0x2ce>
    bcb8:	b2 fc       	sbrc	r11, 2
    bcba:	08 c0       	rjmp	.+16     	; 0xbccc <vfprintf+0x2ce>
    bcbc:	2b 2d       	mov	r18, r11
    bcbe:	2e 7e       	andi	r18, 0xEE	; 238
    bcc0:	05 c0       	rjmp	.+10     	; 0xbccc <vfprintf+0x2ce>
    bcc2:	7a 2c       	mov	r7, r10
    bcc4:	2b 2d       	mov	r18, r11
    bcc6:	03 c0       	rjmp	.+6      	; 0xbcce <vfprintf+0x2d0>
    bcc8:	7a 2c       	mov	r7, r10
    bcca:	01 c0       	rjmp	.+2      	; 0xbcce <vfprintf+0x2d0>
    bccc:	75 2c       	mov	r7, r5
    bcce:	24 ff       	sbrs	r18, 4
    bcd0:	0d c0       	rjmp	.+26     	; 0xbcec <vfprintf+0x2ee>
    bcd2:	fe 01       	movw	r30, r28
    bcd4:	ea 0d       	add	r30, r10
    bcd6:	f1 1d       	adc	r31, r1
    bcd8:	80 81       	ld	r24, Z
    bcda:	80 33       	cpi	r24, 0x30	; 48
    bcdc:	11 f4       	brne	.+4      	; 0xbce2 <vfprintf+0x2e4>
    bcde:	29 7e       	andi	r18, 0xE9	; 233
    bce0:	09 c0       	rjmp	.+18     	; 0xbcf4 <vfprintf+0x2f6>
    bce2:	22 ff       	sbrs	r18, 2
    bce4:	06 c0       	rjmp	.+12     	; 0xbcf2 <vfprintf+0x2f4>
    bce6:	73 94       	inc	r7
    bce8:	73 94       	inc	r7
    bcea:	04 c0       	rjmp	.+8      	; 0xbcf4 <vfprintf+0x2f6>
    bcec:	82 2f       	mov	r24, r18
    bcee:	86 78       	andi	r24, 0x86	; 134
    bcf0:	09 f0       	breq	.+2      	; 0xbcf4 <vfprintf+0x2f6>
    bcf2:	73 94       	inc	r7
    bcf4:	23 fd       	sbrc	r18, 3
    bcf6:	12 c0       	rjmp	.+36     	; 0xbd1c <vfprintf+0x31e>
    bcf8:	20 ff       	sbrs	r18, 0
    bcfa:	06 c0       	rjmp	.+12     	; 0xbd08 <vfprintf+0x30a>
    bcfc:	5a 2c       	mov	r5, r10
    bcfe:	73 14       	cp	r7, r3
    bd00:	18 f4       	brcc	.+6      	; 0xbd08 <vfprintf+0x30a>
    bd02:	53 0c       	add	r5, r3
    bd04:	57 18       	sub	r5, r7
    bd06:	73 2c       	mov	r7, r3
    bd08:	73 14       	cp	r7, r3
    bd0a:	60 f4       	brcc	.+24     	; 0xbd24 <vfprintf+0x326>
    bd0c:	b7 01       	movw	r22, r14
    bd0e:	80 e2       	ldi	r24, 0x20	; 32
    bd10:	90 e0       	ldi	r25, 0x00	; 0
    bd12:	2c 87       	std	Y+12, r18	; 0x0c
    bd14:	a1 d0       	rcall	.+322    	; 0xbe58 <fputc>
    bd16:	73 94       	inc	r7
    bd18:	2c 85       	ldd	r18, Y+12	; 0x0c
    bd1a:	f6 cf       	rjmp	.-20     	; 0xbd08 <vfprintf+0x30a>
    bd1c:	73 14       	cp	r7, r3
    bd1e:	10 f4       	brcc	.+4      	; 0xbd24 <vfprintf+0x326>
    bd20:	37 18       	sub	r3, r7
    bd22:	01 c0       	rjmp	.+2      	; 0xbd26 <vfprintf+0x328>
    bd24:	31 2c       	mov	r3, r1
    bd26:	24 ff       	sbrs	r18, 4
    bd28:	11 c0       	rjmp	.+34     	; 0xbd4c <vfprintf+0x34e>
    bd2a:	b7 01       	movw	r22, r14
    bd2c:	80 e3       	ldi	r24, 0x30	; 48
    bd2e:	90 e0       	ldi	r25, 0x00	; 0
    bd30:	2c 87       	std	Y+12, r18	; 0x0c
    bd32:	92 d0       	rcall	.+292    	; 0xbe58 <fputc>
    bd34:	2c 85       	ldd	r18, Y+12	; 0x0c
    bd36:	22 ff       	sbrs	r18, 2
    bd38:	16 c0       	rjmp	.+44     	; 0xbd66 <vfprintf+0x368>
    bd3a:	21 ff       	sbrs	r18, 1
    bd3c:	03 c0       	rjmp	.+6      	; 0xbd44 <vfprintf+0x346>
    bd3e:	88 e5       	ldi	r24, 0x58	; 88
    bd40:	90 e0       	ldi	r25, 0x00	; 0
    bd42:	02 c0       	rjmp	.+4      	; 0xbd48 <vfprintf+0x34a>
    bd44:	88 e7       	ldi	r24, 0x78	; 120
    bd46:	90 e0       	ldi	r25, 0x00	; 0
    bd48:	b7 01       	movw	r22, r14
    bd4a:	0c c0       	rjmp	.+24     	; 0xbd64 <vfprintf+0x366>
    bd4c:	82 2f       	mov	r24, r18
    bd4e:	86 78       	andi	r24, 0x86	; 134
    bd50:	51 f0       	breq	.+20     	; 0xbd66 <vfprintf+0x368>
    bd52:	21 fd       	sbrc	r18, 1
    bd54:	02 c0       	rjmp	.+4      	; 0xbd5a <vfprintf+0x35c>
    bd56:	80 e2       	ldi	r24, 0x20	; 32
    bd58:	01 c0       	rjmp	.+2      	; 0xbd5c <vfprintf+0x35e>
    bd5a:	8b e2       	ldi	r24, 0x2B	; 43
    bd5c:	27 fd       	sbrc	r18, 7
    bd5e:	8d e2       	ldi	r24, 0x2D	; 45
    bd60:	b7 01       	movw	r22, r14
    bd62:	90 e0       	ldi	r25, 0x00	; 0
    bd64:	79 d0       	rcall	.+242    	; 0xbe58 <fputc>
    bd66:	a5 14       	cp	r10, r5
    bd68:	30 f4       	brcc	.+12     	; 0xbd76 <vfprintf+0x378>
    bd6a:	b7 01       	movw	r22, r14
    bd6c:	80 e3       	ldi	r24, 0x30	; 48
    bd6e:	90 e0       	ldi	r25, 0x00	; 0
    bd70:	73 d0       	rcall	.+230    	; 0xbe58 <fputc>
    bd72:	5a 94       	dec	r5
    bd74:	f8 cf       	rjmp	.-16     	; 0xbd66 <vfprintf+0x368>
    bd76:	aa 94       	dec	r10
    bd78:	f4 01       	movw	r30, r8
    bd7a:	ea 0d       	add	r30, r10
    bd7c:	f1 1d       	adc	r31, r1
    bd7e:	80 81       	ld	r24, Z
    bd80:	b7 01       	movw	r22, r14
    bd82:	90 e0       	ldi	r25, 0x00	; 0
    bd84:	69 d0       	rcall	.+210    	; 0xbe58 <fputc>
    bd86:	a1 10       	cpse	r10, r1
    bd88:	f6 cf       	rjmp	.-20     	; 0xbd76 <vfprintf+0x378>
    bd8a:	33 20       	and	r3, r3
    bd8c:	09 f4       	brne	.+2      	; 0xbd90 <vfprintf+0x392>
    bd8e:	5d ce       	rjmp	.-838    	; 0xba4a <vfprintf+0x4c>
    bd90:	b7 01       	movw	r22, r14
    bd92:	80 e2       	ldi	r24, 0x20	; 32
    bd94:	90 e0       	ldi	r25, 0x00	; 0
    bd96:	60 d0       	rcall	.+192    	; 0xbe58 <fputc>
    bd98:	3a 94       	dec	r3
    bd9a:	f7 cf       	rjmp	.-18     	; 0xbd8a <vfprintf+0x38c>
    bd9c:	f7 01       	movw	r30, r14
    bd9e:	86 81       	ldd	r24, Z+6	; 0x06
    bda0:	97 81       	ldd	r25, Z+7	; 0x07
    bda2:	02 c0       	rjmp	.+4      	; 0xbda8 <vfprintf+0x3aa>
    bda4:	8f ef       	ldi	r24, 0xFF	; 255
    bda6:	9f ef       	ldi	r25, 0xFF	; 255
    bda8:	2c 96       	adiw	r28, 0x0c	; 12
    bdaa:	0f b6       	in	r0, 0x3f	; 63
    bdac:	f8 94       	cli
    bdae:	de bf       	out	0x3e, r29	; 62
    bdb0:	0f be       	out	0x3f, r0	; 63
    bdb2:	cd bf       	out	0x3d, r28	; 61
    bdb4:	df 91       	pop	r29
    bdb6:	cf 91       	pop	r28
    bdb8:	1f 91       	pop	r17
    bdba:	0f 91       	pop	r16
    bdbc:	ff 90       	pop	r15
    bdbe:	ef 90       	pop	r14
    bdc0:	df 90       	pop	r13
    bdc2:	cf 90       	pop	r12
    bdc4:	bf 90       	pop	r11
    bdc6:	af 90       	pop	r10
    bdc8:	9f 90       	pop	r9
    bdca:	8f 90       	pop	r8
    bdcc:	7f 90       	pop	r7
    bdce:	6f 90       	pop	r6
    bdd0:	5f 90       	pop	r5
    bdd2:	4f 90       	pop	r4
    bdd4:	3f 90       	pop	r3
    bdd6:	2f 90       	pop	r2
    bdd8:	08 95       	ret

0000bdda <__eerd_byte_m2560>:
    bdda:	f9 99       	sbic	0x1f, 1	; 31
    bddc:	fe cf       	rjmp	.-4      	; 0xbdda <__eerd_byte_m2560>
    bdde:	92 bd       	out	0x22, r25	; 34
    bde0:	81 bd       	out	0x21, r24	; 33
    bde2:	f8 9a       	sbi	0x1f, 0	; 31
    bde4:	99 27       	eor	r25, r25
    bde6:	80 b5       	in	r24, 0x20	; 32
    bde8:	08 95       	ret

0000bdea <__eewr_byte_m2560>:
    bdea:	26 2f       	mov	r18, r22

0000bdec <__eewr_r18_m2560>:
    bdec:	f9 99       	sbic	0x1f, 1	; 31
    bdee:	fe cf       	rjmp	.-4      	; 0xbdec <__eewr_r18_m2560>
    bdf0:	1f ba       	out	0x1f, r1	; 31
    bdf2:	92 bd       	out	0x22, r25	; 34
    bdf4:	81 bd       	out	0x21, r24	; 33
    bdf6:	20 bd       	out	0x20, r18	; 32
    bdf8:	0f b6       	in	r0, 0x3f	; 63
    bdfa:	f8 94       	cli
    bdfc:	fa 9a       	sbi	0x1f, 2	; 31
    bdfe:	f9 9a       	sbi	0x1f, 1	; 31
    be00:	0f be       	out	0x3f, r0	; 63
    be02:	01 96       	adiw	r24, 0x01	; 1
    be04:	08 95       	ret

0000be06 <__ctype_isfalse>:
    be06:	99 27       	eor	r25, r25
    be08:	88 27       	eor	r24, r24

0000be0a <__ctype_istrue>:
    be0a:	08 95       	ret

0000be0c <strnlen_P>:
    be0c:	fc 01       	movw	r30, r24
    be0e:	05 90       	lpm	r0, Z+
    be10:	61 50       	subi	r22, 0x01	; 1
    be12:	70 40       	sbci	r23, 0x00	; 0
    be14:	01 10       	cpse	r0, r1
    be16:	d8 f7       	brcc	.-10     	; 0xbe0e <strnlen_P+0x2>
    be18:	80 95       	com	r24
    be1a:	90 95       	com	r25
    be1c:	8e 0f       	add	r24, r30
    be1e:	9f 1f       	adc	r25, r31
    be20:	08 95       	ret

0000be22 <strnlen>:
    be22:	fc 01       	movw	r30, r24
    be24:	61 50       	subi	r22, 0x01	; 1
    be26:	70 40       	sbci	r23, 0x00	; 0
    be28:	01 90       	ld	r0, Z+
    be2a:	01 10       	cpse	r0, r1
    be2c:	d8 f7       	brcc	.-10     	; 0xbe24 <strnlen+0x2>
    be2e:	80 95       	com	r24
    be30:	90 95       	com	r25
    be32:	8e 0f       	add	r24, r30
    be34:	9f 1f       	adc	r25, r31
    be36:	08 95       	ret

0000be38 <strrev>:
    be38:	dc 01       	movw	r26, r24
    be3a:	fc 01       	movw	r30, r24
    be3c:	67 2f       	mov	r22, r23
    be3e:	71 91       	ld	r23, Z+
    be40:	77 23       	and	r23, r23
    be42:	e1 f7       	brne	.-8      	; 0xbe3c <strrev+0x4>
    be44:	32 97       	sbiw	r30, 0x02	; 2
    be46:	04 c0       	rjmp	.+8      	; 0xbe50 <strrev+0x18>
    be48:	7c 91       	ld	r23, X
    be4a:	6d 93       	st	X+, r22
    be4c:	70 83       	st	Z, r23
    be4e:	62 91       	ld	r22, -Z
    be50:	ae 17       	cp	r26, r30
    be52:	bf 07       	cpc	r27, r31
    be54:	c8 f3       	brcs	.-14     	; 0xbe48 <strrev+0x10>
    be56:	08 95       	ret

0000be58 <fputc>:
    be58:	0f 93       	push	r16
    be5a:	1f 93       	push	r17
    be5c:	cf 93       	push	r28
    be5e:	df 93       	push	r29
    be60:	18 2f       	mov	r17, r24
    be62:	09 2f       	mov	r16, r25
    be64:	eb 01       	movw	r28, r22
    be66:	8b 81       	ldd	r24, Y+3	; 0x03
    be68:	81 fd       	sbrc	r24, 1
    be6a:	03 c0       	rjmp	.+6      	; 0xbe72 <fputc+0x1a>
    be6c:	8f ef       	ldi	r24, 0xFF	; 255
    be6e:	9f ef       	ldi	r25, 0xFF	; 255
    be70:	20 c0       	rjmp	.+64     	; 0xbeb2 <fputc+0x5a>
    be72:	82 ff       	sbrs	r24, 2
    be74:	10 c0       	rjmp	.+32     	; 0xbe96 <fputc+0x3e>
    be76:	4e 81       	ldd	r20, Y+6	; 0x06
    be78:	5f 81       	ldd	r21, Y+7	; 0x07
    be7a:	2c 81       	ldd	r18, Y+4	; 0x04
    be7c:	3d 81       	ldd	r19, Y+5	; 0x05
    be7e:	42 17       	cp	r20, r18
    be80:	53 07       	cpc	r21, r19
    be82:	7c f4       	brge	.+30     	; 0xbea2 <fputc+0x4a>
    be84:	e8 81       	ld	r30, Y
    be86:	f9 81       	ldd	r31, Y+1	; 0x01
    be88:	9f 01       	movw	r18, r30
    be8a:	2f 5f       	subi	r18, 0xFF	; 255
    be8c:	3f 4f       	sbci	r19, 0xFF	; 255
    be8e:	39 83       	std	Y+1, r19	; 0x01
    be90:	28 83       	st	Y, r18
    be92:	10 83       	st	Z, r17
    be94:	06 c0       	rjmp	.+12     	; 0xbea2 <fputc+0x4a>
    be96:	e8 85       	ldd	r30, Y+8	; 0x08
    be98:	f9 85       	ldd	r31, Y+9	; 0x09
    be9a:	81 2f       	mov	r24, r17
    be9c:	19 95       	eicall
    be9e:	89 2b       	or	r24, r25
    bea0:	29 f7       	brne	.-54     	; 0xbe6c <fputc+0x14>
    bea2:	2e 81       	ldd	r18, Y+6	; 0x06
    bea4:	3f 81       	ldd	r19, Y+7	; 0x07
    bea6:	2f 5f       	subi	r18, 0xFF	; 255
    bea8:	3f 4f       	sbci	r19, 0xFF	; 255
    beaa:	3f 83       	std	Y+7, r19	; 0x07
    beac:	2e 83       	std	Y+6, r18	; 0x06
    beae:	81 2f       	mov	r24, r17
    beb0:	90 2f       	mov	r25, r16
    beb2:	df 91       	pop	r29
    beb4:	cf 91       	pop	r28
    beb6:	1f 91       	pop	r17
    beb8:	0f 91       	pop	r16
    beba:	08 95       	ret

0000bebc <__ultoa_invert>:
    bebc:	fa 01       	movw	r30, r20
    bebe:	aa 27       	eor	r26, r26
    bec0:	28 30       	cpi	r18, 0x08	; 8
    bec2:	51 f1       	breq	.+84     	; 0xbf18 <__ultoa_invert+0x5c>
    bec4:	20 31       	cpi	r18, 0x10	; 16
    bec6:	81 f1       	breq	.+96     	; 0xbf28 <__ultoa_invert+0x6c>
    bec8:	e8 94       	clt
    beca:	6f 93       	push	r22
    becc:	6e 7f       	andi	r22, 0xFE	; 254
    bece:	6e 5f       	subi	r22, 0xFE	; 254
    bed0:	7f 4f       	sbci	r23, 0xFF	; 255
    bed2:	8f 4f       	sbci	r24, 0xFF	; 255
    bed4:	9f 4f       	sbci	r25, 0xFF	; 255
    bed6:	af 4f       	sbci	r26, 0xFF	; 255
    bed8:	b1 e0       	ldi	r27, 0x01	; 1
    beda:	3e d0       	rcall	.+124    	; 0xbf58 <__ultoa_invert+0x9c>
    bedc:	b4 e0       	ldi	r27, 0x04	; 4
    bede:	3c d0       	rcall	.+120    	; 0xbf58 <__ultoa_invert+0x9c>
    bee0:	67 0f       	add	r22, r23
    bee2:	78 1f       	adc	r23, r24
    bee4:	89 1f       	adc	r24, r25
    bee6:	9a 1f       	adc	r25, r26
    bee8:	a1 1d       	adc	r26, r1
    beea:	68 0f       	add	r22, r24
    beec:	79 1f       	adc	r23, r25
    beee:	8a 1f       	adc	r24, r26
    bef0:	91 1d       	adc	r25, r1
    bef2:	a1 1d       	adc	r26, r1
    bef4:	6a 0f       	add	r22, r26
    bef6:	71 1d       	adc	r23, r1
    bef8:	81 1d       	adc	r24, r1
    befa:	91 1d       	adc	r25, r1
    befc:	a1 1d       	adc	r26, r1
    befe:	20 d0       	rcall	.+64     	; 0xbf40 <__ultoa_invert+0x84>
    bf00:	09 f4       	brne	.+2      	; 0xbf04 <__ultoa_invert+0x48>
    bf02:	68 94       	set
    bf04:	3f 91       	pop	r19
    bf06:	2a e0       	ldi	r18, 0x0A	; 10
    bf08:	26 9f       	mul	r18, r22
    bf0a:	11 24       	eor	r1, r1
    bf0c:	30 19       	sub	r19, r0
    bf0e:	30 5d       	subi	r19, 0xD0	; 208
    bf10:	31 93       	st	Z+, r19
    bf12:	de f6       	brtc	.-74     	; 0xbeca <__ultoa_invert+0xe>
    bf14:	cf 01       	movw	r24, r30
    bf16:	08 95       	ret
    bf18:	46 2f       	mov	r20, r22
    bf1a:	47 70       	andi	r20, 0x07	; 7
    bf1c:	40 5d       	subi	r20, 0xD0	; 208
    bf1e:	41 93       	st	Z+, r20
    bf20:	b3 e0       	ldi	r27, 0x03	; 3
    bf22:	0f d0       	rcall	.+30     	; 0xbf42 <__ultoa_invert+0x86>
    bf24:	c9 f7       	brne	.-14     	; 0xbf18 <__ultoa_invert+0x5c>
    bf26:	f6 cf       	rjmp	.-20     	; 0xbf14 <__ultoa_invert+0x58>
    bf28:	46 2f       	mov	r20, r22
    bf2a:	4f 70       	andi	r20, 0x0F	; 15
    bf2c:	40 5d       	subi	r20, 0xD0	; 208
    bf2e:	4a 33       	cpi	r20, 0x3A	; 58
    bf30:	18 f0       	brcs	.+6      	; 0xbf38 <__ultoa_invert+0x7c>
    bf32:	49 5d       	subi	r20, 0xD9	; 217
    bf34:	31 fd       	sbrc	r19, 1
    bf36:	40 52       	subi	r20, 0x20	; 32
    bf38:	41 93       	st	Z+, r20
    bf3a:	02 d0       	rcall	.+4      	; 0xbf40 <__ultoa_invert+0x84>
    bf3c:	a9 f7       	brne	.-22     	; 0xbf28 <__ultoa_invert+0x6c>
    bf3e:	ea cf       	rjmp	.-44     	; 0xbf14 <__ultoa_invert+0x58>
    bf40:	b4 e0       	ldi	r27, 0x04	; 4
    bf42:	a6 95       	lsr	r26
    bf44:	97 95       	ror	r25
    bf46:	87 95       	ror	r24
    bf48:	77 95       	ror	r23
    bf4a:	67 95       	ror	r22
    bf4c:	ba 95       	dec	r27
    bf4e:	c9 f7       	brne	.-14     	; 0xbf42 <__ultoa_invert+0x86>
    bf50:	00 97       	sbiw	r24, 0x00	; 0
    bf52:	61 05       	cpc	r22, r1
    bf54:	71 05       	cpc	r23, r1
    bf56:	08 95       	ret
    bf58:	9b 01       	movw	r18, r22
    bf5a:	ac 01       	movw	r20, r24
    bf5c:	0a 2e       	mov	r0, r26
    bf5e:	06 94       	lsr	r0
    bf60:	57 95       	ror	r21
    bf62:	47 95       	ror	r20
    bf64:	37 95       	ror	r19
    bf66:	27 95       	ror	r18
    bf68:	ba 95       	dec	r27
    bf6a:	c9 f7       	brne	.-14     	; 0xbf5e <__ultoa_invert+0xa2>
    bf6c:	62 0f       	add	r22, r18
    bf6e:	73 1f       	adc	r23, r19
    bf70:	84 1f       	adc	r24, r20
    bf72:	95 1f       	adc	r25, r21
    bf74:	a0 1d       	adc	r26, r0
    bf76:	08 95       	ret

0000bf78 <__mulshisi3>:
    bf78:	b7 ff       	sbrs	r27, 7
    bf7a:	0c 94 b6 57 	jmp	0xaf6c	; 0xaf6c <__muluhisi3>

0000bf7e <__mulohisi3>:
    bf7e:	0e 94 b6 57 	call	0xaf6c	; 0xaf6c <__muluhisi3>
    bf82:	82 1b       	sub	r24, r18
    bf84:	93 0b       	sbc	r25, r19
    bf86:	08 95       	ret

0000bf88 <_exit>:
    bf88:	f8 94       	cli

0000bf8a <__stop_program>:
    bf8a:	ff cf       	rjmp	.-2      	; 0xbf8a <__stop_program>
